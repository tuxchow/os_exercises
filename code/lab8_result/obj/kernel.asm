
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 f0 14 00 	lgdtl  0x14f018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 f0 14 c0       	mov    $0xc014f000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 42 15 c0       	mov    $0xc0154204,%edx
c0100035:	b8 d0 fe 14 c0       	mov    $0xc014fed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 fe 14 c0 	movl   $0xc014fed0,(%esp)
c0100051:	e8 d0 56 01 00       	call   c0115726 <memset>

    cons_init();                // init the console
c0100056:	e8 7d 17 00 00       	call   c01017d8 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 c0 58 11 c0 	movl   $0xc01158c0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 dc 58 11 c0 	movl   $0xc01158dc,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 3b 57 00 00       	call   c01057bf <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 45 21 00 00       	call   c01021ce <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 97 22 00 00       	call   c0102325 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 75 86 00 00       	call   c0108708 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 70 e5 00 00       	call   c010e608 <sched_init>
    proc_init();                // init process table
c0100098:	e8 11 de 00 00       	call   c010deae <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 67 18 00 00       	call   c0101909 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 e3 6d 00 00       	call   c0106e8a <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 dc af 00 00       	call   c010b088 <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 dd 0e 00 00       	call   c0100f8e <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 86 20 00 00       	call   c010213c <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 01 e0 00 00       	call   c010e0bc <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 d9 0d 00 00       	call   c0100eb6 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e0 fe 14 c0       	mov    0xc014fee0,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 e1 58 11 c0 	movl   $0xc01158e1,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e0 fe 14 c0       	mov    0xc014fee0,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 ef 58 11 c0 	movl   $0xc01158ef,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e0 fe 14 c0       	mov    0xc014fee0,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 fd 58 11 c0 	movl   $0xc01158fd,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e0 fe 14 c0       	mov    0xc014fee0,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 0b 59 11 c0 	movl   $0xc011590b,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e0 fe 14 c0       	mov    0xc014fee0,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 19 59 11 c0 	movl   $0xc0115919,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e0 fe 14 c0       	mov    0xc014fee0,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e0 fe 14 c0       	mov    %eax,0xc014fee0
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 28 59 11 c0 	movl   $0xc0115928,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 48 59 11 c0 	movl   $0xc0115948,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 67 59 11 c0 	movl   $0xc0115967,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 00 ff 14 c0    	mov    %dl,-0x3feb0100(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 00 ff 14 c0       	add    $0xc014ff00,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 00 ff 14 c0       	mov    $0xc014ff00,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 e9 14 00 00       	call   c0101804 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 76 4a 01 00       	call   c0114dd6 <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 68 14 00 00       	call   c0101804 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 48 14 00 00       	call   c0101840 <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 b9 4f 01 00       	call   c01153d0 <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 cf 48 00 00       	call   c0104cf7 <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 be 53 01 00       	call   c0115808 <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 65 4f 01 00       	call   c01153d0 <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 57 4f 01 00       	call   c01153d0 <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 68 48 00 00       	call   c0104cf7 <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 51 53 01 00       	call   c0115808 <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 32 53 01 00       	call   c0115808 <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 6c 59 11 c0    	movl   $0xc011596c,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 6c 59 11 c0 	movl   $0xc011596c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 20 a3 11 c0 	movl   $0xc011a320,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 d8 fd 13 c0 	movl   $0xc013fdd8,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec d9 fd 13 c0 	movl   $0xc013fdd9,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 4f c7 14 c0 	movl   $0xc014c74f,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 73 89 00 00       	call   c0109067 <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 1c 89 00 00       	call   c0109067 <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 e4 88 00 00       	call   c0109067 <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 ac 4c 01 00       	call   c011559a <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 76 59 11 c0 	movl   $0xc0115976,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 8f 59 11 c0 	movl   $0xc011598f,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 af 58 11 	movl   $0xc01158af,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 a7 59 11 c0 	movl   $0xc01159a7,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 fe 14 	movl   $0xc014fed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 bf 59 11 c0 	movl   $0xc01159bf,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 42 15 	movl   $0xc0154204,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 d7 59 11 c0 	movl   $0xc01159d7,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 42 15 c0       	mov    $0xc0154204,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 f0 59 11 c0 	movl   $0xc01159f0,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 1a 5a 11 c0 	movl   $0xc0115a1a,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 36 5a 11 c0 	movl   $0xc0115a36,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bc2:	89 e8                	mov    %ebp,%eax
c0100bc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bcd:	e8 d9 ff ff ff       	call   c0100bab <read_eip>
c0100bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100bd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bdc:	e9 88 00 00 00       	jmp    c0100c69 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bef:	c7 04 24 48 5a 11 c0 	movl   $0xc0115a48,(%esp)
c0100bf6:	e8 6a f7 ff ff       	call   c0100365 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfe:	83 c0 08             	add    $0x8,%eax
c0100c01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100c04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c0b:	eb 25                	jmp    c0100c32 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c1a:	01 d0                	add    %edx,%eax
c0100c1c:	8b 00                	mov    (%eax),%eax
c0100c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c22:	c7 04 24 64 5a 11 c0 	movl   $0xc0115a64,(%esp)
c0100c29:	e8 37 f7 ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100c2e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c32:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c36:	7e d5                	jle    c0100c0d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100c38:	c7 04 24 6c 5a 11 c0 	movl   $0xc0115a6c,(%esp)
c0100c3f:	e8 21 f7 ff ff       	call   c0100365 <cprintf>
        print_debuginfo(eip - 1);
c0100c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c47:	83 e8 01             	sub    $0x1,%eax
c0100c4a:	89 04 24             	mov    %eax,(%esp)
c0100c4d:	e8 b6 fe ff ff       	call   c0100b08 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c55:	83 c0 04             	add    $0x4,%eax
c0100c58:	8b 00                	mov    (%eax),%eax
c0100c5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c60:	8b 00                	mov    (%eax),%eax
c0100c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c65:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c6d:	74 0a                	je     c0100c79 <print_stackframe+0xbd>
c0100c6f:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c73:	0f 8e 68 ff ff ff    	jle    c0100be1 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100c79:	c9                   	leave  
c0100c7a:	c3                   	ret    

c0100c7b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c7b:	55                   	push   %ebp
c0100c7c:	89 e5                	mov    %esp,%ebp
c0100c7e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c88:	eb 0c                	jmp    c0100c96 <parse+0x1b>
            *buf ++ = '\0';
c0100c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0100c90:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c93:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c99:	0f b6 00             	movzbl (%eax),%eax
c0100c9c:	84 c0                	test   %al,%al
c0100c9e:	74 1d                	je     c0100cbd <parse+0x42>
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	0f b6 00             	movzbl (%eax),%eax
c0100ca6:	0f be c0             	movsbl %al,%eax
c0100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cad:	c7 04 24 f0 5a 11 c0 	movl   $0xc0115af0,(%esp)
c0100cb4:	e8 ae 48 01 00       	call   c0115567 <strchr>
c0100cb9:	85 c0                	test   %eax,%eax
c0100cbb:	75 cd                	jne    c0100c8a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc0:	0f b6 00             	movzbl (%eax),%eax
c0100cc3:	84 c0                	test   %al,%al
c0100cc5:	75 02                	jne    c0100cc9 <parse+0x4e>
            break;
c0100cc7:	eb 67                	jmp    c0100d30 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cc9:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ccd:	75 14                	jne    c0100ce3 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ccf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cd6:	00 
c0100cd7:	c7 04 24 f5 5a 11 c0 	movl   $0xc0115af5,(%esp)
c0100cde:	e8 82 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	8d 50 01             	lea    0x1(%eax),%edx
c0100ce9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cf6:	01 c2                	add    %eax,%edx
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cfd:	eb 04                	jmp    c0100d03 <parse+0x88>
            buf ++;
c0100cff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d06:	0f b6 00             	movzbl (%eax),%eax
c0100d09:	84 c0                	test   %al,%al
c0100d0b:	74 1d                	je     c0100d2a <parse+0xaf>
c0100d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d10:	0f b6 00             	movzbl (%eax),%eax
c0100d13:	0f be c0             	movsbl %al,%eax
c0100d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d1a:	c7 04 24 f0 5a 11 c0 	movl   $0xc0115af0,(%esp)
c0100d21:	e8 41 48 01 00       	call   c0115567 <strchr>
c0100d26:	85 c0                	test   %eax,%eax
c0100d28:	74 d5                	je     c0100cff <parse+0x84>
            buf ++;
        }
    }
c0100d2a:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2b:	e9 66 ff ff ff       	jmp    c0100c96 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d33:	c9                   	leave  
c0100d34:	c3                   	ret    

c0100d35 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d35:	55                   	push   %ebp
c0100d36:	89 e5                	mov    %esp,%ebp
c0100d38:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d45:	89 04 24             	mov    %eax,(%esp)
c0100d48:	e8 2e ff ff ff       	call   c0100c7b <parse>
c0100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d54:	75 0a                	jne    c0100d60 <runcmd+0x2b>
        return 0;
c0100d56:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d5b:	e9 85 00 00 00       	jmp    c0100de5 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d67:	eb 5c                	jmp    c0100dc5 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d69:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6f:	89 d0                	mov    %edx,%eax
c0100d71:	01 c0                	add    %eax,%eax
c0100d73:	01 d0                	add    %edx,%eax
c0100d75:	c1 e0 02             	shl    $0x2,%eax
c0100d78:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100d7d:	8b 00                	mov    (%eax),%eax
c0100d7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d83:	89 04 24             	mov    %eax,(%esp)
c0100d86:	e8 3d 47 01 00       	call   c01154c8 <strcmp>
c0100d8b:	85 c0                	test   %eax,%eax
c0100d8d:	75 32                	jne    c0100dc1 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d92:	89 d0                	mov    %edx,%eax
c0100d94:	01 c0                	add    %eax,%eax
c0100d96:	01 d0                	add    %edx,%eax
c0100d98:	c1 e0 02             	shl    $0x2,%eax
c0100d9b:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100da0:	8b 40 08             	mov    0x8(%eax),%eax
c0100da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100da6:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100da9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100db0:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100db3:	83 c2 04             	add    $0x4,%edx
c0100db6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dba:	89 0c 24             	mov    %ecx,(%esp)
c0100dbd:	ff d0                	call   *%eax
c0100dbf:	eb 24                	jmp    c0100de5 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc8:	83 f8 02             	cmp    $0x2,%eax
c0100dcb:	76 9c                	jbe    c0100d69 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dd4:	c7 04 24 13 5b 11 c0 	movl   $0xc0115b13,(%esp)
c0100ddb:	e8 85 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de5:	c9                   	leave  
c0100de6:	c3                   	ret    

c0100de7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100de7:	55                   	push   %ebp
c0100de8:	89 e5                	mov    %esp,%ebp
c0100dea:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ded:	c7 04 24 2c 5b 11 c0 	movl   $0xc0115b2c,(%esp)
c0100df4:	e8 6c f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100df9:	c7 04 24 54 5b 11 c0 	movl   $0xc0115b54,(%esp)
c0100e00:	e8 60 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e09:	74 0b                	je     c0100e16 <kmonitor+0x2f>
        print_trapframe(tf);
c0100e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0e:	89 04 24             	mov    %eax,(%esp)
c0100e11:	e8 c4 16 00 00       	call   c01024da <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e16:	c7 04 24 79 5b 11 c0 	movl   $0xc0115b79,(%esp)
c0100e1d:	e8 32 f4 ff ff       	call   c0100254 <readline>
c0100e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e29:	74 18                	je     c0100e43 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f8 fe ff ff       	call   c0100d35 <runcmd>
c0100e3d:	85 c0                	test   %eax,%eax
c0100e3f:	79 02                	jns    c0100e43 <kmonitor+0x5c>
                break;
c0100e41:	eb 02                	jmp    c0100e45 <kmonitor+0x5e>
            }
        }
    }
c0100e43:	eb d1                	jmp    c0100e16 <kmonitor+0x2f>
}
c0100e45:	c9                   	leave  
c0100e46:	c3                   	ret    

c0100e47 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e47:	55                   	push   %ebp
c0100e48:	89 e5                	mov    %esp,%ebp
c0100e4a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e54:	eb 3f                	jmp    c0100e95 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100e67:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6d:	89 d0                	mov    %edx,%eax
c0100e6f:	01 c0                	add    %eax,%eax
c0100e71:	01 d0                	add    %edx,%eax
c0100e73:	c1 e0 02             	shl    $0x2,%eax
c0100e76:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100e7b:	8b 00                	mov    (%eax),%eax
c0100e7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e85:	c7 04 24 7d 5b 11 c0 	movl   $0xc0115b7d,(%esp)
c0100e8c:	e8 d4 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e98:	83 f8 02             	cmp    $0x2,%eax
c0100e9b:	76 b9                	jbe    c0100e56 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea2:	c9                   	leave  
c0100ea3:	c3                   	ret    

c0100ea4 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100eaa:	e8 c3 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb4:	c9                   	leave  
c0100eb5:	c3                   	ret    

c0100eb6 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eb6:	55                   	push   %ebp
c0100eb7:	89 e5                	mov    %esp,%ebp
c0100eb9:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ebc:	e8 fb fc ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ec6:	c9                   	leave  
c0100ec7:	c3                   	ret    

c0100ec8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ec8:	55                   	push   %ebp
c0100ec9:	89 e5                	mov    %esp,%ebp
c0100ecb:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ece:	a1 00 03 15 c0       	mov    0xc0150300,%eax
c0100ed3:	85 c0                	test   %eax,%eax
c0100ed5:	74 02                	je     c0100ed9 <__panic+0x11>
        goto panic_dead;
c0100ed7:	eb 48                	jmp    c0100f21 <__panic+0x59>
    }
    is_panic = 1;
c0100ed9:	c7 05 00 03 15 c0 01 	movl   $0x1,0xc0150300
c0100ee0:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ee3:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef7:	c7 04 24 86 5b 11 c0 	movl   $0xc0115b86,(%esp)
c0100efe:	e8 62 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f0d:	89 04 24             	mov    %eax,(%esp)
c0100f10:	e8 15 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f15:	c7 04 24 a2 5b 11 c0 	movl   $0xc0115ba2,(%esp)
c0100f1c:	e8 44 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f21:	e8 1c 12 00 00       	call   c0102142 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f2d:	e8 b5 fe ff ff       	call   c0100de7 <kmonitor>
    }
c0100f32:	eb f2                	jmp    c0100f26 <__panic+0x5e>

c0100f34 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f34:	55                   	push   %ebp
c0100f35:	89 e5                	mov    %esp,%ebp
c0100f37:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f3a:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4e:	c7 04 24 a4 5b 11 c0 	movl   $0xc0115ba4,(%esp)
c0100f55:	e8 0b f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f61:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f64:	89 04 24             	mov    %eax,(%esp)
c0100f67:	e8 be f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f6c:	c7 04 24 a2 5b 11 c0 	movl   $0xc0115ba2,(%esp)
c0100f73:	e8 ed f3 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f78:	c9                   	leave  
c0100f79:	c3                   	ret    

c0100f7a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f7d:	a1 00 03 15 c0       	mov    0xc0150300,%eax
}
c0100f82:	5d                   	pop    %ebp
c0100f83:	c3                   	ret    

c0100f84 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f84:	55                   	push   %ebp
c0100f85:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f87:	a1 10 40 15 c0       	mov    0xc0154010,%eax
}
c0100f8c:	5d                   	pop    %ebp
c0100f8d:	c3                   	ret    

c0100f8e <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f8e:	55                   	push   %ebp
c0100f8f:	89 e5                	mov    %esp,%ebp
c0100f91:	83 ec 28             	sub    $0x28,%esp
c0100f94:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f9a:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f9e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fa2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fa6:	ee                   	out    %al,(%dx)
c0100fa7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fad:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fb1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fb5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fb9:	ee                   	out    %al,(%dx)
c0100fba:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fc0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fc4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fc8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fcc:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fcd:	c7 05 10 40 15 c0 00 	movl   $0x0,0xc0154010
c0100fd4:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fd7:	c7 04 24 c2 5b 11 c0 	movl   $0xc0115bc2,(%esp)
c0100fde:	e8 82 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fe3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fea:	e8 b1 11 00 00       	call   c01021a0 <pic_enable>
}
c0100fef:	c9                   	leave  
c0100ff0:	c3                   	ret    

c0100ff1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ff1:	55                   	push   %ebp
c0100ff2:	89 e5                	mov    %esp,%ebp
c0100ff4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ff7:	9c                   	pushf  
c0100ff8:	58                   	pop    %eax
c0100ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fff:	25 00 02 00 00       	and    $0x200,%eax
c0101004:	85 c0                	test   %eax,%eax
c0101006:	74 0c                	je     c0101014 <__intr_save+0x23>
        intr_disable();
c0101008:	e8 35 11 00 00       	call   c0102142 <intr_disable>
        return 1;
c010100d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101012:	eb 05                	jmp    c0101019 <__intr_save+0x28>
    }
    return 0;
c0101014:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101019:	c9                   	leave  
c010101a:	c3                   	ret    

c010101b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010101b:	55                   	push   %ebp
c010101c:	89 e5                	mov    %esp,%ebp
c010101e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101025:	74 05                	je     c010102c <__intr_restore+0x11>
        intr_enable();
c0101027:	e8 10 11 00 00       	call   c010213c <intr_enable>
    }
}
c010102c:	c9                   	leave  
c010102d:	c3                   	ret    

c010102e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010102e:	55                   	push   %ebp
c010102f:	89 e5                	mov    %esp,%ebp
c0101031:	83 ec 10             	sub    $0x10,%esp
c0101034:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010103e:	89 c2                	mov    %eax,%edx
c0101040:	ec                   	in     (%dx),%al
c0101041:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101044:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010104a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010104e:	89 c2                	mov    %eax,%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101054:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010105a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010105e:	89 c2                	mov    %eax,%edx
c0101060:	ec                   	in     (%dx),%al
c0101061:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101064:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010106a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010106e:	89 c2                	mov    %eax,%edx
c0101070:	ec                   	in     (%dx),%al
c0101071:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101074:	c9                   	leave  
c0101075:	c3                   	ret    

c0101076 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101076:	55                   	push   %ebp
c0101077:	89 e5                	mov    %esp,%ebp
c0101079:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010107c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101083:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101086:	0f b7 00             	movzwl (%eax),%eax
c0101089:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010108d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101090:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101098:	0f b7 00             	movzwl (%eax),%eax
c010109b:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010109f:	74 12                	je     c01010b3 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010a1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010a8:	66 c7 05 26 03 15 c0 	movw   $0x3b4,0xc0150326
c01010af:	b4 03 
c01010b1:	eb 13                	jmp    c01010c6 <cga_init+0x50>
    } else {
        *cp = was;
c01010b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010ba:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010bd:	66 c7 05 26 03 15 c0 	movw   $0x3d4,0xc0150326
c01010c4:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010c6:	0f b7 05 26 03 15 c0 	movzwl 0xc0150326,%eax
c01010cd:	0f b7 c0             	movzwl %ax,%eax
c01010d0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010d4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010e1:	0f b7 05 26 03 15 c0 	movzwl 0xc0150326,%eax
c01010e8:	83 c0 01             	add    $0x1,%eax
c01010eb:	0f b7 c0             	movzwl %ax,%eax
c01010ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f2:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010f6:	89 c2                	mov    %eax,%edx
c01010f8:	ec                   	in     (%dx),%al
c01010f9:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010fc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101100:	0f b6 c0             	movzbl %al,%eax
c0101103:	c1 e0 08             	shl    $0x8,%eax
c0101106:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101109:	0f b7 05 26 03 15 c0 	movzwl 0xc0150326,%eax
c0101110:	0f b7 c0             	movzwl %ax,%eax
c0101113:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101117:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010111b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010111f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101123:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101124:	0f b7 05 26 03 15 c0 	movzwl 0xc0150326,%eax
c010112b:	83 c0 01             	add    $0x1,%eax
c010112e:	0f b7 c0             	movzwl %ax,%eax
c0101131:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101135:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101139:	89 c2                	mov    %eax,%edx
c010113b:	ec                   	in     (%dx),%al
c010113c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010113f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101143:	0f b6 c0             	movzbl %al,%eax
c0101146:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101149:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010114c:	a3 20 03 15 c0       	mov    %eax,0xc0150320
    crt_pos = pos;
c0101151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101154:	66 a3 24 03 15 c0    	mov    %ax,0xc0150324
}
c010115a:	c9                   	leave  
c010115b:	c3                   	ret    

c010115c <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010115c:	55                   	push   %ebp
c010115d:	89 e5                	mov    %esp,%ebp
c010115f:	83 ec 48             	sub    $0x48,%esp
c0101162:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101168:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010116c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101170:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101174:	ee                   	out    %al,(%dx)
c0101175:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010117b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010117f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101183:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101187:	ee                   	out    %al,(%dx)
c0101188:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010118e:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101192:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101196:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010119a:	ee                   	out    %al,(%dx)
c010119b:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011a1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011a5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011a9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011ad:	ee                   	out    %al,(%dx)
c01011ae:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011b4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011c0:	ee                   	out    %al,(%dx)
c01011c1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011c7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011cb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011cf:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011d3:	ee                   	out    %al,(%dx)
c01011d4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011da:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011de:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011e2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011e6:	ee                   	out    %al,(%dx)
c01011e7:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011ed:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011f1:	89 c2                	mov    %eax,%edx
c01011f3:	ec                   	in     (%dx),%al
c01011f4:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011fb:	3c ff                	cmp    $0xff,%al
c01011fd:	0f 95 c0             	setne  %al
c0101200:	0f b6 c0             	movzbl %al,%eax
c0101203:	a3 28 03 15 c0       	mov    %eax,0xc0150328
c0101208:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010120e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101212:	89 c2                	mov    %eax,%edx
c0101214:	ec                   	in     (%dx),%al
c0101215:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101218:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010121e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101222:	89 c2                	mov    %eax,%edx
c0101224:	ec                   	in     (%dx),%al
c0101225:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101228:	a1 28 03 15 c0       	mov    0xc0150328,%eax
c010122d:	85 c0                	test   %eax,%eax
c010122f:	74 0c                	je     c010123d <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101231:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101238:	e8 63 0f 00 00       	call   c01021a0 <pic_enable>
    }
}
c010123d:	c9                   	leave  
c010123e:	c3                   	ret    

c010123f <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010123f:	55                   	push   %ebp
c0101240:	89 e5                	mov    %esp,%ebp
c0101242:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010124c:	eb 09                	jmp    c0101257 <lpt_putc_sub+0x18>
        delay();
c010124e:	e8 db fd ff ff       	call   c010102e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101253:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101257:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010125d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101261:	89 c2                	mov    %eax,%edx
c0101263:	ec                   	in     (%dx),%al
c0101264:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101267:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010126b:	84 c0                	test   %al,%al
c010126d:	78 09                	js     c0101278 <lpt_putc_sub+0x39>
c010126f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101276:	7e d6                	jle    c010124e <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101278:	8b 45 08             	mov    0x8(%ebp),%eax
c010127b:	0f b6 c0             	movzbl %al,%eax
c010127e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101284:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101287:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010128b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010128f:	ee                   	out    %al,(%dx)
c0101290:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101296:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010129a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010129e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012a2:	ee                   	out    %al,(%dx)
c01012a3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012a9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012ad:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012b1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012b5:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012b6:	c9                   	leave  
c01012b7:	c3                   	ret    

c01012b8 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012b8:	55                   	push   %ebp
c01012b9:	89 e5                	mov    %esp,%ebp
c01012bb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012be:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012c2:	74 0d                	je     c01012d1 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c7:	89 04 24             	mov    %eax,(%esp)
c01012ca:	e8 70 ff ff ff       	call   c010123f <lpt_putc_sub>
c01012cf:	eb 24                	jmp    c01012f5 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012d8:	e8 62 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012dd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012e4:	e8 56 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012e9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012f0:	e8 4a ff ff ff       	call   c010123f <lpt_putc_sub>
    }
}
c01012f5:	c9                   	leave  
c01012f6:	c3                   	ret    

c01012f7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012f7:	55                   	push   %ebp
c01012f8:	89 e5                	mov    %esp,%ebp
c01012fa:	53                   	push   %ebx
c01012fb:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101301:	b0 00                	mov    $0x0,%al
c0101303:	85 c0                	test   %eax,%eax
c0101305:	75 07                	jne    c010130e <cga_putc+0x17>
        c |= 0x0700;
c0101307:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101311:	0f b6 c0             	movzbl %al,%eax
c0101314:	83 f8 0a             	cmp    $0xa,%eax
c0101317:	74 4c                	je     c0101365 <cga_putc+0x6e>
c0101319:	83 f8 0d             	cmp    $0xd,%eax
c010131c:	74 57                	je     c0101375 <cga_putc+0x7e>
c010131e:	83 f8 08             	cmp    $0x8,%eax
c0101321:	0f 85 88 00 00 00    	jne    c01013af <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101327:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c010132e:	66 85 c0             	test   %ax,%ax
c0101331:	74 30                	je     c0101363 <cga_putc+0x6c>
            crt_pos --;
c0101333:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c010133a:	83 e8 01             	sub    $0x1,%eax
c010133d:	66 a3 24 03 15 c0    	mov    %ax,0xc0150324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101343:	a1 20 03 15 c0       	mov    0xc0150320,%eax
c0101348:	0f b7 15 24 03 15 c0 	movzwl 0xc0150324,%edx
c010134f:	0f b7 d2             	movzwl %dx,%edx
c0101352:	01 d2                	add    %edx,%edx
c0101354:	01 c2                	add    %eax,%edx
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	83 c8 20             	or     $0x20,%eax
c010135e:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101361:	eb 72                	jmp    c01013d5 <cga_putc+0xde>
c0101363:	eb 70                	jmp    c01013d5 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101365:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c010136c:	83 c0 50             	add    $0x50,%eax
c010136f:	66 a3 24 03 15 c0    	mov    %ax,0xc0150324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101375:	0f b7 1d 24 03 15 c0 	movzwl 0xc0150324,%ebx
c010137c:	0f b7 0d 24 03 15 c0 	movzwl 0xc0150324,%ecx
c0101383:	0f b7 c1             	movzwl %cx,%eax
c0101386:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010138c:	c1 e8 10             	shr    $0x10,%eax
c010138f:	89 c2                	mov    %eax,%edx
c0101391:	66 c1 ea 06          	shr    $0x6,%dx
c0101395:	89 d0                	mov    %edx,%eax
c0101397:	c1 e0 02             	shl    $0x2,%eax
c010139a:	01 d0                	add    %edx,%eax
c010139c:	c1 e0 04             	shl    $0x4,%eax
c010139f:	29 c1                	sub    %eax,%ecx
c01013a1:	89 ca                	mov    %ecx,%edx
c01013a3:	89 d8                	mov    %ebx,%eax
c01013a5:	29 d0                	sub    %edx,%eax
c01013a7:	66 a3 24 03 15 c0    	mov    %ax,0xc0150324
        break;
c01013ad:	eb 26                	jmp    c01013d5 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013af:	8b 0d 20 03 15 c0    	mov    0xc0150320,%ecx
c01013b5:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c01013bc:	8d 50 01             	lea    0x1(%eax),%edx
c01013bf:	66 89 15 24 03 15 c0 	mov    %dx,0xc0150324
c01013c6:	0f b7 c0             	movzwl %ax,%eax
c01013c9:	01 c0                	add    %eax,%eax
c01013cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01013d1:	66 89 02             	mov    %ax,(%edx)
        break;
c01013d4:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013d5:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c01013dc:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013e0:	76 5b                	jbe    c010143d <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013e2:	a1 20 03 15 c0       	mov    0xc0150320,%eax
c01013e7:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013ed:	a1 20 03 15 c0       	mov    0xc0150320,%eax
c01013f2:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013f9:	00 
c01013fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013fe:	89 04 24             	mov    %eax,(%esp)
c0101401:	e8 5f 43 01 00       	call   c0115765 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101406:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010140d:	eb 15                	jmp    c0101424 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010140f:	a1 20 03 15 c0       	mov    0xc0150320,%eax
c0101414:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101417:	01 d2                	add    %edx,%edx
c0101419:	01 d0                	add    %edx,%eax
c010141b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101420:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101424:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010142b:	7e e2                	jle    c010140f <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010142d:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c0101434:	83 e8 50             	sub    $0x50,%eax
c0101437:	66 a3 24 03 15 c0    	mov    %ax,0xc0150324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010143d:	0f b7 05 26 03 15 c0 	movzwl 0xc0150326,%eax
c0101444:	0f b7 c0             	movzwl %ax,%eax
c0101447:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010144b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010144f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101453:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101457:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101458:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c010145f:	66 c1 e8 08          	shr    $0x8,%ax
c0101463:	0f b6 c0             	movzbl %al,%eax
c0101466:	0f b7 15 26 03 15 c0 	movzwl 0xc0150326,%edx
c010146d:	83 c2 01             	add    $0x1,%edx
c0101470:	0f b7 d2             	movzwl %dx,%edx
c0101473:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101477:	88 45 ed             	mov    %al,-0x13(%ebp)
c010147a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010147e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101482:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101483:	0f b7 05 26 03 15 c0 	movzwl 0xc0150326,%eax
c010148a:	0f b7 c0             	movzwl %ax,%eax
c010148d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101491:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101495:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101499:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010149d:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010149e:	0f b7 05 24 03 15 c0 	movzwl 0xc0150324,%eax
c01014a5:	0f b6 c0             	movzbl %al,%eax
c01014a8:	0f b7 15 26 03 15 c0 	movzwl 0xc0150326,%edx
c01014af:	83 c2 01             	add    $0x1,%edx
c01014b2:	0f b7 d2             	movzwl %dx,%edx
c01014b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014b9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014bc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
}
c01014c5:	83 c4 34             	add    $0x34,%esp
c01014c8:	5b                   	pop    %ebx
c01014c9:	5d                   	pop    %ebp
c01014ca:	c3                   	ret    

c01014cb <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014cb:	55                   	push   %ebp
c01014cc:	89 e5                	mov    %esp,%ebp
c01014ce:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014d8:	eb 09                	jmp    c01014e3 <serial_putc_sub+0x18>
        delay();
c01014da:	e8 4f fb ff ff       	call   c010102e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 20             	and    $0x20,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 09                	jne    c010150a <serial_putc_sub+0x3f>
c0101501:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101508:	7e d0                	jle    c01014da <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010150a:	8b 45 08             	mov    0x8(%ebp),%eax
c010150d:	0f b6 c0             	movzbl %al,%eax
c0101510:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101516:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101519:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010151d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101521:	ee                   	out    %al,(%dx)
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010152a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010152e:	74 0d                	je     c010153d <serial_putc+0x19>
        serial_putc_sub(c);
c0101530:	8b 45 08             	mov    0x8(%ebp),%eax
c0101533:	89 04 24             	mov    %eax,(%esp)
c0101536:	e8 90 ff ff ff       	call   c01014cb <serial_putc_sub>
c010153b:	eb 24                	jmp    c0101561 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010153d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101544:	e8 82 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub(' ');
c0101549:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101550:	e8 76 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub('\b');
c0101555:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010155c:	e8 6a ff ff ff       	call   c01014cb <serial_putc_sub>
    }
}
c0101561:	c9                   	leave  
c0101562:	c3                   	ret    

c0101563 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101563:	55                   	push   %ebp
c0101564:	89 e5                	mov    %esp,%ebp
c0101566:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101569:	eb 33                	jmp    c010159e <cons_intr+0x3b>
        if (c != 0) {
c010156b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010156f:	74 2d                	je     c010159e <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101571:	a1 44 05 15 c0       	mov    0xc0150544,%eax
c0101576:	8d 50 01             	lea    0x1(%eax),%edx
c0101579:	89 15 44 05 15 c0    	mov    %edx,0xc0150544
c010157f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101582:	88 90 40 03 15 c0    	mov    %dl,-0x3feafcc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101588:	a1 44 05 15 c0       	mov    0xc0150544,%eax
c010158d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101592:	75 0a                	jne    c010159e <cons_intr+0x3b>
                cons.wpos = 0;
c0101594:	c7 05 44 05 15 c0 00 	movl   $0x0,0xc0150544
c010159b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010159e:	8b 45 08             	mov    0x8(%ebp),%eax
c01015a1:	ff d0                	call   *%eax
c01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015aa:	75 bf                	jne    c010156b <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015ac:	c9                   	leave  
c01015ad:	c3                   	ret    

c01015ae <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015ae:	55                   	push   %ebp
c01015af:	89 e5                	mov    %esp,%ebp
c01015b1:	83 ec 10             	sub    $0x10,%esp
c01015b4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015be:	89 c2                	mov    %eax,%edx
c01015c0:	ec                   	in     (%dx),%al
c01015c1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 07                	jne    c01015d9 <serial_proc_data+0x2b>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	eb 2a                	jmp    c0101603 <serial_proc_data+0x55>
c01015d9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015df:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015e3:	89 c2                	mov    %eax,%edx
c01015e5:	ec                   	in     (%dx),%al
c01015e6:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015e9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015ed:	0f b6 c0             	movzbl %al,%eax
c01015f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015f3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x52>
        c = '\b';
c01015f9:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101600:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101603:	c9                   	leave  
c0101604:	c3                   	ret    

c0101605 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101605:	55                   	push   %ebp
c0101606:	89 e5                	mov    %esp,%ebp
c0101608:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010160b:	a1 28 03 15 c0       	mov    0xc0150328,%eax
c0101610:	85 c0                	test   %eax,%eax
c0101612:	74 0c                	je     c0101620 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101614:	c7 04 24 ae 15 10 c0 	movl   $0xc01015ae,(%esp)
c010161b:	e8 43 ff ff ff       	call   c0101563 <cons_intr>
    }
}
c0101620:	c9                   	leave  
c0101621:	c3                   	ret    

c0101622 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101622:	55                   	push   %ebp
c0101623:	89 e5                	mov    %esp,%ebp
c0101625:	83 ec 38             	sub    $0x38,%esp
c0101628:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010162e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101632:	89 c2                	mov    %eax,%edx
c0101634:	ec                   	in     (%dx),%al
c0101635:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101638:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010163c:	0f b6 c0             	movzbl %al,%eax
c010163f:	83 e0 01             	and    $0x1,%eax
c0101642:	85 c0                	test   %eax,%eax
c0101644:	75 0a                	jne    c0101650 <kbd_proc_data+0x2e>
        return -1;
c0101646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164b:	e9 59 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
c0101650:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101656:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010165a:	89 c2                	mov    %eax,%edx
c010165c:	ec                   	in     (%dx),%al
c010165d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101660:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101664:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101667:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010166b:	75 17                	jne    c0101684 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010166d:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c0101672:	83 c8 40             	or     $0x40,%eax
c0101675:	a3 48 05 15 c0       	mov    %eax,0xc0150548
        return 0;
c010167a:	b8 00 00 00 00       	mov    $0x0,%eax
c010167f:	e9 25 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	84 c0                	test   %al,%al
c010168a:	79 47                	jns    c01016d3 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010168c:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c0101691:	83 e0 40             	and    $0x40,%eax
c0101694:	85 c0                	test   %eax,%eax
c0101696:	75 09                	jne    c01016a1 <kbd_proc_data+0x7f>
c0101698:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010169c:	83 e0 7f             	and    $0x7f,%eax
c010169f:	eb 04                	jmp    c01016a5 <kbd_proc_data+0x83>
c01016a1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016a8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ac:	0f b6 80 60 f0 14 c0 	movzbl -0x3feb0fa0(%eax),%eax
c01016b3:	83 c8 40             	or     $0x40,%eax
c01016b6:	0f b6 c0             	movzbl %al,%eax
c01016b9:	f7 d0                	not    %eax
c01016bb:	89 c2                	mov    %eax,%edx
c01016bd:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c01016c2:	21 d0                	and    %edx,%eax
c01016c4:	a3 48 05 15 c0       	mov    %eax,0xc0150548
        return 0;
c01016c9:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ce:	e9 d6 00 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016d3:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c01016d8:	83 e0 40             	and    $0x40,%eax
c01016db:	85 c0                	test   %eax,%eax
c01016dd:	74 11                	je     c01016f0 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016df:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016e3:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c01016e8:	83 e0 bf             	and    $0xffffffbf,%eax
c01016eb:	a3 48 05 15 c0       	mov    %eax,0xc0150548
    }

    shift |= shiftcode[data];
c01016f0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016f4:	0f b6 80 60 f0 14 c0 	movzbl -0x3feb0fa0(%eax),%eax
c01016fb:	0f b6 d0             	movzbl %al,%edx
c01016fe:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c0101703:	09 d0                	or     %edx,%eax
c0101705:	a3 48 05 15 c0       	mov    %eax,0xc0150548
    shift ^= togglecode[data];
c010170a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010170e:	0f b6 80 60 f1 14 c0 	movzbl -0x3feb0ea0(%eax),%eax
c0101715:	0f b6 d0             	movzbl %al,%edx
c0101718:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c010171d:	31 d0                	xor    %edx,%eax
c010171f:	a3 48 05 15 c0       	mov    %eax,0xc0150548

    c = charcode[shift & (CTL | SHIFT)][data];
c0101724:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c0101729:	83 e0 03             	and    $0x3,%eax
c010172c:	8b 14 85 60 f5 14 c0 	mov    -0x3feb0aa0(,%eax,4),%edx
c0101733:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101737:	01 d0                	add    %edx,%eax
c0101739:	0f b6 00             	movzbl (%eax),%eax
c010173c:	0f b6 c0             	movzbl %al,%eax
c010173f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101742:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c0101747:	83 e0 08             	and    $0x8,%eax
c010174a:	85 c0                	test   %eax,%eax
c010174c:	74 22                	je     c0101770 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010174e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101752:	7e 0c                	jle    c0101760 <kbd_proc_data+0x13e>
c0101754:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101758:	7f 06                	jg     c0101760 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010175a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010175e:	eb 10                	jmp    c0101770 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101760:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101764:	7e 0a                	jle    c0101770 <kbd_proc_data+0x14e>
c0101766:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010176a:	7f 04                	jg     c0101770 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010176c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101770:	a1 48 05 15 c0       	mov    0xc0150548,%eax
c0101775:	f7 d0                	not    %eax
c0101777:	83 e0 06             	and    $0x6,%eax
c010177a:	85 c0                	test   %eax,%eax
c010177c:	75 28                	jne    c01017a6 <kbd_proc_data+0x184>
c010177e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101785:	75 1f                	jne    c01017a6 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101787:	c7 04 24 dd 5b 11 c0 	movl   $0xc0115bdd,(%esp)
c010178e:	e8 d2 eb ff ff       	call   c0100365 <cprintf>
c0101793:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101799:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010179d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017a1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017a5:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017b1:	c7 04 24 22 16 10 c0 	movl   $0xc0101622,(%esp)
c01017b8:	e8 a6 fd ff ff       	call   c0101563 <cons_intr>
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <kbd_init>:

static void
kbd_init(void) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017c5:	e8 e1 ff ff ff       	call   c01017ab <kbd_intr>
    pic_enable(IRQ_KBD);
c01017ca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017d1:	e8 ca 09 00 00       	call   c01021a0 <pic_enable>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017de:	e8 93 f8 ff ff       	call   c0101076 <cga_init>
    serial_init();
c01017e3:	e8 74 f9 ff ff       	call   c010115c <serial_init>
    kbd_init();
c01017e8:	e8 d2 ff ff ff       	call   c01017bf <kbd_init>
    if (!serial_exists) {
c01017ed:	a1 28 03 15 c0       	mov    0xc0150328,%eax
c01017f2:	85 c0                	test   %eax,%eax
c01017f4:	75 0c                	jne    c0101802 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017f6:	c7 04 24 e9 5b 11 c0 	movl   $0xc0115be9,(%esp)
c01017fd:	e8 63 eb ff ff       	call   c0100365 <cprintf>
    }
}
c0101802:	c9                   	leave  
c0101803:	c3                   	ret    

c0101804 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101804:	55                   	push   %ebp
c0101805:	89 e5                	mov    %esp,%ebp
c0101807:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010180a:	e8 e2 f7 ff ff       	call   c0100ff1 <__intr_save>
c010180f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101812:	8b 45 08             	mov    0x8(%ebp),%eax
c0101815:	89 04 24             	mov    %eax,(%esp)
c0101818:	e8 9b fa ff ff       	call   c01012b8 <lpt_putc>
        cga_putc(c);
c010181d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101820:	89 04 24             	mov    %eax,(%esp)
c0101823:	e8 cf fa ff ff       	call   c01012f7 <cga_putc>
        serial_putc(c);
c0101828:	8b 45 08             	mov    0x8(%ebp),%eax
c010182b:	89 04 24             	mov    %eax,(%esp)
c010182e:	e8 f1 fc ff ff       	call   c0101524 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101836:	89 04 24             	mov    %eax,(%esp)
c0101839:	e8 dd f7 ff ff       	call   c010101b <__intr_restore>
}
c010183e:	c9                   	leave  
c010183f:	c3                   	ret    

c0101840 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101840:	55                   	push   %ebp
c0101841:	89 e5                	mov    %esp,%ebp
c0101843:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010184d:	e8 9f f7 ff ff       	call   c0100ff1 <__intr_save>
c0101852:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101855:	e8 ab fd ff ff       	call   c0101605 <serial_intr>
        kbd_intr();
c010185a:	e8 4c ff ff ff       	call   c01017ab <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010185f:	8b 15 40 05 15 c0    	mov    0xc0150540,%edx
c0101865:	a1 44 05 15 c0       	mov    0xc0150544,%eax
c010186a:	39 c2                	cmp    %eax,%edx
c010186c:	74 31                	je     c010189f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010186e:	a1 40 05 15 c0       	mov    0xc0150540,%eax
c0101873:	8d 50 01             	lea    0x1(%eax),%edx
c0101876:	89 15 40 05 15 c0    	mov    %edx,0xc0150540
c010187c:	0f b6 80 40 03 15 c0 	movzbl -0x3feafcc0(%eax),%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101889:	a1 40 05 15 c0       	mov    0xc0150540,%eax
c010188e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101893:	75 0a                	jne    c010189f <cons_getc+0x5f>
                cons.rpos = 0;
c0101895:	c7 05 40 05 15 c0 00 	movl   $0x0,0xc0150540
c010189c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010189f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018a2:	89 04 24             	mov    %eax,(%esp)
c01018a5:	e8 71 f7 ff ff       	call   c010101b <__intr_restore>
    return c;
c01018aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018ad:	c9                   	leave  
c01018ae:	c3                   	ret    

c01018af <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	83 ec 14             	sub    $0x14,%esp
c01018b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018bc:	90                   	nop
c01018bd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018c1:	83 c0 07             	add    $0x7,%eax
c01018c4:	0f b7 c0             	movzwl %ax,%eax
c01018c7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018cf:	89 c2                	mov    %eax,%edx
c01018d1:	ec                   	in     (%dx),%al
c01018d2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018d5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018d9:	0f b6 c0             	movzbl %al,%eax
c01018dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e2:	25 80 00 00 00       	and    $0x80,%eax
c01018e7:	85 c0                	test   %eax,%eax
c01018e9:	75 d2                	jne    c01018bd <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018ef:	74 11                	je     c0101902 <ide_wait_ready+0x53>
c01018f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f4:	83 e0 21             	and    $0x21,%eax
c01018f7:	85 c0                	test   %eax,%eax
c01018f9:	74 07                	je     c0101902 <ide_wait_ready+0x53>
        return -1;
c01018fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101900:	eb 05                	jmp    c0101907 <ide_wait_ready+0x58>
    }
    return 0;
c0101902:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101907:	c9                   	leave  
c0101908:	c3                   	ret    

c0101909 <ide_init>:

void
ide_init(void) {
c0101909:	55                   	push   %ebp
c010190a:	89 e5                	mov    %esp,%ebp
c010190c:	57                   	push   %edi
c010190d:	53                   	push   %ebx
c010190e:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101914:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010191a:	e9 d6 02 00 00       	jmp    c0101bf5 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010191f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101923:	c1 e0 03             	shl    $0x3,%eax
c0101926:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010192d:	29 c2                	sub    %eax,%edx
c010192f:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101935:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101938:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010193c:	66 d1 e8             	shr    %ax
c010193f:	0f b7 c0             	movzwl %ax,%eax
c0101942:	0f b7 04 85 08 5c 11 	movzwl -0x3feea3f8(,%eax,4),%eax
c0101949:	c0 
c010194a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010194e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101952:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101959:	00 
c010195a:	89 04 24             	mov    %eax,(%esp)
c010195d:	e8 4d ff ff ff       	call   c01018af <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101962:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101966:	83 e0 01             	and    $0x1,%eax
c0101969:	c1 e0 04             	shl    $0x4,%eax
c010196c:	83 c8 e0             	or     $0xffffffe0,%eax
c010196f:	0f b6 c0             	movzbl %al,%eax
c0101972:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101976:	83 c2 06             	add    $0x6,%edx
c0101979:	0f b7 d2             	movzwl %dx,%edx
c010197c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101980:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101983:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101987:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010198b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101997:	00 
c0101998:	89 04 24             	mov    %eax,(%esp)
c010199b:	e8 0f ff ff ff       	call   c01018af <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019a4:	83 c0 07             	add    $0x7,%eax
c01019a7:	0f b7 c0             	movzwl %ax,%eax
c01019aa:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019ae:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019b2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019b6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019c6:	00 
c01019c7:	89 04 24             	mov    %eax,(%esp)
c01019ca:	e8 e0 fe ff ff       	call   c01018af <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019d3:	83 c0 07             	add    $0x7,%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019dd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019e1:	89 c2                	mov    %eax,%edx
c01019e3:	ec                   	in     (%dx),%al
c01019e4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019eb:	84 c0                	test   %al,%al
c01019ed:	0f 84 f7 01 00 00    	je     c0101bea <ide_init+0x2e1>
c01019f3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019f7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019fe:	00 
c01019ff:	89 04 24             	mov    %eax,(%esp)
c0101a02:	e8 a8 fe ff ff       	call   c01018af <ide_wait_ready>
c0101a07:	85 c0                	test   %eax,%eax
c0101a09:	0f 85 db 01 00 00    	jne    c0101bea <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a0f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a13:	c1 e0 03             	shl    $0x3,%eax
c0101a16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1d:	29 c2                	sub    %eax,%edx
c0101a1f:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101a25:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a28:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a2f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a35:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a38:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a42:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a48:	89 cb                	mov    %ecx,%ebx
c0101a4a:	89 df                	mov    %ebx,%edi
c0101a4c:	89 c1                	mov    %eax,%ecx
c0101a4e:	fc                   	cld    
c0101a4f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a51:	89 c8                	mov    %ecx,%eax
c0101a53:	89 fb                	mov    %edi,%ebx
c0101a55:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a58:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a5b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a67:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a73:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a78:	85 c0                	test   %eax,%eax
c0101a7a:	74 0e                	je     c0101a8a <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a7f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a88:	eb 09                	jmp    c0101a93 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8d:	8b 40 78             	mov    0x78(%eax),%eax
c0101a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a93:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a97:	c1 e0 03             	shl    $0x3,%eax
c0101a9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa1:	29 c2                	sub    %eax,%edx
c0101aa3:	81 c2 60 05 15 c0    	add    $0xc0150560,%edx
c0101aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101aac:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101aaf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab3:	c1 e0 03             	shl    $0x3,%eax
c0101ab6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abd:	29 c2                	sub    %eax,%edx
c0101abf:	81 c2 60 05 15 c0    	add    $0xc0150560,%edx
c0101ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ac8:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ace:	83 c0 62             	add    $0x62,%eax
c0101ad1:	0f b7 00             	movzwl (%eax),%eax
c0101ad4:	0f b7 c0             	movzwl %ax,%eax
c0101ad7:	25 00 02 00 00       	and    $0x200,%eax
c0101adc:	85 c0                	test   %eax,%eax
c0101ade:	75 24                	jne    c0101b04 <ide_init+0x1fb>
c0101ae0:	c7 44 24 0c 10 5c 11 	movl   $0xc0115c10,0xc(%esp)
c0101ae7:	c0 
c0101ae8:	c7 44 24 08 53 5c 11 	movl   $0xc0115c53,0x8(%esp)
c0101aef:	c0 
c0101af0:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101af7:	00 
c0101af8:	c7 04 24 68 5c 11 c0 	movl   $0xc0115c68,(%esp)
c0101aff:	e8 c4 f3 ff ff       	call   c0100ec8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b08:	c1 e0 03             	shl    $0x3,%eax
c0101b0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b12:	29 c2                	sub    %eax,%edx
c0101b14:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101b1a:	83 c0 0c             	add    $0xc,%eax
c0101b1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b23:	83 c0 36             	add    $0x36,%eax
c0101b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b29:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b37:	eb 34                	jmp    c0101b6d <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b3f:	01 c2                	add    %eax,%edx
c0101b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b44:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b4a:	01 c8                	add    %ecx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	88 02                	mov    %al,(%edx)
c0101b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b54:	8d 50 01             	lea    0x1(%eax),%edx
c0101b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b5a:	01 c2                	add    %eax,%edx
c0101b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b62:	01 c8                	add    %ecx,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b69:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b70:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b73:	72 c4                	jb     c0101b39 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7b:	01 d0                	add    %edx,%eax
c0101b7d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b86:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b89:	85 c0                	test   %eax,%eax
c0101b8b:	74 0f                	je     c0101b9c <ide_init+0x293>
c0101b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b93:	01 d0                	add    %edx,%eax
c0101b95:	0f b6 00             	movzbl (%eax),%eax
c0101b98:	3c 20                	cmp    $0x20,%al
c0101b9a:	74 d9                	je     c0101b75 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba0:	c1 e0 03             	shl    $0x3,%eax
c0101ba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baa:	29 c2                	sub    %eax,%edx
c0101bac:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101bb2:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bb5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bb9:	c1 e0 03             	shl    $0x3,%eax
c0101bbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc3:	29 c2                	sub    %eax,%edx
c0101bc5:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101bcb:	8b 50 08             	mov    0x8(%eax),%edx
c0101bce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bde:	c7 04 24 7a 5c 11 c0 	movl   $0xc0115c7a,(%esp)
c0101be5:	e8 7b e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bee:	83 c0 01             	add    $0x1,%eax
c0101bf1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101bf5:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101bfa:	0f 86 1f fd ff ff    	jbe    c010191f <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c00:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c07:	e8 94 05 00 00       	call   c01021a0 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c13:	e8 88 05 00 00       	call   c01021a0 <pic_enable>
}
c0101c18:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c1e:	5b                   	pop    %ebx
c0101c1f:	5f                   	pop    %edi
c0101c20:	5d                   	pop    %ebp
c0101c21:	c3                   	ret    

c0101c22 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c22:	55                   	push   %ebp
c0101c23:	89 e5                	mov    %esp,%ebp
c0101c25:	83 ec 04             	sub    $0x4,%esp
c0101c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c2f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c34:	77 24                	ja     c0101c5a <ide_device_valid+0x38>
c0101c36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c3a:	c1 e0 03             	shl    $0x3,%eax
c0101c3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c44:	29 c2                	sub    %eax,%edx
c0101c46:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101c4c:	0f b6 00             	movzbl (%eax),%eax
c0101c4f:	84 c0                	test   %al,%al
c0101c51:	74 07                	je     c0101c5a <ide_device_valid+0x38>
c0101c53:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c58:	eb 05                	jmp    c0101c5f <ide_device_valid+0x3d>
c0101c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5f:	c9                   	leave  
c0101c60:	c3                   	ret    

c0101c61 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c61:	55                   	push   %ebp
c0101c62:	89 e5                	mov    %esp,%ebp
c0101c64:	83 ec 08             	sub    $0x8,%esp
c0101c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c6a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c6e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c72:	89 04 24             	mov    %eax,(%esp)
c0101c75:	e8 a8 ff ff ff       	call   c0101c22 <ide_device_valid>
c0101c7a:	85 c0                	test   %eax,%eax
c0101c7c:	74 1b                	je     c0101c99 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c7e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c82:	c1 e0 03             	shl    $0x3,%eax
c0101c85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c8c:	29 c2                	sub    %eax,%edx
c0101c8e:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101c94:	8b 40 08             	mov    0x8(%eax),%eax
c0101c97:	eb 05                	jmp    c0101c9e <ide_device_size+0x3d>
    }
    return 0;
c0101c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c9e:	c9                   	leave  
c0101c9f:	c3                   	ret    

c0101ca0 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ca0:	55                   	push   %ebp
c0101ca1:	89 e5                	mov    %esp,%ebp
c0101ca3:	57                   	push   %edi
c0101ca4:	53                   	push   %ebx
c0101ca5:	83 ec 50             	sub    $0x50,%esp
c0101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cab:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    cprintf("[ide_read_secs]\n");
c0101caf:	c7 04 24 98 5c 11 c0 	movl   $0xc0115c98,(%esp)
c0101cb6:	e8 aa e6 ff ff       	call   c0100365 <cprintf>
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101cbb:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cc2:	77 24                	ja     c0101ce8 <ide_read_secs+0x48>
c0101cc4:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101cc9:	77 1d                	ja     c0101ce8 <ide_read_secs+0x48>
c0101ccb:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ccf:	c1 e0 03             	shl    $0x3,%eax
c0101cd2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101cd9:	29 c2                	sub    %eax,%edx
c0101cdb:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101ce1:	0f b6 00             	movzbl (%eax),%eax
c0101ce4:	84 c0                	test   %al,%al
c0101ce6:	75 24                	jne    c0101d0c <ide_read_secs+0x6c>
c0101ce8:	c7 44 24 0c ac 5c 11 	movl   $0xc0115cac,0xc(%esp)
c0101cef:	c0 
c0101cf0:	c7 44 24 08 53 5c 11 	movl   $0xc0115c53,0x8(%esp)
c0101cf7:	c0 
c0101cf8:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101cff:	00 
c0101d00:	c7 04 24 68 5c 11 c0 	movl   $0xc0115c68,(%esp)
c0101d07:	e8 bc f1 ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d0c:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d13:	77 0f                	ja     c0101d24 <ide_read_secs+0x84>
c0101d15:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d18:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d1b:	01 d0                	add    %edx,%eax
c0101d1d:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d22:	76 24                	jbe    c0101d48 <ide_read_secs+0xa8>
c0101d24:	c7 44 24 0c d4 5c 11 	movl   $0xc0115cd4,0xc(%esp)
c0101d2b:	c0 
c0101d2c:	c7 44 24 08 53 5c 11 	movl   $0xc0115c53,0x8(%esp)
c0101d33:	c0 
c0101d34:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
c0101d3b:	00 
c0101d3c:	c7 04 24 68 5c 11 c0 	movl   $0xc0115c68,(%esp)
c0101d43:	e8 80 f1 ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d48:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d4c:	66 d1 e8             	shr    %ax
c0101d4f:	0f b7 c0             	movzwl %ax,%eax
c0101d52:	0f b7 04 85 08 5c 11 	movzwl -0x3feea3f8(,%eax,4),%eax
c0101d59:	c0 
c0101d5a:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d5e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d62:	66 d1 e8             	shr    %ax
c0101d65:	0f b7 c0             	movzwl %ax,%eax
c0101d68:	0f b7 04 85 0a 5c 11 	movzwl -0x3feea3f6(,%eax,4),%eax
c0101d6f:	c0 
c0101d70:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d74:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d78:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d7f:	00 
c0101d80:	89 04 24             	mov    %eax,(%esp)
c0101d83:	e8 27 fb ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d88:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d8c:	83 c0 02             	add    $0x2,%eax
c0101d8f:	0f b7 c0             	movzwl %ax,%eax
c0101d92:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101d96:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d9a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d9e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101da2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101da3:	8b 45 14             	mov    0x14(%ebp),%eax
c0101da6:	0f b6 c0             	movzbl %al,%eax
c0101da9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dad:	83 c2 02             	add    $0x2,%edx
c0101db0:	0f b7 d2             	movzwl %dx,%edx
c0101db3:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101db7:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dba:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101dbe:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101dc2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101dc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc6:	0f b6 c0             	movzbl %al,%eax
c0101dc9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dcd:	83 c2 03             	add    $0x3,%edx
c0101dd0:	0f b7 d2             	movzwl %dx,%edx
c0101dd3:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101dd7:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dda:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101dde:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101de2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101de3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de6:	c1 e8 08             	shr    $0x8,%eax
c0101de9:	0f b6 c0             	movzbl %al,%eax
c0101dec:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101df0:	83 c2 04             	add    $0x4,%edx
c0101df3:	0f b7 d2             	movzwl %dx,%edx
c0101df6:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101dfa:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101dfd:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101e01:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e05:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101e06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e09:	c1 e8 10             	shr    $0x10,%eax
c0101e0c:	0f b6 c0             	movzbl %al,%eax
c0101e0f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e13:	83 c2 05             	add    $0x5,%edx
c0101e16:	0f b7 d2             	movzwl %dx,%edx
c0101e19:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e1d:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e20:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e24:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e28:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e29:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e2d:	83 e0 01             	and    $0x1,%eax
c0101e30:	c1 e0 04             	shl    $0x4,%eax
c0101e33:	89 c2                	mov    %eax,%edx
c0101e35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e38:	c1 e8 18             	shr    $0x18,%eax
c0101e3b:	83 e0 0f             	and    $0xf,%eax
c0101e3e:	09 d0                	or     %edx,%eax
c0101e40:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e43:	0f b6 c0             	movzbl %al,%eax
c0101e46:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e4a:	83 c2 06             	add    $0x6,%edx
c0101e4d:	0f b7 d2             	movzwl %dx,%edx
c0101e50:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e54:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e57:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e5b:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e5f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e60:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e64:	83 c0 07             	add    $0x7,%eax
c0101e67:	0f b7 c0             	movzwl %ax,%eax
c0101e6a:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e6e:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e72:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e76:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e7a:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e82:	eb 5a                	jmp    c0101ede <ide_read_secs+0x23e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e84:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e88:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e8f:	00 
c0101e90:	89 04 24             	mov    %eax,(%esp)
c0101e93:	e8 17 fa ff ff       	call   c01018af <ide_wait_ready>
c0101e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e9f:	74 02                	je     c0101ea3 <ide_read_secs+0x203>
            goto out;
c0101ea1:	eb 41                	jmp    c0101ee4 <ide_read_secs+0x244>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101ea3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101ea7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101eaa:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ead:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101eb0:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101eb7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101eba:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ebd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ec0:	89 cb                	mov    %ecx,%ebx
c0101ec2:	89 df                	mov    %ebx,%edi
c0101ec4:	89 c1                	mov    %eax,%ecx
c0101ec6:	fc                   	cld    
c0101ec7:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ec9:	89 c8                	mov    %ecx,%eax
c0101ecb:	89 fb                	mov    %edi,%ebx
c0101ecd:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101ed0:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ed3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ed7:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ede:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ee2:	75 a0                	jne    c0101e84 <ide_read_secs+0x1e4>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ee7:	83 c4 50             	add    $0x50,%esp
c0101eea:	5b                   	pop    %ebx
c0101eeb:	5f                   	pop    %edi
c0101eec:	5d                   	pop    %ebp
c0101eed:	c3                   	ret    

c0101eee <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101eee:	55                   	push   %ebp
c0101eef:	89 e5                	mov    %esp,%ebp
c0101ef1:	56                   	push   %esi
c0101ef2:	53                   	push   %ebx
c0101ef3:	83 ec 50             	sub    $0x50,%esp
c0101ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ef9:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    cprintf("[ide_read_secs]\n");
c0101efd:	c7 04 24 98 5c 11 c0 	movl   $0xc0115c98,(%esp)
c0101f04:	e8 5c e4 ff ff       	call   c0100365 <cprintf>
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101f09:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101f10:	77 24                	ja     c0101f36 <ide_write_secs+0x48>
c0101f12:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101f17:	77 1d                	ja     c0101f36 <ide_write_secs+0x48>
c0101f19:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f1d:	c1 e0 03             	shl    $0x3,%eax
c0101f20:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f27:	29 c2                	sub    %eax,%edx
c0101f29:	8d 82 60 05 15 c0    	lea    -0x3feafaa0(%edx),%eax
c0101f2f:	0f b6 00             	movzbl (%eax),%eax
c0101f32:	84 c0                	test   %al,%al
c0101f34:	75 24                	jne    c0101f5a <ide_write_secs+0x6c>
c0101f36:	c7 44 24 0c ac 5c 11 	movl   $0xc0115cac,0xc(%esp)
c0101f3d:	c0 
c0101f3e:	c7 44 24 08 53 5c 11 	movl   $0xc0115c53,0x8(%esp)
c0101f45:	c0 
c0101f46:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0101f4d:	00 
c0101f4e:	c7 04 24 68 5c 11 c0 	movl   $0xc0115c68,(%esp)
c0101f55:	e8 6e ef ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f5a:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f61:	77 0f                	ja     c0101f72 <ide_write_secs+0x84>
c0101f63:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f66:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f69:	01 d0                	add    %edx,%eax
c0101f6b:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f70:	76 24                	jbe    c0101f96 <ide_write_secs+0xa8>
c0101f72:	c7 44 24 0c d4 5c 11 	movl   $0xc0115cd4,0xc(%esp)
c0101f79:	c0 
c0101f7a:	c7 44 24 08 53 5c 11 	movl   $0xc0115c53,0x8(%esp)
c0101f81:	c0 
c0101f82:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0101f89:	00 
c0101f8a:	c7 04 24 68 5c 11 c0 	movl   $0xc0115c68,(%esp)
c0101f91:	e8 32 ef ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f96:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f9a:	66 d1 e8             	shr    %ax
c0101f9d:	0f b7 c0             	movzwl %ax,%eax
c0101fa0:	0f b7 04 85 08 5c 11 	movzwl -0x3feea3f8(,%eax,4),%eax
c0101fa7:	c0 
c0101fa8:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101fac:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101fb0:	66 d1 e8             	shr    %ax
c0101fb3:	0f b7 c0             	movzwl %ax,%eax
c0101fb6:	0f b7 04 85 0a 5c 11 	movzwl -0x3feea3f6(,%eax,4),%eax
c0101fbd:	c0 
c0101fbe:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101fc2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fcd:	00 
c0101fce:	89 04 24             	mov    %eax,(%esp)
c0101fd1:	e8 d9 f8 ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fd6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fda:	83 c0 02             	add    $0x2,%eax
c0101fdd:	0f b7 c0             	movzwl %ax,%eax
c0101fe0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fe4:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fe8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fec:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ff0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101ff1:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ff4:	0f b6 c0             	movzbl %al,%eax
c0101ff7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ffb:	83 c2 02             	add    $0x2,%edx
c0101ffe:	0f b7 d2             	movzwl %dx,%edx
c0102001:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102005:	88 45 e9             	mov    %al,-0x17(%ebp)
c0102008:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010200c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102010:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0102011:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102014:	0f b6 c0             	movzbl %al,%eax
c0102017:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010201b:	83 c2 03             	add    $0x3,%edx
c010201e:	0f b7 d2             	movzwl %dx,%edx
c0102021:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0102025:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102028:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010202c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102030:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102031:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102034:	c1 e8 08             	shr    $0x8,%eax
c0102037:	0f b6 c0             	movzbl %al,%eax
c010203a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010203e:	83 c2 04             	add    $0x4,%edx
c0102041:	0f b7 d2             	movzwl %dx,%edx
c0102044:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102048:	88 45 e1             	mov    %al,-0x1f(%ebp)
c010204b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010204f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102053:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0102054:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102057:	c1 e8 10             	shr    $0x10,%eax
c010205a:	0f b6 c0             	movzbl %al,%eax
c010205d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102061:	83 c2 05             	add    $0x5,%edx
c0102064:	0f b7 d2             	movzwl %dx,%edx
c0102067:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010206b:	88 45 dd             	mov    %al,-0x23(%ebp)
c010206e:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102072:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102076:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102077:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010207b:	83 e0 01             	and    $0x1,%eax
c010207e:	c1 e0 04             	shl    $0x4,%eax
c0102081:	89 c2                	mov    %eax,%edx
c0102083:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102086:	c1 e8 18             	shr    $0x18,%eax
c0102089:	83 e0 0f             	and    $0xf,%eax
c010208c:	09 d0                	or     %edx,%eax
c010208e:	83 c8 e0             	or     $0xffffffe0,%eax
c0102091:	0f b6 c0             	movzbl %al,%eax
c0102094:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102098:	83 c2 06             	add    $0x6,%edx
c010209b:	0f b7 d2             	movzwl %dx,%edx
c010209e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01020a2:	88 45 d9             	mov    %al,-0x27(%ebp)
c01020a5:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020a9:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01020ad:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c01020ae:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020b2:	83 c0 07             	add    $0x7,%eax
c01020b5:	0f b7 c0             	movzwl %ax,%eax
c01020b8:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020bc:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020c0:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020c4:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020c8:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020d0:	eb 5a                	jmp    c010212c <ide_write_secs+0x23e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020d2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020d6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020dd:	00 
c01020de:	89 04 24             	mov    %eax,(%esp)
c01020e1:	e8 c9 f7 ff ff       	call   c01018af <ide_wait_ready>
c01020e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020ed:	74 02                	je     c01020f1 <ide_write_secs+0x203>
            goto out;
c01020ef:	eb 41                	jmp    c0102132 <ide_write_secs+0x244>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020f1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020f8:	8b 45 10             	mov    0x10(%ebp),%eax
c01020fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020fe:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0102105:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102108:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010210b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010210e:	89 cb                	mov    %ecx,%ebx
c0102110:	89 de                	mov    %ebx,%esi
c0102112:	89 c1                	mov    %eax,%ecx
c0102114:	fc                   	cld    
c0102115:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102117:	89 c8                	mov    %ecx,%eax
c0102119:	89 f3                	mov    %esi,%ebx
c010211b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010211e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102121:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102125:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010212c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102130:	75 a0                	jne    c01020d2 <ide_write_secs+0x1e4>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102132:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102135:	83 c4 50             	add    $0x50,%esp
c0102138:	5b                   	pop    %ebx
c0102139:	5e                   	pop    %esi
c010213a:	5d                   	pop    %ebp
c010213b:	c3                   	ret    

c010213c <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010213c:	55                   	push   %ebp
c010213d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010213f:	fb                   	sti    
    sti();
}
c0102140:	5d                   	pop    %ebp
c0102141:	c3                   	ret    

c0102142 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102142:	55                   	push   %ebp
c0102143:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102145:	fa                   	cli    
    cli();
}
c0102146:	5d                   	pop    %ebp
c0102147:	c3                   	ret    

c0102148 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102148:	55                   	push   %ebp
c0102149:	89 e5                	mov    %esp,%ebp
c010214b:	83 ec 14             	sub    $0x14,%esp
c010214e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102151:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102155:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102159:	66 a3 70 f5 14 c0    	mov    %ax,0xc014f570
    if (did_init) {
c010215f:	a1 40 06 15 c0       	mov    0xc0150640,%eax
c0102164:	85 c0                	test   %eax,%eax
c0102166:	74 36                	je     c010219e <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102168:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010216c:	0f b6 c0             	movzbl %al,%eax
c010216f:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102175:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102178:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010217c:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102180:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102181:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102185:	66 c1 e8 08          	shr    $0x8,%ax
c0102189:	0f b6 c0             	movzbl %al,%eax
c010218c:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102192:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102195:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102199:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010219d:	ee                   	out    %al,(%dx)
    }
}
c010219e:	c9                   	leave  
c010219f:	c3                   	ret    

c01021a0 <pic_enable>:

void
pic_enable(unsigned int irq) {
c01021a0:	55                   	push   %ebp
c01021a1:	89 e5                	mov    %esp,%ebp
c01021a3:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c01021a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01021a9:	ba 01 00 00 00       	mov    $0x1,%edx
c01021ae:	89 c1                	mov    %eax,%ecx
c01021b0:	d3 e2                	shl    %cl,%edx
c01021b2:	89 d0                	mov    %edx,%eax
c01021b4:	f7 d0                	not    %eax
c01021b6:	89 c2                	mov    %eax,%edx
c01021b8:	0f b7 05 70 f5 14 c0 	movzwl 0xc014f570,%eax
c01021bf:	21 d0                	and    %edx,%eax
c01021c1:	0f b7 c0             	movzwl %ax,%eax
c01021c4:	89 04 24             	mov    %eax,(%esp)
c01021c7:	e8 7c ff ff ff       	call   c0102148 <pic_setmask>
}
c01021cc:	c9                   	leave  
c01021cd:	c3                   	ret    

c01021ce <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021ce:	55                   	push   %ebp
c01021cf:	89 e5                	mov    %esp,%ebp
c01021d1:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021d4:	c7 05 40 06 15 c0 01 	movl   $0x1,0xc0150640
c01021db:	00 00 00 
c01021de:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021e4:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021e8:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021ec:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021f0:	ee                   	out    %al,(%dx)
c01021f1:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021f7:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021fb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021ff:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102203:	ee                   	out    %al,(%dx)
c0102204:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c010220a:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c010220e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102212:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102216:	ee                   	out    %al,(%dx)
c0102217:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010221d:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102221:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102225:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102229:	ee                   	out    %al,(%dx)
c010222a:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102230:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102234:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102238:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010223c:	ee                   	out    %al,(%dx)
c010223d:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102243:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102247:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010224b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010224f:	ee                   	out    %al,(%dx)
c0102250:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102256:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c010225a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010225e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102262:	ee                   	out    %al,(%dx)
c0102263:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102269:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010226d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102271:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102275:	ee                   	out    %al,(%dx)
c0102276:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010227c:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102280:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102284:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102288:	ee                   	out    %al,(%dx)
c0102289:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010228f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102293:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102297:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010229b:	ee                   	out    %al,(%dx)
c010229c:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c01022a2:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c01022a6:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01022aa:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01022ae:	ee                   	out    %al,(%dx)
c01022af:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01022b5:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022b9:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022bd:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022c1:	ee                   	out    %al,(%dx)
c01022c2:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022c8:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022cc:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022d0:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022d4:	ee                   	out    %al,(%dx)
c01022d5:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022db:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022df:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022e3:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022e7:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022e8:	0f b7 05 70 f5 14 c0 	movzwl 0xc014f570,%eax
c01022ef:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022f3:	74 12                	je     c0102307 <pic_init+0x139>
        pic_setmask(irq_mask);
c01022f5:	0f b7 05 70 f5 14 c0 	movzwl 0xc014f570,%eax
c01022fc:	0f b7 c0             	movzwl %ax,%eax
c01022ff:	89 04 24             	mov    %eax,(%esp)
c0102302:	e8 41 fe ff ff       	call   c0102148 <pic_setmask>
    }
}
c0102307:	c9                   	leave  
c0102308:	c3                   	ret    

c0102309 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c0102309:	55                   	push   %ebp
c010230a:	89 e5                	mov    %esp,%ebp
c010230c:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c010230f:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102316:	00 
c0102317:	c7 04 24 20 5d 11 c0 	movl   $0xc0115d20,(%esp)
c010231e:	e8 42 e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102323:	c9                   	leave  
c0102324:	c3                   	ret    

c0102325 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102325:	55                   	push   %ebp
c0102326:	89 e5                	mov    %esp,%ebp
c0102328:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010232b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102332:	e9 c3 00 00 00       	jmp    c01023fa <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102337:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010233a:	8b 04 85 00 f6 14 c0 	mov    -0x3feb0a00(,%eax,4),%eax
c0102341:	89 c2                	mov    %eax,%edx
c0102343:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102346:	66 89 14 c5 60 06 15 	mov    %dx,-0x3feaf9a0(,%eax,8)
c010234d:	c0 
c010234e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102351:	66 c7 04 c5 62 06 15 	movw   $0x8,-0x3feaf99e(,%eax,8)
c0102358:	c0 08 00 
c010235b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235e:	0f b6 14 c5 64 06 15 	movzbl -0x3feaf99c(,%eax,8),%edx
c0102365:	c0 
c0102366:	83 e2 e0             	and    $0xffffffe0,%edx
c0102369:	88 14 c5 64 06 15 c0 	mov    %dl,-0x3feaf99c(,%eax,8)
c0102370:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102373:	0f b6 14 c5 64 06 15 	movzbl -0x3feaf99c(,%eax,8),%edx
c010237a:	c0 
c010237b:	83 e2 1f             	and    $0x1f,%edx
c010237e:	88 14 c5 64 06 15 c0 	mov    %dl,-0x3feaf99c(,%eax,8)
c0102385:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102388:	0f b6 14 c5 65 06 15 	movzbl -0x3feaf99b(,%eax,8),%edx
c010238f:	c0 
c0102390:	83 e2 f0             	and    $0xfffffff0,%edx
c0102393:	83 ca 0e             	or     $0xe,%edx
c0102396:	88 14 c5 65 06 15 c0 	mov    %dl,-0x3feaf99b(,%eax,8)
c010239d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023a0:	0f b6 14 c5 65 06 15 	movzbl -0x3feaf99b(,%eax,8),%edx
c01023a7:	c0 
c01023a8:	83 e2 ef             	and    $0xffffffef,%edx
c01023ab:	88 14 c5 65 06 15 c0 	mov    %dl,-0x3feaf99b(,%eax,8)
c01023b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b5:	0f b6 14 c5 65 06 15 	movzbl -0x3feaf99b(,%eax,8),%edx
c01023bc:	c0 
c01023bd:	83 e2 9f             	and    $0xffffff9f,%edx
c01023c0:	88 14 c5 65 06 15 c0 	mov    %dl,-0x3feaf99b(,%eax,8)
c01023c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ca:	0f b6 14 c5 65 06 15 	movzbl -0x3feaf99b(,%eax,8),%edx
c01023d1:	c0 
c01023d2:	83 ca 80             	or     $0xffffff80,%edx
c01023d5:	88 14 c5 65 06 15 c0 	mov    %dl,-0x3feaf99b(,%eax,8)
c01023dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023df:	8b 04 85 00 f6 14 c0 	mov    -0x3feb0a00(,%eax,4),%eax
c01023e6:	c1 e8 10             	shr    $0x10,%eax
c01023e9:	89 c2                	mov    %eax,%edx
c01023eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ee:	66 89 14 c5 66 06 15 	mov    %dx,-0x3feaf99a(,%eax,8)
c01023f5:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01023f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023fd:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102402:	0f 86 2f ff ff ff    	jbe    c0102337 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102408:	a1 00 f8 14 c0       	mov    0xc014f800,%eax
c010240d:	66 a3 60 0a 15 c0    	mov    %ax,0xc0150a60
c0102413:	66 c7 05 62 0a 15 c0 	movw   $0x8,0xc0150a62
c010241a:	08 00 
c010241c:	0f b6 05 64 0a 15 c0 	movzbl 0xc0150a64,%eax
c0102423:	83 e0 e0             	and    $0xffffffe0,%eax
c0102426:	a2 64 0a 15 c0       	mov    %al,0xc0150a64
c010242b:	0f b6 05 64 0a 15 c0 	movzbl 0xc0150a64,%eax
c0102432:	83 e0 1f             	and    $0x1f,%eax
c0102435:	a2 64 0a 15 c0       	mov    %al,0xc0150a64
c010243a:	0f b6 05 65 0a 15 c0 	movzbl 0xc0150a65,%eax
c0102441:	83 c8 0f             	or     $0xf,%eax
c0102444:	a2 65 0a 15 c0       	mov    %al,0xc0150a65
c0102449:	0f b6 05 65 0a 15 c0 	movzbl 0xc0150a65,%eax
c0102450:	83 e0 ef             	and    $0xffffffef,%eax
c0102453:	a2 65 0a 15 c0       	mov    %al,0xc0150a65
c0102458:	0f b6 05 65 0a 15 c0 	movzbl 0xc0150a65,%eax
c010245f:	83 c8 60             	or     $0x60,%eax
c0102462:	a2 65 0a 15 c0       	mov    %al,0xc0150a65
c0102467:	0f b6 05 65 0a 15 c0 	movzbl 0xc0150a65,%eax
c010246e:	83 c8 80             	or     $0xffffff80,%eax
c0102471:	a2 65 0a 15 c0       	mov    %al,0xc0150a65
c0102476:	a1 00 f8 14 c0       	mov    0xc014f800,%eax
c010247b:	c1 e8 10             	shr    $0x10,%eax
c010247e:	66 a3 66 0a 15 c0    	mov    %ax,0xc0150a66
c0102484:	c7 45 f8 80 f5 14 c0 	movl   $0xc014f580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010248b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010248e:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102491:	c9                   	leave  
c0102492:	c3                   	ret    

c0102493 <trapname>:

static const char *
trapname(int trapno) {
c0102493:	55                   	push   %ebp
c0102494:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102496:	8b 45 08             	mov    0x8(%ebp),%eax
c0102499:	83 f8 13             	cmp    $0x13,%eax
c010249c:	77 0c                	ja     c01024aa <trapname+0x17>
        return excnames[trapno];
c010249e:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a1:	8b 04 85 a0 61 11 c0 	mov    -0x3fee9e60(,%eax,4),%eax
c01024a8:	eb 18                	jmp    c01024c2 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024aa:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024ae:	7e 0d                	jle    c01024bd <trapname+0x2a>
c01024b0:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024b4:	7f 07                	jg     c01024bd <trapname+0x2a>
        return "Hardware Interrupt";
c01024b6:	b8 2a 5d 11 c0       	mov    $0xc0115d2a,%eax
c01024bb:	eb 05                	jmp    c01024c2 <trapname+0x2f>
    }
    return "(unknown trap)";
c01024bd:	b8 3d 5d 11 c0       	mov    $0xc0115d3d,%eax
}
c01024c2:	5d                   	pop    %ebp
c01024c3:	c3                   	ret    

c01024c4 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024c4:	55                   	push   %ebp
c01024c5:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ca:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024ce:	66 83 f8 08          	cmp    $0x8,%ax
c01024d2:	0f 94 c0             	sete   %al
c01024d5:	0f b6 c0             	movzbl %al,%eax
}
c01024d8:	5d                   	pop    %ebp
c01024d9:	c3                   	ret    

c01024da <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024da:	55                   	push   %ebp
c01024db:	89 e5                	mov    %esp,%ebp
c01024dd:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024e7:	c7 04 24 7e 5d 11 c0 	movl   $0xc0115d7e,(%esp)
c01024ee:	e8 72 de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c01024f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f6:	89 04 24             	mov    %eax,(%esp)
c01024f9:	e8 a1 01 00 00       	call   c010269f <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102501:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102505:	0f b7 c0             	movzwl %ax,%eax
c0102508:	89 44 24 04          	mov    %eax,0x4(%esp)
c010250c:	c7 04 24 8f 5d 11 c0 	movl   $0xc0115d8f,(%esp)
c0102513:	e8 4d de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102518:	8b 45 08             	mov    0x8(%ebp),%eax
c010251b:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010251f:	0f b7 c0             	movzwl %ax,%eax
c0102522:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102526:	c7 04 24 a2 5d 11 c0 	movl   $0xc0115da2,(%esp)
c010252d:	e8 33 de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102532:	8b 45 08             	mov    0x8(%ebp),%eax
c0102535:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102539:	0f b7 c0             	movzwl %ax,%eax
c010253c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102540:	c7 04 24 b5 5d 11 c0 	movl   $0xc0115db5,(%esp)
c0102547:	e8 19 de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010254c:	8b 45 08             	mov    0x8(%ebp),%eax
c010254f:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102553:	0f b7 c0             	movzwl %ax,%eax
c0102556:	89 44 24 04          	mov    %eax,0x4(%esp)
c010255a:	c7 04 24 c8 5d 11 c0 	movl   $0xc0115dc8,(%esp)
c0102561:	e8 ff dd ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102566:	8b 45 08             	mov    0x8(%ebp),%eax
c0102569:	8b 40 30             	mov    0x30(%eax),%eax
c010256c:	89 04 24             	mov    %eax,(%esp)
c010256f:	e8 1f ff ff ff       	call   c0102493 <trapname>
c0102574:	8b 55 08             	mov    0x8(%ebp),%edx
c0102577:	8b 52 30             	mov    0x30(%edx),%edx
c010257a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010257e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102582:	c7 04 24 db 5d 11 c0 	movl   $0xc0115ddb,(%esp)
c0102589:	e8 d7 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010258e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102591:	8b 40 34             	mov    0x34(%eax),%eax
c0102594:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102598:	c7 04 24 ed 5d 11 c0 	movl   $0xc0115ded,(%esp)
c010259f:	e8 c1 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01025a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a7:	8b 40 38             	mov    0x38(%eax),%eax
c01025aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ae:	c7 04 24 fc 5d 11 c0 	movl   $0xc0115dfc,(%esp)
c01025b5:	e8 ab dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bd:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025c1:	0f b7 c0             	movzwl %ax,%eax
c01025c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c8:	c7 04 24 0b 5e 11 c0 	movl   $0xc0115e0b,(%esp)
c01025cf:	e8 91 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d7:	8b 40 40             	mov    0x40(%eax),%eax
c01025da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025de:	c7 04 24 1e 5e 11 c0 	movl   $0xc0115e1e,(%esp)
c01025e5:	e8 7b dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025f1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025f8:	eb 3e                	jmp    c0102638 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fd:	8b 50 40             	mov    0x40(%eax),%edx
c0102600:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102603:	21 d0                	and    %edx,%eax
c0102605:	85 c0                	test   %eax,%eax
c0102607:	74 28                	je     c0102631 <print_trapframe+0x157>
c0102609:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010260c:	8b 04 85 a0 f5 14 c0 	mov    -0x3feb0a60(,%eax,4),%eax
c0102613:	85 c0                	test   %eax,%eax
c0102615:	74 1a                	je     c0102631 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102617:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010261a:	8b 04 85 a0 f5 14 c0 	mov    -0x3feb0a60(,%eax,4),%eax
c0102621:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102625:	c7 04 24 2d 5e 11 c0 	movl   $0xc0115e2d,(%esp)
c010262c:	e8 34 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102631:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102635:	d1 65 f0             	shll   -0x10(%ebp)
c0102638:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010263b:	83 f8 17             	cmp    $0x17,%eax
c010263e:	76 ba                	jbe    c01025fa <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102640:	8b 45 08             	mov    0x8(%ebp),%eax
c0102643:	8b 40 40             	mov    0x40(%eax),%eax
c0102646:	25 00 30 00 00       	and    $0x3000,%eax
c010264b:	c1 e8 0c             	shr    $0xc,%eax
c010264e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102652:	c7 04 24 31 5e 11 c0 	movl   $0xc0115e31,(%esp)
c0102659:	e8 07 dd ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c010265e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102661:	89 04 24             	mov    %eax,(%esp)
c0102664:	e8 5b fe ff ff       	call   c01024c4 <trap_in_kernel>
c0102669:	85 c0                	test   %eax,%eax
c010266b:	75 30                	jne    c010269d <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010266d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102670:	8b 40 44             	mov    0x44(%eax),%eax
c0102673:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102677:	c7 04 24 3a 5e 11 c0 	movl   $0xc0115e3a,(%esp)
c010267e:	e8 e2 dc ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102683:	8b 45 08             	mov    0x8(%ebp),%eax
c0102686:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010268a:	0f b7 c0             	movzwl %ax,%eax
c010268d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102691:	c7 04 24 49 5e 11 c0 	movl   $0xc0115e49,(%esp)
c0102698:	e8 c8 dc ff ff       	call   c0100365 <cprintf>
    }
}
c010269d:	c9                   	leave  
c010269e:	c3                   	ret    

c010269f <print_regs>:

void
print_regs(struct pushregs *regs) {
c010269f:	55                   	push   %ebp
c01026a0:	89 e5                	mov    %esp,%ebp
c01026a2:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01026a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a8:	8b 00                	mov    (%eax),%eax
c01026aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ae:	c7 04 24 5c 5e 11 c0 	movl   $0xc0115e5c,(%esp)
c01026b5:	e8 ab dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01026bd:	8b 40 04             	mov    0x4(%eax),%eax
c01026c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026c4:	c7 04 24 6b 5e 11 c0 	movl   $0xc0115e6b,(%esp)
c01026cb:	e8 95 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d3:	8b 40 08             	mov    0x8(%eax),%eax
c01026d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026da:	c7 04 24 7a 5e 11 c0 	movl   $0xc0115e7a,(%esp)
c01026e1:	e8 7f dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01026ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f0:	c7 04 24 89 5e 11 c0 	movl   $0xc0115e89,(%esp)
c01026f7:	e8 69 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ff:	8b 40 10             	mov    0x10(%eax),%eax
c0102702:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102706:	c7 04 24 98 5e 11 c0 	movl   $0xc0115e98,(%esp)
c010270d:	e8 53 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102712:	8b 45 08             	mov    0x8(%ebp),%eax
c0102715:	8b 40 14             	mov    0x14(%eax),%eax
c0102718:	89 44 24 04          	mov    %eax,0x4(%esp)
c010271c:	c7 04 24 a7 5e 11 c0 	movl   $0xc0115ea7,(%esp)
c0102723:	e8 3d dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102728:	8b 45 08             	mov    0x8(%ebp),%eax
c010272b:	8b 40 18             	mov    0x18(%eax),%eax
c010272e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102732:	c7 04 24 b6 5e 11 c0 	movl   $0xc0115eb6,(%esp)
c0102739:	e8 27 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010273e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102741:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102744:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102748:	c7 04 24 c5 5e 11 c0 	movl   $0xc0115ec5,(%esp)
c010274f:	e8 11 dc ff ff       	call   c0100365 <cprintf>
}
c0102754:	c9                   	leave  
c0102755:	c3                   	ret    

c0102756 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102756:	55                   	push   %ebp
c0102757:	89 e5                	mov    %esp,%ebp
c0102759:	53                   	push   %ebx
c010275a:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010275d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102760:	8b 40 34             	mov    0x34(%eax),%eax
c0102763:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102766:	85 c0                	test   %eax,%eax
c0102768:	74 07                	je     c0102771 <print_pgfault+0x1b>
c010276a:	b9 d4 5e 11 c0       	mov    $0xc0115ed4,%ecx
c010276f:	eb 05                	jmp    c0102776 <print_pgfault+0x20>
c0102771:	b9 e5 5e 11 c0       	mov    $0xc0115ee5,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102776:	8b 45 08             	mov    0x8(%ebp),%eax
c0102779:	8b 40 34             	mov    0x34(%eax),%eax
c010277c:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010277f:	85 c0                	test   %eax,%eax
c0102781:	74 07                	je     c010278a <print_pgfault+0x34>
c0102783:	ba 57 00 00 00       	mov    $0x57,%edx
c0102788:	eb 05                	jmp    c010278f <print_pgfault+0x39>
c010278a:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010278f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102792:	8b 40 34             	mov    0x34(%eax),%eax
c0102795:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102798:	85 c0                	test   %eax,%eax
c010279a:	74 07                	je     c01027a3 <print_pgfault+0x4d>
c010279c:	b8 55 00 00 00       	mov    $0x55,%eax
c01027a1:	eb 05                	jmp    c01027a8 <print_pgfault+0x52>
c01027a3:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027a8:	0f 20 d3             	mov    %cr2,%ebx
c01027ab:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01027ae:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01027b1:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01027b5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027b9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027bd:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027c1:	c7 04 24 f4 5e 11 c0 	movl   $0xc0115ef4,(%esp)
c01027c8:	e8 98 db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027cd:	83 c4 34             	add    $0x34,%esp
c01027d0:	5b                   	pop    %ebx
c01027d1:	5d                   	pop    %ebp
c01027d2:	c3                   	ret    

c01027d3 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027d3:	55                   	push   %ebp
c01027d4:	89 e5                	mov    %esp,%ebp
c01027d6:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027d9:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c01027de:	85 c0                	test   %eax,%eax
c01027e0:	74 0b                	je     c01027ed <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01027e5:	89 04 24             	mov    %eax,(%esp)
c01027e8:	e8 69 ff ff ff       	call   c0102756 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027ed:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c01027f2:	85 c0                	test   %eax,%eax
c01027f4:	74 3d                	je     c0102833 <pgfault_handler+0x60>
        assert(current == idleproc);
c01027f6:	8b 15 28 0f 15 c0    	mov    0xc0150f28,%edx
c01027fc:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c0102801:	39 c2                	cmp    %eax,%edx
c0102803:	74 24                	je     c0102829 <pgfault_handler+0x56>
c0102805:	c7 44 24 0c 17 5f 11 	movl   $0xc0115f17,0xc(%esp)
c010280c:	c0 
c010280d:	c7 44 24 08 2b 5f 11 	movl   $0xc0115f2b,0x8(%esp)
c0102814:	c0 
c0102815:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c010281c:	00 
c010281d:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c0102824:	e8 9f e6 ff ff       	call   c0100ec8 <__panic>
        mm = check_mm_struct;
c0102829:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c010282e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102831:	eb 46                	jmp    c0102879 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102833:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102838:	85 c0                	test   %eax,%eax
c010283a:	75 32                	jne    c010286e <pgfault_handler+0x9b>
            print_trapframe(tf);
c010283c:	8b 45 08             	mov    0x8(%ebp),%eax
c010283f:	89 04 24             	mov    %eax,(%esp)
c0102842:	e8 93 fc ff ff       	call   c01024da <print_trapframe>
            print_pgfault(tf);
c0102847:	8b 45 08             	mov    0x8(%ebp),%eax
c010284a:	89 04 24             	mov    %eax,(%esp)
c010284d:	e8 04 ff ff ff       	call   c0102756 <print_pgfault>
            panic("unhandled page fault.\n");
c0102852:	c7 44 24 08 51 5f 11 	movl   $0xc0115f51,0x8(%esp)
c0102859:	c0 
c010285a:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102861:	00 
c0102862:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c0102869:	e8 5a e6 ff ff       	call   c0100ec8 <__panic>
        }
        mm = current->mm;
c010286e:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102873:	8b 40 18             	mov    0x18(%eax),%eax
c0102876:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102879:	0f 20 d0             	mov    %cr2,%eax
c010287c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010287f:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102882:	89 c2                	mov    %eax,%edx
c0102884:	8b 45 08             	mov    0x8(%ebp),%eax
c0102887:	8b 40 34             	mov    0x34(%eax),%eax
c010288a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010288e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102895:	89 04 24             	mov    %eax,(%esp)
c0102898:	e8 7c 65 00 00       	call   c0108e19 <do_pgfault>
}
c010289d:	c9                   	leave  
c010289e:	c3                   	ret    

c010289f <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c010289f:	55                   	push   %ebp
c01028a0:	89 e5                	mov    %esp,%ebp
c01028a2:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01028a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01028af:	8b 40 30             	mov    0x30(%eax),%eax
c01028b2:	83 f8 2f             	cmp    $0x2f,%eax
c01028b5:	77 38                	ja     c01028ef <trap_dispatch+0x50>
c01028b7:	83 f8 2e             	cmp    $0x2e,%eax
c01028ba:	0f 83 cb 01 00 00    	jae    c0102a8b <trap_dispatch+0x1ec>
c01028c0:	83 f8 20             	cmp    $0x20,%eax
c01028c3:	0f 84 07 01 00 00    	je     c01029d0 <trap_dispatch+0x131>
c01028c9:	83 f8 20             	cmp    $0x20,%eax
c01028cc:	77 0a                	ja     c01028d8 <trap_dispatch+0x39>
c01028ce:	83 f8 0e             	cmp    $0xe,%eax
c01028d1:	74 3e                	je     c0102911 <trap_dispatch+0x72>
c01028d3:	e9 6b 01 00 00       	jmp    c0102a43 <trap_dispatch+0x1a4>
c01028d8:	83 f8 21             	cmp    $0x21,%eax
c01028db:	0f 84 30 01 00 00    	je     c0102a11 <trap_dispatch+0x172>
c01028e1:	83 f8 24             	cmp    $0x24,%eax
c01028e4:	0f 84 27 01 00 00    	je     c0102a11 <trap_dispatch+0x172>
c01028ea:	e9 54 01 00 00       	jmp    c0102a43 <trap_dispatch+0x1a4>
c01028ef:	83 f8 78             	cmp    $0x78,%eax
c01028f2:	0f 82 4b 01 00 00    	jb     c0102a43 <trap_dispatch+0x1a4>
c01028f8:	83 f8 79             	cmp    $0x79,%eax
c01028fb:	0f 86 26 01 00 00    	jbe    c0102a27 <trap_dispatch+0x188>
c0102901:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102906:	0f 84 ba 00 00 00    	je     c01029c6 <trap_dispatch+0x127>
c010290c:	e9 32 01 00 00       	jmp    c0102a43 <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102911:	8b 45 08             	mov    0x8(%ebp),%eax
c0102914:	89 04 24             	mov    %eax,(%esp)
c0102917:	e8 b7 fe ff ff       	call   c01027d3 <pgfault_handler>
c010291c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010291f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102923:	0f 84 98 00 00 00    	je     c01029c1 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102929:	8b 45 08             	mov    0x8(%ebp),%eax
c010292c:	89 04 24             	mov    %eax,(%esp)
c010292f:	e8 a6 fb ff ff       	call   c01024da <print_trapframe>
            if (current == NULL) {
c0102934:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102939:	85 c0                	test   %eax,%eax
c010293b:	75 23                	jne    c0102960 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010293d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102940:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102944:	c7 44 24 08 68 5f 11 	movl   $0xc0115f68,0x8(%esp)
c010294b:	c0 
c010294c:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102953:	00 
c0102954:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c010295b:	e8 68 e5 ff ff       	call   c0100ec8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102960:	8b 45 08             	mov    0x8(%ebp),%eax
c0102963:	89 04 24             	mov    %eax,(%esp)
c0102966:	e8 59 fb ff ff       	call   c01024c4 <trap_in_kernel>
c010296b:	85 c0                	test   %eax,%eax
c010296d:	74 23                	je     c0102992 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010296f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102972:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102976:	c7 44 24 08 88 5f 11 	movl   $0xc0115f88,0x8(%esp)
c010297d:	c0 
c010297e:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0102985:	00 
c0102986:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c010298d:	e8 36 e5 ff ff       	call   c0100ec8 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102992:	c7 04 24 b6 5f 11 c0 	movl   $0xc0115fb6,(%esp)
c0102999:	e8 c7 d9 ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010299e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029a5:	c7 44 24 08 cc 5f 11 	movl   $0xc0115fcc,0x8(%esp)
c01029ac:	c0 
c01029ad:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01029b4:	00 
c01029b5:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c01029bc:	e8 07 e5 ff ff       	call   c0100ec8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029c1:	e9 c6 00 00 00       	jmp    c0102a8c <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029c6:	e8 a2 c4 00 00       	call   c010ee6d <syscall>
        break;
c01029cb:	e9 bc 00 00 00       	jmp    c0102a8c <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c01029d0:	a1 10 40 15 c0       	mov    0xc0154010,%eax
c01029d5:	83 c0 01             	add    $0x1,%eax
c01029d8:	a3 10 40 15 c0       	mov    %eax,0xc0154010
        assert(current != NULL);
c01029dd:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c01029e2:	85 c0                	test   %eax,%eax
c01029e4:	75 24                	jne    c0102a0a <trap_dispatch+0x16b>
c01029e6:	c7 44 24 0c f5 5f 11 	movl   $0xc0115ff5,0xc(%esp)
c01029ed:	c0 
c01029ee:	c7 44 24 08 2b 5f 11 	movl   $0xc0115f2b,0x8(%esp)
c01029f5:	c0 
c01029f6:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c01029fd:	00 
c01029fe:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c0102a05:	e8 be e4 ff ff       	call   c0100ec8 <__panic>
        run_timer_list();
c0102a0a:	e8 8f bf 00 00       	call   c010e99e <run_timer_list>
        break;
c0102a0f:	eb 7b                	jmp    c0102a8c <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102a11:	e8 2a ee ff ff       	call   c0101840 <cons_getc>
c0102a16:	88 45 f3             	mov    %al,-0xd(%ebp)
        //cprintf("kbd [%03d] %c\n", c, c);
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a19:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a1d:	89 04 24             	mov    %eax,(%esp)
c0102a20:	e8 40 e8 00 00       	call   c0111265 <dev_stdin_write>
        }
        break;
c0102a25:	eb 65                	jmp    c0102a8c <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a27:	c7 44 24 08 05 60 11 	movl   $0xc0116005,0x8(%esp)
c0102a2e:	c0 
c0102a2f:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0102a36:	00 
c0102a37:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c0102a3e:	e8 85 e4 ff ff       	call   c0100ec8 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a43:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a46:	89 04 24             	mov    %eax,(%esp)
c0102a49:	e8 8c fa ff ff       	call   c01024da <print_trapframe>
        if (current != NULL) {
c0102a4e:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102a53:	85 c0                	test   %eax,%eax
c0102a55:	74 18                	je     c0102a6f <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a57:	c7 04 24 15 60 11 c0 	movl   $0xc0116015,(%esp)
c0102a5e:	e8 02 d9 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c0102a63:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a6a:	e8 5c a1 00 00       	call   c010cbcb <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a6f:	c7 44 24 08 26 60 11 	movl   $0xc0116026,0x8(%esp)
c0102a76:	c0 
c0102a77:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0102a7e:	00 
c0102a7f:	c7 04 24 40 5f 11 c0 	movl   $0xc0115f40,(%esp)
c0102a86:	e8 3d e4 ff ff       	call   c0100ec8 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a8b:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a8c:	c9                   	leave  
c0102a8d:	c3                   	ret    

c0102a8e <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a8e:	55                   	push   %ebp
c0102a8f:	89 e5                	mov    %esp,%ebp
c0102a91:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a94:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102a99:	85 c0                	test   %eax,%eax
c0102a9b:	75 0d                	jne    c0102aaa <trap+0x1c>
        trap_dispatch(tf);
c0102a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aa0:	89 04 24             	mov    %eax,(%esp)
c0102aa3:	e8 f7 fd ff ff       	call   c010289f <trap_dispatch>
c0102aa8:	eb 6c                	jmp    c0102b16 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102aaa:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102aaf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ab5:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102aba:	8b 55 08             	mov    0x8(%ebp),%edx
c0102abd:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ac0:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ac3:	89 04 24             	mov    %eax,(%esp)
c0102ac6:	e8 f9 f9 ff ff       	call   c01024c4 <trap_in_kernel>
c0102acb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ace:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ad1:	89 04 24             	mov    %eax,(%esp)
c0102ad4:	e8 c6 fd ff ff       	call   c010289f <trap_dispatch>
    
        current->tf = otf;
c0102ad9:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102ade:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ae1:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102ae4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ae8:	75 2c                	jne    c0102b16 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102aea:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102aef:	8b 40 44             	mov    0x44(%eax),%eax
c0102af2:	83 e0 01             	and    $0x1,%eax
c0102af5:	85 c0                	test   %eax,%eax
c0102af7:	74 0c                	je     c0102b05 <trap+0x77>
                do_exit(-E_KILLED);
c0102af9:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b00:	e8 c6 a0 00 00       	call   c010cbcb <do_exit>
            }
            if (current->need_resched) {
c0102b05:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0102b0a:	8b 40 10             	mov    0x10(%eax),%eax
c0102b0d:	85 c0                	test   %eax,%eax
c0102b0f:	74 05                	je     c0102b16 <trap+0x88>
                schedule();
c0102b11:	e8 fb bb 00 00       	call   c010e711 <schedule>
            }
        }
    }
}
c0102b16:	c9                   	leave  
c0102b17:	c3                   	ret    

c0102b18 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b18:	1e                   	push   %ds
    pushl %es
c0102b19:	06                   	push   %es
    pushl %fs
c0102b1a:	0f a0                	push   %fs
    pushl %gs
c0102b1c:	0f a8                	push   %gs
    pushal
c0102b1e:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b1f:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b24:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b26:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b28:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b29:	e8 60 ff ff ff       	call   c0102a8e <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b2e:	5c                   	pop    %esp

c0102b2f <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b2f:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b30:	0f a9                	pop    %gs
    popl %fs
c0102b32:	0f a1                	pop    %fs
    popl %es
c0102b34:	07                   	pop    %es
    popl %ds
c0102b35:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b36:	83 c4 08             	add    $0x8,%esp
    iret
c0102b39:	cf                   	iret   

c0102b3a <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b3a:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b3e:	e9 ec ff ff ff       	jmp    c0102b2f <__trapret>

c0102b43 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b43:	6a 00                	push   $0x0
  pushl $0
c0102b45:	6a 00                	push   $0x0
  jmp __alltraps
c0102b47:	e9 cc ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b4c <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b4c:	6a 00                	push   $0x0
  pushl $1
c0102b4e:	6a 01                	push   $0x1
  jmp __alltraps
c0102b50:	e9 c3 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b55 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b55:	6a 00                	push   $0x0
  pushl $2
c0102b57:	6a 02                	push   $0x2
  jmp __alltraps
c0102b59:	e9 ba ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b5e <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b5e:	6a 00                	push   $0x0
  pushl $3
c0102b60:	6a 03                	push   $0x3
  jmp __alltraps
c0102b62:	e9 b1 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b67 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b67:	6a 00                	push   $0x0
  pushl $4
c0102b69:	6a 04                	push   $0x4
  jmp __alltraps
c0102b6b:	e9 a8 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b70 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b70:	6a 00                	push   $0x0
  pushl $5
c0102b72:	6a 05                	push   $0x5
  jmp __alltraps
c0102b74:	e9 9f ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b79 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b79:	6a 00                	push   $0x0
  pushl $6
c0102b7b:	6a 06                	push   $0x6
  jmp __alltraps
c0102b7d:	e9 96 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b82 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b82:	6a 00                	push   $0x0
  pushl $7
c0102b84:	6a 07                	push   $0x7
  jmp __alltraps
c0102b86:	e9 8d ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b8b <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b8b:	6a 08                	push   $0x8
  jmp __alltraps
c0102b8d:	e9 86 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b92 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b92:	6a 09                	push   $0x9
  jmp __alltraps
c0102b94:	e9 7f ff ff ff       	jmp    c0102b18 <__alltraps>

c0102b99 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b99:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b9b:	e9 78 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102ba0 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ba0:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ba2:	e9 71 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102ba7 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102ba7:	6a 0c                	push   $0xc
  jmp __alltraps
c0102ba9:	e9 6a ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bae <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bae:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bb0:	e9 63 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bb5 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bb5:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bb7:	e9 5c ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bbc <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bbc:	6a 00                	push   $0x0
  pushl $15
c0102bbe:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bc0:	e9 53 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bc5 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bc5:	6a 00                	push   $0x0
  pushl $16
c0102bc7:	6a 10                	push   $0x10
  jmp __alltraps
c0102bc9:	e9 4a ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bce <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bce:	6a 11                	push   $0x11
  jmp __alltraps
c0102bd0:	e9 43 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bd5 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bd5:	6a 00                	push   $0x0
  pushl $18
c0102bd7:	6a 12                	push   $0x12
  jmp __alltraps
c0102bd9:	e9 3a ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bde <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bde:	6a 00                	push   $0x0
  pushl $19
c0102be0:	6a 13                	push   $0x13
  jmp __alltraps
c0102be2:	e9 31 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102be7 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102be7:	6a 00                	push   $0x0
  pushl $20
c0102be9:	6a 14                	push   $0x14
  jmp __alltraps
c0102beb:	e9 28 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bf0 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bf0:	6a 00                	push   $0x0
  pushl $21
c0102bf2:	6a 15                	push   $0x15
  jmp __alltraps
c0102bf4:	e9 1f ff ff ff       	jmp    c0102b18 <__alltraps>

c0102bf9 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bf9:	6a 00                	push   $0x0
  pushl $22
c0102bfb:	6a 16                	push   $0x16
  jmp __alltraps
c0102bfd:	e9 16 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102c02 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c02:	6a 00                	push   $0x0
  pushl $23
c0102c04:	6a 17                	push   $0x17
  jmp __alltraps
c0102c06:	e9 0d ff ff ff       	jmp    c0102b18 <__alltraps>

c0102c0b <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c0b:	6a 00                	push   $0x0
  pushl $24
c0102c0d:	6a 18                	push   $0x18
  jmp __alltraps
c0102c0f:	e9 04 ff ff ff       	jmp    c0102b18 <__alltraps>

c0102c14 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c14:	6a 00                	push   $0x0
  pushl $25
c0102c16:	6a 19                	push   $0x19
  jmp __alltraps
c0102c18:	e9 fb fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c1d <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c1d:	6a 00                	push   $0x0
  pushl $26
c0102c1f:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c21:	e9 f2 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c26 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c26:	6a 00                	push   $0x0
  pushl $27
c0102c28:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c2a:	e9 e9 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c2f <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c2f:	6a 00                	push   $0x0
  pushl $28
c0102c31:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c33:	e9 e0 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c38 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c38:	6a 00                	push   $0x0
  pushl $29
c0102c3a:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c3c:	e9 d7 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c41 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c41:	6a 00                	push   $0x0
  pushl $30
c0102c43:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c45:	e9 ce fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c4a <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c4a:	6a 00                	push   $0x0
  pushl $31
c0102c4c:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c4e:	e9 c5 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c53 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c53:	6a 00                	push   $0x0
  pushl $32
c0102c55:	6a 20                	push   $0x20
  jmp __alltraps
c0102c57:	e9 bc fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c5c <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c5c:	6a 00                	push   $0x0
  pushl $33
c0102c5e:	6a 21                	push   $0x21
  jmp __alltraps
c0102c60:	e9 b3 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c65 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c65:	6a 00                	push   $0x0
  pushl $34
c0102c67:	6a 22                	push   $0x22
  jmp __alltraps
c0102c69:	e9 aa fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c6e <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c6e:	6a 00                	push   $0x0
  pushl $35
c0102c70:	6a 23                	push   $0x23
  jmp __alltraps
c0102c72:	e9 a1 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c77 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c77:	6a 00                	push   $0x0
  pushl $36
c0102c79:	6a 24                	push   $0x24
  jmp __alltraps
c0102c7b:	e9 98 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c80 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c80:	6a 00                	push   $0x0
  pushl $37
c0102c82:	6a 25                	push   $0x25
  jmp __alltraps
c0102c84:	e9 8f fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c89 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c89:	6a 00                	push   $0x0
  pushl $38
c0102c8b:	6a 26                	push   $0x26
  jmp __alltraps
c0102c8d:	e9 86 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c92 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c92:	6a 00                	push   $0x0
  pushl $39
c0102c94:	6a 27                	push   $0x27
  jmp __alltraps
c0102c96:	e9 7d fe ff ff       	jmp    c0102b18 <__alltraps>

c0102c9b <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c9b:	6a 00                	push   $0x0
  pushl $40
c0102c9d:	6a 28                	push   $0x28
  jmp __alltraps
c0102c9f:	e9 74 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102ca4 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102ca4:	6a 00                	push   $0x0
  pushl $41
c0102ca6:	6a 29                	push   $0x29
  jmp __alltraps
c0102ca8:	e9 6b fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cad <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cad:	6a 00                	push   $0x0
  pushl $42
c0102caf:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cb1:	e9 62 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cb6 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cb6:	6a 00                	push   $0x0
  pushl $43
c0102cb8:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cba:	e9 59 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cbf <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cbf:	6a 00                	push   $0x0
  pushl $44
c0102cc1:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cc3:	e9 50 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cc8 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cc8:	6a 00                	push   $0x0
  pushl $45
c0102cca:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102ccc:	e9 47 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cd1 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cd1:	6a 00                	push   $0x0
  pushl $46
c0102cd3:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cd5:	e9 3e fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cda <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cda:	6a 00                	push   $0x0
  pushl $47
c0102cdc:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cde:	e9 35 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102ce3 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ce3:	6a 00                	push   $0x0
  pushl $48
c0102ce5:	6a 30                	push   $0x30
  jmp __alltraps
c0102ce7:	e9 2c fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cec <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cec:	6a 00                	push   $0x0
  pushl $49
c0102cee:	6a 31                	push   $0x31
  jmp __alltraps
c0102cf0:	e9 23 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cf5 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cf5:	6a 00                	push   $0x0
  pushl $50
c0102cf7:	6a 32                	push   $0x32
  jmp __alltraps
c0102cf9:	e9 1a fe ff ff       	jmp    c0102b18 <__alltraps>

c0102cfe <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cfe:	6a 00                	push   $0x0
  pushl $51
c0102d00:	6a 33                	push   $0x33
  jmp __alltraps
c0102d02:	e9 11 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102d07 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d07:	6a 00                	push   $0x0
  pushl $52
c0102d09:	6a 34                	push   $0x34
  jmp __alltraps
c0102d0b:	e9 08 fe ff ff       	jmp    c0102b18 <__alltraps>

c0102d10 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d10:	6a 00                	push   $0x0
  pushl $53
c0102d12:	6a 35                	push   $0x35
  jmp __alltraps
c0102d14:	e9 ff fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d19 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d19:	6a 00                	push   $0x0
  pushl $54
c0102d1b:	6a 36                	push   $0x36
  jmp __alltraps
c0102d1d:	e9 f6 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d22 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d22:	6a 00                	push   $0x0
  pushl $55
c0102d24:	6a 37                	push   $0x37
  jmp __alltraps
c0102d26:	e9 ed fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d2b <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d2b:	6a 00                	push   $0x0
  pushl $56
c0102d2d:	6a 38                	push   $0x38
  jmp __alltraps
c0102d2f:	e9 e4 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d34 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d34:	6a 00                	push   $0x0
  pushl $57
c0102d36:	6a 39                	push   $0x39
  jmp __alltraps
c0102d38:	e9 db fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d3d <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d3d:	6a 00                	push   $0x0
  pushl $58
c0102d3f:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d41:	e9 d2 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d46 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d46:	6a 00                	push   $0x0
  pushl $59
c0102d48:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d4a:	e9 c9 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d4f <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d4f:	6a 00                	push   $0x0
  pushl $60
c0102d51:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d53:	e9 c0 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d58 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d58:	6a 00                	push   $0x0
  pushl $61
c0102d5a:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d5c:	e9 b7 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d61 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d61:	6a 00                	push   $0x0
  pushl $62
c0102d63:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d65:	e9 ae fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d6a <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d6a:	6a 00                	push   $0x0
  pushl $63
c0102d6c:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d6e:	e9 a5 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d73 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d73:	6a 00                	push   $0x0
  pushl $64
c0102d75:	6a 40                	push   $0x40
  jmp __alltraps
c0102d77:	e9 9c fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d7c <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d7c:	6a 00                	push   $0x0
  pushl $65
c0102d7e:	6a 41                	push   $0x41
  jmp __alltraps
c0102d80:	e9 93 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d85 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d85:	6a 00                	push   $0x0
  pushl $66
c0102d87:	6a 42                	push   $0x42
  jmp __alltraps
c0102d89:	e9 8a fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d8e <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d8e:	6a 00                	push   $0x0
  pushl $67
c0102d90:	6a 43                	push   $0x43
  jmp __alltraps
c0102d92:	e9 81 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102d97 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d97:	6a 00                	push   $0x0
  pushl $68
c0102d99:	6a 44                	push   $0x44
  jmp __alltraps
c0102d9b:	e9 78 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102da0 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102da0:	6a 00                	push   $0x0
  pushl $69
c0102da2:	6a 45                	push   $0x45
  jmp __alltraps
c0102da4:	e9 6f fd ff ff       	jmp    c0102b18 <__alltraps>

c0102da9 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102da9:	6a 00                	push   $0x0
  pushl $70
c0102dab:	6a 46                	push   $0x46
  jmp __alltraps
c0102dad:	e9 66 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102db2 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102db2:	6a 00                	push   $0x0
  pushl $71
c0102db4:	6a 47                	push   $0x47
  jmp __alltraps
c0102db6:	e9 5d fd ff ff       	jmp    c0102b18 <__alltraps>

c0102dbb <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dbb:	6a 00                	push   $0x0
  pushl $72
c0102dbd:	6a 48                	push   $0x48
  jmp __alltraps
c0102dbf:	e9 54 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102dc4 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dc4:	6a 00                	push   $0x0
  pushl $73
c0102dc6:	6a 49                	push   $0x49
  jmp __alltraps
c0102dc8:	e9 4b fd ff ff       	jmp    c0102b18 <__alltraps>

c0102dcd <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dcd:	6a 00                	push   $0x0
  pushl $74
c0102dcf:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dd1:	e9 42 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102dd6 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dd6:	6a 00                	push   $0x0
  pushl $75
c0102dd8:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dda:	e9 39 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102ddf <vector76>:
.globl vector76
vector76:
  pushl $0
c0102ddf:	6a 00                	push   $0x0
  pushl $76
c0102de1:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102de3:	e9 30 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102de8 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102de8:	6a 00                	push   $0x0
  pushl $77
c0102dea:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dec:	e9 27 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102df1 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102df1:	6a 00                	push   $0x0
  pushl $78
c0102df3:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102df5:	e9 1e fd ff ff       	jmp    c0102b18 <__alltraps>

c0102dfa <vector79>:
.globl vector79
vector79:
  pushl $0
c0102dfa:	6a 00                	push   $0x0
  pushl $79
c0102dfc:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102dfe:	e9 15 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102e03 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e03:	6a 00                	push   $0x0
  pushl $80
c0102e05:	6a 50                	push   $0x50
  jmp __alltraps
c0102e07:	e9 0c fd ff ff       	jmp    c0102b18 <__alltraps>

c0102e0c <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e0c:	6a 00                	push   $0x0
  pushl $81
c0102e0e:	6a 51                	push   $0x51
  jmp __alltraps
c0102e10:	e9 03 fd ff ff       	jmp    c0102b18 <__alltraps>

c0102e15 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e15:	6a 00                	push   $0x0
  pushl $82
c0102e17:	6a 52                	push   $0x52
  jmp __alltraps
c0102e19:	e9 fa fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e1e <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e1e:	6a 00                	push   $0x0
  pushl $83
c0102e20:	6a 53                	push   $0x53
  jmp __alltraps
c0102e22:	e9 f1 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e27 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e27:	6a 00                	push   $0x0
  pushl $84
c0102e29:	6a 54                	push   $0x54
  jmp __alltraps
c0102e2b:	e9 e8 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e30 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e30:	6a 00                	push   $0x0
  pushl $85
c0102e32:	6a 55                	push   $0x55
  jmp __alltraps
c0102e34:	e9 df fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e39 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e39:	6a 00                	push   $0x0
  pushl $86
c0102e3b:	6a 56                	push   $0x56
  jmp __alltraps
c0102e3d:	e9 d6 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e42 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e42:	6a 00                	push   $0x0
  pushl $87
c0102e44:	6a 57                	push   $0x57
  jmp __alltraps
c0102e46:	e9 cd fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e4b <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e4b:	6a 00                	push   $0x0
  pushl $88
c0102e4d:	6a 58                	push   $0x58
  jmp __alltraps
c0102e4f:	e9 c4 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e54 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e54:	6a 00                	push   $0x0
  pushl $89
c0102e56:	6a 59                	push   $0x59
  jmp __alltraps
c0102e58:	e9 bb fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e5d <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e5d:	6a 00                	push   $0x0
  pushl $90
c0102e5f:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e61:	e9 b2 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e66 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e66:	6a 00                	push   $0x0
  pushl $91
c0102e68:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e6a:	e9 a9 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e6f <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e6f:	6a 00                	push   $0x0
  pushl $92
c0102e71:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e73:	e9 a0 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e78 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e78:	6a 00                	push   $0x0
  pushl $93
c0102e7a:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e7c:	e9 97 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e81 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e81:	6a 00                	push   $0x0
  pushl $94
c0102e83:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e85:	e9 8e fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e8a <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e8a:	6a 00                	push   $0x0
  pushl $95
c0102e8c:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e8e:	e9 85 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e93 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e93:	6a 00                	push   $0x0
  pushl $96
c0102e95:	6a 60                	push   $0x60
  jmp __alltraps
c0102e97:	e9 7c fc ff ff       	jmp    c0102b18 <__alltraps>

c0102e9c <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e9c:	6a 00                	push   $0x0
  pushl $97
c0102e9e:	6a 61                	push   $0x61
  jmp __alltraps
c0102ea0:	e9 73 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102ea5 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ea5:	6a 00                	push   $0x0
  pushl $98
c0102ea7:	6a 62                	push   $0x62
  jmp __alltraps
c0102ea9:	e9 6a fc ff ff       	jmp    c0102b18 <__alltraps>

c0102eae <vector99>:
.globl vector99
vector99:
  pushl $0
c0102eae:	6a 00                	push   $0x0
  pushl $99
c0102eb0:	6a 63                	push   $0x63
  jmp __alltraps
c0102eb2:	e9 61 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102eb7 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eb7:	6a 00                	push   $0x0
  pushl $100
c0102eb9:	6a 64                	push   $0x64
  jmp __alltraps
c0102ebb:	e9 58 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102ec0 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ec0:	6a 00                	push   $0x0
  pushl $101
c0102ec2:	6a 65                	push   $0x65
  jmp __alltraps
c0102ec4:	e9 4f fc ff ff       	jmp    c0102b18 <__alltraps>

c0102ec9 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ec9:	6a 00                	push   $0x0
  pushl $102
c0102ecb:	6a 66                	push   $0x66
  jmp __alltraps
c0102ecd:	e9 46 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102ed2 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ed2:	6a 00                	push   $0x0
  pushl $103
c0102ed4:	6a 67                	push   $0x67
  jmp __alltraps
c0102ed6:	e9 3d fc ff ff       	jmp    c0102b18 <__alltraps>

c0102edb <vector104>:
.globl vector104
vector104:
  pushl $0
c0102edb:	6a 00                	push   $0x0
  pushl $104
c0102edd:	6a 68                	push   $0x68
  jmp __alltraps
c0102edf:	e9 34 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102ee4 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ee4:	6a 00                	push   $0x0
  pushl $105
c0102ee6:	6a 69                	push   $0x69
  jmp __alltraps
c0102ee8:	e9 2b fc ff ff       	jmp    c0102b18 <__alltraps>

c0102eed <vector106>:
.globl vector106
vector106:
  pushl $0
c0102eed:	6a 00                	push   $0x0
  pushl $106
c0102eef:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ef1:	e9 22 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102ef6 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ef6:	6a 00                	push   $0x0
  pushl $107
c0102ef8:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102efa:	e9 19 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102eff <vector108>:
.globl vector108
vector108:
  pushl $0
c0102eff:	6a 00                	push   $0x0
  pushl $108
c0102f01:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f03:	e9 10 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102f08 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f08:	6a 00                	push   $0x0
  pushl $109
c0102f0a:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f0c:	e9 07 fc ff ff       	jmp    c0102b18 <__alltraps>

c0102f11 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f11:	6a 00                	push   $0x0
  pushl $110
c0102f13:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f15:	e9 fe fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f1a <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f1a:	6a 00                	push   $0x0
  pushl $111
c0102f1c:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f1e:	e9 f5 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f23 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f23:	6a 00                	push   $0x0
  pushl $112
c0102f25:	6a 70                	push   $0x70
  jmp __alltraps
c0102f27:	e9 ec fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f2c <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f2c:	6a 00                	push   $0x0
  pushl $113
c0102f2e:	6a 71                	push   $0x71
  jmp __alltraps
c0102f30:	e9 e3 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f35 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f35:	6a 00                	push   $0x0
  pushl $114
c0102f37:	6a 72                	push   $0x72
  jmp __alltraps
c0102f39:	e9 da fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f3e <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f3e:	6a 00                	push   $0x0
  pushl $115
c0102f40:	6a 73                	push   $0x73
  jmp __alltraps
c0102f42:	e9 d1 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f47 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f47:	6a 00                	push   $0x0
  pushl $116
c0102f49:	6a 74                	push   $0x74
  jmp __alltraps
c0102f4b:	e9 c8 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f50 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f50:	6a 00                	push   $0x0
  pushl $117
c0102f52:	6a 75                	push   $0x75
  jmp __alltraps
c0102f54:	e9 bf fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f59 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f59:	6a 00                	push   $0x0
  pushl $118
c0102f5b:	6a 76                	push   $0x76
  jmp __alltraps
c0102f5d:	e9 b6 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f62 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f62:	6a 00                	push   $0x0
  pushl $119
c0102f64:	6a 77                	push   $0x77
  jmp __alltraps
c0102f66:	e9 ad fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f6b <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f6b:	6a 00                	push   $0x0
  pushl $120
c0102f6d:	6a 78                	push   $0x78
  jmp __alltraps
c0102f6f:	e9 a4 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f74 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f74:	6a 00                	push   $0x0
  pushl $121
c0102f76:	6a 79                	push   $0x79
  jmp __alltraps
c0102f78:	e9 9b fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f7d <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f7d:	6a 00                	push   $0x0
  pushl $122
c0102f7f:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f81:	e9 92 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f86 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f86:	6a 00                	push   $0x0
  pushl $123
c0102f88:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f8a:	e9 89 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f8f <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f8f:	6a 00                	push   $0x0
  pushl $124
c0102f91:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f93:	e9 80 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102f98 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f98:	6a 00                	push   $0x0
  pushl $125
c0102f9a:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f9c:	e9 77 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fa1 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fa1:	6a 00                	push   $0x0
  pushl $126
c0102fa3:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fa5:	e9 6e fb ff ff       	jmp    c0102b18 <__alltraps>

c0102faa <vector127>:
.globl vector127
vector127:
  pushl $0
c0102faa:	6a 00                	push   $0x0
  pushl $127
c0102fac:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fae:	e9 65 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fb3 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fb3:	6a 00                	push   $0x0
  pushl $128
c0102fb5:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fba:	e9 59 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fbf <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fbf:	6a 00                	push   $0x0
  pushl $129
c0102fc1:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fc6:	e9 4d fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fcb <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fcb:	6a 00                	push   $0x0
  pushl $130
c0102fcd:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fd2:	e9 41 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fd7 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fd7:	6a 00                	push   $0x0
  pushl $131
c0102fd9:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fde:	e9 35 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fe3 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fe3:	6a 00                	push   $0x0
  pushl $132
c0102fe5:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fea:	e9 29 fb ff ff       	jmp    c0102b18 <__alltraps>

c0102fef <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fef:	6a 00                	push   $0x0
  pushl $133
c0102ff1:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ff6:	e9 1d fb ff ff       	jmp    c0102b18 <__alltraps>

c0102ffb <vector134>:
.globl vector134
vector134:
  pushl $0
c0102ffb:	6a 00                	push   $0x0
  pushl $134
c0102ffd:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103002:	e9 11 fb ff ff       	jmp    c0102b18 <__alltraps>

c0103007 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103007:	6a 00                	push   $0x0
  pushl $135
c0103009:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010300e:	e9 05 fb ff ff       	jmp    c0102b18 <__alltraps>

c0103013 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103013:	6a 00                	push   $0x0
  pushl $136
c0103015:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010301a:	e9 f9 fa ff ff       	jmp    c0102b18 <__alltraps>

c010301f <vector137>:
.globl vector137
vector137:
  pushl $0
c010301f:	6a 00                	push   $0x0
  pushl $137
c0103021:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103026:	e9 ed fa ff ff       	jmp    c0102b18 <__alltraps>

c010302b <vector138>:
.globl vector138
vector138:
  pushl $0
c010302b:	6a 00                	push   $0x0
  pushl $138
c010302d:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103032:	e9 e1 fa ff ff       	jmp    c0102b18 <__alltraps>

c0103037 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103037:	6a 00                	push   $0x0
  pushl $139
c0103039:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010303e:	e9 d5 fa ff ff       	jmp    c0102b18 <__alltraps>

c0103043 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103043:	6a 00                	push   $0x0
  pushl $140
c0103045:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010304a:	e9 c9 fa ff ff       	jmp    c0102b18 <__alltraps>

c010304f <vector141>:
.globl vector141
vector141:
  pushl $0
c010304f:	6a 00                	push   $0x0
  pushl $141
c0103051:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103056:	e9 bd fa ff ff       	jmp    c0102b18 <__alltraps>

c010305b <vector142>:
.globl vector142
vector142:
  pushl $0
c010305b:	6a 00                	push   $0x0
  pushl $142
c010305d:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103062:	e9 b1 fa ff ff       	jmp    c0102b18 <__alltraps>

c0103067 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103067:	6a 00                	push   $0x0
  pushl $143
c0103069:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010306e:	e9 a5 fa ff ff       	jmp    c0102b18 <__alltraps>

c0103073 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103073:	6a 00                	push   $0x0
  pushl $144
c0103075:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010307a:	e9 99 fa ff ff       	jmp    c0102b18 <__alltraps>

c010307f <vector145>:
.globl vector145
vector145:
  pushl $0
c010307f:	6a 00                	push   $0x0
  pushl $145
c0103081:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103086:	e9 8d fa ff ff       	jmp    c0102b18 <__alltraps>

c010308b <vector146>:
.globl vector146
vector146:
  pushl $0
c010308b:	6a 00                	push   $0x0
  pushl $146
c010308d:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103092:	e9 81 fa ff ff       	jmp    c0102b18 <__alltraps>

c0103097 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103097:	6a 00                	push   $0x0
  pushl $147
c0103099:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010309e:	e9 75 fa ff ff       	jmp    c0102b18 <__alltraps>

c01030a3 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030a3:	6a 00                	push   $0x0
  pushl $148
c01030a5:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030aa:	e9 69 fa ff ff       	jmp    c0102b18 <__alltraps>

c01030af <vector149>:
.globl vector149
vector149:
  pushl $0
c01030af:	6a 00                	push   $0x0
  pushl $149
c01030b1:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030b6:	e9 5d fa ff ff       	jmp    c0102b18 <__alltraps>

c01030bb <vector150>:
.globl vector150
vector150:
  pushl $0
c01030bb:	6a 00                	push   $0x0
  pushl $150
c01030bd:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030c2:	e9 51 fa ff ff       	jmp    c0102b18 <__alltraps>

c01030c7 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030c7:	6a 00                	push   $0x0
  pushl $151
c01030c9:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030ce:	e9 45 fa ff ff       	jmp    c0102b18 <__alltraps>

c01030d3 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030d3:	6a 00                	push   $0x0
  pushl $152
c01030d5:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030da:	e9 39 fa ff ff       	jmp    c0102b18 <__alltraps>

c01030df <vector153>:
.globl vector153
vector153:
  pushl $0
c01030df:	6a 00                	push   $0x0
  pushl $153
c01030e1:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030e6:	e9 2d fa ff ff       	jmp    c0102b18 <__alltraps>

c01030eb <vector154>:
.globl vector154
vector154:
  pushl $0
c01030eb:	6a 00                	push   $0x0
  pushl $154
c01030ed:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030f2:	e9 21 fa ff ff       	jmp    c0102b18 <__alltraps>

c01030f7 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030f7:	6a 00                	push   $0x0
  pushl $155
c01030f9:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030fe:	e9 15 fa ff ff       	jmp    c0102b18 <__alltraps>

c0103103 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103103:	6a 00                	push   $0x0
  pushl $156
c0103105:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010310a:	e9 09 fa ff ff       	jmp    c0102b18 <__alltraps>

c010310f <vector157>:
.globl vector157
vector157:
  pushl $0
c010310f:	6a 00                	push   $0x0
  pushl $157
c0103111:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103116:	e9 fd f9 ff ff       	jmp    c0102b18 <__alltraps>

c010311b <vector158>:
.globl vector158
vector158:
  pushl $0
c010311b:	6a 00                	push   $0x0
  pushl $158
c010311d:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103122:	e9 f1 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103127 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103127:	6a 00                	push   $0x0
  pushl $159
c0103129:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010312e:	e9 e5 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103133 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103133:	6a 00                	push   $0x0
  pushl $160
c0103135:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010313a:	e9 d9 f9 ff ff       	jmp    c0102b18 <__alltraps>

c010313f <vector161>:
.globl vector161
vector161:
  pushl $0
c010313f:	6a 00                	push   $0x0
  pushl $161
c0103141:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103146:	e9 cd f9 ff ff       	jmp    c0102b18 <__alltraps>

c010314b <vector162>:
.globl vector162
vector162:
  pushl $0
c010314b:	6a 00                	push   $0x0
  pushl $162
c010314d:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103152:	e9 c1 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103157 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103157:	6a 00                	push   $0x0
  pushl $163
c0103159:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010315e:	e9 b5 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103163 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103163:	6a 00                	push   $0x0
  pushl $164
c0103165:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010316a:	e9 a9 f9 ff ff       	jmp    c0102b18 <__alltraps>

c010316f <vector165>:
.globl vector165
vector165:
  pushl $0
c010316f:	6a 00                	push   $0x0
  pushl $165
c0103171:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103176:	e9 9d f9 ff ff       	jmp    c0102b18 <__alltraps>

c010317b <vector166>:
.globl vector166
vector166:
  pushl $0
c010317b:	6a 00                	push   $0x0
  pushl $166
c010317d:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103182:	e9 91 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103187 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103187:	6a 00                	push   $0x0
  pushl $167
c0103189:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010318e:	e9 85 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103193 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103193:	6a 00                	push   $0x0
  pushl $168
c0103195:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010319a:	e9 79 f9 ff ff       	jmp    c0102b18 <__alltraps>

c010319f <vector169>:
.globl vector169
vector169:
  pushl $0
c010319f:	6a 00                	push   $0x0
  pushl $169
c01031a1:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031a6:	e9 6d f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031ab <vector170>:
.globl vector170
vector170:
  pushl $0
c01031ab:	6a 00                	push   $0x0
  pushl $170
c01031ad:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031b2:	e9 61 f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031b7 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031b7:	6a 00                	push   $0x0
  pushl $171
c01031b9:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031be:	e9 55 f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031c3 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031c3:	6a 00                	push   $0x0
  pushl $172
c01031c5:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031ca:	e9 49 f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031cf <vector173>:
.globl vector173
vector173:
  pushl $0
c01031cf:	6a 00                	push   $0x0
  pushl $173
c01031d1:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031d6:	e9 3d f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031db <vector174>:
.globl vector174
vector174:
  pushl $0
c01031db:	6a 00                	push   $0x0
  pushl $174
c01031dd:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031e2:	e9 31 f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031e7 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031e7:	6a 00                	push   $0x0
  pushl $175
c01031e9:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031ee:	e9 25 f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031f3 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031f3:	6a 00                	push   $0x0
  pushl $176
c01031f5:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031fa:	e9 19 f9 ff ff       	jmp    c0102b18 <__alltraps>

c01031ff <vector177>:
.globl vector177
vector177:
  pushl $0
c01031ff:	6a 00                	push   $0x0
  pushl $177
c0103201:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103206:	e9 0d f9 ff ff       	jmp    c0102b18 <__alltraps>

c010320b <vector178>:
.globl vector178
vector178:
  pushl $0
c010320b:	6a 00                	push   $0x0
  pushl $178
c010320d:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103212:	e9 01 f9 ff ff       	jmp    c0102b18 <__alltraps>

c0103217 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103217:	6a 00                	push   $0x0
  pushl $179
c0103219:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010321e:	e9 f5 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103223 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103223:	6a 00                	push   $0x0
  pushl $180
c0103225:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010322a:	e9 e9 f8 ff ff       	jmp    c0102b18 <__alltraps>

c010322f <vector181>:
.globl vector181
vector181:
  pushl $0
c010322f:	6a 00                	push   $0x0
  pushl $181
c0103231:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103236:	e9 dd f8 ff ff       	jmp    c0102b18 <__alltraps>

c010323b <vector182>:
.globl vector182
vector182:
  pushl $0
c010323b:	6a 00                	push   $0x0
  pushl $182
c010323d:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103242:	e9 d1 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103247 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103247:	6a 00                	push   $0x0
  pushl $183
c0103249:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010324e:	e9 c5 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103253 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103253:	6a 00                	push   $0x0
  pushl $184
c0103255:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010325a:	e9 b9 f8 ff ff       	jmp    c0102b18 <__alltraps>

c010325f <vector185>:
.globl vector185
vector185:
  pushl $0
c010325f:	6a 00                	push   $0x0
  pushl $185
c0103261:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103266:	e9 ad f8 ff ff       	jmp    c0102b18 <__alltraps>

c010326b <vector186>:
.globl vector186
vector186:
  pushl $0
c010326b:	6a 00                	push   $0x0
  pushl $186
c010326d:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103272:	e9 a1 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103277 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103277:	6a 00                	push   $0x0
  pushl $187
c0103279:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010327e:	e9 95 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103283 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103283:	6a 00                	push   $0x0
  pushl $188
c0103285:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010328a:	e9 89 f8 ff ff       	jmp    c0102b18 <__alltraps>

c010328f <vector189>:
.globl vector189
vector189:
  pushl $0
c010328f:	6a 00                	push   $0x0
  pushl $189
c0103291:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103296:	e9 7d f8 ff ff       	jmp    c0102b18 <__alltraps>

c010329b <vector190>:
.globl vector190
vector190:
  pushl $0
c010329b:	6a 00                	push   $0x0
  pushl $190
c010329d:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032a2:	e9 71 f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032a7 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032a7:	6a 00                	push   $0x0
  pushl $191
c01032a9:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032ae:	e9 65 f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032b3 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032b3:	6a 00                	push   $0x0
  pushl $192
c01032b5:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032ba:	e9 59 f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032bf <vector193>:
.globl vector193
vector193:
  pushl $0
c01032bf:	6a 00                	push   $0x0
  pushl $193
c01032c1:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032c6:	e9 4d f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032cb <vector194>:
.globl vector194
vector194:
  pushl $0
c01032cb:	6a 00                	push   $0x0
  pushl $194
c01032cd:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032d2:	e9 41 f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032d7 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032d7:	6a 00                	push   $0x0
  pushl $195
c01032d9:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032de:	e9 35 f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032e3 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032e3:	6a 00                	push   $0x0
  pushl $196
c01032e5:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032ea:	e9 29 f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032ef <vector197>:
.globl vector197
vector197:
  pushl $0
c01032ef:	6a 00                	push   $0x0
  pushl $197
c01032f1:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032f6:	e9 1d f8 ff ff       	jmp    c0102b18 <__alltraps>

c01032fb <vector198>:
.globl vector198
vector198:
  pushl $0
c01032fb:	6a 00                	push   $0x0
  pushl $198
c01032fd:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103302:	e9 11 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103307 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103307:	6a 00                	push   $0x0
  pushl $199
c0103309:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010330e:	e9 05 f8 ff ff       	jmp    c0102b18 <__alltraps>

c0103313 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103313:	6a 00                	push   $0x0
  pushl $200
c0103315:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010331a:	e9 f9 f7 ff ff       	jmp    c0102b18 <__alltraps>

c010331f <vector201>:
.globl vector201
vector201:
  pushl $0
c010331f:	6a 00                	push   $0x0
  pushl $201
c0103321:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103326:	e9 ed f7 ff ff       	jmp    c0102b18 <__alltraps>

c010332b <vector202>:
.globl vector202
vector202:
  pushl $0
c010332b:	6a 00                	push   $0x0
  pushl $202
c010332d:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103332:	e9 e1 f7 ff ff       	jmp    c0102b18 <__alltraps>

c0103337 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103337:	6a 00                	push   $0x0
  pushl $203
c0103339:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010333e:	e9 d5 f7 ff ff       	jmp    c0102b18 <__alltraps>

c0103343 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103343:	6a 00                	push   $0x0
  pushl $204
c0103345:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010334a:	e9 c9 f7 ff ff       	jmp    c0102b18 <__alltraps>

c010334f <vector205>:
.globl vector205
vector205:
  pushl $0
c010334f:	6a 00                	push   $0x0
  pushl $205
c0103351:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103356:	e9 bd f7 ff ff       	jmp    c0102b18 <__alltraps>

c010335b <vector206>:
.globl vector206
vector206:
  pushl $0
c010335b:	6a 00                	push   $0x0
  pushl $206
c010335d:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103362:	e9 b1 f7 ff ff       	jmp    c0102b18 <__alltraps>

c0103367 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103367:	6a 00                	push   $0x0
  pushl $207
c0103369:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010336e:	e9 a5 f7 ff ff       	jmp    c0102b18 <__alltraps>

c0103373 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103373:	6a 00                	push   $0x0
  pushl $208
c0103375:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010337a:	e9 99 f7 ff ff       	jmp    c0102b18 <__alltraps>

c010337f <vector209>:
.globl vector209
vector209:
  pushl $0
c010337f:	6a 00                	push   $0x0
  pushl $209
c0103381:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103386:	e9 8d f7 ff ff       	jmp    c0102b18 <__alltraps>

c010338b <vector210>:
.globl vector210
vector210:
  pushl $0
c010338b:	6a 00                	push   $0x0
  pushl $210
c010338d:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103392:	e9 81 f7 ff ff       	jmp    c0102b18 <__alltraps>

c0103397 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103397:	6a 00                	push   $0x0
  pushl $211
c0103399:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010339e:	e9 75 f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033a3 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033a3:	6a 00                	push   $0x0
  pushl $212
c01033a5:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033aa:	e9 69 f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033af <vector213>:
.globl vector213
vector213:
  pushl $0
c01033af:	6a 00                	push   $0x0
  pushl $213
c01033b1:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033b6:	e9 5d f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033bb <vector214>:
.globl vector214
vector214:
  pushl $0
c01033bb:	6a 00                	push   $0x0
  pushl $214
c01033bd:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033c2:	e9 51 f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033c7 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033c7:	6a 00                	push   $0x0
  pushl $215
c01033c9:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033ce:	e9 45 f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033d3 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033d3:	6a 00                	push   $0x0
  pushl $216
c01033d5:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033da:	e9 39 f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033df <vector217>:
.globl vector217
vector217:
  pushl $0
c01033df:	6a 00                	push   $0x0
  pushl $217
c01033e1:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033e6:	e9 2d f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033eb <vector218>:
.globl vector218
vector218:
  pushl $0
c01033eb:	6a 00                	push   $0x0
  pushl $218
c01033ed:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033f2:	e9 21 f7 ff ff       	jmp    c0102b18 <__alltraps>

c01033f7 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033f7:	6a 00                	push   $0x0
  pushl $219
c01033f9:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033fe:	e9 15 f7 ff ff       	jmp    c0102b18 <__alltraps>

c0103403 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103403:	6a 00                	push   $0x0
  pushl $220
c0103405:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010340a:	e9 09 f7 ff ff       	jmp    c0102b18 <__alltraps>

c010340f <vector221>:
.globl vector221
vector221:
  pushl $0
c010340f:	6a 00                	push   $0x0
  pushl $221
c0103411:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103416:	e9 fd f6 ff ff       	jmp    c0102b18 <__alltraps>

c010341b <vector222>:
.globl vector222
vector222:
  pushl $0
c010341b:	6a 00                	push   $0x0
  pushl $222
c010341d:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103422:	e9 f1 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103427 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103427:	6a 00                	push   $0x0
  pushl $223
c0103429:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010342e:	e9 e5 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103433 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103433:	6a 00                	push   $0x0
  pushl $224
c0103435:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010343a:	e9 d9 f6 ff ff       	jmp    c0102b18 <__alltraps>

c010343f <vector225>:
.globl vector225
vector225:
  pushl $0
c010343f:	6a 00                	push   $0x0
  pushl $225
c0103441:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103446:	e9 cd f6 ff ff       	jmp    c0102b18 <__alltraps>

c010344b <vector226>:
.globl vector226
vector226:
  pushl $0
c010344b:	6a 00                	push   $0x0
  pushl $226
c010344d:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103452:	e9 c1 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103457 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103457:	6a 00                	push   $0x0
  pushl $227
c0103459:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010345e:	e9 b5 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103463 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103463:	6a 00                	push   $0x0
  pushl $228
c0103465:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010346a:	e9 a9 f6 ff ff       	jmp    c0102b18 <__alltraps>

c010346f <vector229>:
.globl vector229
vector229:
  pushl $0
c010346f:	6a 00                	push   $0x0
  pushl $229
c0103471:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103476:	e9 9d f6 ff ff       	jmp    c0102b18 <__alltraps>

c010347b <vector230>:
.globl vector230
vector230:
  pushl $0
c010347b:	6a 00                	push   $0x0
  pushl $230
c010347d:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103482:	e9 91 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103487 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103487:	6a 00                	push   $0x0
  pushl $231
c0103489:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010348e:	e9 85 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103493 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103493:	6a 00                	push   $0x0
  pushl $232
c0103495:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010349a:	e9 79 f6 ff ff       	jmp    c0102b18 <__alltraps>

c010349f <vector233>:
.globl vector233
vector233:
  pushl $0
c010349f:	6a 00                	push   $0x0
  pushl $233
c01034a1:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034a6:	e9 6d f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034ab <vector234>:
.globl vector234
vector234:
  pushl $0
c01034ab:	6a 00                	push   $0x0
  pushl $234
c01034ad:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034b2:	e9 61 f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034b7 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034b7:	6a 00                	push   $0x0
  pushl $235
c01034b9:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034be:	e9 55 f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034c3 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034c3:	6a 00                	push   $0x0
  pushl $236
c01034c5:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034ca:	e9 49 f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034cf <vector237>:
.globl vector237
vector237:
  pushl $0
c01034cf:	6a 00                	push   $0x0
  pushl $237
c01034d1:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034d6:	e9 3d f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034db <vector238>:
.globl vector238
vector238:
  pushl $0
c01034db:	6a 00                	push   $0x0
  pushl $238
c01034dd:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034e2:	e9 31 f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034e7 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034e7:	6a 00                	push   $0x0
  pushl $239
c01034e9:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034ee:	e9 25 f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034f3 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034f3:	6a 00                	push   $0x0
  pushl $240
c01034f5:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034fa:	e9 19 f6 ff ff       	jmp    c0102b18 <__alltraps>

c01034ff <vector241>:
.globl vector241
vector241:
  pushl $0
c01034ff:	6a 00                	push   $0x0
  pushl $241
c0103501:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103506:	e9 0d f6 ff ff       	jmp    c0102b18 <__alltraps>

c010350b <vector242>:
.globl vector242
vector242:
  pushl $0
c010350b:	6a 00                	push   $0x0
  pushl $242
c010350d:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103512:	e9 01 f6 ff ff       	jmp    c0102b18 <__alltraps>

c0103517 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103517:	6a 00                	push   $0x0
  pushl $243
c0103519:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010351e:	e9 f5 f5 ff ff       	jmp    c0102b18 <__alltraps>

c0103523 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103523:	6a 00                	push   $0x0
  pushl $244
c0103525:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010352a:	e9 e9 f5 ff ff       	jmp    c0102b18 <__alltraps>

c010352f <vector245>:
.globl vector245
vector245:
  pushl $0
c010352f:	6a 00                	push   $0x0
  pushl $245
c0103531:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103536:	e9 dd f5 ff ff       	jmp    c0102b18 <__alltraps>

c010353b <vector246>:
.globl vector246
vector246:
  pushl $0
c010353b:	6a 00                	push   $0x0
  pushl $246
c010353d:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103542:	e9 d1 f5 ff ff       	jmp    c0102b18 <__alltraps>

c0103547 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103547:	6a 00                	push   $0x0
  pushl $247
c0103549:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010354e:	e9 c5 f5 ff ff       	jmp    c0102b18 <__alltraps>

c0103553 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103553:	6a 00                	push   $0x0
  pushl $248
c0103555:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010355a:	e9 b9 f5 ff ff       	jmp    c0102b18 <__alltraps>

c010355f <vector249>:
.globl vector249
vector249:
  pushl $0
c010355f:	6a 00                	push   $0x0
  pushl $249
c0103561:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103566:	e9 ad f5 ff ff       	jmp    c0102b18 <__alltraps>

c010356b <vector250>:
.globl vector250
vector250:
  pushl $0
c010356b:	6a 00                	push   $0x0
  pushl $250
c010356d:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103572:	e9 a1 f5 ff ff       	jmp    c0102b18 <__alltraps>

c0103577 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103577:	6a 00                	push   $0x0
  pushl $251
c0103579:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010357e:	e9 95 f5 ff ff       	jmp    c0102b18 <__alltraps>

c0103583 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103583:	6a 00                	push   $0x0
  pushl $252
c0103585:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010358a:	e9 89 f5 ff ff       	jmp    c0102b18 <__alltraps>

c010358f <vector253>:
.globl vector253
vector253:
  pushl $0
c010358f:	6a 00                	push   $0x0
  pushl $253
c0103591:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103596:	e9 7d f5 ff ff       	jmp    c0102b18 <__alltraps>

c010359b <vector254>:
.globl vector254
vector254:
  pushl $0
c010359b:	6a 00                	push   $0x0
  pushl $254
c010359d:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035a2:	e9 71 f5 ff ff       	jmp    c0102b18 <__alltraps>

c01035a7 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035a7:	6a 00                	push   $0x0
  pushl $255
c01035a9:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035ae:	e9 65 f5 ff ff       	jmp    c0102b18 <__alltraps>

c01035b3 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035b3:	55                   	push   %ebp
c01035b4:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035b6:	8b 55 08             	mov    0x8(%ebp),%edx
c01035b9:	a1 28 40 15 c0       	mov    0xc0154028,%eax
c01035be:	29 c2                	sub    %eax,%edx
c01035c0:	89 d0                	mov    %edx,%eax
c01035c2:	c1 f8 02             	sar    $0x2,%eax
c01035c5:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01035cb:	5d                   	pop    %ebp
c01035cc:	c3                   	ret    

c01035cd <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035cd:	55                   	push   %ebp
c01035ce:	89 e5                	mov    %esp,%ebp
c01035d0:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d6:	89 04 24             	mov    %eax,(%esp)
c01035d9:	e8 d5 ff ff ff       	call   c01035b3 <page2ppn>
c01035de:	c1 e0 0c             	shl    $0xc,%eax
}
c01035e1:	c9                   	leave  
c01035e2:	c3                   	ret    

c01035e3 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035e3:	55                   	push   %ebp
c01035e4:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e9:	8b 00                	mov    (%eax),%eax
}
c01035eb:	5d                   	pop    %ebp
c01035ec:	c3                   	ret    

c01035ed <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035ed:	55                   	push   %ebp
c01035ee:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01035f3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035f6:	89 10                	mov    %edx,(%eax)
}
c01035f8:	5d                   	pop    %ebp
c01035f9:	c3                   	ret    

c01035fa <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035fa:	55                   	push   %ebp
c01035fb:	89 e5                	mov    %esp,%ebp
c01035fd:	83 ec 10             	sub    $0x10,%esp
c0103600:	c7 45 fc 14 40 15 c0 	movl   $0xc0154014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103607:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010360a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010360d:	89 50 04             	mov    %edx,0x4(%eax)
c0103610:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103613:	8b 50 04             	mov    0x4(%eax),%edx
c0103616:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103619:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c010361b:	c7 05 1c 40 15 c0 00 	movl   $0x0,0xc015401c
c0103622:	00 00 00 
}
c0103625:	c9                   	leave  
c0103626:	c3                   	ret    

c0103627 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103627:	55                   	push   %ebp
c0103628:	89 e5                	mov    %esp,%ebp
c010362a:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c010362d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103631:	75 24                	jne    c0103657 <default_init_memmap+0x30>
c0103633:	c7 44 24 0c f0 61 11 	movl   $0xc01161f0,0xc(%esp)
c010363a:	c0 
c010363b:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103642:	c0 
c0103643:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010364a:	00 
c010364b:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103652:	e8 71 d8 ff ff       	call   c0100ec8 <__panic>
    struct Page *p = base;
c0103657:	8b 45 08             	mov    0x8(%ebp),%eax
c010365a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010365d:	e9 dc 00 00 00       	jmp    c010373e <default_init_memmap+0x117>
        assert(PageReserved(p));
c0103662:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103665:	83 c0 04             	add    $0x4,%eax
c0103668:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010366f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103675:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103678:	0f a3 10             	bt     %edx,(%eax)
c010367b:	19 c0                	sbb    %eax,%eax
c010367d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103680:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103684:	0f 95 c0             	setne  %al
c0103687:	0f b6 c0             	movzbl %al,%eax
c010368a:	85 c0                	test   %eax,%eax
c010368c:	75 24                	jne    c01036b2 <default_init_memmap+0x8b>
c010368e:	c7 44 24 0c 21 62 11 	movl   $0xc0116221,0xc(%esp)
c0103695:	c0 
c0103696:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010369d:	c0 
c010369e:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01036a5:	00 
c01036a6:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01036ad:	e8 16 d8 ff ff       	call   c0100ec8 <__panic>
        p->flags = 0;
c01036b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01036bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036bf:	83 c0 04             	add    $0x4,%eax
c01036c2:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036d2:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036e6:	00 
c01036e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ea:	89 04 24             	mov    %eax,(%esp)
c01036ed:	e8 fb fe ff ff       	call   c01035ed <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01036f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f5:	83 c0 10             	add    $0x10,%eax
c01036f8:	c7 45 dc 14 40 15 c0 	movl   $0xc0154014,-0x24(%ebp)
c01036ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103702:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103705:	8b 00                	mov    (%eax),%eax
c0103707:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010370a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010370d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103710:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103713:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103716:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103719:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010371c:	89 10                	mov    %edx,(%eax)
c010371e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103721:	8b 10                	mov    (%eax),%edx
c0103723:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103726:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103729:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010372c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010372f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103732:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103735:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103738:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010373a:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c010373e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103741:	89 d0                	mov    %edx,%eax
c0103743:	c1 e0 03             	shl    $0x3,%eax
c0103746:	01 d0                	add    %edx,%eax
c0103748:	c1 e0 02             	shl    $0x2,%eax
c010374b:	89 c2                	mov    %eax,%edx
c010374d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103750:	01 d0                	add    %edx,%eax
c0103752:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103755:	0f 85 07 ff ff ff    	jne    c0103662 <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c010375b:	8b 15 1c 40 15 c0    	mov    0xc015401c,%edx
c0103761:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103764:	01 d0                	add    %edx,%eax
c0103766:	a3 1c 40 15 c0       	mov    %eax,0xc015401c
    //first block
    base->property = n;
c010376b:	8b 45 08             	mov    0x8(%ebp),%eax
c010376e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103771:	89 50 08             	mov    %edx,0x8(%eax)
}
c0103774:	c9                   	leave  
c0103775:	c3                   	ret    

c0103776 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103776:	55                   	push   %ebp
c0103777:	89 e5                	mov    %esp,%ebp
c0103779:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c010377c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103780:	75 24                	jne    c01037a6 <default_alloc_pages+0x30>
c0103782:	c7 44 24 0c f0 61 11 	movl   $0xc01161f0,0xc(%esp)
c0103789:	c0 
c010378a:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103791:	c0 
c0103792:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0103799:	00 
c010379a:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01037a1:	e8 22 d7 ff ff       	call   c0100ec8 <__panic>
    if (n > nr_free) {
c01037a6:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c01037ab:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037ae:	73 0a                	jae    c01037ba <default_alloc_pages+0x44>
        return NULL;
c01037b0:	b8 00 00 00 00       	mov    $0x0,%eax
c01037b5:	e9 37 01 00 00       	jmp    c01038f1 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c01037ba:	c7 45 f4 14 40 15 c0 	movl   $0xc0154014,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01037c1:	e9 0a 01 00 00       	jmp    c01038d0 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c9:	83 e8 10             	sub    $0x10,%eax
c01037cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d2:	8b 40 08             	mov    0x8(%eax),%eax
c01037d5:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037d8:	0f 82 f2 00 00 00    	jb     c01038d0 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c01037de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037e5:	eb 7c                	jmp    c0103863 <default_alloc_pages+0xed>
c01037e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037f0:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037f9:	83 e8 10             	sub    $0x10,%eax
c01037fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c01037ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103802:	83 c0 04             	add    $0x4,%eax
c0103805:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010380c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010380f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103812:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103815:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0103818:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010381b:	83 c0 04             	add    $0x4,%eax
c010381e:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103825:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103828:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010382b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010382e:	0f b3 10             	btr    %edx,(%eax)
c0103831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103834:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103837:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010383a:	8b 40 04             	mov    0x4(%eax),%eax
c010383d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103840:	8b 12                	mov    (%edx),%edx
c0103842:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103845:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103848:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010384b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010384e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103851:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103854:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103857:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0103859:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010385c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c010385f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103863:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103866:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103869:	0f 82 78 ff ff ff    	jb     c01037e7 <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c010386f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103872:	8b 40 08             	mov    0x8(%eax),%eax
c0103875:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103878:	76 12                	jbe    c010388c <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c010387a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010387d:	8d 50 f0             	lea    -0x10(%eax),%edx
c0103880:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103883:	8b 40 08             	mov    0x8(%eax),%eax
c0103886:	2b 45 08             	sub    0x8(%ebp),%eax
c0103889:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c010388c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010388f:	83 c0 04             	add    $0x4,%eax
c0103892:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103899:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010389c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010389f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01038a2:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c01038a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038a8:	83 c0 04             	add    $0x4,%eax
c01038ab:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c01038b2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038b8:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038bb:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c01038be:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c01038c3:	2b 45 08             	sub    0x8(%ebp),%eax
c01038c6:	a3 1c 40 15 c0       	mov    %eax,0xc015401c
        return p;
c01038cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038ce:	eb 21                	jmp    c01038f1 <default_alloc_pages+0x17b>
c01038d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038d3:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038d9:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038df:	81 7d f4 14 40 15 c0 	cmpl   $0xc0154014,-0xc(%ebp)
c01038e6:	0f 85 da fe ff ff    	jne    c01037c6 <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c01038ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038f1:	c9                   	leave  
c01038f2:	c3                   	ret    

c01038f3 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038f3:	55                   	push   %ebp
c01038f4:	89 e5                	mov    %esp,%ebp
c01038f6:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01038f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038fd:	75 24                	jne    c0103923 <default_free_pages+0x30>
c01038ff:	c7 44 24 0c f0 61 11 	movl   $0xc01161f0,0xc(%esp)
c0103906:	c0 
c0103907:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010390e:	c0 
c010390f:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0103916:	00 
c0103917:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010391e:	e8 a5 d5 ff ff       	call   c0100ec8 <__panic>
    assert(PageReserved(base));
c0103923:	8b 45 08             	mov    0x8(%ebp),%eax
c0103926:	83 c0 04             	add    $0x4,%eax
c0103929:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103930:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103933:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103936:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103939:	0f a3 10             	bt     %edx,(%eax)
c010393c:	19 c0                	sbb    %eax,%eax
c010393e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103941:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103945:	0f 95 c0             	setne  %al
c0103948:	0f b6 c0             	movzbl %al,%eax
c010394b:	85 c0                	test   %eax,%eax
c010394d:	75 24                	jne    c0103973 <default_free_pages+0x80>
c010394f:	c7 44 24 0c 31 62 11 	movl   $0xc0116231,0xc(%esp)
c0103956:	c0 
c0103957:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010395e:	c0 
c010395f:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0103966:	00 
c0103967:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010396e:	e8 55 d5 ff ff       	call   c0100ec8 <__panic>

    list_entry_t *le = &free_list;
c0103973:	c7 45 f4 14 40 15 c0 	movl   $0xc0154014,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c010397a:	eb 13                	jmp    c010398f <default_free_pages+0x9c>
      p = le2page(le, page_link);
c010397c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010397f:	83 e8 10             	sub    $0x10,%eax
c0103982:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0103985:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103988:	3b 45 08             	cmp    0x8(%ebp),%eax
c010398b:	76 02                	jbe    c010398f <default_free_pages+0x9c>
        break;
c010398d:	eb 18                	jmp    c01039a7 <default_free_pages+0xb4>
c010398f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103992:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103995:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103998:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c010399b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010399e:	81 7d f4 14 40 15 c0 	cmpl   $0xc0154014,-0xc(%ebp)
c01039a5:	75 d5                	jne    c010397c <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01039aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039ad:	eb 4b                	jmp    c01039fa <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c01039af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b2:	8d 50 10             	lea    0x10(%eax),%edx
c01039b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01039bb:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039c1:	8b 00                	mov    (%eax),%eax
c01039c3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039c6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039d5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039d8:	89 10                	mov    %edx,(%eax)
c01039da:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039dd:	8b 10                	mov    (%eax),%edx
c01039df:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039e2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039e5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039e8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039eb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039f1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039f4:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039f6:	83 45 f0 24          	addl   $0x24,-0x10(%ebp)
c01039fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039fd:	89 d0                	mov    %edx,%eax
c01039ff:	c1 e0 03             	shl    $0x3,%eax
c0103a02:	01 d0                	add    %edx,%eax
c0103a04:	c1 e0 02             	shl    $0x2,%eax
c0103a07:	89 c2                	mov    %eax,%edx
c0103a09:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0c:	01 d0                	add    %edx,%eax
c0103a0e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a11:	77 9c                	ja     c01039af <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0103a13:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a16:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0103a1d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a24:	00 
c0103a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a28:	89 04 24             	mov    %eax,(%esp)
c0103a2b:	e8 bd fb ff ff       	call   c01035ed <set_page_ref>
    ClearPageProperty(base);
c0103a30:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a33:	83 c0 04             	add    $0x4,%eax
c0103a36:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a3d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a40:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a43:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a46:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a49:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4c:	83 c0 04             	add    $0x4,%eax
c0103a4f:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a56:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a59:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a5c:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a5f:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a62:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a68:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0103a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a6e:	83 e8 10             	sub    $0x10,%eax
c0103a71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a74:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a77:	89 d0                	mov    %edx,%eax
c0103a79:	c1 e0 03             	shl    $0x3,%eax
c0103a7c:	01 d0                	add    %edx,%eax
c0103a7e:	c1 e0 02             	shl    $0x2,%eax
c0103a81:	89 c2                	mov    %eax,%edx
c0103a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a86:	01 d0                	add    %edx,%eax
c0103a88:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a8b:	75 1e                	jne    c0103aab <default_free_pages+0x1b8>
      base->property += p->property;
c0103a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a90:	8b 50 08             	mov    0x8(%eax),%edx
c0103a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a96:	8b 40 08             	mov    0x8(%eax),%eax
c0103a99:	01 c2                	add    %eax,%edx
c0103a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a9e:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103aa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103aa4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0103aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aae:	83 c0 10             	add    $0x10,%eax
c0103ab1:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103ab4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103ab7:	8b 00                	mov    (%eax),%eax
c0103ab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103abf:	83 e8 10             	sub    $0x10,%eax
c0103ac2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103ac5:	81 7d f4 14 40 15 c0 	cmpl   $0xc0154014,-0xc(%ebp)
c0103acc:	74 57                	je     c0103b25 <default_free_pages+0x232>
c0103ace:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad1:	83 e8 24             	sub    $0x24,%eax
c0103ad4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ad7:	75 4c                	jne    c0103b25 <default_free_pages+0x232>
      while(le!=&free_list){
c0103ad9:	eb 41                	jmp    c0103b1c <default_free_pages+0x229>
        if(p->property){
c0103adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ade:	8b 40 08             	mov    0x8(%eax),%eax
c0103ae1:	85 c0                	test   %eax,%eax
c0103ae3:	74 20                	je     c0103b05 <default_free_pages+0x212>
          p->property += base->property;
c0103ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae8:	8b 50 08             	mov    0x8(%eax),%edx
c0103aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aee:	8b 40 08             	mov    0x8(%eax),%eax
c0103af1:	01 c2                	add    %eax,%edx
c0103af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103af6:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103af9:	8b 45 08             	mov    0x8(%ebp),%eax
c0103afc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103b03:	eb 20                	jmp    c0103b25 <default_free_pages+0x232>
c0103b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b08:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103b0b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103b0e:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103b10:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b16:	83 e8 10             	sub    $0x10,%eax
c0103b19:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103b1c:	81 7d f4 14 40 15 c0 	cmpl   $0xc0154014,-0xc(%ebp)
c0103b23:	75 b6                	jne    c0103adb <default_free_pages+0x1e8>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103b25:	8b 15 1c 40 15 c0    	mov    0xc015401c,%edx
c0103b2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b2e:	01 d0                	add    %edx,%eax
c0103b30:	a3 1c 40 15 c0       	mov    %eax,0xc015401c
    return ;
c0103b35:	90                   	nop
}
c0103b36:	c9                   	leave  
c0103b37:	c3                   	ret    

c0103b38 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b38:	55                   	push   %ebp
c0103b39:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b3b:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
}
c0103b40:	5d                   	pop    %ebp
c0103b41:	c3                   	ret    

c0103b42 <basic_check>:

static void
basic_check(void) {
c0103b42:	55                   	push   %ebp
c0103b43:	89 e5                	mov    %esp,%ebp
c0103b45:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b52:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b58:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b5b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b62:	e8 15 16 00 00       	call   c010517c <alloc_pages>
c0103b67:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b6e:	75 24                	jne    c0103b94 <basic_check+0x52>
c0103b70:	c7 44 24 0c 44 62 11 	movl   $0xc0116244,0xc(%esp)
c0103b77:	c0 
c0103b78:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103b7f:	c0 
c0103b80:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103b87:	00 
c0103b88:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103b8f:	e8 34 d3 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b94:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b9b:	e8 dc 15 00 00       	call   c010517c <alloc_pages>
c0103ba0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ba3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103ba7:	75 24                	jne    c0103bcd <basic_check+0x8b>
c0103ba9:	c7 44 24 0c 60 62 11 	movl   $0xc0116260,0xc(%esp)
c0103bb0:	c0 
c0103bb1:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103bb8:	c0 
c0103bb9:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103bc0:	00 
c0103bc1:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103bc8:	e8 fb d2 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103bcd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bd4:	e8 a3 15 00 00       	call   c010517c <alloc_pages>
c0103bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103be0:	75 24                	jne    c0103c06 <basic_check+0xc4>
c0103be2:	c7 44 24 0c 7c 62 11 	movl   $0xc011627c,0xc(%esp)
c0103be9:	c0 
c0103bea:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103bf1:	c0 
c0103bf2:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103bf9:	00 
c0103bfa:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103c01:	e8 c2 d2 ff ff       	call   c0100ec8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103c06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c0c:	74 10                	je     c0103c1e <basic_check+0xdc>
c0103c0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c11:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c14:	74 08                	je     c0103c1e <basic_check+0xdc>
c0103c16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c1c:	75 24                	jne    c0103c42 <basic_check+0x100>
c0103c1e:	c7 44 24 0c 98 62 11 	movl   $0xc0116298,0xc(%esp)
c0103c25:	c0 
c0103c26:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103c2d:	c0 
c0103c2e:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103c35:	00 
c0103c36:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103c3d:	e8 86 d2 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c45:	89 04 24             	mov    %eax,(%esp)
c0103c48:	e8 96 f9 ff ff       	call   c01035e3 <page_ref>
c0103c4d:	85 c0                	test   %eax,%eax
c0103c4f:	75 1e                	jne    c0103c6f <basic_check+0x12d>
c0103c51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c54:	89 04 24             	mov    %eax,(%esp)
c0103c57:	e8 87 f9 ff ff       	call   c01035e3 <page_ref>
c0103c5c:	85 c0                	test   %eax,%eax
c0103c5e:	75 0f                	jne    c0103c6f <basic_check+0x12d>
c0103c60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c63:	89 04 24             	mov    %eax,(%esp)
c0103c66:	e8 78 f9 ff ff       	call   c01035e3 <page_ref>
c0103c6b:	85 c0                	test   %eax,%eax
c0103c6d:	74 24                	je     c0103c93 <basic_check+0x151>
c0103c6f:	c7 44 24 0c bc 62 11 	movl   $0xc01162bc,0xc(%esp)
c0103c76:	c0 
c0103c77:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103c7e:	c0 
c0103c7f:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103c86:	00 
c0103c87:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103c8e:	e8 35 d2 ff ff       	call   c0100ec8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c96:	89 04 24             	mov    %eax,(%esp)
c0103c99:	e8 2f f9 ff ff       	call   c01035cd <page2pa>
c0103c9e:	8b 15 80 0e 15 c0    	mov    0xc0150e80,%edx
c0103ca4:	c1 e2 0c             	shl    $0xc,%edx
c0103ca7:	39 d0                	cmp    %edx,%eax
c0103ca9:	72 24                	jb     c0103ccf <basic_check+0x18d>
c0103cab:	c7 44 24 0c f8 62 11 	movl   $0xc01162f8,0xc(%esp)
c0103cb2:	c0 
c0103cb3:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103cba:	c0 
c0103cbb:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103cc2:	00 
c0103cc3:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103cca:	e8 f9 d1 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103ccf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cd2:	89 04 24             	mov    %eax,(%esp)
c0103cd5:	e8 f3 f8 ff ff       	call   c01035cd <page2pa>
c0103cda:	8b 15 80 0e 15 c0    	mov    0xc0150e80,%edx
c0103ce0:	c1 e2 0c             	shl    $0xc,%edx
c0103ce3:	39 d0                	cmp    %edx,%eax
c0103ce5:	72 24                	jb     c0103d0b <basic_check+0x1c9>
c0103ce7:	c7 44 24 0c 15 63 11 	movl   $0xc0116315,0xc(%esp)
c0103cee:	c0 
c0103cef:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103cf6:	c0 
c0103cf7:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103cfe:	00 
c0103cff:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103d06:	e8 bd d1 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d0e:	89 04 24             	mov    %eax,(%esp)
c0103d11:	e8 b7 f8 ff ff       	call   c01035cd <page2pa>
c0103d16:	8b 15 80 0e 15 c0    	mov    0xc0150e80,%edx
c0103d1c:	c1 e2 0c             	shl    $0xc,%edx
c0103d1f:	39 d0                	cmp    %edx,%eax
c0103d21:	72 24                	jb     c0103d47 <basic_check+0x205>
c0103d23:	c7 44 24 0c 32 63 11 	movl   $0xc0116332,0xc(%esp)
c0103d2a:	c0 
c0103d2b:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103d32:	c0 
c0103d33:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d3a:	00 
c0103d3b:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103d42:	e8 81 d1 ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103d47:	a1 14 40 15 c0       	mov    0xc0154014,%eax
c0103d4c:	8b 15 18 40 15 c0    	mov    0xc0154018,%edx
c0103d52:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d55:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d58:	c7 45 e0 14 40 15 c0 	movl   $0xc0154014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d62:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d65:	89 50 04             	mov    %edx,0x4(%eax)
c0103d68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d6b:	8b 50 04             	mov    0x4(%eax),%edx
c0103d6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d71:	89 10                	mov    %edx,(%eax)
c0103d73:	c7 45 dc 14 40 15 c0 	movl   $0xc0154014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d7d:	8b 40 04             	mov    0x4(%eax),%eax
c0103d80:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d83:	0f 94 c0             	sete   %al
c0103d86:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d89:	85 c0                	test   %eax,%eax
c0103d8b:	75 24                	jne    c0103db1 <basic_check+0x26f>
c0103d8d:	c7 44 24 0c 4f 63 11 	movl   $0xc011634f,0xc(%esp)
c0103d94:	c0 
c0103d95:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103d9c:	c0 
c0103d9d:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103da4:	00 
c0103da5:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103dac:	e8 17 d1 ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0103db1:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c0103db6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103db9:	c7 05 1c 40 15 c0 00 	movl   $0x0,0xc015401c
c0103dc0:	00 00 00 

    assert(alloc_page() == NULL);
c0103dc3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103dca:	e8 ad 13 00 00       	call   c010517c <alloc_pages>
c0103dcf:	85 c0                	test   %eax,%eax
c0103dd1:	74 24                	je     c0103df7 <basic_check+0x2b5>
c0103dd3:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c0103dda:	c0 
c0103ddb:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103de2:	c0 
c0103de3:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103dea:	00 
c0103deb:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103df2:	e8 d1 d0 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103df7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dfe:	00 
c0103dff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e02:	89 04 24             	mov    %eax,(%esp)
c0103e05:	e8 dd 13 00 00       	call   c01051e7 <free_pages>
    free_page(p1);
c0103e0a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e11:	00 
c0103e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e15:	89 04 24             	mov    %eax,(%esp)
c0103e18:	e8 ca 13 00 00       	call   c01051e7 <free_pages>
    free_page(p2);
c0103e1d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e24:	00 
c0103e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e28:	89 04 24             	mov    %eax,(%esp)
c0103e2b:	e8 b7 13 00 00       	call   c01051e7 <free_pages>
    assert(nr_free == 3);
c0103e30:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c0103e35:	83 f8 03             	cmp    $0x3,%eax
c0103e38:	74 24                	je     c0103e5e <basic_check+0x31c>
c0103e3a:	c7 44 24 0c 7b 63 11 	movl   $0xc011637b,0xc(%esp)
c0103e41:	c0 
c0103e42:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103e49:	c0 
c0103e4a:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e51:	00 
c0103e52:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103e59:	e8 6a d0 ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e5e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e65:	e8 12 13 00 00       	call   c010517c <alloc_pages>
c0103e6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e6d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e71:	75 24                	jne    c0103e97 <basic_check+0x355>
c0103e73:	c7 44 24 0c 44 62 11 	movl   $0xc0116244,0xc(%esp)
c0103e7a:	c0 
c0103e7b:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103e82:	c0 
c0103e83:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e8a:	00 
c0103e8b:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103e92:	e8 31 d0 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e97:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e9e:	e8 d9 12 00 00       	call   c010517c <alloc_pages>
c0103ea3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ea6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103eaa:	75 24                	jne    c0103ed0 <basic_check+0x38e>
c0103eac:	c7 44 24 0c 60 62 11 	movl   $0xc0116260,0xc(%esp)
c0103eb3:	c0 
c0103eb4:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103ebb:	c0 
c0103ebc:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103ec3:	00 
c0103ec4:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103ecb:	e8 f8 cf ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ed0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ed7:	e8 a0 12 00 00       	call   c010517c <alloc_pages>
c0103edc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ee3:	75 24                	jne    c0103f09 <basic_check+0x3c7>
c0103ee5:	c7 44 24 0c 7c 62 11 	movl   $0xc011627c,0xc(%esp)
c0103eec:	c0 
c0103eed:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103ef4:	c0 
c0103ef5:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103efc:	00 
c0103efd:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103f04:	e8 bf cf ff ff       	call   c0100ec8 <__panic>

    assert(alloc_page() == NULL);
c0103f09:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f10:	e8 67 12 00 00       	call   c010517c <alloc_pages>
c0103f15:	85 c0                	test   %eax,%eax
c0103f17:	74 24                	je     c0103f3d <basic_check+0x3fb>
c0103f19:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c0103f20:	c0 
c0103f21:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103f28:	c0 
c0103f29:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103f30:	00 
c0103f31:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103f38:	e8 8b cf ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103f3d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f44:	00 
c0103f45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f48:	89 04 24             	mov    %eax,(%esp)
c0103f4b:	e8 97 12 00 00       	call   c01051e7 <free_pages>
c0103f50:	c7 45 d8 14 40 15 c0 	movl   $0xc0154014,-0x28(%ebp)
c0103f57:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f5a:	8b 40 04             	mov    0x4(%eax),%eax
c0103f5d:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f60:	0f 94 c0             	sete   %al
c0103f63:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f66:	85 c0                	test   %eax,%eax
c0103f68:	74 24                	je     c0103f8e <basic_check+0x44c>
c0103f6a:	c7 44 24 0c 88 63 11 	movl   $0xc0116388,0xc(%esp)
c0103f71:	c0 
c0103f72:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103f79:	c0 
c0103f7a:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f81:	00 
c0103f82:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103f89:	e8 3a cf ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f8e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f95:	e8 e2 11 00 00       	call   c010517c <alloc_pages>
c0103f9a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fa0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103fa3:	74 24                	je     c0103fc9 <basic_check+0x487>
c0103fa5:	c7 44 24 0c a0 63 11 	movl   $0xc01163a0,0xc(%esp)
c0103fac:	c0 
c0103fad:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103fb4:	c0 
c0103fb5:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103fbc:	00 
c0103fbd:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103fc4:	e8 ff ce ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103fc9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fd0:	e8 a7 11 00 00       	call   c010517c <alloc_pages>
c0103fd5:	85 c0                	test   %eax,%eax
c0103fd7:	74 24                	je     c0103ffd <basic_check+0x4bb>
c0103fd9:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c0103fe0:	c0 
c0103fe1:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0103fe8:	c0 
c0103fe9:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103ff0:	00 
c0103ff1:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0103ff8:	e8 cb ce ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0103ffd:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c0104002:	85 c0                	test   %eax,%eax
c0104004:	74 24                	je     c010402a <basic_check+0x4e8>
c0104006:	c7 44 24 0c b9 63 11 	movl   $0xc01163b9,0xc(%esp)
c010400d:	c0 
c010400e:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104015:	c0 
c0104016:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010401d:	00 
c010401e:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0104025:	e8 9e ce ff ff       	call   c0100ec8 <__panic>
    free_list = free_list_store;
c010402a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010402d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104030:	a3 14 40 15 c0       	mov    %eax,0xc0154014
c0104035:	89 15 18 40 15 c0    	mov    %edx,0xc0154018
    nr_free = nr_free_store;
c010403b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010403e:	a3 1c 40 15 c0       	mov    %eax,0xc015401c

    free_page(p);
c0104043:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010404a:	00 
c010404b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010404e:	89 04 24             	mov    %eax,(%esp)
c0104051:	e8 91 11 00 00       	call   c01051e7 <free_pages>
    free_page(p1);
c0104056:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010405d:	00 
c010405e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104061:	89 04 24             	mov    %eax,(%esp)
c0104064:	e8 7e 11 00 00       	call   c01051e7 <free_pages>
    free_page(p2);
c0104069:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104070:	00 
c0104071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104074:	89 04 24             	mov    %eax,(%esp)
c0104077:	e8 6b 11 00 00       	call   c01051e7 <free_pages>
}
c010407c:	c9                   	leave  
c010407d:	c3                   	ret    

c010407e <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010407e:	55                   	push   %ebp
c010407f:	89 e5                	mov    %esp,%ebp
c0104081:	53                   	push   %ebx
c0104082:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104088:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010408f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104096:	c7 45 ec 14 40 15 c0 	movl   $0xc0154014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010409d:	eb 6b                	jmp    c010410a <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010409f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040a2:	83 e8 10             	sub    $0x10,%eax
c01040a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c01040a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040ab:	83 c0 04             	add    $0x4,%eax
c01040ae:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01040b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01040be:	0f a3 10             	bt     %edx,(%eax)
c01040c1:	19 c0                	sbb    %eax,%eax
c01040c3:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01040c6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040ca:	0f 95 c0             	setne  %al
c01040cd:	0f b6 c0             	movzbl %al,%eax
c01040d0:	85 c0                	test   %eax,%eax
c01040d2:	75 24                	jne    c01040f8 <default_check+0x7a>
c01040d4:	c7 44 24 0c c6 63 11 	movl   $0xc01163c6,0xc(%esp)
c01040db:	c0 
c01040dc:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01040e3:	c0 
c01040e4:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01040eb:	00 
c01040ec:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01040f3:	e8 d0 cd ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c01040f8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040ff:	8b 50 08             	mov    0x8(%eax),%edx
c0104102:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104105:	01 d0                	add    %edx,%eax
c0104107:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010410a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010410d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104110:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104113:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104116:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104119:	81 7d ec 14 40 15 c0 	cmpl   $0xc0154014,-0x14(%ebp)
c0104120:	0f 85 79 ff ff ff    	jne    c010409f <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0104126:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104129:	e8 eb 10 00 00       	call   c0105219 <nr_free_pages>
c010412e:	39 c3                	cmp    %eax,%ebx
c0104130:	74 24                	je     c0104156 <default_check+0xd8>
c0104132:	c7 44 24 0c d6 63 11 	movl   $0xc01163d6,0xc(%esp)
c0104139:	c0 
c010413a:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104141:	c0 
c0104142:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104149:	00 
c010414a:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0104151:	e8 72 cd ff ff       	call   c0100ec8 <__panic>

    basic_check();
c0104156:	e8 e7 f9 ff ff       	call   c0103b42 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010415b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104162:	e8 15 10 00 00       	call   c010517c <alloc_pages>
c0104167:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010416a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010416e:	75 24                	jne    c0104194 <default_check+0x116>
c0104170:	c7 44 24 0c ef 63 11 	movl   $0xc01163ef,0xc(%esp)
c0104177:	c0 
c0104178:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010417f:	c0 
c0104180:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c0104187:	00 
c0104188:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010418f:	e8 34 cd ff ff       	call   c0100ec8 <__panic>
    assert(!PageProperty(p0));
c0104194:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104197:	83 c0 04             	add    $0x4,%eax
c010419a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01041a1:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01041a7:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01041aa:	0f a3 10             	bt     %edx,(%eax)
c01041ad:	19 c0                	sbb    %eax,%eax
c01041af:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01041b2:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01041b6:	0f 95 c0             	setne  %al
c01041b9:	0f b6 c0             	movzbl %al,%eax
c01041bc:	85 c0                	test   %eax,%eax
c01041be:	74 24                	je     c01041e4 <default_check+0x166>
c01041c0:	c7 44 24 0c fa 63 11 	movl   $0xc01163fa,0xc(%esp)
c01041c7:	c0 
c01041c8:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01041cf:	c0 
c01041d0:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01041d7:	00 
c01041d8:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01041df:	e8 e4 cc ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c01041e4:	a1 14 40 15 c0       	mov    0xc0154014,%eax
c01041e9:	8b 15 18 40 15 c0    	mov    0xc0154018,%edx
c01041ef:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041f2:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041f5:	c7 45 b4 14 40 15 c0 	movl   $0xc0154014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041ff:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104202:	89 50 04             	mov    %edx,0x4(%eax)
c0104205:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104208:	8b 50 04             	mov    0x4(%eax),%edx
c010420b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010420e:	89 10                	mov    %edx,(%eax)
c0104210:	c7 45 b0 14 40 15 c0 	movl   $0xc0154014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104217:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010421a:	8b 40 04             	mov    0x4(%eax),%eax
c010421d:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104220:	0f 94 c0             	sete   %al
c0104223:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104226:	85 c0                	test   %eax,%eax
c0104228:	75 24                	jne    c010424e <default_check+0x1d0>
c010422a:	c7 44 24 0c 4f 63 11 	movl   $0xc011634f,0xc(%esp)
c0104231:	c0 
c0104232:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104239:	c0 
c010423a:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104241:	00 
c0104242:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0104249:	e8 7a cc ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c010424e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104255:	e8 22 0f 00 00       	call   c010517c <alloc_pages>
c010425a:	85 c0                	test   %eax,%eax
c010425c:	74 24                	je     c0104282 <default_check+0x204>
c010425e:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c0104265:	c0 
c0104266:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010426d:	c0 
c010426e:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0104275:	00 
c0104276:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010427d:	e8 46 cc ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0104282:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c0104287:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010428a:	c7 05 1c 40 15 c0 00 	movl   $0x0,0xc015401c
c0104291:	00 00 00 

    free_pages(p0 + 2, 3);
c0104294:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104297:	83 c0 48             	add    $0x48,%eax
c010429a:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01042a1:	00 
c01042a2:	89 04 24             	mov    %eax,(%esp)
c01042a5:	e8 3d 0f 00 00       	call   c01051e7 <free_pages>
    assert(alloc_pages(4) == NULL);
c01042aa:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01042b1:	e8 c6 0e 00 00       	call   c010517c <alloc_pages>
c01042b6:	85 c0                	test   %eax,%eax
c01042b8:	74 24                	je     c01042de <default_check+0x260>
c01042ba:	c7 44 24 0c 0c 64 11 	movl   $0xc011640c,0xc(%esp)
c01042c1:	c0 
c01042c2:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01042c9:	c0 
c01042ca:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01042d1:	00 
c01042d2:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01042d9:	e8 ea cb ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042e1:	83 c0 48             	add    $0x48,%eax
c01042e4:	83 c0 04             	add    $0x4,%eax
c01042e7:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042ee:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042f4:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042f7:	0f a3 10             	bt     %edx,(%eax)
c01042fa:	19 c0                	sbb    %eax,%eax
c01042fc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01042ff:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0104303:	0f 95 c0             	setne  %al
c0104306:	0f b6 c0             	movzbl %al,%eax
c0104309:	85 c0                	test   %eax,%eax
c010430b:	74 0e                	je     c010431b <default_check+0x29d>
c010430d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104310:	83 c0 48             	add    $0x48,%eax
c0104313:	8b 40 08             	mov    0x8(%eax),%eax
c0104316:	83 f8 03             	cmp    $0x3,%eax
c0104319:	74 24                	je     c010433f <default_check+0x2c1>
c010431b:	c7 44 24 0c 24 64 11 	movl   $0xc0116424,0xc(%esp)
c0104322:	c0 
c0104323:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010432a:	c0 
c010432b:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0104332:	00 
c0104333:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010433a:	e8 89 cb ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010433f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104346:	e8 31 0e 00 00       	call   c010517c <alloc_pages>
c010434b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010434e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104352:	75 24                	jne    c0104378 <default_check+0x2fa>
c0104354:	c7 44 24 0c 50 64 11 	movl   $0xc0116450,0xc(%esp)
c010435b:	c0 
c010435c:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104363:	c0 
c0104364:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010436b:	00 
c010436c:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0104373:	e8 50 cb ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104378:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010437f:	e8 f8 0d 00 00       	call   c010517c <alloc_pages>
c0104384:	85 c0                	test   %eax,%eax
c0104386:	74 24                	je     c01043ac <default_check+0x32e>
c0104388:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c010438f:	c0 
c0104390:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104397:	c0 
c0104398:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010439f:	00 
c01043a0:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01043a7:	e8 1c cb ff ff       	call   c0100ec8 <__panic>
    assert(p0 + 2 == p1);
c01043ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043af:	83 c0 48             	add    $0x48,%eax
c01043b2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01043b5:	74 24                	je     c01043db <default_check+0x35d>
c01043b7:	c7 44 24 0c 6e 64 11 	movl   $0xc011646e,0xc(%esp)
c01043be:	c0 
c01043bf:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01043c6:	c0 
c01043c7:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01043ce:	00 
c01043cf:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01043d6:	e8 ed ca ff ff       	call   c0100ec8 <__panic>

    p2 = p0 + 1;
c01043db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043de:	83 c0 24             	add    $0x24,%eax
c01043e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043e4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043eb:	00 
c01043ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043ef:	89 04 24             	mov    %eax,(%esp)
c01043f2:	e8 f0 0d 00 00       	call   c01051e7 <free_pages>
    free_pages(p1, 3);
c01043f7:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043fe:	00 
c01043ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104402:	89 04 24             	mov    %eax,(%esp)
c0104405:	e8 dd 0d 00 00       	call   c01051e7 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c010440a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010440d:	83 c0 04             	add    $0x4,%eax
c0104410:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0104417:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010441a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010441d:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104420:	0f a3 10             	bt     %edx,(%eax)
c0104423:	19 c0                	sbb    %eax,%eax
c0104425:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104428:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c010442c:	0f 95 c0             	setne  %al
c010442f:	0f b6 c0             	movzbl %al,%eax
c0104432:	85 c0                	test   %eax,%eax
c0104434:	74 0b                	je     c0104441 <default_check+0x3c3>
c0104436:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104439:	8b 40 08             	mov    0x8(%eax),%eax
c010443c:	83 f8 01             	cmp    $0x1,%eax
c010443f:	74 24                	je     c0104465 <default_check+0x3e7>
c0104441:	c7 44 24 0c 7c 64 11 	movl   $0xc011647c,0xc(%esp)
c0104448:	c0 
c0104449:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104450:	c0 
c0104451:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0104458:	00 
c0104459:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c0104460:	e8 63 ca ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104465:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104468:	83 c0 04             	add    $0x4,%eax
c010446b:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104472:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104475:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104478:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010447b:	0f a3 10             	bt     %edx,(%eax)
c010447e:	19 c0                	sbb    %eax,%eax
c0104480:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104483:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104487:	0f 95 c0             	setne  %al
c010448a:	0f b6 c0             	movzbl %al,%eax
c010448d:	85 c0                	test   %eax,%eax
c010448f:	74 0b                	je     c010449c <default_check+0x41e>
c0104491:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104494:	8b 40 08             	mov    0x8(%eax),%eax
c0104497:	83 f8 03             	cmp    $0x3,%eax
c010449a:	74 24                	je     c01044c0 <default_check+0x442>
c010449c:	c7 44 24 0c a4 64 11 	movl   $0xc01164a4,0xc(%esp)
c01044a3:	c0 
c01044a4:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01044ab:	c0 
c01044ac:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01044b3:	00 
c01044b4:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01044bb:	e8 08 ca ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01044c0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044c7:	e8 b0 0c 00 00       	call   c010517c <alloc_pages>
c01044cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044d2:	83 e8 24             	sub    $0x24,%eax
c01044d5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044d8:	74 24                	je     c01044fe <default_check+0x480>
c01044da:	c7 44 24 0c ca 64 11 	movl   $0xc01164ca,0xc(%esp)
c01044e1:	c0 
c01044e2:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01044e9:	c0 
c01044ea:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01044f1:	00 
c01044f2:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01044f9:	e8 ca c9 ff ff       	call   c0100ec8 <__panic>
    free_page(p0);
c01044fe:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104505:	00 
c0104506:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104509:	89 04 24             	mov    %eax,(%esp)
c010450c:	e8 d6 0c 00 00       	call   c01051e7 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0104511:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0104518:	e8 5f 0c 00 00       	call   c010517c <alloc_pages>
c010451d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104520:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104523:	83 c0 24             	add    $0x24,%eax
c0104526:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104529:	74 24                	je     c010454f <default_check+0x4d1>
c010452b:	c7 44 24 0c e8 64 11 	movl   $0xc01164e8,0xc(%esp)
c0104532:	c0 
c0104533:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010453a:	c0 
c010453b:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0104542:	00 
c0104543:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010454a:	e8 79 c9 ff ff       	call   c0100ec8 <__panic>

    free_pages(p0, 2);
c010454f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104556:	00 
c0104557:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010455a:	89 04 24             	mov    %eax,(%esp)
c010455d:	e8 85 0c 00 00       	call   c01051e7 <free_pages>
    free_page(p2);
c0104562:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104569:	00 
c010456a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010456d:	89 04 24             	mov    %eax,(%esp)
c0104570:	e8 72 0c 00 00       	call   c01051e7 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104575:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010457c:	e8 fb 0b 00 00       	call   c010517c <alloc_pages>
c0104581:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104584:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104588:	75 24                	jne    c01045ae <default_check+0x530>
c010458a:	c7 44 24 0c 08 65 11 	movl   $0xc0116508,0xc(%esp)
c0104591:	c0 
c0104592:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c0104599:	c0 
c010459a:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c01045a1:	00 
c01045a2:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01045a9:	e8 1a c9 ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c01045ae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01045b5:	e8 c2 0b 00 00       	call   c010517c <alloc_pages>
c01045ba:	85 c0                	test   %eax,%eax
c01045bc:	74 24                	je     c01045e2 <default_check+0x564>
c01045be:	c7 44 24 0c 66 63 11 	movl   $0xc0116366,0xc(%esp)
c01045c5:	c0 
c01045c6:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01045cd:	c0 
c01045ce:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01045d5:	00 
c01045d6:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01045dd:	e8 e6 c8 ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c01045e2:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c01045e7:	85 c0                	test   %eax,%eax
c01045e9:	74 24                	je     c010460f <default_check+0x591>
c01045eb:	c7 44 24 0c b9 63 11 	movl   $0xc01163b9,0xc(%esp)
c01045f2:	c0 
c01045f3:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01045fa:	c0 
c01045fb:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0104602:	00 
c0104603:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010460a:	e8 b9 c8 ff ff       	call   c0100ec8 <__panic>
    nr_free = nr_free_store;
c010460f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104612:	a3 1c 40 15 c0       	mov    %eax,0xc015401c

    free_list = free_list_store;
c0104617:	8b 45 80             	mov    -0x80(%ebp),%eax
c010461a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010461d:	a3 14 40 15 c0       	mov    %eax,0xc0154014
c0104622:	89 15 18 40 15 c0    	mov    %edx,0xc0154018
    free_pages(p0, 5);
c0104628:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010462f:	00 
c0104630:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104633:	89 04 24             	mov    %eax,(%esp)
c0104636:	e8 ac 0b 00 00       	call   c01051e7 <free_pages>

    le = &free_list;
c010463b:	c7 45 ec 14 40 15 c0 	movl   $0xc0154014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104642:	eb 1d                	jmp    c0104661 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104644:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104647:	83 e8 10             	sub    $0x10,%eax
c010464a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c010464d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104651:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104654:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104657:	8b 40 08             	mov    0x8(%eax),%eax
c010465a:	29 c2                	sub    %eax,%edx
c010465c:	89 d0                	mov    %edx,%eax
c010465e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104661:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104664:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104667:	8b 45 88             	mov    -0x78(%ebp),%eax
c010466a:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010466d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104670:	81 7d ec 14 40 15 c0 	cmpl   $0xc0154014,-0x14(%ebp)
c0104677:	75 cb                	jne    c0104644 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104679:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010467d:	74 24                	je     c01046a3 <default_check+0x625>
c010467f:	c7 44 24 0c 26 65 11 	movl   $0xc0116526,0xc(%esp)
c0104686:	c0 
c0104687:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c010468e:	c0 
c010468f:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0104696:	00 
c0104697:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c010469e:	e8 25 c8 ff ff       	call   c0100ec8 <__panic>
    assert(total == 0);
c01046a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01046a7:	74 24                	je     c01046cd <default_check+0x64f>
c01046a9:	c7 44 24 0c 31 65 11 	movl   $0xc0116531,0xc(%esp)
c01046b0:	c0 
c01046b1:	c7 44 24 08 f6 61 11 	movl   $0xc01161f6,0x8(%esp)
c01046b8:	c0 
c01046b9:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c01046c0:	00 
c01046c1:	c7 04 24 0b 62 11 c0 	movl   $0xc011620b,(%esp)
c01046c8:	e8 fb c7 ff ff       	call   c0100ec8 <__panic>
}
c01046cd:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046d3:	5b                   	pop    %ebx
c01046d4:	5d                   	pop    %ebp
c01046d5:	c3                   	ret    

c01046d6 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046d6:	55                   	push   %ebp
c01046d7:	89 e5                	mov    %esp,%ebp
c01046d9:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046dc:	9c                   	pushf  
c01046dd:	58                   	pop    %eax
c01046de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01046e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046e4:	25 00 02 00 00       	and    $0x200,%eax
c01046e9:	85 c0                	test   %eax,%eax
c01046eb:	74 0c                	je     c01046f9 <__intr_save+0x23>
        intr_disable();
c01046ed:	e8 50 da ff ff       	call   c0102142 <intr_disable>
        return 1;
c01046f2:	b8 01 00 00 00       	mov    $0x1,%eax
c01046f7:	eb 05                	jmp    c01046fe <__intr_save+0x28>
    }
    return 0;
c01046f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046fe:	c9                   	leave  
c01046ff:	c3                   	ret    

c0104700 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104700:	55                   	push   %ebp
c0104701:	89 e5                	mov    %esp,%ebp
c0104703:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104706:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010470a:	74 05                	je     c0104711 <__intr_restore+0x11>
        intr_enable();
c010470c:	e8 2b da ff ff       	call   c010213c <intr_enable>
    }
}
c0104711:	c9                   	leave  
c0104712:	c3                   	ret    

c0104713 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104713:	55                   	push   %ebp
c0104714:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104716:	8b 55 08             	mov    0x8(%ebp),%edx
c0104719:	a1 28 40 15 c0       	mov    0xc0154028,%eax
c010471e:	29 c2                	sub    %eax,%edx
c0104720:	89 d0                	mov    %edx,%eax
c0104722:	c1 f8 02             	sar    $0x2,%eax
c0104725:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010472b:	5d                   	pop    %ebp
c010472c:	c3                   	ret    

c010472d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010472d:	55                   	push   %ebp
c010472e:	89 e5                	mov    %esp,%ebp
c0104730:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104733:	8b 45 08             	mov    0x8(%ebp),%eax
c0104736:	89 04 24             	mov    %eax,(%esp)
c0104739:	e8 d5 ff ff ff       	call   c0104713 <page2ppn>
c010473e:	c1 e0 0c             	shl    $0xc,%eax
}
c0104741:	c9                   	leave  
c0104742:	c3                   	ret    

c0104743 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104743:	55                   	push   %ebp
c0104744:	89 e5                	mov    %esp,%ebp
c0104746:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104749:	8b 45 08             	mov    0x8(%ebp),%eax
c010474c:	c1 e8 0c             	shr    $0xc,%eax
c010474f:	89 c2                	mov    %eax,%edx
c0104751:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0104756:	39 c2                	cmp    %eax,%edx
c0104758:	72 1c                	jb     c0104776 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010475a:	c7 44 24 08 6c 65 11 	movl   $0xc011656c,0x8(%esp)
c0104761:	c0 
c0104762:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104769:	00 
c010476a:	c7 04 24 8b 65 11 c0 	movl   $0xc011658b,(%esp)
c0104771:	e8 52 c7 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104776:	8b 0d 28 40 15 c0    	mov    0xc0154028,%ecx
c010477c:	8b 45 08             	mov    0x8(%ebp),%eax
c010477f:	c1 e8 0c             	shr    $0xc,%eax
c0104782:	89 c2                	mov    %eax,%edx
c0104784:	89 d0                	mov    %edx,%eax
c0104786:	c1 e0 03             	shl    $0x3,%eax
c0104789:	01 d0                	add    %edx,%eax
c010478b:	c1 e0 02             	shl    $0x2,%eax
c010478e:	01 c8                	add    %ecx,%eax
}
c0104790:	c9                   	leave  
c0104791:	c3                   	ret    

c0104792 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104792:	55                   	push   %ebp
c0104793:	89 e5                	mov    %esp,%ebp
c0104795:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104798:	8b 45 08             	mov    0x8(%ebp),%eax
c010479b:	89 04 24             	mov    %eax,(%esp)
c010479e:	e8 8a ff ff ff       	call   c010472d <page2pa>
c01047a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a9:	c1 e8 0c             	shr    $0xc,%eax
c01047ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01047af:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c01047b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01047b7:	72 23                	jb     c01047dc <page2kva+0x4a>
c01047b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047bc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047c0:	c7 44 24 08 9c 65 11 	movl   $0xc011659c,0x8(%esp)
c01047c7:	c0 
c01047c8:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01047cf:	00 
c01047d0:	c7 04 24 8b 65 11 c0 	movl   $0xc011658b,(%esp)
c01047d7:	e8 ec c6 ff ff       	call   c0100ec8 <__panic>
c01047dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047df:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047e4:	c9                   	leave  
c01047e5:	c3                   	ret    

c01047e6 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047e6:	55                   	push   %ebp
c01047e7:	89 e5                	mov    %esp,%ebp
c01047e9:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01047ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047f2:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047f9:	77 23                	ja     c010481e <kva2page+0x38>
c01047fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047fe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104802:	c7 44 24 08 c0 65 11 	movl   $0xc01165c0,0x8(%esp)
c0104809:	c0 
c010480a:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104811:	00 
c0104812:	c7 04 24 8b 65 11 c0 	movl   $0xc011658b,(%esp)
c0104819:	e8 aa c6 ff ff       	call   c0100ec8 <__panic>
c010481e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104821:	05 00 00 00 40       	add    $0x40000000,%eax
c0104826:	89 04 24             	mov    %eax,(%esp)
c0104829:	e8 15 ff ff ff       	call   c0104743 <pa2page>
}
c010482e:	c9                   	leave  
c010482f:	c3                   	ret    

c0104830 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104830:	55                   	push   %ebp
c0104831:	89 e5                	mov    %esp,%ebp
c0104833:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0104836:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104839:	ba 01 00 00 00       	mov    $0x1,%edx
c010483e:	89 c1                	mov    %eax,%ecx
c0104840:	d3 e2                	shl    %cl,%edx
c0104842:	89 d0                	mov    %edx,%eax
c0104844:	89 04 24             	mov    %eax,(%esp)
c0104847:	e8 30 09 00 00       	call   c010517c <alloc_pages>
c010484c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010484f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104853:	75 07                	jne    c010485c <__slob_get_free_pages+0x2c>
    return NULL;
c0104855:	b8 00 00 00 00       	mov    $0x0,%eax
c010485a:	eb 0b                	jmp    c0104867 <__slob_get_free_pages+0x37>
  return page2kva(page);
c010485c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010485f:	89 04 24             	mov    %eax,(%esp)
c0104862:	e8 2b ff ff ff       	call   c0104792 <page2kva>
}
c0104867:	c9                   	leave  
c0104868:	c3                   	ret    

c0104869 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104869:	55                   	push   %ebp
c010486a:	89 e5                	mov    %esp,%ebp
c010486c:	53                   	push   %ebx
c010486d:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104870:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104873:	ba 01 00 00 00       	mov    $0x1,%edx
c0104878:	89 c1                	mov    %eax,%ecx
c010487a:	d3 e2                	shl    %cl,%edx
c010487c:	89 d0                	mov    %edx,%eax
c010487e:	89 c3                	mov    %eax,%ebx
c0104880:	8b 45 08             	mov    0x8(%ebp),%eax
c0104883:	89 04 24             	mov    %eax,(%esp)
c0104886:	e8 5b ff ff ff       	call   c01047e6 <kva2page>
c010488b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010488f:	89 04 24             	mov    %eax,(%esp)
c0104892:	e8 50 09 00 00       	call   c01051e7 <free_pages>
}
c0104897:	83 c4 14             	add    $0x14,%esp
c010489a:	5b                   	pop    %ebx
c010489b:	5d                   	pop    %ebp
c010489c:	c3                   	ret    

c010489d <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010489d:	55                   	push   %ebp
c010489e:	89 e5                	mov    %esp,%ebp
c01048a0:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01048a6:	83 c0 08             	add    $0x8,%eax
c01048a9:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01048ae:	76 24                	jbe    c01048d4 <slob_alloc+0x37>
c01048b0:	c7 44 24 0c e4 65 11 	movl   $0xc01165e4,0xc(%esp)
c01048b7:	c0 
c01048b8:	c7 44 24 08 03 66 11 	movl   $0xc0116603,0x8(%esp)
c01048bf:	c0 
c01048c0:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01048c7:	00 
c01048c8:	c7 04 24 18 66 11 c0 	movl   $0xc0116618,(%esp)
c01048cf:	e8 f4 c5 ff ff       	call   c0100ec8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01048e5:	83 c0 07             	add    $0x7,%eax
c01048e8:	c1 e8 03             	shr    $0x3,%eax
c01048eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048ee:	e8 e3 fd ff ff       	call   c01046d6 <__intr_save>
c01048f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048f6:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c01048fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104901:	8b 40 04             	mov    0x4(%eax),%eax
c0104904:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104907:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010490b:	74 25                	je     c0104932 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c010490d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104910:	8b 45 10             	mov    0x10(%ebp),%eax
c0104913:	01 d0                	add    %edx,%eax
c0104915:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104918:	8b 45 10             	mov    0x10(%ebp),%eax
c010491b:	f7 d8                	neg    %eax
c010491d:	21 d0                	and    %edx,%eax
c010491f:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104922:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104925:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104928:	29 c2                	sub    %eax,%edx
c010492a:	89 d0                	mov    %edx,%eax
c010492c:	c1 f8 03             	sar    $0x3,%eax
c010492f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104932:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104935:	8b 00                	mov    (%eax),%eax
c0104937:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010493a:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010493d:	01 ca                	add    %ecx,%edx
c010493f:	39 d0                	cmp    %edx,%eax
c0104941:	0f 8c aa 00 00 00    	jl     c01049f1 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104947:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010494b:	74 38                	je     c0104985 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c010494d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104950:	8b 00                	mov    (%eax),%eax
c0104952:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104955:	89 c2                	mov    %eax,%edx
c0104957:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010495a:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c010495c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010495f:	8b 50 04             	mov    0x4(%eax),%edx
c0104962:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104965:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010496b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010496e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104971:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104974:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104977:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104979:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010497c:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010497f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104982:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104985:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104988:	8b 00                	mov    (%eax),%eax
c010498a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010498d:	75 0e                	jne    c010499d <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010498f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104992:	8b 50 04             	mov    0x4(%eax),%edx
c0104995:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104998:	89 50 04             	mov    %edx,0x4(%eax)
c010499b:	eb 3c                	jmp    c01049d9 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c010499d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01049a0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01049a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049aa:	01 c2                	add    %eax,%edx
c01049ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049af:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01049b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049b5:	8b 40 04             	mov    0x4(%eax),%eax
c01049b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049bb:	8b 12                	mov    (%edx),%edx
c01049bd:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01049c0:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01049c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049c5:	8b 40 04             	mov    0x4(%eax),%eax
c01049c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049cb:	8b 52 04             	mov    0x4(%edx),%edx
c01049ce:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01049d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049d7:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049dc:	a3 08 fa 14 c0       	mov    %eax,0xc014fa08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049e4:	89 04 24             	mov    %eax,(%esp)
c01049e7:	e8 14 fd ff ff       	call   c0104700 <__intr_restore>
			return cur;
c01049ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049ef:	eb 7f                	jmp    c0104a70 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01049f1:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c01049f6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049f9:	75 61                	jne    c0104a5c <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049fe:	89 04 24             	mov    %eax,(%esp)
c0104a01:	e8 fa fc ff ff       	call   c0104700 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104a06:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104a0d:	75 07                	jne    c0104a16 <slob_alloc+0x179>
				return 0;
c0104a0f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a14:	eb 5a                	jmp    c0104a70 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104a16:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a1d:	00 
c0104a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a21:	89 04 24             	mov    %eax,(%esp)
c0104a24:	e8 07 fe ff ff       	call   c0104830 <__slob_get_free_pages>
c0104a29:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104a2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a30:	75 07                	jne    c0104a39 <slob_alloc+0x19c>
				return 0;
c0104a32:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a37:	eb 37                	jmp    c0104a70 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104a39:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a40:	00 
c0104a41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a44:	89 04 24             	mov    %eax,(%esp)
c0104a47:	e8 26 00 00 00       	call   c0104a72 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a4c:	e8 85 fc ff ff       	call   c01046d6 <__intr_save>
c0104a51:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a54:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c0104a59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a65:	8b 40 04             	mov    0x4(%eax),%eax
c0104a68:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a6b:	e9 97 fe ff ff       	jmp    c0104907 <slob_alloc+0x6a>
}
c0104a70:	c9                   	leave  
c0104a71:	c3                   	ret    

c0104a72 <slob_free>:

static void slob_free(void *block, int size)
{
c0104a72:	55                   	push   %ebp
c0104a73:	89 e5                	mov    %esp,%ebp
c0104a75:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a78:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a82:	75 05                	jne    c0104a89 <slob_free+0x17>
		return;
c0104a84:	e9 ff 00 00 00       	jmp    c0104b88 <slob_free+0x116>

	if (size)
c0104a89:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a8d:	74 10                	je     c0104a9f <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a92:	83 c0 07             	add    $0x7,%eax
c0104a95:	c1 e8 03             	shr    $0x3,%eax
c0104a98:	89 c2                	mov    %eax,%edx
c0104a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a9d:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a9f:	e8 32 fc ff ff       	call   c01046d6 <__intr_save>
c0104aa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104aa7:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c0104aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104aaf:	eb 27                	jmp    c0104ad8 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab4:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aba:	77 13                	ja     c0104acf <slob_free+0x5d>
c0104abc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104abf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ac2:	77 27                	ja     c0104aeb <slob_free+0x79>
c0104ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac7:	8b 40 04             	mov    0x4(%eax),%eax
c0104aca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104acd:	77 1c                	ja     c0104aeb <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ad8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104adb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ade:	76 d1                	jbe    c0104ab1 <slob_free+0x3f>
c0104ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae3:	8b 40 04             	mov    0x4(%eax),%eax
c0104ae6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ae9:	76 c6                	jbe    c0104ab1 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aee:	8b 00                	mov    (%eax),%eax
c0104af0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104af7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104afa:	01 c2                	add    %eax,%edx
c0104afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aff:	8b 40 04             	mov    0x4(%eax),%eax
c0104b02:	39 c2                	cmp    %eax,%edx
c0104b04:	75 25                	jne    c0104b2b <slob_free+0xb9>
		b->units += cur->next->units;
c0104b06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b09:	8b 10                	mov    (%eax),%edx
c0104b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b0e:	8b 40 04             	mov    0x4(%eax),%eax
c0104b11:	8b 00                	mov    (%eax),%eax
c0104b13:	01 c2                	add    %eax,%edx
c0104b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b18:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b1d:	8b 40 04             	mov    0x4(%eax),%eax
c0104b20:	8b 50 04             	mov    0x4(%eax),%edx
c0104b23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b26:	89 50 04             	mov    %edx,0x4(%eax)
c0104b29:	eb 0c                	jmp    c0104b37 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2e:	8b 50 04             	mov    0x4(%eax),%edx
c0104b31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b34:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b3a:	8b 00                	mov    (%eax),%eax
c0104b3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b46:	01 d0                	add    %edx,%eax
c0104b48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b4b:	75 1f                	jne    c0104b6c <slob_free+0xfa>
		cur->units += b->units;
c0104b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b50:	8b 10                	mov    (%eax),%edx
c0104b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b55:	8b 00                	mov    (%eax),%eax
c0104b57:	01 c2                	add    %eax,%edx
c0104b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b5c:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b61:	8b 50 04             	mov    0x4(%eax),%edx
c0104b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b67:	89 50 04             	mov    %edx,0x4(%eax)
c0104b6a:	eb 09                	jmp    c0104b75 <slob_free+0x103>
	} else
		cur->next = b;
c0104b6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b72:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b78:	a3 08 fa 14 c0       	mov    %eax,0xc014fa08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b80:	89 04 24             	mov    %eax,(%esp)
c0104b83:	e8 78 fb ff ff       	call   c0104700 <__intr_restore>
}
c0104b88:	c9                   	leave  
c0104b89:	c3                   	ret    

c0104b8a <check_slab>:



void check_slab(void) {
c0104b8a:	55                   	push   %ebp
c0104b8b:	89 e5                	mov    %esp,%ebp
c0104b8d:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0104b90:	c7 04 24 2a 66 11 c0 	movl   $0xc011662a,(%esp)
c0104b97:	e8 c9 b7 ff ff       	call   c0100365 <cprintf>
}
c0104b9c:	c9                   	leave  
c0104b9d:	c3                   	ret    

c0104b9e <slab_init>:

void
slab_init(void) {
c0104b9e:	55                   	push   %ebp
c0104b9f:	89 e5                	mov    %esp,%ebp
c0104ba1:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104ba4:	c7 04 24 40 66 11 c0 	movl   $0xc0116640,(%esp)
c0104bab:	e8 b5 b7 ff ff       	call   c0100365 <cprintf>
  check_slab();
c0104bb0:	e8 d5 ff ff ff       	call   c0104b8a <check_slab>
}
c0104bb5:	c9                   	leave  
c0104bb6:	c3                   	ret    

c0104bb7 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104bb7:	55                   	push   %ebp
c0104bb8:	89 e5                	mov    %esp,%ebp
c0104bba:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0104bbd:	e8 dc ff ff ff       	call   c0104b9e <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104bc2:	c7 04 24 54 66 11 c0 	movl   $0xc0116654,(%esp)
c0104bc9:	e8 97 b7 ff ff       	call   c0100365 <cprintf>
}
c0104bce:	c9                   	leave  
c0104bcf:	c3                   	ret    

c0104bd0 <slab_allocated>:

size_t
slab_allocated(void) {
c0104bd0:	55                   	push   %ebp
c0104bd1:	89 e5                	mov    %esp,%ebp
  return 0;
c0104bd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bd8:	5d                   	pop    %ebp
c0104bd9:	c3                   	ret    

c0104bda <kallocated>:

size_t
kallocated(void) {
c0104bda:	55                   	push   %ebp
c0104bdb:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0104bdd:	e8 ee ff ff ff       	call   c0104bd0 <slab_allocated>
}
c0104be2:	5d                   	pop    %ebp
c0104be3:	c3                   	ret    

c0104be4 <find_order>:

static int find_order(int size)
{
c0104be4:	55                   	push   %ebp
c0104be5:	89 e5                	mov    %esp,%ebp
c0104be7:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104bea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bf1:	eb 07                	jmp    c0104bfa <find_order+0x16>
		order++;
c0104bf3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bf7:	d1 7d 08             	sarl   0x8(%ebp)
c0104bfa:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104c01:	7f f0                	jg     c0104bf3 <find_order+0xf>
		order++;
	return order;
c0104c03:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104c06:	c9                   	leave  
c0104c07:	c3                   	ret    

c0104c08 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104c08:	55                   	push   %ebp
c0104c09:	89 e5                	mov    %esp,%ebp
c0104c0b:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104c0e:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104c15:	77 38                	ja     c0104c4f <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c1a:	8d 50 08             	lea    0x8(%eax),%edx
c0104c1d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c24:	00 
c0104c25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c2c:	89 14 24             	mov    %edx,(%esp)
c0104c2f:	e8 69 fc ff ff       	call   c010489d <slob_alloc>
c0104c34:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104c37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c3b:	74 08                	je     c0104c45 <__kmalloc+0x3d>
c0104c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c40:	83 c0 08             	add    $0x8,%eax
c0104c43:	eb 05                	jmp    c0104c4a <__kmalloc+0x42>
c0104c45:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c4a:	e9 a6 00 00 00       	jmp    c0104cf5 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c4f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c56:	00 
c0104c57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c5e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c65:	e8 33 fc ff ff       	call   c010489d <slob_alloc>
c0104c6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c6d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c71:	75 07                	jne    c0104c7a <__kmalloc+0x72>
		return 0;
c0104c73:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c78:	eb 7b                	jmp    c0104cf5 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c7d:	89 04 24             	mov    %eax,(%esp)
c0104c80:	e8 5f ff ff ff       	call   c0104be4 <find_order>
c0104c85:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c88:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c8d:	8b 00                	mov    (%eax),%eax
c0104c8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c96:	89 04 24             	mov    %eax,(%esp)
c0104c99:	e8 92 fb ff ff       	call   c0104830 <__slob_get_free_pages>
c0104c9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104ca1:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca7:	8b 40 04             	mov    0x4(%eax),%eax
c0104caa:	85 c0                	test   %eax,%eax
c0104cac:	74 2f                	je     c0104cdd <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104cae:	e8 23 fa ff ff       	call   c01046d6 <__intr_save>
c0104cb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104cb6:	8b 15 64 0e 15 c0    	mov    0xc0150e64,%edx
c0104cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cbf:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cc5:	a3 64 0e 15 c0       	mov    %eax,0xc0150e64
		spin_unlock_irqrestore(&block_lock, flags);
c0104cca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ccd:	89 04 24             	mov    %eax,(%esp)
c0104cd0:	e8 2b fa ff ff       	call   c0104700 <__intr_restore>
		return bb->pages;
c0104cd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cd8:	8b 40 04             	mov    0x4(%eax),%eax
c0104cdb:	eb 18                	jmp    c0104cf5 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104cdd:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104ce4:	00 
c0104ce5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ce8:	89 04 24             	mov    %eax,(%esp)
c0104ceb:	e8 82 fd ff ff       	call   c0104a72 <slob_free>
	return 0;
c0104cf0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cf5:	c9                   	leave  
c0104cf6:	c3                   	ret    

c0104cf7 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cf7:	55                   	push   %ebp
c0104cf8:	89 e5                	mov    %esp,%ebp
c0104cfa:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104cfd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d04:	00 
c0104d05:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d08:	89 04 24             	mov    %eax,(%esp)
c0104d0b:	e8 f8 fe ff ff       	call   c0104c08 <__kmalloc>
}
c0104d10:	c9                   	leave  
c0104d11:	c3                   	ret    

c0104d12 <kfree>:


void kfree(void *block)
{
c0104d12:	55                   	push   %ebp
c0104d13:	89 e5                	mov    %esp,%ebp
c0104d15:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104d18:	c7 45 f0 64 0e 15 c0 	movl   $0xc0150e64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104d1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d23:	75 05                	jne    c0104d2a <kfree+0x18>
		return;
c0104d25:	e9 a2 00 00 00       	jmp    c0104dcc <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d2d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d32:	85 c0                	test   %eax,%eax
c0104d34:	75 7f                	jne    c0104db5 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104d36:	e8 9b f9 ff ff       	call   c01046d6 <__intr_save>
c0104d3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d3e:	a1 64 0e 15 c0       	mov    0xc0150e64,%eax
c0104d43:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d46:	eb 5c                	jmp    c0104da4 <kfree+0x92>
			if (bb->pages == block) {
c0104d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d4b:	8b 40 04             	mov    0x4(%eax),%eax
c0104d4e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d51:	75 3f                	jne    c0104d92 <kfree+0x80>
				*last = bb->next;
c0104d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d56:	8b 50 08             	mov    0x8(%eax),%edx
c0104d59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d5c:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d61:	89 04 24             	mov    %eax,(%esp)
c0104d64:	e8 97 f9 ff ff       	call   c0104700 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d6c:	8b 10                	mov    (%eax),%edx
c0104d6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d71:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d75:	89 04 24             	mov    %eax,(%esp)
c0104d78:	e8 ec fa ff ff       	call   c0104869 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d7d:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d84:	00 
c0104d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d88:	89 04 24             	mov    %eax,(%esp)
c0104d8b:	e8 e2 fc ff ff       	call   c0104a72 <slob_free>
				return;
c0104d90:	eb 3a                	jmp    c0104dcc <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d95:	83 c0 08             	add    $0x8,%eax
c0104d98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d9e:	8b 40 08             	mov    0x8(%eax),%eax
c0104da1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104da4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104da8:	75 9e                	jne    c0104d48 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104daa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dad:	89 04 24             	mov    %eax,(%esp)
c0104db0:	e8 4b f9 ff ff       	call   c0104700 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104db5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104db8:	83 e8 08             	sub    $0x8,%eax
c0104dbb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104dc2:	00 
c0104dc3:	89 04 24             	mov    %eax,(%esp)
c0104dc6:	e8 a7 fc ff ff       	call   c0104a72 <slob_free>
	return;
c0104dcb:	90                   	nop
}
c0104dcc:	c9                   	leave  
c0104dcd:	c3                   	ret    

c0104dce <ksize>:


unsigned int ksize(const void *block)
{
c0104dce:	55                   	push   %ebp
c0104dcf:	89 e5                	mov    %esp,%ebp
c0104dd1:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104dd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104dd8:	75 07                	jne    c0104de1 <ksize+0x13>
		return 0;
c0104dda:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ddf:	eb 6b                	jmp    c0104e4c <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104de1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104de4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104de9:	85 c0                	test   %eax,%eax
c0104deb:	75 54                	jne    c0104e41 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104ded:	e8 e4 f8 ff ff       	call   c01046d6 <__intr_save>
c0104df2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104df5:	a1 64 0e 15 c0       	mov    0xc0150e64,%eax
c0104dfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dfd:	eb 31                	jmp    c0104e30 <ksize+0x62>
			if (bb->pages == block) {
c0104dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e02:	8b 40 04             	mov    0x4(%eax),%eax
c0104e05:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104e08:	75 1d                	jne    c0104e27 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104e0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e0d:	89 04 24             	mov    %eax,(%esp)
c0104e10:	e8 eb f8 ff ff       	call   c0104700 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e18:	8b 00                	mov    (%eax),%eax
c0104e1a:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104e1f:	89 c1                	mov    %eax,%ecx
c0104e21:	d3 e2                	shl    %cl,%edx
c0104e23:	89 d0                	mov    %edx,%eax
c0104e25:	eb 25                	jmp    c0104e4c <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104e27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e2a:	8b 40 08             	mov    0x8(%eax),%eax
c0104e2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e34:	75 c9                	jne    c0104dff <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e39:	89 04 24             	mov    %eax,(%esp)
c0104e3c:	e8 bf f8 ff ff       	call   c0104700 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e41:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e44:	83 e8 08             	sub    $0x8,%eax
c0104e47:	8b 00                	mov    (%eax),%eax
c0104e49:	c1 e0 03             	shl    $0x3,%eax
}
c0104e4c:	c9                   	leave  
c0104e4d:	c3                   	ret    

c0104e4e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e4e:	55                   	push   %ebp
c0104e4f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e51:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e54:	a1 28 40 15 c0       	mov    0xc0154028,%eax
c0104e59:	29 c2                	sub    %eax,%edx
c0104e5b:	89 d0                	mov    %edx,%eax
c0104e5d:	c1 f8 02             	sar    $0x2,%eax
c0104e60:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104e66:	5d                   	pop    %ebp
c0104e67:	c3                   	ret    

c0104e68 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e68:	55                   	push   %ebp
c0104e69:	89 e5                	mov    %esp,%ebp
c0104e6b:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e71:	89 04 24             	mov    %eax,(%esp)
c0104e74:	e8 d5 ff ff ff       	call   c0104e4e <page2ppn>
c0104e79:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e7c:	c9                   	leave  
c0104e7d:	c3                   	ret    

c0104e7e <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e7e:	55                   	push   %ebp
c0104e7f:	89 e5                	mov    %esp,%ebp
c0104e81:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e84:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e87:	c1 e8 0c             	shr    $0xc,%eax
c0104e8a:	89 c2                	mov    %eax,%edx
c0104e8c:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0104e91:	39 c2                	cmp    %eax,%edx
c0104e93:	72 1c                	jb     c0104eb1 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e95:	c7 44 24 08 70 66 11 	movl   $0xc0116670,0x8(%esp)
c0104e9c:	c0 
c0104e9d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104ea4:	00 
c0104ea5:	c7 04 24 8f 66 11 c0 	movl   $0xc011668f,(%esp)
c0104eac:	e8 17 c0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104eb1:	8b 0d 28 40 15 c0    	mov    0xc0154028,%ecx
c0104eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eba:	c1 e8 0c             	shr    $0xc,%eax
c0104ebd:	89 c2                	mov    %eax,%edx
c0104ebf:	89 d0                	mov    %edx,%eax
c0104ec1:	c1 e0 03             	shl    $0x3,%eax
c0104ec4:	01 d0                	add    %edx,%eax
c0104ec6:	c1 e0 02             	shl    $0x2,%eax
c0104ec9:	01 c8                	add    %ecx,%eax
}
c0104ecb:	c9                   	leave  
c0104ecc:	c3                   	ret    

c0104ecd <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104ecd:	55                   	push   %ebp
c0104ece:	89 e5                	mov    %esp,%ebp
c0104ed0:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104ed3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed6:	89 04 24             	mov    %eax,(%esp)
c0104ed9:	e8 8a ff ff ff       	call   c0104e68 <page2pa>
c0104ede:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ee4:	c1 e8 0c             	shr    $0xc,%eax
c0104ee7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104eea:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0104eef:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ef2:	72 23                	jb     c0104f17 <page2kva+0x4a>
c0104ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104efb:	c7 44 24 08 a0 66 11 	movl   $0xc01166a0,0x8(%esp)
c0104f02:	c0 
c0104f03:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104f0a:	00 
c0104f0b:	c7 04 24 8f 66 11 c0 	movl   $0xc011668f,(%esp)
c0104f12:	e8 b1 bf ff ff       	call   c0100ec8 <__panic>
c0104f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f1a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104f1f:	c9                   	leave  
c0104f20:	c3                   	ret    

c0104f21 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104f21:	55                   	push   %ebp
c0104f22:	89 e5                	mov    %esp,%ebp
c0104f24:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104f27:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2a:	83 e0 01             	and    $0x1,%eax
c0104f2d:	85 c0                	test   %eax,%eax
c0104f2f:	75 1c                	jne    c0104f4d <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104f31:	c7 44 24 08 c4 66 11 	movl   $0xc01166c4,0x8(%esp)
c0104f38:	c0 
c0104f39:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104f40:	00 
c0104f41:	c7 04 24 8f 66 11 c0 	movl   $0xc011668f,(%esp)
c0104f48:	e8 7b bf ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f55:	89 04 24             	mov    %eax,(%esp)
c0104f58:	e8 21 ff ff ff       	call   c0104e7e <pa2page>
}
c0104f5d:	c9                   	leave  
c0104f5e:	c3                   	ret    

c0104f5f <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f5f:	55                   	push   %ebp
c0104f60:	89 e5                	mov    %esp,%ebp
c0104f62:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f68:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f6d:	89 04 24             	mov    %eax,(%esp)
c0104f70:	e8 09 ff ff ff       	call   c0104e7e <pa2page>
}
c0104f75:	c9                   	leave  
c0104f76:	c3                   	ret    

c0104f77 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f77:	55                   	push   %ebp
c0104f78:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7d:	8b 00                	mov    (%eax),%eax
}
c0104f7f:	5d                   	pop    %ebp
c0104f80:	c3                   	ret    

c0104f81 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f81:	55                   	push   %ebp
c0104f82:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f87:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f8a:	89 10                	mov    %edx,(%eax)
}
c0104f8c:	5d                   	pop    %ebp
c0104f8d:	c3                   	ret    

c0104f8e <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f8e:	55                   	push   %ebp
c0104f8f:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f91:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f94:	8b 00                	mov    (%eax),%eax
c0104f96:	8d 50 01             	lea    0x1(%eax),%edx
c0104f99:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f9c:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa1:	8b 00                	mov    (%eax),%eax
}
c0104fa3:	5d                   	pop    %ebp
c0104fa4:	c3                   	ret    

c0104fa5 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104fa5:	55                   	push   %ebp
c0104fa6:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104fa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fab:	8b 00                	mov    (%eax),%eax
c0104fad:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104fb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb3:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb8:	8b 00                	mov    (%eax),%eax
}
c0104fba:	5d                   	pop    %ebp
c0104fbb:	c3                   	ret    

c0104fbc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104fbc:	55                   	push   %ebp
c0104fbd:	89 e5                	mov    %esp,%ebp
c0104fbf:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104fc2:	9c                   	pushf  
c0104fc3:	58                   	pop    %eax
c0104fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104fca:	25 00 02 00 00       	and    $0x200,%eax
c0104fcf:	85 c0                	test   %eax,%eax
c0104fd1:	74 0c                	je     c0104fdf <__intr_save+0x23>
        intr_disable();
c0104fd3:	e8 6a d1 ff ff       	call   c0102142 <intr_disable>
        return 1;
c0104fd8:	b8 01 00 00 00       	mov    $0x1,%eax
c0104fdd:	eb 05                	jmp    c0104fe4 <__intr_save+0x28>
    }
    return 0;
c0104fdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fe4:	c9                   	leave  
c0104fe5:	c3                   	ret    

c0104fe6 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104fe6:	55                   	push   %ebp
c0104fe7:	89 e5                	mov    %esp,%ebp
c0104fe9:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104fec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ff0:	74 05                	je     c0104ff7 <__intr_restore+0x11>
        intr_enable();
c0104ff2:	e8 45 d1 ff ff       	call   c010213c <intr_enable>
    }
}
c0104ff7:	c9                   	leave  
c0104ff8:	c3                   	ret    

c0104ff9 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104ff9:	55                   	push   %ebp
c0104ffa:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fff:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0105002:	b8 23 00 00 00       	mov    $0x23,%eax
c0105007:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0105009:	b8 23 00 00 00       	mov    $0x23,%eax
c010500e:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0105010:	b8 10 00 00 00       	mov    $0x10,%eax
c0105015:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0105017:	b8 10 00 00 00       	mov    $0x10,%eax
c010501c:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c010501e:	b8 10 00 00 00       	mov    $0x10,%eax
c0105023:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0105025:	ea 2c 50 10 c0 08 00 	ljmp   $0x8,$0xc010502c
}
c010502c:	5d                   	pop    %ebp
c010502d:	c3                   	ret    

c010502e <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c010502e:	55                   	push   %ebp
c010502f:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0105031:	8b 45 08             	mov    0x8(%ebp),%eax
c0105034:	a3 a4 0e 15 c0       	mov    %eax,0xc0150ea4
}
c0105039:	5d                   	pop    %ebp
c010503a:	c3                   	ret    

c010503b <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c010503b:	55                   	push   %ebp
c010503c:	89 e5                	mov    %esp,%ebp
c010503e:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0105041:	b8 00 f0 14 c0       	mov    $0xc014f000,%eax
c0105046:	89 04 24             	mov    %eax,(%esp)
c0105049:	e8 e0 ff ff ff       	call   c010502e <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c010504e:	66 c7 05 a8 0e 15 c0 	movw   $0x10,0xc0150ea8
c0105055:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105057:	66 c7 05 48 fa 14 c0 	movw   $0x68,0xc014fa48
c010505e:	68 00 
c0105060:	b8 a0 0e 15 c0       	mov    $0xc0150ea0,%eax
c0105065:	66 a3 4a fa 14 c0    	mov    %ax,0xc014fa4a
c010506b:	b8 a0 0e 15 c0       	mov    $0xc0150ea0,%eax
c0105070:	c1 e8 10             	shr    $0x10,%eax
c0105073:	a2 4c fa 14 c0       	mov    %al,0xc014fa4c
c0105078:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c010507f:	83 e0 f0             	and    $0xfffffff0,%eax
c0105082:	83 c8 09             	or     $0x9,%eax
c0105085:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c010508a:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105091:	83 e0 ef             	and    $0xffffffef,%eax
c0105094:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c0105099:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c01050a0:	83 e0 9f             	and    $0xffffff9f,%eax
c01050a3:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c01050a8:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c01050af:	83 c8 80             	or     $0xffffff80,%eax
c01050b2:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c01050b7:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050be:	83 e0 f0             	and    $0xfffffff0,%eax
c01050c1:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050c6:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050cd:	83 e0 ef             	and    $0xffffffef,%eax
c01050d0:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050d5:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050dc:	83 e0 df             	and    $0xffffffdf,%eax
c01050df:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050e4:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050eb:	83 c8 40             	or     $0x40,%eax
c01050ee:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050f3:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050fa:	83 e0 7f             	and    $0x7f,%eax
c01050fd:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c0105102:	b8 a0 0e 15 c0       	mov    $0xc0150ea0,%eax
c0105107:	c1 e8 18             	shr    $0x18,%eax
c010510a:	a2 4f fa 14 c0       	mov    %al,0xc014fa4f

    // reload all segment registers
    lgdt(&gdt_pd);
c010510f:	c7 04 24 50 fa 14 c0 	movl   $0xc014fa50,(%esp)
c0105116:	e8 de fe ff ff       	call   c0104ff9 <lgdt>
c010511b:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105121:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0105125:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0105128:	c9                   	leave  
c0105129:	c3                   	ret    

c010512a <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010512a:	55                   	push   %ebp
c010512b:	89 e5                	mov    %esp,%ebp
c010512d:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0105130:	c7 05 20 40 15 c0 50 	movl   $0xc0116550,0xc0154020
c0105137:	65 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010513a:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c010513f:	8b 00                	mov    (%eax),%eax
c0105141:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105145:	c7 04 24 f0 66 11 c0 	movl   $0xc01166f0,(%esp)
c010514c:	e8 14 b2 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c0105151:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c0105156:	8b 40 04             	mov    0x4(%eax),%eax
c0105159:	ff d0                	call   *%eax
}
c010515b:	c9                   	leave  
c010515c:	c3                   	ret    

c010515d <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010515d:	55                   	push   %ebp
c010515e:	89 e5                	mov    %esp,%ebp
c0105160:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105163:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c0105168:	8b 40 08             	mov    0x8(%eax),%eax
c010516b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010516e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105172:	8b 55 08             	mov    0x8(%ebp),%edx
c0105175:	89 14 24             	mov    %edx,(%esp)
c0105178:	ff d0                	call   *%eax
}
c010517a:	c9                   	leave  
c010517b:	c3                   	ret    

c010517c <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010517c:	55                   	push   %ebp
c010517d:	89 e5                	mov    %esp,%ebp
c010517f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105182:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105189:	e8 2e fe ff ff       	call   c0104fbc <__intr_save>
c010518e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105191:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c0105196:	8b 40 0c             	mov    0xc(%eax),%eax
c0105199:	8b 55 08             	mov    0x8(%ebp),%edx
c010519c:	89 14 24             	mov    %edx,(%esp)
c010519f:	ff d0                	call   *%eax
c01051a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01051a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051a7:	89 04 24             	mov    %eax,(%esp)
c01051aa:	e8 37 fe ff ff       	call   c0104fe6 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01051af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01051b3:	75 2d                	jne    c01051e2 <alloc_pages+0x66>
c01051b5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01051b9:	77 27                	ja     c01051e2 <alloc_pages+0x66>
c01051bb:	a1 0c 0f 15 c0       	mov    0xc0150f0c,%eax
c01051c0:	85 c0                	test   %eax,%eax
c01051c2:	74 1e                	je     c01051e2 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01051c4:	8b 55 08             	mov    0x8(%ebp),%edx
c01051c7:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c01051cc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01051d3:	00 
c01051d4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051d8:	89 04 24             	mov    %eax,(%esp)
c01051db:	e8 b6 1d 00 00       	call   c0106f96 <swap_out>
    }
c01051e0:	eb a7                	jmp    c0105189 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01051e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01051e5:	c9                   	leave  
c01051e6:	c3                   	ret    

c01051e7 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051e7:	55                   	push   %ebp
c01051e8:	89 e5                	mov    %esp,%ebp
c01051ea:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051ed:	e8 ca fd ff ff       	call   c0104fbc <__intr_save>
c01051f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051f5:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c01051fa:	8b 40 10             	mov    0x10(%eax),%eax
c01051fd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105200:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105204:	8b 55 08             	mov    0x8(%ebp),%edx
c0105207:	89 14 24             	mov    %edx,(%esp)
c010520a:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010520c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010520f:	89 04 24             	mov    %eax,(%esp)
c0105212:	e8 cf fd ff ff       	call   c0104fe6 <__intr_restore>
}
c0105217:	c9                   	leave  
c0105218:	c3                   	ret    

c0105219 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0105219:	55                   	push   %ebp
c010521a:	89 e5                	mov    %esp,%ebp
c010521c:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010521f:	e8 98 fd ff ff       	call   c0104fbc <__intr_save>
c0105224:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0105227:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c010522c:	8b 40 14             	mov    0x14(%eax),%eax
c010522f:	ff d0                	call   *%eax
c0105231:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105237:	89 04 24             	mov    %eax,(%esp)
c010523a:	e8 a7 fd ff ff       	call   c0104fe6 <__intr_restore>
    return ret;
c010523f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105242:	c9                   	leave  
c0105243:	c3                   	ret    

c0105244 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0105244:	55                   	push   %ebp
c0105245:	89 e5                	mov    %esp,%ebp
c0105247:	57                   	push   %edi
c0105248:	56                   	push   %esi
c0105249:	53                   	push   %ebx
c010524a:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105250:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105257:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010525e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105265:	c7 04 24 07 67 11 c0 	movl   $0xc0116707,(%esp)
c010526c:	e8 f4 b0 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105271:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105278:	e9 15 01 00 00       	jmp    c0105392 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010527d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105280:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105283:	89 d0                	mov    %edx,%eax
c0105285:	c1 e0 02             	shl    $0x2,%eax
c0105288:	01 d0                	add    %edx,%eax
c010528a:	c1 e0 02             	shl    $0x2,%eax
c010528d:	01 c8                	add    %ecx,%eax
c010528f:	8b 50 08             	mov    0x8(%eax),%edx
c0105292:	8b 40 04             	mov    0x4(%eax),%eax
c0105295:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105298:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010529b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010529e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052a1:	89 d0                	mov    %edx,%eax
c01052a3:	c1 e0 02             	shl    $0x2,%eax
c01052a6:	01 d0                	add    %edx,%eax
c01052a8:	c1 e0 02             	shl    $0x2,%eax
c01052ab:	01 c8                	add    %ecx,%eax
c01052ad:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052b0:	8b 58 10             	mov    0x10(%eax),%ebx
c01052b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052b6:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052b9:	01 c8                	add    %ecx,%eax
c01052bb:	11 da                	adc    %ebx,%edx
c01052bd:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01052c0:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01052c3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052c9:	89 d0                	mov    %edx,%eax
c01052cb:	c1 e0 02             	shl    $0x2,%eax
c01052ce:	01 d0                	add    %edx,%eax
c01052d0:	c1 e0 02             	shl    $0x2,%eax
c01052d3:	01 c8                	add    %ecx,%eax
c01052d5:	83 c0 14             	add    $0x14,%eax
c01052d8:	8b 00                	mov    (%eax),%eax
c01052da:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01052e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01052e3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052e6:	83 c0 ff             	add    $0xffffffff,%eax
c01052e9:	83 d2 ff             	adc    $0xffffffff,%edx
c01052ec:	89 c6                	mov    %eax,%esi
c01052ee:	89 d7                	mov    %edx,%edi
c01052f0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052f3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052f6:	89 d0                	mov    %edx,%eax
c01052f8:	c1 e0 02             	shl    $0x2,%eax
c01052fb:	01 d0                	add    %edx,%eax
c01052fd:	c1 e0 02             	shl    $0x2,%eax
c0105300:	01 c8                	add    %ecx,%eax
c0105302:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105305:	8b 58 10             	mov    0x10(%eax),%ebx
c0105308:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010530e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105312:	89 74 24 14          	mov    %esi,0x14(%esp)
c0105316:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010531a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010531d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105320:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105324:	89 54 24 10          	mov    %edx,0x10(%esp)
c0105328:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010532c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105330:	c7 04 24 14 67 11 c0 	movl   $0xc0116714,(%esp)
c0105337:	e8 29 b0 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010533c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010533f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105342:	89 d0                	mov    %edx,%eax
c0105344:	c1 e0 02             	shl    $0x2,%eax
c0105347:	01 d0                	add    %edx,%eax
c0105349:	c1 e0 02             	shl    $0x2,%eax
c010534c:	01 c8                	add    %ecx,%eax
c010534e:	83 c0 14             	add    $0x14,%eax
c0105351:	8b 00                	mov    (%eax),%eax
c0105353:	83 f8 01             	cmp    $0x1,%eax
c0105356:	75 36                	jne    c010538e <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105358:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010535b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010535e:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105361:	77 2b                	ja     c010538e <page_init+0x14a>
c0105363:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105366:	72 05                	jb     c010536d <page_init+0x129>
c0105368:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010536b:	73 21                	jae    c010538e <page_init+0x14a>
c010536d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105371:	77 1b                	ja     c010538e <page_init+0x14a>
c0105373:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105377:	72 09                	jb     c0105382 <page_init+0x13e>
c0105379:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105380:	77 0c                	ja     c010538e <page_init+0x14a>
                maxpa = end;
c0105382:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105385:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105388:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010538b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010538e:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105392:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105395:	8b 00                	mov    (%eax),%eax
c0105397:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010539a:	0f 8f dd fe ff ff    	jg     c010527d <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01053a0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01053a4:	72 1d                	jb     c01053c3 <page_init+0x17f>
c01053a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01053aa:	77 09                	ja     c01053b5 <page_init+0x171>
c01053ac:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01053b3:	76 0e                	jbe    c01053c3 <page_init+0x17f>
        maxpa = KMEMSIZE;
c01053b5:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01053bc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01053c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01053c9:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01053cd:	c1 ea 0c             	shr    $0xc,%edx
c01053d0:	a3 80 0e 15 c0       	mov    %eax,0xc0150e80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01053d5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01053dc:	b8 04 42 15 c0       	mov    $0xc0154204,%eax
c01053e1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01053e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01053e7:	01 d0                	add    %edx,%eax
c01053e9:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053ef:	ba 00 00 00 00       	mov    $0x0,%edx
c01053f4:	f7 75 ac             	divl   -0x54(%ebp)
c01053f7:	89 d0                	mov    %edx,%eax
c01053f9:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053fc:	29 c2                	sub    %eax,%edx
c01053fe:	89 d0                	mov    %edx,%eax
c0105400:	a3 28 40 15 c0       	mov    %eax,0xc0154028

    for (i = 0; i < npage; i ++) {
c0105405:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010540c:	eb 2f                	jmp    c010543d <page_init+0x1f9>
        SetPageReserved(pages + i);
c010540e:	8b 0d 28 40 15 c0    	mov    0xc0154028,%ecx
c0105414:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105417:	89 d0                	mov    %edx,%eax
c0105419:	c1 e0 03             	shl    $0x3,%eax
c010541c:	01 d0                	add    %edx,%eax
c010541e:	c1 e0 02             	shl    $0x2,%eax
c0105421:	01 c8                	add    %ecx,%eax
c0105423:	83 c0 04             	add    $0x4,%eax
c0105426:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010542d:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105430:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0105433:	8b 55 90             	mov    -0x70(%ebp),%edx
c0105436:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0105439:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010543d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105440:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0105445:	39 c2                	cmp    %eax,%edx
c0105447:	72 c5                	jb     c010540e <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105449:	8b 15 80 0e 15 c0    	mov    0xc0150e80,%edx
c010544f:	89 d0                	mov    %edx,%eax
c0105451:	c1 e0 03             	shl    $0x3,%eax
c0105454:	01 d0                	add    %edx,%eax
c0105456:	c1 e0 02             	shl    $0x2,%eax
c0105459:	89 c2                	mov    %eax,%edx
c010545b:	a1 28 40 15 c0       	mov    0xc0154028,%eax
c0105460:	01 d0                	add    %edx,%eax
c0105462:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105465:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010546c:	77 23                	ja     c0105491 <page_init+0x24d>
c010546e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105471:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105475:	c7 44 24 08 44 67 11 	movl   $0xc0116744,0x8(%esp)
c010547c:	c0 
c010547d:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105484:	00 
c0105485:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010548c:	e8 37 ba ff ff       	call   c0100ec8 <__panic>
c0105491:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105494:	05 00 00 00 40       	add    $0x40000000,%eax
c0105499:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010549c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01054a3:	e9 74 01 00 00       	jmp    c010561c <page_init+0x3d8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01054a8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054ab:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054ae:	89 d0                	mov    %edx,%eax
c01054b0:	c1 e0 02             	shl    $0x2,%eax
c01054b3:	01 d0                	add    %edx,%eax
c01054b5:	c1 e0 02             	shl    $0x2,%eax
c01054b8:	01 c8                	add    %ecx,%eax
c01054ba:	8b 50 08             	mov    0x8(%eax),%edx
c01054bd:	8b 40 04             	mov    0x4(%eax),%eax
c01054c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054c3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01054c6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054cc:	89 d0                	mov    %edx,%eax
c01054ce:	c1 e0 02             	shl    $0x2,%eax
c01054d1:	01 d0                	add    %edx,%eax
c01054d3:	c1 e0 02             	shl    $0x2,%eax
c01054d6:	01 c8                	add    %ecx,%eax
c01054d8:	8b 48 0c             	mov    0xc(%eax),%ecx
c01054db:	8b 58 10             	mov    0x10(%eax),%ebx
c01054de:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054e1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054e4:	01 c8                	add    %ecx,%eax
c01054e6:	11 da                	adc    %ebx,%edx
c01054e8:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01054eb:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01054ee:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054f4:	89 d0                	mov    %edx,%eax
c01054f6:	c1 e0 02             	shl    $0x2,%eax
c01054f9:	01 d0                	add    %edx,%eax
c01054fb:	c1 e0 02             	shl    $0x2,%eax
c01054fe:	01 c8                	add    %ecx,%eax
c0105500:	83 c0 14             	add    $0x14,%eax
c0105503:	8b 00                	mov    (%eax),%eax
c0105505:	83 f8 01             	cmp    $0x1,%eax
c0105508:	0f 85 0a 01 00 00    	jne    c0105618 <page_init+0x3d4>
            if (begin < freemem) {
c010550e:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105511:	ba 00 00 00 00       	mov    $0x0,%edx
c0105516:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105519:	72 17                	jb     c0105532 <page_init+0x2ee>
c010551b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010551e:	77 05                	ja     c0105525 <page_init+0x2e1>
c0105520:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0105523:	76 0d                	jbe    c0105532 <page_init+0x2ee>
                begin = freemem;
c0105525:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105528:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010552b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105532:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105536:	72 1d                	jb     c0105555 <page_init+0x311>
c0105538:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010553c:	77 09                	ja     c0105547 <page_init+0x303>
c010553e:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0105545:	76 0e                	jbe    c0105555 <page_init+0x311>
                end = KMEMSIZE;
c0105547:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010554e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105555:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105558:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010555b:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010555e:	0f 87 b4 00 00 00    	ja     c0105618 <page_init+0x3d4>
c0105564:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105567:	72 09                	jb     c0105572 <page_init+0x32e>
c0105569:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010556c:	0f 83 a6 00 00 00    	jae    c0105618 <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c0105572:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105579:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010557c:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010557f:	01 d0                	add    %edx,%eax
c0105581:	83 e8 01             	sub    $0x1,%eax
c0105584:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105587:	8b 45 98             	mov    -0x68(%ebp),%eax
c010558a:	ba 00 00 00 00       	mov    $0x0,%edx
c010558f:	f7 75 9c             	divl   -0x64(%ebp)
c0105592:	89 d0                	mov    %edx,%eax
c0105594:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105597:	29 c2                	sub    %eax,%edx
c0105599:	89 d0                	mov    %edx,%eax
c010559b:	ba 00 00 00 00       	mov    $0x0,%edx
c01055a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01055a3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01055a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055a9:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01055ac:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01055af:	ba 00 00 00 00       	mov    $0x0,%edx
c01055b4:	89 c7                	mov    %eax,%edi
c01055b6:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c01055bc:	89 7d 80             	mov    %edi,-0x80(%ebp)
c01055bf:	89 d0                	mov    %edx,%eax
c01055c1:	83 e0 00             	and    $0x0,%eax
c01055c4:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01055c7:	8b 45 80             	mov    -0x80(%ebp),%eax
c01055ca:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01055cd:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01055d0:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01055d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055d6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055d9:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055dc:	77 3a                	ja     c0105618 <page_init+0x3d4>
c01055de:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055e1:	72 05                	jb     c01055e8 <page_init+0x3a4>
c01055e3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01055e6:	73 30                	jae    c0105618 <page_init+0x3d4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01055e8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01055eb:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01055ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055f1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01055f4:	29 c8                	sub    %ecx,%eax
c01055f6:	19 da                	sbb    %ebx,%edx
c01055f8:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01055fc:	c1 ea 0c             	shr    $0xc,%edx
c01055ff:	89 c3                	mov    %eax,%ebx
c0105601:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105604:	89 04 24             	mov    %eax,(%esp)
c0105607:	e8 72 f8 ff ff       	call   c0104e7e <pa2page>
c010560c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105610:	89 04 24             	mov    %eax,(%esp)
c0105613:	e8 45 fb ff ff       	call   c010515d <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0105618:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010561c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010561f:	8b 00                	mov    (%eax),%eax
c0105621:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105624:	0f 8f 7e fe ff ff    	jg     c01054a8 <page_init+0x264>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010562a:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0105630:	5b                   	pop    %ebx
c0105631:	5e                   	pop    %esi
c0105632:	5f                   	pop    %edi
c0105633:	5d                   	pop    %ebp
c0105634:	c3                   	ret    

c0105635 <enable_paging>:

static void
enable_paging(void) {
c0105635:	55                   	push   %ebp
c0105636:	89 e5                	mov    %esp,%ebp
c0105638:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c010563b:	a1 24 40 15 c0       	mov    0xc0154024,%eax
c0105640:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0105643:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105646:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0105649:	0f 20 c0             	mov    %cr0,%eax
c010564c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c010564f:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105652:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0105655:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c010565c:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0105660:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105663:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0105666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105669:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c010566c:	c9                   	leave  
c010566d:	c3                   	ret    

c010566e <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010566e:	55                   	push   %ebp
c010566f:	89 e5                	mov    %esp,%ebp
c0105671:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105674:	8b 45 14             	mov    0x14(%ebp),%eax
c0105677:	8b 55 0c             	mov    0xc(%ebp),%edx
c010567a:	31 d0                	xor    %edx,%eax
c010567c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105681:	85 c0                	test   %eax,%eax
c0105683:	74 24                	je     c01056a9 <boot_map_segment+0x3b>
c0105685:	c7 44 24 0c 76 67 11 	movl   $0xc0116776,0xc(%esp)
c010568c:	c0 
c010568d:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105694:	c0 
c0105695:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010569c:	00 
c010569d:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01056a4:	e8 1f b8 ff ff       	call   c0100ec8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c01056a9:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c01056b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056b3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056b8:	89 c2                	mov    %eax,%edx
c01056ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01056bd:	01 c2                	add    %eax,%edx
c01056bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056c2:	01 d0                	add    %edx,%eax
c01056c4:	83 e8 01             	sub    $0x1,%eax
c01056c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01056ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056cd:	ba 00 00 00 00       	mov    $0x0,%edx
c01056d2:	f7 75 f0             	divl   -0x10(%ebp)
c01056d5:	89 d0                	mov    %edx,%eax
c01056d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01056da:	29 c2                	sub    %eax,%edx
c01056dc:	89 d0                	mov    %edx,%eax
c01056de:	c1 e8 0c             	shr    $0xc,%eax
c01056e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01056e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01056ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056f2:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01056f5:	8b 45 14             	mov    0x14(%ebp),%eax
c01056f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105703:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105706:	eb 6b                	jmp    c0105773 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105708:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010570f:	00 
c0105710:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105713:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105717:	8b 45 08             	mov    0x8(%ebp),%eax
c010571a:	89 04 24             	mov    %eax,(%esp)
c010571d:	e8 d1 01 00 00       	call   c01058f3 <get_pte>
c0105722:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105725:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105729:	75 24                	jne    c010574f <boot_map_segment+0xe1>
c010572b:	c7 44 24 0c a2 67 11 	movl   $0xc01167a2,0xc(%esp)
c0105732:	c0 
c0105733:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010573a:	c0 
c010573b:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105742:	00 
c0105743:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010574a:	e8 79 b7 ff ff       	call   c0100ec8 <__panic>
        *ptep = pa | PTE_P | perm;
c010574f:	8b 45 18             	mov    0x18(%ebp),%eax
c0105752:	8b 55 14             	mov    0x14(%ebp),%edx
c0105755:	09 d0                	or     %edx,%eax
c0105757:	83 c8 01             	or     $0x1,%eax
c010575a:	89 c2                	mov    %eax,%edx
c010575c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010575f:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105761:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105765:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010576c:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105773:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105777:	75 8f                	jne    c0105708 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105779:	c9                   	leave  
c010577a:	c3                   	ret    

c010577b <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010577b:	55                   	push   %ebp
c010577c:	89 e5                	mov    %esp,%ebp
c010577e:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105781:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105788:	e8 ef f9 ff ff       	call   c010517c <alloc_pages>
c010578d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105790:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105794:	75 1c                	jne    c01057b2 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105796:	c7 44 24 08 af 67 11 	movl   $0xc01167af,0x8(%esp)
c010579d:	c0 
c010579e:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01057a5:	00 
c01057a6:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01057ad:	e8 16 b7 ff ff       	call   c0100ec8 <__panic>
    }
    return page2kva(p);
c01057b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057b5:	89 04 24             	mov    %eax,(%esp)
c01057b8:	e8 10 f7 ff ff       	call   c0104ecd <page2kva>
}
c01057bd:	c9                   	leave  
c01057be:	c3                   	ret    

c01057bf <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c01057bf:	55                   	push   %ebp
c01057c0:	89 e5                	mov    %esp,%ebp
c01057c2:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c01057c5:	e8 60 f9 ff ff       	call   c010512a <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c01057ca:	e8 75 fa ff ff       	call   c0105244 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01057cf:	e8 5d 09 00 00       	call   c0106131 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c01057d4:	e8 a2 ff ff ff       	call   c010577b <boot_alloc_page>
c01057d9:	a3 84 0e 15 c0       	mov    %eax,0xc0150e84
    memset(boot_pgdir, 0, PGSIZE);
c01057de:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01057e3:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01057ea:	00 
c01057eb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01057f2:	00 
c01057f3:	89 04 24             	mov    %eax,(%esp)
c01057f6:	e8 2b ff 00 00       	call   c0115726 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01057fb:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0105800:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105803:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010580a:	77 23                	ja     c010582f <pmm_init+0x70>
c010580c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010580f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105813:	c7 44 24 08 44 67 11 	movl   $0xc0116744,0x8(%esp)
c010581a:	c0 
c010581b:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105822:	00 
c0105823:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010582a:	e8 99 b6 ff ff       	call   c0100ec8 <__panic>
c010582f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105832:	05 00 00 00 40       	add    $0x40000000,%eax
c0105837:	a3 24 40 15 c0       	mov    %eax,0xc0154024

    check_pgdir();
c010583c:	e8 0e 09 00 00       	call   c010614f <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105841:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0105846:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010584c:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0105851:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105854:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010585b:	77 23                	ja     c0105880 <pmm_init+0xc1>
c010585d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105860:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105864:	c7 44 24 08 44 67 11 	movl   $0xc0116744,0x8(%esp)
c010586b:	c0 
c010586c:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105873:	00 
c0105874:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010587b:	e8 48 b6 ff ff       	call   c0100ec8 <__panic>
c0105880:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105883:	05 00 00 00 40       	add    $0x40000000,%eax
c0105888:	83 c8 03             	or     $0x3,%eax
c010588b:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010588d:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0105892:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105899:	00 
c010589a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01058a1:	00 
c01058a2:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01058a9:	38 
c01058aa:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c01058b1:	c0 
c01058b2:	89 04 24             	mov    %eax,(%esp)
c01058b5:	e8 b4 fd ff ff       	call   c010566e <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c01058ba:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01058bf:	8b 15 84 0e 15 c0    	mov    0xc0150e84,%edx
c01058c5:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c01058cb:	89 10                	mov    %edx,(%eax)

    enable_paging();
c01058cd:	e8 63 fd ff ff       	call   c0105635 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01058d2:	e8 64 f7 ff ff       	call   c010503b <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01058d7:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01058dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01058e2:	e8 03 0f 00 00       	call   c01067ea <check_boot_pgdir>

    print_pgdir();
c01058e7:	e8 8b 13 00 00       	call   c0106c77 <print_pgdir>
    
    kmalloc_init();
c01058ec:	e8 c6 f2 ff ff       	call   c0104bb7 <kmalloc_init>

}
c01058f1:	c9                   	leave  
c01058f2:	c3                   	ret    

c01058f3 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01058f3:	55                   	push   %ebp
c01058f4:	89 e5                	mov    %esp,%ebp
c01058f6:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01058f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058fc:	c1 e8 16             	shr    $0x16,%eax
c01058ff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105906:	8b 45 08             	mov    0x8(%ebp),%eax
c0105909:	01 d0                	add    %edx,%eax
c010590b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c010590e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105911:	8b 00                	mov    (%eax),%eax
c0105913:	83 e0 01             	and    $0x1,%eax
c0105916:	85 c0                	test   %eax,%eax
c0105918:	0f 85 af 00 00 00    	jne    c01059cd <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c010591e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105922:	74 15                	je     c0105939 <get_pte+0x46>
c0105924:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010592b:	e8 4c f8 ff ff       	call   c010517c <alloc_pages>
c0105930:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105933:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105937:	75 0a                	jne    c0105943 <get_pte+0x50>
            return NULL;
c0105939:	b8 00 00 00 00       	mov    $0x0,%eax
c010593e:	e9 e6 00 00 00       	jmp    c0105a29 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0105943:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010594a:	00 
c010594b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010594e:	89 04 24             	mov    %eax,(%esp)
c0105951:	e8 2b f6 ff ff       	call   c0104f81 <set_page_ref>
        uintptr_t pa = page2pa(page);
c0105956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105959:	89 04 24             	mov    %eax,(%esp)
c010595c:	e8 07 f5 ff ff       	call   c0104e68 <page2pa>
c0105961:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105964:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105967:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010596a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010596d:	c1 e8 0c             	shr    $0xc,%eax
c0105970:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105973:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0105978:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010597b:	72 23                	jb     c01059a0 <get_pte+0xad>
c010597d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105980:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105984:	c7 44 24 08 a0 66 11 	movl   $0xc01166a0,0x8(%esp)
c010598b:	c0 
c010598c:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0105993:	00 
c0105994:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010599b:	e8 28 b5 ff ff       	call   c0100ec8 <__panic>
c01059a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059a3:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059a8:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01059af:	00 
c01059b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01059b7:	00 
c01059b8:	89 04 24             	mov    %eax,(%esp)
c01059bb:	e8 66 fd 00 00       	call   c0115726 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01059c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059c3:	83 c8 07             	or     $0x7,%eax
c01059c6:	89 c2                	mov    %eax,%edx
c01059c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059cb:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01059cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059d0:	8b 00                	mov    (%eax),%eax
c01059d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01059d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01059da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059dd:	c1 e8 0c             	shr    $0xc,%eax
c01059e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01059e3:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c01059e8:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01059eb:	72 23                	jb     c0105a10 <get_pte+0x11d>
c01059ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059f4:	c7 44 24 08 a0 66 11 	movl   $0xc01166a0,0x8(%esp)
c01059fb:	c0 
c01059fc:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0105a03:	00 
c0105a04:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105a0b:	e8 b8 b4 ff ff       	call   c0100ec8 <__panic>
c0105a10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a13:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a18:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a1b:	c1 ea 0c             	shr    $0xc,%edx
c0105a1e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105a24:	c1 e2 02             	shl    $0x2,%edx
c0105a27:	01 d0                	add    %edx,%eax
}
c0105a29:	c9                   	leave  
c0105a2a:	c3                   	ret    

c0105a2b <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105a2b:	55                   	push   %ebp
c0105a2c:	89 e5                	mov    %esp,%ebp
c0105a2e:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105a31:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a38:	00 
c0105a39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a43:	89 04 24             	mov    %eax,(%esp)
c0105a46:	e8 a8 fe ff ff       	call   c01058f3 <get_pte>
c0105a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a4e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a52:	74 08                	je     c0105a5c <get_page+0x31>
        *ptep_store = ptep;
c0105a54:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a5a:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a60:	74 1b                	je     c0105a7d <get_page+0x52>
c0105a62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a65:	8b 00                	mov    (%eax),%eax
c0105a67:	83 e0 01             	and    $0x1,%eax
c0105a6a:	85 c0                	test   %eax,%eax
c0105a6c:	74 0f                	je     c0105a7d <get_page+0x52>
        return pte2page(*ptep);
c0105a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a71:	8b 00                	mov    (%eax),%eax
c0105a73:	89 04 24             	mov    %eax,(%esp)
c0105a76:	e8 a6 f4 ff ff       	call   c0104f21 <pte2page>
c0105a7b:	eb 05                	jmp    c0105a82 <get_page+0x57>
    }
    return NULL;
c0105a7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a82:	c9                   	leave  
c0105a83:	c3                   	ret    

c0105a84 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a84:	55                   	push   %ebp
c0105a85:	89 e5                	mov    %esp,%ebp
c0105a87:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a8a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a8d:	8b 00                	mov    (%eax),%eax
c0105a8f:	83 e0 01             	and    $0x1,%eax
c0105a92:	85 c0                	test   %eax,%eax
c0105a94:	74 4d                	je     c0105ae3 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0105a96:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a99:	8b 00                	mov    (%eax),%eax
c0105a9b:	89 04 24             	mov    %eax,(%esp)
c0105a9e:	e8 7e f4 ff ff       	call   c0104f21 <pte2page>
c0105aa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aa9:	89 04 24             	mov    %eax,(%esp)
c0105aac:	e8 f4 f4 ff ff       	call   c0104fa5 <page_ref_dec>
c0105ab1:	85 c0                	test   %eax,%eax
c0105ab3:	75 13                	jne    c0105ac8 <page_remove_pte+0x44>
            free_page(page);
c0105ab5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105abc:	00 
c0105abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ac0:	89 04 24             	mov    %eax,(%esp)
c0105ac3:	e8 1f f7 ff ff       	call   c01051e7 <free_pages>
        }
        *ptep = 0;
c0105ac8:	8b 45 10             	mov    0x10(%ebp),%eax
c0105acb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ad4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ad8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105adb:	89 04 24             	mov    %eax,(%esp)
c0105ade:	e8 1d 05 00 00       	call   c0106000 <tlb_invalidate>
    }
}
c0105ae3:	c9                   	leave  
c0105ae4:	c3                   	ret    

c0105ae5 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105ae5:	55                   	push   %ebp
c0105ae6:	89 e5                	mov    %esp,%ebp
c0105ae8:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105aeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aee:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105af3:	85 c0                	test   %eax,%eax
c0105af5:	75 0c                	jne    c0105b03 <unmap_range+0x1e>
c0105af7:	8b 45 10             	mov    0x10(%ebp),%eax
c0105afa:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105aff:	85 c0                	test   %eax,%eax
c0105b01:	74 24                	je     c0105b27 <unmap_range+0x42>
c0105b03:	c7 44 24 0c c8 67 11 	movl   $0xc01167c8,0xc(%esp)
c0105b0a:	c0 
c0105b0b:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105b12:	c0 
c0105b13:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105b1a:	00 
c0105b1b:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105b22:	e8 a1 b3 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105b27:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b2e:	76 11                	jbe    c0105b41 <unmap_range+0x5c>
c0105b30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b33:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b36:	73 09                	jae    c0105b41 <unmap_range+0x5c>
c0105b38:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b3f:	76 24                	jbe    c0105b65 <unmap_range+0x80>
c0105b41:	c7 44 24 0c f1 67 11 	movl   $0xc01167f1,0xc(%esp)
c0105b48:	c0 
c0105b49:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105b50:	c0 
c0105b51:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105b58:	00 
c0105b59:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105b60:	e8 63 b3 ff ff       	call   c0100ec8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b65:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b6c:	00 
c0105b6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b70:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b74:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b77:	89 04 24             	mov    %eax,(%esp)
c0105b7a:	e8 74 fd ff ff       	call   c01058f3 <get_pte>
c0105b7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b86:	75 18                	jne    c0105ba0 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b8b:	05 00 00 40 00       	add    $0x400000,%eax
c0105b90:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b96:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b9b:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b9e:	eb 29                	jmp    c0105bc9 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ba3:	8b 00                	mov    (%eax),%eax
c0105ba5:	85 c0                	test   %eax,%eax
c0105ba7:	74 19                	je     c0105bc2 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105ba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bac:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bb3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bba:	89 04 24             	mov    %eax,(%esp)
c0105bbd:	e8 c2 fe ff ff       	call   c0105a84 <page_remove_pte>
        }
        start += PGSIZE;
c0105bc2:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105bc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105bcd:	74 08                	je     c0105bd7 <unmap_range+0xf2>
c0105bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bd2:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bd5:	72 8e                	jb     c0105b65 <unmap_range+0x80>
}
c0105bd7:	c9                   	leave  
c0105bd8:	c3                   	ret    

c0105bd9 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105bd9:	55                   	push   %ebp
c0105bda:	89 e5                	mov    %esp,%ebp
c0105bdc:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105be2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105be7:	85 c0                	test   %eax,%eax
c0105be9:	75 0c                	jne    c0105bf7 <exit_range+0x1e>
c0105beb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bee:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bf3:	85 c0                	test   %eax,%eax
c0105bf5:	74 24                	je     c0105c1b <exit_range+0x42>
c0105bf7:	c7 44 24 0c c8 67 11 	movl   $0xc01167c8,0xc(%esp)
c0105bfe:	c0 
c0105bff:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105c06:	c0 
c0105c07:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105c0e:	00 
c0105c0f:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105c16:	e8 ad b2 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105c1b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105c22:	76 11                	jbe    c0105c35 <exit_range+0x5c>
c0105c24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c27:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c2a:	73 09                	jae    c0105c35 <exit_range+0x5c>
c0105c2c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c33:	76 24                	jbe    c0105c59 <exit_range+0x80>
c0105c35:	c7 44 24 0c f1 67 11 	movl   $0xc01167f1,0xc(%esp)
c0105c3c:	c0 
c0105c3d:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105c44:	c0 
c0105c45:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105c4c:	00 
c0105c4d:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105c54:	e8 6f b2 ff ff       	call   c0100ec8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c62:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c67:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c6d:	c1 e8 16             	shr    $0x16,%eax
c0105c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c80:	01 d0                	add    %edx,%eax
c0105c82:	8b 00                	mov    (%eax),%eax
c0105c84:	83 e0 01             	and    $0x1,%eax
c0105c87:	85 c0                	test   %eax,%eax
c0105c89:	74 3e                	je     c0105cc9 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105c8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c8e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c98:	01 d0                	add    %edx,%eax
c0105c9a:	8b 00                	mov    (%eax),%eax
c0105c9c:	89 04 24             	mov    %eax,(%esp)
c0105c9f:	e8 bb f2 ff ff       	call   c0104f5f <pde2page>
c0105ca4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105cab:	00 
c0105cac:	89 04 24             	mov    %eax,(%esp)
c0105caf:	e8 33 f5 ff ff       	call   c01051e7 <free_pages>
            pgdir[pde_idx] = 0;
c0105cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cb7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105cbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cc1:	01 d0                	add    %edx,%eax
c0105cc3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105cc9:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105cd0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105cd4:	74 08                	je     c0105cde <exit_range+0x105>
c0105cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cd9:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105cdc:	72 8c                	jb     c0105c6a <exit_range+0x91>
}
c0105cde:	c9                   	leave  
c0105cdf:	c3                   	ret    

c0105ce0 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105ce0:	55                   	push   %ebp
c0105ce1:	89 e5                	mov    %esp,%ebp
c0105ce3:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ce6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ce9:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cee:	85 c0                	test   %eax,%eax
c0105cf0:	75 0c                	jne    c0105cfe <copy_range+0x1e>
c0105cf2:	8b 45 14             	mov    0x14(%ebp),%eax
c0105cf5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cfa:	85 c0                	test   %eax,%eax
c0105cfc:	74 24                	je     c0105d22 <copy_range+0x42>
c0105cfe:	c7 44 24 0c c8 67 11 	movl   $0xc01167c8,0xc(%esp)
c0105d05:	c0 
c0105d06:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105d0d:	c0 
c0105d0e:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105d15:	00 
c0105d16:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105d1d:	e8 a6 b1 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105d22:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105d29:	76 11                	jbe    c0105d3c <copy_range+0x5c>
c0105d2b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d2e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d31:	73 09                	jae    c0105d3c <copy_range+0x5c>
c0105d33:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105d3a:	76 24                	jbe    c0105d60 <copy_range+0x80>
c0105d3c:	c7 44 24 0c f1 67 11 	movl   $0xc01167f1,0xc(%esp)
c0105d43:	c0 
c0105d44:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105d4b:	c0 
c0105d4c:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105d53:	00 
c0105d54:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105d5b:	e8 68 b1 ff ff       	call   c0100ec8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d60:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d67:	00 
c0105d68:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d72:	89 04 24             	mov    %eax,(%esp)
c0105d75:	e8 79 fb ff ff       	call   c01058f3 <get_pte>
c0105d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d81:	75 1b                	jne    c0105d9e <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d83:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d86:	05 00 00 40 00       	add    $0x400000,%eax
c0105d8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d91:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d96:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d99:	e9 4c 01 00 00       	jmp    c0105eea <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105da1:	8b 00                	mov    (%eax),%eax
c0105da3:	83 e0 01             	and    $0x1,%eax
c0105da6:	85 c0                	test   %eax,%eax
c0105da8:	0f 84 35 01 00 00    	je     c0105ee3 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105dae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105db5:	00 
c0105db6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105db9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dc0:	89 04 24             	mov    %eax,(%esp)
c0105dc3:	e8 2b fb ff ff       	call   c01058f3 <get_pte>
c0105dc8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105dcb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105dcf:	75 0a                	jne    c0105ddb <copy_range+0xfb>
                return -E_NO_MEM;
c0105dd1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105dd6:	e9 26 01 00 00       	jmp    c0105f01 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dde:	8b 00                	mov    (%eax),%eax
c0105de0:	83 e0 07             	and    $0x7,%eax
c0105de3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105de9:	8b 00                	mov    (%eax),%eax
c0105deb:	89 04 24             	mov    %eax,(%esp)
c0105dee:	e8 2e f1 ff ff       	call   c0104f21 <pte2page>
c0105df3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105df6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105dfd:	e8 7a f3 ff ff       	call   c010517c <alloc_pages>
c0105e02:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105e05:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105e09:	75 24                	jne    c0105e2f <copy_range+0x14f>
c0105e0b:	c7 44 24 0c 09 68 11 	movl   $0xc0116809,0xc(%esp)
c0105e12:	c0 
c0105e13:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105e1a:	c0 
c0105e1b:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105e22:	00 
c0105e23:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105e2a:	e8 99 b0 ff ff       	call   c0100ec8 <__panic>
        assert(npage!=NULL);
c0105e2f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e33:	75 24                	jne    c0105e59 <copy_range+0x179>
c0105e35:	c7 44 24 0c 14 68 11 	movl   $0xc0116814,0xc(%esp)
c0105e3c:	c0 
c0105e3d:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105e44:	c0 
c0105e45:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105e4c:	00 
c0105e4d:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105e54:	e8 6f b0 ff ff       	call   c0100ec8 <__panic>
        int ret=0;
c0105e59:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105e60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e63:	89 04 24             	mov    %eax,(%esp)
c0105e66:	e8 62 f0 ff ff       	call   c0104ecd <page2kva>
c0105e6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105e6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e71:	89 04 24             	mov    %eax,(%esp)
c0105e74:	e8 54 f0 ff ff       	call   c0104ecd <page2kva>
c0105e79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105e7c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e83:	00 
c0105e84:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e8b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e8e:	89 04 24             	mov    %eax,(%esp)
c0105e91:	e8 72 f9 00 00       	call   c0115808 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105e96:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e99:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e9d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ea0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ea4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ea7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105eab:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eae:	89 04 24             	mov    %eax,(%esp)
c0105eb1:	e8 91 00 00 00       	call   c0105f47 <page_insert>
c0105eb6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105eb9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105ebd:	74 24                	je     c0105ee3 <copy_range+0x203>
c0105ebf:	c7 44 24 0c 20 68 11 	movl   $0xc0116820,0xc(%esp)
c0105ec6:	c0 
c0105ec7:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0105ece:	c0 
c0105ecf:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c0105ed6:	00 
c0105ed7:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0105ede:	e8 e5 af ff ff       	call   c0100ec8 <__panic>
        }
        start += PGSIZE;
c0105ee3:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105eea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105eee:	74 0c                	je     c0105efc <copy_range+0x21c>
c0105ef0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ef3:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ef6:	0f 82 64 fe ff ff    	jb     c0105d60 <copy_range+0x80>
    return 0;
c0105efc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f01:	c9                   	leave  
c0105f02:	c3                   	ret    

c0105f03 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105f03:	55                   	push   %ebp
c0105f04:	89 e5                	mov    %esp,%ebp
c0105f06:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105f09:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105f10:	00 
c0105f11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f18:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f1b:	89 04 24             	mov    %eax,(%esp)
c0105f1e:	e8 d0 f9 ff ff       	call   c01058f3 <get_pte>
c0105f23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105f26:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f2a:	74 19                	je     c0105f45 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f2f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f3d:	89 04 24             	mov    %eax,(%esp)
c0105f40:	e8 3f fb ff ff       	call   c0105a84 <page_remove_pte>
    }
}
c0105f45:	c9                   	leave  
c0105f46:	c3                   	ret    

c0105f47 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105f47:	55                   	push   %ebp
c0105f48:	89 e5                	mov    %esp,%ebp
c0105f4a:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105f4d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105f54:	00 
c0105f55:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f5f:	89 04 24             	mov    %eax,(%esp)
c0105f62:	e8 8c f9 ff ff       	call   c01058f3 <get_pte>
c0105f67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f6e:	75 0a                	jne    c0105f7a <page_insert+0x33>
        return -E_NO_MEM;
c0105f70:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f75:	e9 84 00 00 00       	jmp    c0105ffe <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f7a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f7d:	89 04 24             	mov    %eax,(%esp)
c0105f80:	e8 09 f0 ff ff       	call   c0104f8e <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f88:	8b 00                	mov    (%eax),%eax
c0105f8a:	83 e0 01             	and    $0x1,%eax
c0105f8d:	85 c0                	test   %eax,%eax
c0105f8f:	74 3e                	je     c0105fcf <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f94:	8b 00                	mov    (%eax),%eax
c0105f96:	89 04 24             	mov    %eax,(%esp)
c0105f99:	e8 83 ef ff ff       	call   c0104f21 <pte2page>
c0105f9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105fa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fa4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105fa7:	75 0d                	jne    c0105fb6 <page_insert+0x6f>
            page_ref_dec(page);
c0105fa9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fac:	89 04 24             	mov    %eax,(%esp)
c0105faf:	e8 f1 ef ff ff       	call   c0104fa5 <page_ref_dec>
c0105fb4:	eb 19                	jmp    c0105fcf <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fb9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fbd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fc7:	89 04 24             	mov    %eax,(%esp)
c0105fca:	e8 b5 fa ff ff       	call   c0105a84 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fd2:	89 04 24             	mov    %eax,(%esp)
c0105fd5:	e8 8e ee ff ff       	call   c0104e68 <page2pa>
c0105fda:	0b 45 14             	or     0x14(%ebp),%eax
c0105fdd:	83 c8 01             	or     $0x1,%eax
c0105fe0:	89 c2                	mov    %eax,%edx
c0105fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fe5:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105fe7:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fea:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fee:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ff1:	89 04 24             	mov    %eax,(%esp)
c0105ff4:	e8 07 00 00 00       	call   c0106000 <tlb_invalidate>
    return 0;
c0105ff9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ffe:	c9                   	leave  
c0105fff:	c3                   	ret    

c0106000 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0106000:	55                   	push   %ebp
c0106001:	89 e5                	mov    %esp,%ebp
c0106003:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0106006:	0f 20 d8             	mov    %cr3,%eax
c0106009:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c010600c:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c010600f:	89 c2                	mov    %eax,%edx
c0106011:	8b 45 08             	mov    0x8(%ebp),%eax
c0106014:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106017:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010601e:	77 23                	ja     c0106043 <tlb_invalidate+0x43>
c0106020:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106023:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106027:	c7 44 24 08 44 67 11 	movl   $0xc0116744,0x8(%esp)
c010602e:	c0 
c010602f:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c0106036:	00 
c0106037:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010603e:	e8 85 ae ff ff       	call   c0100ec8 <__panic>
c0106043:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106046:	05 00 00 00 40       	add    $0x40000000,%eax
c010604b:	39 c2                	cmp    %eax,%edx
c010604d:	75 0c                	jne    c010605b <tlb_invalidate+0x5b>
        invlpg((void *)la);
c010604f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106052:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0106055:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106058:	0f 01 38             	invlpg (%eax)
    }
}
c010605b:	c9                   	leave  
c010605c:	c3                   	ret    

c010605d <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c010605d:	55                   	push   %ebp
c010605e:	89 e5                	mov    %esp,%ebp
c0106060:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106063:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010606a:	e8 0d f1 ff ff       	call   c010517c <alloc_pages>
c010606f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106072:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106076:	0f 84 b0 00 00 00    	je     c010612c <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c010607c:	8b 45 10             	mov    0x10(%ebp),%eax
c010607f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106083:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106086:	89 44 24 08          	mov    %eax,0x8(%esp)
c010608a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010608d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106091:	8b 45 08             	mov    0x8(%ebp),%eax
c0106094:	89 04 24             	mov    %eax,(%esp)
c0106097:	e8 ab fe ff ff       	call   c0105f47 <page_insert>
c010609c:	85 c0                	test   %eax,%eax
c010609e:	74 1a                	je     c01060ba <pgdir_alloc_page+0x5d>
            free_page(page);
c01060a0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01060a7:	00 
c01060a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060ab:	89 04 24             	mov    %eax,(%esp)
c01060ae:	e8 34 f1 ff ff       	call   c01051e7 <free_pages>
            return NULL;
c01060b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01060b8:	eb 75                	jmp    c010612f <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c01060ba:	a1 0c 0f 15 c0       	mov    0xc0150f0c,%eax
c01060bf:	85 c0                	test   %eax,%eax
c01060c1:	74 69                	je     c010612c <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01060c3:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c01060c8:	85 c0                	test   %eax,%eax
c01060ca:	74 60                	je     c010612c <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01060cc:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c01060d1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01060d8:	00 
c01060d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060dc:	89 54 24 08          	mov    %edx,0x8(%esp)
c01060e0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060e7:	89 04 24             	mov    %eax,(%esp)
c01060ea:	e8 5b 0e 00 00       	call   c0106f4a <swap_map_swappable>
                page->pra_vaddr=la;
c01060ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060f2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060f5:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c01060f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060fb:	89 04 24             	mov    %eax,(%esp)
c01060fe:	e8 74 ee ff ff       	call   c0104f77 <page_ref>
c0106103:	83 f8 01             	cmp    $0x1,%eax
c0106106:	74 24                	je     c010612c <pgdir_alloc_page+0xcf>
c0106108:	c7 44 24 0c 29 68 11 	movl   $0xc0116829,0xc(%esp)
c010610f:	c0 
c0106110:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106117:	c0 
c0106118:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c010611f:	00 
c0106120:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106127:	e8 9c ad ff ff       	call   c0100ec8 <__panic>
            }
        }

    }

    return page;
c010612c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010612f:	c9                   	leave  
c0106130:	c3                   	ret    

c0106131 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106131:	55                   	push   %ebp
c0106132:	89 e5                	mov    %esp,%ebp
c0106134:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0106137:	a1 20 40 15 c0       	mov    0xc0154020,%eax
c010613c:	8b 40 18             	mov    0x18(%eax),%eax
c010613f:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106141:	c7 04 24 40 68 11 c0 	movl   $0xc0116840,(%esp)
c0106148:	e8 18 a2 ff ff       	call   c0100365 <cprintf>
}
c010614d:	c9                   	leave  
c010614e:	c3                   	ret    

c010614f <check_pgdir>:

static void
check_pgdir(void) {
c010614f:	55                   	push   %ebp
c0106150:	89 e5                	mov    %esp,%ebp
c0106152:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0106155:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c010615a:	3d 00 80 03 00       	cmp    $0x38000,%eax
c010615f:	76 24                	jbe    c0106185 <check_pgdir+0x36>
c0106161:	c7 44 24 0c 5f 68 11 	movl   $0xc011685f,0xc(%esp)
c0106168:	c0 
c0106169:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106170:	c0 
c0106171:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c0106178:	00 
c0106179:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106180:	e8 43 ad ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0106185:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c010618a:	85 c0                	test   %eax,%eax
c010618c:	74 0e                	je     c010619c <check_pgdir+0x4d>
c010618e:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106193:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106198:	85 c0                	test   %eax,%eax
c010619a:	74 24                	je     c01061c0 <check_pgdir+0x71>
c010619c:	c7 44 24 0c 7c 68 11 	movl   $0xc011687c,0xc(%esp)
c01061a3:	c0 
c01061a4:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01061ab:	c0 
c01061ac:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c01061b3:	00 
c01061b4:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01061bb:	e8 08 ad ff ff       	call   c0100ec8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01061c0:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01061c5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061cc:	00 
c01061cd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061d4:	00 
c01061d5:	89 04 24             	mov    %eax,(%esp)
c01061d8:	e8 4e f8 ff ff       	call   c0105a2b <get_page>
c01061dd:	85 c0                	test   %eax,%eax
c01061df:	74 24                	je     c0106205 <check_pgdir+0xb6>
c01061e1:	c7 44 24 0c b4 68 11 	movl   $0xc01168b4,0xc(%esp)
c01061e8:	c0 
c01061e9:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01061f0:	c0 
c01061f1:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01061f8:	00 
c01061f9:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106200:	e8 c3 ac ff ff       	call   c0100ec8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0106205:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010620c:	e8 6b ef ff ff       	call   c010517c <alloc_pages>
c0106211:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0106214:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106219:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106220:	00 
c0106221:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106228:	00 
c0106229:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010622c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106230:	89 04 24             	mov    %eax,(%esp)
c0106233:	e8 0f fd ff ff       	call   c0105f47 <page_insert>
c0106238:	85 c0                	test   %eax,%eax
c010623a:	74 24                	je     c0106260 <check_pgdir+0x111>
c010623c:	c7 44 24 0c dc 68 11 	movl   $0xc01168dc,0xc(%esp)
c0106243:	c0 
c0106244:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010624b:	c0 
c010624c:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106253:	00 
c0106254:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010625b:	e8 68 ac ff ff       	call   c0100ec8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106260:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106265:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010626c:	00 
c010626d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106274:	00 
c0106275:	89 04 24             	mov    %eax,(%esp)
c0106278:	e8 76 f6 ff ff       	call   c01058f3 <get_pte>
c010627d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106280:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106284:	75 24                	jne    c01062aa <check_pgdir+0x15b>
c0106286:	c7 44 24 0c 08 69 11 	movl   $0xc0116908,0xc(%esp)
c010628d:	c0 
c010628e:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106295:	c0 
c0106296:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c010629d:	00 
c010629e:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01062a5:	e8 1e ac ff ff       	call   c0100ec8 <__panic>
    assert(pte2page(*ptep) == p1);
c01062aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062ad:	8b 00                	mov    (%eax),%eax
c01062af:	89 04 24             	mov    %eax,(%esp)
c01062b2:	e8 6a ec ff ff       	call   c0104f21 <pte2page>
c01062b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01062ba:	74 24                	je     c01062e0 <check_pgdir+0x191>
c01062bc:	c7 44 24 0c 35 69 11 	movl   $0xc0116935,0xc(%esp)
c01062c3:	c0 
c01062c4:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01062cb:	c0 
c01062cc:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01062d3:	00 
c01062d4:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01062db:	e8 e8 ab ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 1);
c01062e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062e3:	89 04 24             	mov    %eax,(%esp)
c01062e6:	e8 8c ec ff ff       	call   c0104f77 <page_ref>
c01062eb:	83 f8 01             	cmp    $0x1,%eax
c01062ee:	74 24                	je     c0106314 <check_pgdir+0x1c5>
c01062f0:	c7 44 24 0c 4b 69 11 	movl   $0xc011694b,0xc(%esp)
c01062f7:	c0 
c01062f8:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01062ff:	c0 
c0106300:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c0106307:	00 
c0106308:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010630f:	e8 b4 ab ff ff       	call   c0100ec8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0106314:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106319:	8b 00                	mov    (%eax),%eax
c010631b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106320:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106323:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106326:	c1 e8 0c             	shr    $0xc,%eax
c0106329:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010632c:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0106331:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106334:	72 23                	jb     c0106359 <check_pgdir+0x20a>
c0106336:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106339:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010633d:	c7 44 24 08 a0 66 11 	movl   $0xc01166a0,0x8(%esp)
c0106344:	c0 
c0106345:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c010634c:	00 
c010634d:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106354:	e8 6f ab ff ff       	call   c0100ec8 <__panic>
c0106359:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010635c:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106361:	83 c0 04             	add    $0x4,%eax
c0106364:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0106367:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c010636c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106373:	00 
c0106374:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010637b:	00 
c010637c:	89 04 24             	mov    %eax,(%esp)
c010637f:	e8 6f f5 ff ff       	call   c01058f3 <get_pte>
c0106384:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106387:	74 24                	je     c01063ad <check_pgdir+0x25e>
c0106389:	c7 44 24 0c 60 69 11 	movl   $0xc0116960,0xc(%esp)
c0106390:	c0 
c0106391:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106398:	c0 
c0106399:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c01063a0:	00 
c01063a1:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01063a8:	e8 1b ab ff ff       	call   c0100ec8 <__panic>

    p2 = alloc_page();
c01063ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01063b4:	e8 c3 ed ff ff       	call   c010517c <alloc_pages>
c01063b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01063bc:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01063c1:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01063c8:	00 
c01063c9:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01063d0:	00 
c01063d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063d4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01063d8:	89 04 24             	mov    %eax,(%esp)
c01063db:	e8 67 fb ff ff       	call   c0105f47 <page_insert>
c01063e0:	85 c0                	test   %eax,%eax
c01063e2:	74 24                	je     c0106408 <check_pgdir+0x2b9>
c01063e4:	c7 44 24 0c 88 69 11 	movl   $0xc0116988,0xc(%esp)
c01063eb:	c0 
c01063ec:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01063f3:	c0 
c01063f4:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01063fb:	00 
c01063fc:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106403:	e8 c0 aa ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106408:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c010640d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106414:	00 
c0106415:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010641c:	00 
c010641d:	89 04 24             	mov    %eax,(%esp)
c0106420:	e8 ce f4 ff ff       	call   c01058f3 <get_pte>
c0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010642c:	75 24                	jne    c0106452 <check_pgdir+0x303>
c010642e:	c7 44 24 0c c0 69 11 	movl   $0xc01169c0,0xc(%esp)
c0106435:	c0 
c0106436:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010643d:	c0 
c010643e:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c0106445:	00 
c0106446:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010644d:	e8 76 aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_U);
c0106452:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106455:	8b 00                	mov    (%eax),%eax
c0106457:	83 e0 04             	and    $0x4,%eax
c010645a:	85 c0                	test   %eax,%eax
c010645c:	75 24                	jne    c0106482 <check_pgdir+0x333>
c010645e:	c7 44 24 0c f0 69 11 	movl   $0xc01169f0,0xc(%esp)
c0106465:	c0 
c0106466:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010646d:	c0 
c010646e:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c0106475:	00 
c0106476:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010647d:	e8 46 aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_W);
c0106482:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106485:	8b 00                	mov    (%eax),%eax
c0106487:	83 e0 02             	and    $0x2,%eax
c010648a:	85 c0                	test   %eax,%eax
c010648c:	75 24                	jne    c01064b2 <check_pgdir+0x363>
c010648e:	c7 44 24 0c fe 69 11 	movl   $0xc01169fe,0xc(%esp)
c0106495:	c0 
c0106496:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010649d:	c0 
c010649e:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01064a5:	00 
c01064a6:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01064ad:	e8 16 aa ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01064b2:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01064b7:	8b 00                	mov    (%eax),%eax
c01064b9:	83 e0 04             	and    $0x4,%eax
c01064bc:	85 c0                	test   %eax,%eax
c01064be:	75 24                	jne    c01064e4 <check_pgdir+0x395>
c01064c0:	c7 44 24 0c 0c 6a 11 	movl   $0xc0116a0c,0xc(%esp)
c01064c7:	c0 
c01064c8:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01064cf:	c0 
c01064d0:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01064d7:	00 
c01064d8:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01064df:	e8 e4 a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 1);
c01064e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064e7:	89 04 24             	mov    %eax,(%esp)
c01064ea:	e8 88 ea ff ff       	call   c0104f77 <page_ref>
c01064ef:	83 f8 01             	cmp    $0x1,%eax
c01064f2:	74 24                	je     c0106518 <check_pgdir+0x3c9>
c01064f4:	c7 44 24 0c 22 6a 11 	movl   $0xc0116a22,0xc(%esp)
c01064fb:	c0 
c01064fc:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106503:	c0 
c0106504:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c010650b:	00 
c010650c:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106513:	e8 b0 a9 ff ff       	call   c0100ec8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106518:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c010651d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106524:	00 
c0106525:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010652c:	00 
c010652d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106530:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106534:	89 04 24             	mov    %eax,(%esp)
c0106537:	e8 0b fa ff ff       	call   c0105f47 <page_insert>
c010653c:	85 c0                	test   %eax,%eax
c010653e:	74 24                	je     c0106564 <check_pgdir+0x415>
c0106540:	c7 44 24 0c 34 6a 11 	movl   $0xc0116a34,0xc(%esp)
c0106547:	c0 
c0106548:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010654f:	c0 
c0106550:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c0106557:	00 
c0106558:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010655f:	e8 64 a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 2);
c0106564:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106567:	89 04 24             	mov    %eax,(%esp)
c010656a:	e8 08 ea ff ff       	call   c0104f77 <page_ref>
c010656f:	83 f8 02             	cmp    $0x2,%eax
c0106572:	74 24                	je     c0106598 <check_pgdir+0x449>
c0106574:	c7 44 24 0c 60 6a 11 	movl   $0xc0116a60,0xc(%esp)
c010657b:	c0 
c010657c:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106583:	c0 
c0106584:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010658b:	00 
c010658c:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106593:	e8 30 a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106598:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010659b:	89 04 24             	mov    %eax,(%esp)
c010659e:	e8 d4 e9 ff ff       	call   c0104f77 <page_ref>
c01065a3:	85 c0                	test   %eax,%eax
c01065a5:	74 24                	je     c01065cb <check_pgdir+0x47c>
c01065a7:	c7 44 24 0c 72 6a 11 	movl   $0xc0116a72,0xc(%esp)
c01065ae:	c0 
c01065af:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01065b6:	c0 
c01065b7:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01065be:	00 
c01065bf:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01065c6:	e8 fd a8 ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01065cb:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01065d0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01065d7:	00 
c01065d8:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01065df:	00 
c01065e0:	89 04 24             	mov    %eax,(%esp)
c01065e3:	e8 0b f3 ff ff       	call   c01058f3 <get_pte>
c01065e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01065eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01065ef:	75 24                	jne    c0106615 <check_pgdir+0x4c6>
c01065f1:	c7 44 24 0c c0 69 11 	movl   $0xc01169c0,0xc(%esp)
c01065f8:	c0 
c01065f9:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106600:	c0 
c0106601:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0106608:	00 
c0106609:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106610:	e8 b3 a8 ff ff       	call   c0100ec8 <__panic>
    assert(pte2page(*ptep) == p1);
c0106615:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106618:	8b 00                	mov    (%eax),%eax
c010661a:	89 04 24             	mov    %eax,(%esp)
c010661d:	e8 ff e8 ff ff       	call   c0104f21 <pte2page>
c0106622:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106625:	74 24                	je     c010664b <check_pgdir+0x4fc>
c0106627:	c7 44 24 0c 35 69 11 	movl   $0xc0116935,0xc(%esp)
c010662e:	c0 
c010662f:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106636:	c0 
c0106637:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c010663e:	00 
c010663f:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106646:	e8 7d a8 ff ff       	call   c0100ec8 <__panic>
    assert((*ptep & PTE_U) == 0);
c010664b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010664e:	8b 00                	mov    (%eax),%eax
c0106650:	83 e0 04             	and    $0x4,%eax
c0106653:	85 c0                	test   %eax,%eax
c0106655:	74 24                	je     c010667b <check_pgdir+0x52c>
c0106657:	c7 44 24 0c 84 6a 11 	movl   $0xc0116a84,0xc(%esp)
c010665e:	c0 
c010665f:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106666:	c0 
c0106667:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c010666e:	00 
c010666f:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106676:	e8 4d a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, 0x0);
c010667b:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106680:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106687:	00 
c0106688:	89 04 24             	mov    %eax,(%esp)
c010668b:	e8 73 f8 ff ff       	call   c0105f03 <page_remove>
    assert(page_ref(p1) == 1);
c0106690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106693:	89 04 24             	mov    %eax,(%esp)
c0106696:	e8 dc e8 ff ff       	call   c0104f77 <page_ref>
c010669b:	83 f8 01             	cmp    $0x1,%eax
c010669e:	74 24                	je     c01066c4 <check_pgdir+0x575>
c01066a0:	c7 44 24 0c 4b 69 11 	movl   $0xc011694b,0xc(%esp)
c01066a7:	c0 
c01066a8:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01066af:	c0 
c01066b0:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01066b7:	00 
c01066b8:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01066bf:	e8 04 a8 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c01066c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066c7:	89 04 24             	mov    %eax,(%esp)
c01066ca:	e8 a8 e8 ff ff       	call   c0104f77 <page_ref>
c01066cf:	85 c0                	test   %eax,%eax
c01066d1:	74 24                	je     c01066f7 <check_pgdir+0x5a8>
c01066d3:	c7 44 24 0c 72 6a 11 	movl   $0xc0116a72,0xc(%esp)
c01066da:	c0 
c01066db:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01066e2:	c0 
c01066e3:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01066ea:	00 
c01066eb:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01066f2:	e8 d1 a7 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01066f7:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01066fc:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106703:	00 
c0106704:	89 04 24             	mov    %eax,(%esp)
c0106707:	e8 f7 f7 ff ff       	call   c0105f03 <page_remove>
    assert(page_ref(p1) == 0);
c010670c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010670f:	89 04 24             	mov    %eax,(%esp)
c0106712:	e8 60 e8 ff ff       	call   c0104f77 <page_ref>
c0106717:	85 c0                	test   %eax,%eax
c0106719:	74 24                	je     c010673f <check_pgdir+0x5f0>
c010671b:	c7 44 24 0c 99 6a 11 	movl   $0xc0116a99,0xc(%esp)
c0106722:	c0 
c0106723:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010672a:	c0 
c010672b:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0106732:	00 
c0106733:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010673a:	e8 89 a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c010673f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106742:	89 04 24             	mov    %eax,(%esp)
c0106745:	e8 2d e8 ff ff       	call   c0104f77 <page_ref>
c010674a:	85 c0                	test   %eax,%eax
c010674c:	74 24                	je     c0106772 <check_pgdir+0x623>
c010674e:	c7 44 24 0c 72 6a 11 	movl   $0xc0116a72,0xc(%esp)
c0106755:	c0 
c0106756:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010675d:	c0 
c010675e:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0106765:	00 
c0106766:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c010676d:	e8 56 a7 ff ff       	call   c0100ec8 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106772:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106777:	8b 00                	mov    (%eax),%eax
c0106779:	89 04 24             	mov    %eax,(%esp)
c010677c:	e8 de e7 ff ff       	call   c0104f5f <pde2page>
c0106781:	89 04 24             	mov    %eax,(%esp)
c0106784:	e8 ee e7 ff ff       	call   c0104f77 <page_ref>
c0106789:	83 f8 01             	cmp    $0x1,%eax
c010678c:	74 24                	je     c01067b2 <check_pgdir+0x663>
c010678e:	c7 44 24 0c ac 6a 11 	movl   $0xc0116aac,0xc(%esp)
c0106795:	c0 
c0106796:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c010679d:	c0 
c010679e:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c01067a5:	00 
c01067a6:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01067ad:	e8 16 a7 ff ff       	call   c0100ec8 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01067b2:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01067b7:	8b 00                	mov    (%eax),%eax
c01067b9:	89 04 24             	mov    %eax,(%esp)
c01067bc:	e8 9e e7 ff ff       	call   c0104f5f <pde2page>
c01067c1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01067c8:	00 
c01067c9:	89 04 24             	mov    %eax,(%esp)
c01067cc:	e8 16 ea ff ff       	call   c01051e7 <free_pages>
    boot_pgdir[0] = 0;
c01067d1:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01067d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01067dc:	c7 04 24 d3 6a 11 c0 	movl   $0xc0116ad3,(%esp)
c01067e3:	e8 7d 9b ff ff       	call   c0100365 <cprintf>
}
c01067e8:	c9                   	leave  
c01067e9:	c3                   	ret    

c01067ea <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01067ea:	55                   	push   %ebp
c01067eb:	89 e5                	mov    %esp,%ebp
c01067ed:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01067f7:	e9 ca 00 00 00       	jmp    c01068c6 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01067fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106802:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106805:	c1 e8 0c             	shr    $0xc,%eax
c0106808:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010680b:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0106810:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106813:	72 23                	jb     c0106838 <check_boot_pgdir+0x4e>
c0106815:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106818:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010681c:	c7 44 24 08 a0 66 11 	movl   $0xc01166a0,0x8(%esp)
c0106823:	c0 
c0106824:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c010682b:	00 
c010682c:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106833:	e8 90 a6 ff ff       	call   c0100ec8 <__panic>
c0106838:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010683b:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106840:	89 c2                	mov    %eax,%edx
c0106842:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106847:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010684e:	00 
c010684f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106853:	89 04 24             	mov    %eax,(%esp)
c0106856:	e8 98 f0 ff ff       	call   c01058f3 <get_pte>
c010685b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010685e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106862:	75 24                	jne    c0106888 <check_boot_pgdir+0x9e>
c0106864:	c7 44 24 0c f0 6a 11 	movl   $0xc0116af0,0xc(%esp)
c010686b:	c0 
c010686c:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106873:	c0 
c0106874:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c010687b:	00 
c010687c:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106883:	e8 40 a6 ff ff       	call   c0100ec8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106888:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010688b:	8b 00                	mov    (%eax),%eax
c010688d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106892:	89 c2                	mov    %eax,%edx
c0106894:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106897:	39 c2                	cmp    %eax,%edx
c0106899:	74 24                	je     c01068bf <check_boot_pgdir+0xd5>
c010689b:	c7 44 24 0c 2d 6b 11 	movl   $0xc0116b2d,0xc(%esp)
c01068a2:	c0 
c01068a3:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01068aa:	c0 
c01068ab:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c01068b2:	00 
c01068b3:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01068ba:	e8 09 a6 ff ff       	call   c0100ec8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01068bf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01068c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01068c9:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c01068ce:	39 c2                	cmp    %eax,%edx
c01068d0:	0f 82 26 ff ff ff    	jb     c01067fc <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01068d6:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01068db:	05 ac 0f 00 00       	add    $0xfac,%eax
c01068e0:	8b 00                	mov    (%eax),%eax
c01068e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01068e7:	89 c2                	mov    %eax,%edx
c01068e9:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c01068ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068f1:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01068f8:	77 23                	ja     c010691d <check_boot_pgdir+0x133>
c01068fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068fd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106901:	c7 44 24 08 44 67 11 	movl   $0xc0116744,0x8(%esp)
c0106908:	c0 
c0106909:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106910:	00 
c0106911:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106918:	e8 ab a5 ff ff       	call   c0100ec8 <__panic>
c010691d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106920:	05 00 00 00 40       	add    $0x40000000,%eax
c0106925:	39 c2                	cmp    %eax,%edx
c0106927:	74 24                	je     c010694d <check_boot_pgdir+0x163>
c0106929:	c7 44 24 0c 44 6b 11 	movl   $0xc0116b44,0xc(%esp)
c0106930:	c0 
c0106931:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106938:	c0 
c0106939:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106940:	00 
c0106941:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106948:	e8 7b a5 ff ff       	call   c0100ec8 <__panic>

    assert(boot_pgdir[0] == 0);
c010694d:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106952:	8b 00                	mov    (%eax),%eax
c0106954:	85 c0                	test   %eax,%eax
c0106956:	74 24                	je     c010697c <check_boot_pgdir+0x192>
c0106958:	c7 44 24 0c 78 6b 11 	movl   $0xc0116b78,0xc(%esp)
c010695f:	c0 
c0106960:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106967:	c0 
c0106968:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010696f:	00 
c0106970:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106977:	e8 4c a5 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    p = alloc_page();
c010697c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106983:	e8 f4 e7 ff ff       	call   c010517c <alloc_pages>
c0106988:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010698b:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106990:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106997:	00 
c0106998:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010699f:	00 
c01069a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069a3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069a7:	89 04 24             	mov    %eax,(%esp)
c01069aa:	e8 98 f5 ff ff       	call   c0105f47 <page_insert>
c01069af:	85 c0                	test   %eax,%eax
c01069b1:	74 24                	je     c01069d7 <check_boot_pgdir+0x1ed>
c01069b3:	c7 44 24 0c 8c 6b 11 	movl   $0xc0116b8c,0xc(%esp)
c01069ba:	c0 
c01069bb:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01069c2:	c0 
c01069c3:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01069ca:	00 
c01069cb:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c01069d2:	e8 f1 a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 1);
c01069d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069da:	89 04 24             	mov    %eax,(%esp)
c01069dd:	e8 95 e5 ff ff       	call   c0104f77 <page_ref>
c01069e2:	83 f8 01             	cmp    $0x1,%eax
c01069e5:	74 24                	je     c0106a0b <check_boot_pgdir+0x221>
c01069e7:	c7 44 24 0c ba 6b 11 	movl   $0xc0116bba,0xc(%esp)
c01069ee:	c0 
c01069ef:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c01069f6:	c0 
c01069f7:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01069fe:	00 
c01069ff:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106a06:	e8 bd a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106a0b:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106a10:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106a17:	00 
c0106a18:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106a1f:	00 
c0106a20:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a23:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a27:	89 04 24             	mov    %eax,(%esp)
c0106a2a:	e8 18 f5 ff ff       	call   c0105f47 <page_insert>
c0106a2f:	85 c0                	test   %eax,%eax
c0106a31:	74 24                	je     c0106a57 <check_boot_pgdir+0x26d>
c0106a33:	c7 44 24 0c cc 6b 11 	movl   $0xc0116bcc,0xc(%esp)
c0106a3a:	c0 
c0106a3b:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106a42:	c0 
c0106a43:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0106a4a:	00 
c0106a4b:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106a52:	e8 71 a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 2);
c0106a57:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a5a:	89 04 24             	mov    %eax,(%esp)
c0106a5d:	e8 15 e5 ff ff       	call   c0104f77 <page_ref>
c0106a62:	83 f8 02             	cmp    $0x2,%eax
c0106a65:	74 24                	je     c0106a8b <check_boot_pgdir+0x2a1>
c0106a67:	c7 44 24 0c 03 6c 11 	movl   $0xc0116c03,0xc(%esp)
c0106a6e:	c0 
c0106a6f:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106a76:	c0 
c0106a77:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106a7e:	00 
c0106a7f:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106a86:	e8 3d a4 ff ff       	call   c0100ec8 <__panic>

    const char *str = "ucore: Hello world!!";
c0106a8b:	c7 45 dc 14 6c 11 c0 	movl   $0xc0116c14,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a92:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a99:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106aa0:	e8 aa e9 00 00       	call   c011544f <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106aa5:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106aac:	00 
c0106aad:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106ab4:	e8 0f ea 00 00       	call   c01154c8 <strcmp>
c0106ab9:	85 c0                	test   %eax,%eax
c0106abb:	74 24                	je     c0106ae1 <check_boot_pgdir+0x2f7>
c0106abd:	c7 44 24 0c 2c 6c 11 	movl   $0xc0116c2c,0xc(%esp)
c0106ac4:	c0 
c0106ac5:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106acc:	c0 
c0106acd:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106ad4:	00 
c0106ad5:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106adc:	e8 e7 a3 ff ff       	call   c0100ec8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106ae1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106ae4:	89 04 24             	mov    %eax,(%esp)
c0106ae7:	e8 e1 e3 ff ff       	call   c0104ecd <page2kva>
c0106aec:	05 00 01 00 00       	add    $0x100,%eax
c0106af1:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106af4:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106afb:	e8 d0 e8 00 00       	call   c01153d0 <strlen>
c0106b00:	85 c0                	test   %eax,%eax
c0106b02:	74 24                	je     c0106b28 <check_boot_pgdir+0x33e>
c0106b04:	c7 44 24 0c 64 6c 11 	movl   $0xc0116c64,0xc(%esp)
c0106b0b:	c0 
c0106b0c:	c7 44 24 08 8d 67 11 	movl   $0xc011678d,0x8(%esp)
c0106b13:	c0 
c0106b14:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106b1b:	00 
c0106b1c:	c7 04 24 68 67 11 c0 	movl   $0xc0116768,(%esp)
c0106b23:	e8 a0 a3 ff ff       	call   c0100ec8 <__panic>

    free_page(p);
c0106b28:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b2f:	00 
c0106b30:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b33:	89 04 24             	mov    %eax,(%esp)
c0106b36:	e8 ac e6 ff ff       	call   c01051e7 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106b3b:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106b40:	8b 00                	mov    (%eax),%eax
c0106b42:	89 04 24             	mov    %eax,(%esp)
c0106b45:	e8 15 e4 ff ff       	call   c0104f5f <pde2page>
c0106b4a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b51:	00 
c0106b52:	89 04 24             	mov    %eax,(%esp)
c0106b55:	e8 8d e6 ff ff       	call   c01051e7 <free_pages>
    boot_pgdir[0] = 0;
c0106b5a:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c0106b5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106b65:	c7 04 24 88 6c 11 c0 	movl   $0xc0116c88,(%esp)
c0106b6c:	e8 f4 97 ff ff       	call   c0100365 <cprintf>
}
c0106b71:	c9                   	leave  
c0106b72:	c3                   	ret    

c0106b73 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b73:	55                   	push   %ebp
c0106b74:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b79:	83 e0 04             	and    $0x4,%eax
c0106b7c:	85 c0                	test   %eax,%eax
c0106b7e:	74 07                	je     c0106b87 <perm2str+0x14>
c0106b80:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b85:	eb 05                	jmp    c0106b8c <perm2str+0x19>
c0106b87:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b8c:	a2 08 0f 15 c0       	mov    %al,0xc0150f08
    str[1] = 'r';
c0106b91:	c6 05 09 0f 15 c0 72 	movb   $0x72,0xc0150f09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b9b:	83 e0 02             	and    $0x2,%eax
c0106b9e:	85 c0                	test   %eax,%eax
c0106ba0:	74 07                	je     c0106ba9 <perm2str+0x36>
c0106ba2:	b8 77 00 00 00       	mov    $0x77,%eax
c0106ba7:	eb 05                	jmp    c0106bae <perm2str+0x3b>
c0106ba9:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106bae:	a2 0a 0f 15 c0       	mov    %al,0xc0150f0a
    str[3] = '\0';
c0106bb3:	c6 05 0b 0f 15 c0 00 	movb   $0x0,0xc0150f0b
    return str;
c0106bba:	b8 08 0f 15 c0       	mov    $0xc0150f08,%eax
}
c0106bbf:	5d                   	pop    %ebp
c0106bc0:	c3                   	ret    

c0106bc1 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106bc1:	55                   	push   %ebp
c0106bc2:	89 e5                	mov    %esp,%ebp
c0106bc4:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106bc7:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bca:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bcd:	72 0a                	jb     c0106bd9 <get_pgtable_items+0x18>
        return 0;
c0106bcf:	b8 00 00 00 00       	mov    $0x0,%eax
c0106bd4:	e9 9c 00 00 00       	jmp    c0106c75 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106bd9:	eb 04                	jmp    c0106bdf <get_pgtable_items+0x1e>
        start ++;
c0106bdb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106bdf:	8b 45 10             	mov    0x10(%ebp),%eax
c0106be2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106be5:	73 18                	jae    c0106bff <get_pgtable_items+0x3e>
c0106be7:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bf1:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bf4:	01 d0                	add    %edx,%eax
c0106bf6:	8b 00                	mov    (%eax),%eax
c0106bf8:	83 e0 01             	and    $0x1,%eax
c0106bfb:	85 c0                	test   %eax,%eax
c0106bfd:	74 dc                	je     c0106bdb <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106bff:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c02:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c05:	73 69                	jae    c0106c70 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106c07:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106c0b:	74 08                	je     c0106c15 <get_pgtable_items+0x54>
            *left_store = start;
c0106c0d:	8b 45 18             	mov    0x18(%ebp),%eax
c0106c10:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c13:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106c15:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c18:	8d 50 01             	lea    0x1(%eax),%edx
c0106c1b:	89 55 10             	mov    %edx,0x10(%ebp)
c0106c1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c25:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c28:	01 d0                	add    %edx,%eax
c0106c2a:	8b 00                	mov    (%eax),%eax
c0106c2c:	83 e0 07             	and    $0x7,%eax
c0106c2f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c32:	eb 04                	jmp    c0106c38 <get_pgtable_items+0x77>
            start ++;
c0106c34:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c38:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c3b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c3e:	73 1d                	jae    c0106c5d <get_pgtable_items+0x9c>
c0106c40:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c4a:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c4d:	01 d0                	add    %edx,%eax
c0106c4f:	8b 00                	mov    (%eax),%eax
c0106c51:	83 e0 07             	and    $0x7,%eax
c0106c54:	89 c2                	mov    %eax,%edx
c0106c56:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c59:	39 c2                	cmp    %eax,%edx
c0106c5b:	74 d7                	je     c0106c34 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106c5d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106c61:	74 08                	je     c0106c6b <get_pgtable_items+0xaa>
            *right_store = start;
c0106c63:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c66:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c69:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c6b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c6e:	eb 05                	jmp    c0106c75 <get_pgtable_items+0xb4>
    }
    return 0;
c0106c70:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c75:	c9                   	leave  
c0106c76:	c3                   	ret    

c0106c77 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c77:	55                   	push   %ebp
c0106c78:	89 e5                	mov    %esp,%ebp
c0106c7a:	57                   	push   %edi
c0106c7b:	56                   	push   %esi
c0106c7c:	53                   	push   %ebx
c0106c7d:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c80:	c7 04 24 a8 6c 11 c0 	movl   $0xc0116ca8,(%esp)
c0106c87:	e8 d9 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c0106c8c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c93:	e9 fa 00 00 00       	jmp    c0106d92 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c9b:	89 04 24             	mov    %eax,(%esp)
c0106c9e:	e8 d0 fe ff ff       	call   c0106b73 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106ca3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106ca6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106ca9:	29 d1                	sub    %edx,%ecx
c0106cab:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106cad:	89 d6                	mov    %edx,%esi
c0106caf:	c1 e6 16             	shl    $0x16,%esi
c0106cb2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106cb5:	89 d3                	mov    %edx,%ebx
c0106cb7:	c1 e3 16             	shl    $0x16,%ebx
c0106cba:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cbd:	89 d1                	mov    %edx,%ecx
c0106cbf:	c1 e1 16             	shl    $0x16,%ecx
c0106cc2:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106cc5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cc8:	29 d7                	sub    %edx,%edi
c0106cca:	89 fa                	mov    %edi,%edx
c0106ccc:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106cd0:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106cd4:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106cd8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106cdc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ce0:	c7 04 24 d9 6c 11 c0 	movl   $0xc0116cd9,(%esp)
c0106ce7:	e8 79 96 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106cec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106cef:	c1 e0 0a             	shl    $0xa,%eax
c0106cf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106cf5:	eb 54                	jmp    c0106d4b <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106cf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cfa:	89 04 24             	mov    %eax,(%esp)
c0106cfd:	e8 71 fe ff ff       	call   c0106b73 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106d02:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106d05:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d08:	29 d1                	sub    %edx,%ecx
c0106d0a:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106d0c:	89 d6                	mov    %edx,%esi
c0106d0e:	c1 e6 0c             	shl    $0xc,%esi
c0106d11:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106d14:	89 d3                	mov    %edx,%ebx
c0106d16:	c1 e3 0c             	shl    $0xc,%ebx
c0106d19:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d1c:	c1 e2 0c             	shl    $0xc,%edx
c0106d1f:	89 d1                	mov    %edx,%ecx
c0106d21:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106d24:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d27:	29 d7                	sub    %edx,%edi
c0106d29:	89 fa                	mov    %edi,%edx
c0106d2b:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106d2f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106d33:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106d37:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106d3b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d3f:	c7 04 24 f8 6c 11 c0 	movl   $0xc0116cf8,(%esp)
c0106d46:	e8 1a 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d4b:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106d50:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106d53:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d56:	89 ce                	mov    %ecx,%esi
c0106d58:	c1 e6 0a             	shl    $0xa,%esi
c0106d5b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d5e:	89 cb                	mov    %ecx,%ebx
c0106d60:	c1 e3 0a             	shl    $0xa,%ebx
c0106d63:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d66:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d6a:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d6d:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d71:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d75:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d79:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d7d:	89 1c 24             	mov    %ebx,(%esp)
c0106d80:	e8 3c fe ff ff       	call   c0106bc1 <get_pgtable_items>
c0106d85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d88:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d8c:	0f 85 65 ff ff ff    	jne    c0106cf7 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d92:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d97:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d9a:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d9d:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106da1:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106da4:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106da8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106dac:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106db0:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106db7:	00 
c0106db8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106dbf:	e8 fd fd ff ff       	call   c0106bc1 <get_pgtable_items>
c0106dc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106dc7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106dcb:	0f 85 c7 fe ff ff    	jne    c0106c98 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106dd1:	c7 04 24 1c 6d 11 c0 	movl   $0xc0116d1c,(%esp)
c0106dd8:	e8 88 95 ff ff       	call   c0100365 <cprintf>
}
c0106ddd:	83 c4 4c             	add    $0x4c,%esp
c0106de0:	5b                   	pop    %ebx
c0106de1:	5e                   	pop    %esi
c0106de2:	5f                   	pop    %edi
c0106de3:	5d                   	pop    %ebp
c0106de4:	c3                   	ret    

c0106de5 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106de5:	55                   	push   %ebp
c0106de6:	89 e5                	mov    %esp,%ebp
c0106de8:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106deb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dee:	c1 e8 0c             	shr    $0xc,%eax
c0106df1:	89 c2                	mov    %eax,%edx
c0106df3:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0106df8:	39 c2                	cmp    %eax,%edx
c0106dfa:	72 1c                	jb     c0106e18 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106dfc:	c7 44 24 08 50 6d 11 	movl   $0xc0116d50,0x8(%esp)
c0106e03:	c0 
c0106e04:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106e0b:	00 
c0106e0c:	c7 04 24 6f 6d 11 c0 	movl   $0xc0116d6f,(%esp)
c0106e13:	e8 b0 a0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0106e18:	8b 0d 28 40 15 c0    	mov    0xc0154028,%ecx
c0106e1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e21:	c1 e8 0c             	shr    $0xc,%eax
c0106e24:	89 c2                	mov    %eax,%edx
c0106e26:	89 d0                	mov    %edx,%eax
c0106e28:	c1 e0 03             	shl    $0x3,%eax
c0106e2b:	01 d0                	add    %edx,%eax
c0106e2d:	c1 e0 02             	shl    $0x2,%eax
c0106e30:	01 c8                	add    %ecx,%eax
}
c0106e32:	c9                   	leave  
c0106e33:	c3                   	ret    

c0106e34 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e34:	55                   	push   %ebp
c0106e35:	89 e5                	mov    %esp,%ebp
c0106e37:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106e3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e3d:	83 e0 01             	and    $0x1,%eax
c0106e40:	85 c0                	test   %eax,%eax
c0106e42:	75 1c                	jne    c0106e60 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106e44:	c7 44 24 08 80 6d 11 	movl   $0xc0116d80,0x8(%esp)
c0106e4b:	c0 
c0106e4c:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106e53:	00 
c0106e54:	c7 04 24 6f 6d 11 c0 	movl   $0xc0116d6f,(%esp)
c0106e5b:	e8 68 a0 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e63:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e68:	89 04 24             	mov    %eax,(%esp)
c0106e6b:	e8 75 ff ff ff       	call   c0106de5 <pa2page>
}
c0106e70:	c9                   	leave  
c0106e71:	c3                   	ret    

c0106e72 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e72:	55                   	push   %ebp
c0106e73:	89 e5                	mov    %esp,%ebp
c0106e75:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e80:	89 04 24             	mov    %eax,(%esp)
c0106e83:	e8 5d ff ff ff       	call   c0106de5 <pa2page>
}
c0106e88:	c9                   	leave  
c0106e89:	c3                   	ret    

c0106e8a <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e8a:	55                   	push   %ebp
c0106e8b:	89 e5                	mov    %esp,%ebp
c0106e8d:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e90:	e8 24 81 00 00       	call   c010efb9 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e95:	a1 dc 40 15 c0       	mov    0xc01540dc,%eax
c0106e9a:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e9f:	76 0c                	jbe    c0106ead <swap_init+0x23>
c0106ea1:	a1 dc 40 15 c0       	mov    0xc01540dc,%eax
c0106ea6:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106eab:	76 25                	jbe    c0106ed2 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106ead:	a1 dc 40 15 c0       	mov    0xc01540dc,%eax
c0106eb2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106eb6:	c7 44 24 08 a1 6d 11 	movl   $0xc0116da1,0x8(%esp)
c0106ebd:	c0 
c0106ebe:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106ec5:	00 
c0106ec6:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0106ecd:	e8 f6 9f ff ff       	call   c0100ec8 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106ed2:	c7 05 14 0f 15 c0 60 	movl   $0xc014fa60,0xc0150f14
c0106ed9:	fa 14 c0 
     int r = sm->init();
c0106edc:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106ee1:	8b 40 04             	mov    0x4(%eax),%eax
c0106ee4:	ff d0                	call   *%eax
c0106ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106ee9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106eed:	75 26                	jne    c0106f15 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106eef:	c7 05 0c 0f 15 c0 01 	movl   $0x1,0xc0150f0c
c0106ef6:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106ef9:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106efe:	8b 00                	mov    (%eax),%eax
c0106f00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f04:	c7 04 24 cb 6d 11 c0 	movl   $0xc0116dcb,(%esp)
c0106f0b:	e8 55 94 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106f10:	e8 a4 04 00 00       	call   c01073b9 <check_swap>
     }

     return r;
c0106f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106f18:	c9                   	leave  
c0106f19:	c3                   	ret    

c0106f1a <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106f1a:	55                   	push   %ebp
c0106f1b:	89 e5                	mov    %esp,%ebp
c0106f1d:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106f20:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106f25:	8b 40 08             	mov    0x8(%eax),%eax
c0106f28:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f2b:	89 14 24             	mov    %edx,(%esp)
c0106f2e:	ff d0                	call   *%eax
}
c0106f30:	c9                   	leave  
c0106f31:	c3                   	ret    

c0106f32 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106f32:	55                   	push   %ebp
c0106f33:	89 e5                	mov    %esp,%ebp
c0106f35:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106f38:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106f3d:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f40:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f43:	89 14 24             	mov    %edx,(%esp)
c0106f46:	ff d0                	call   *%eax
}
c0106f48:	c9                   	leave  
c0106f49:	c3                   	ret    

c0106f4a <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106f4a:	55                   	push   %ebp
c0106f4b:	89 e5                	mov    %esp,%ebp
c0106f4d:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106f50:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106f55:	8b 40 10             	mov    0x10(%eax),%eax
c0106f58:	8b 55 14             	mov    0x14(%ebp),%edx
c0106f5b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106f5f:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f62:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f66:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f69:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f6d:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f70:	89 14 24             	mov    %edx,(%esp)
c0106f73:	ff d0                	call   *%eax
}
c0106f75:	c9                   	leave  
c0106f76:	c3                   	ret    

c0106f77 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106f77:	55                   	push   %ebp
c0106f78:	89 e5                	mov    %esp,%ebp
c0106f7a:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106f7d:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106f82:	8b 40 14             	mov    0x14(%eax),%eax
c0106f85:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f88:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f8f:	89 14 24             	mov    %edx,(%esp)
c0106f92:	ff d0                	call   *%eax
}
c0106f94:	c9                   	leave  
c0106f95:	c3                   	ret    

c0106f96 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f96:	55                   	push   %ebp
c0106f97:	89 e5                	mov    %esp,%ebp
c0106f99:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106fa3:	e9 5a 01 00 00       	jmp    c0107102 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106fa8:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0106fad:	8b 40 18             	mov    0x18(%eax),%eax
c0106fb0:	8b 55 10             	mov    0x10(%ebp),%edx
c0106fb3:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106fb7:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106fba:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fbe:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fc1:	89 14 24             	mov    %edx,(%esp)
c0106fc4:	ff d0                	call   *%eax
c0106fc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106fc9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106fcd:	74 18                	je     c0106fe7 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fd6:	c7 04 24 e0 6d 11 c0 	movl   $0xc0116de0,(%esp)
c0106fdd:	e8 83 93 ff ff       	call   c0100365 <cprintf>
c0106fe2:	e9 27 01 00 00       	jmp    c010710e <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106fe7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fea:	8b 40 20             	mov    0x20(%eax),%eax
c0106fed:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106ff0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ff3:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ff6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106ffd:	00 
c0106ffe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107001:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107005:	89 04 24             	mov    %eax,(%esp)
c0107008:	e8 e6 e8 ff ff       	call   c01058f3 <get_pte>
c010700d:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0107010:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107013:	8b 00                	mov    (%eax),%eax
c0107015:	83 e0 01             	and    $0x1,%eax
c0107018:	85 c0                	test   %eax,%eax
c010701a:	75 24                	jne    c0107040 <swap_out+0xaa>
c010701c:	c7 44 24 0c 0d 6e 11 	movl   $0xc0116e0d,0xc(%esp)
c0107023:	c0 
c0107024:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010702b:	c0 
c010702c:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107033:	00 
c0107034:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010703b:	e8 88 9e ff ff       	call   c0100ec8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0107040:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107043:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107046:	8b 52 20             	mov    0x20(%edx),%edx
c0107049:	c1 ea 0c             	shr    $0xc,%edx
c010704c:	83 c2 01             	add    $0x1,%edx
c010704f:	c1 e2 08             	shl    $0x8,%edx
c0107052:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107056:	89 14 24             	mov    %edx,(%esp)
c0107059:	e8 15 80 00 00       	call   c010f073 <swapfs_write>
c010705e:	85 c0                	test   %eax,%eax
c0107060:	74 34                	je     c0107096 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0107062:	c7 04 24 37 6e 11 c0 	movl   $0xc0116e37,(%esp)
c0107069:	e8 f7 92 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c010706e:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c0107073:	8b 40 10             	mov    0x10(%eax),%eax
c0107076:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107079:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107080:	00 
c0107081:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107085:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107088:	89 54 24 04          	mov    %edx,0x4(%esp)
c010708c:	8b 55 08             	mov    0x8(%ebp),%edx
c010708f:	89 14 24             	mov    %edx,(%esp)
c0107092:	ff d0                	call   *%eax
c0107094:	eb 68                	jmp    c01070fe <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0107096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107099:	8b 40 20             	mov    0x20(%eax),%eax
c010709c:	c1 e8 0c             	shr    $0xc,%eax
c010709f:	83 c0 01             	add    $0x1,%eax
c01070a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01070a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070a9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01070ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070b4:	c7 04 24 50 6e 11 c0 	movl   $0xc0116e50,(%esp)
c01070bb:	e8 a5 92 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01070c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070c3:	8b 40 20             	mov    0x20(%eax),%eax
c01070c6:	c1 e8 0c             	shr    $0xc,%eax
c01070c9:	83 c0 01             	add    $0x1,%eax
c01070cc:	c1 e0 08             	shl    $0x8,%eax
c01070cf:	89 c2                	mov    %eax,%edx
c01070d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070d4:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01070d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070d9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01070e0:	00 
c01070e1:	89 04 24             	mov    %eax,(%esp)
c01070e4:	e8 fe e0 ff ff       	call   c01051e7 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c01070e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01070ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01070ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01070f2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070f6:	89 04 24             	mov    %eax,(%esp)
c01070f9:	e8 02 ef ff ff       	call   c0106000 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01070fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107105:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107108:	0f 85 9a fe ff ff    	jne    c0106fa8 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010710e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107111:	c9                   	leave  
c0107112:	c3                   	ret    

c0107113 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107113:	55                   	push   %ebp
c0107114:	89 e5                	mov    %esp,%ebp
c0107116:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0107119:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107120:	e8 57 e0 ff ff       	call   c010517c <alloc_pages>
c0107125:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010712c:	75 24                	jne    c0107152 <swap_in+0x3f>
c010712e:	c7 44 24 0c 90 6e 11 	movl   $0xc0116e90,0xc(%esp)
c0107135:	c0 
c0107136:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010713d:	c0 
c010713e:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107145:	00 
c0107146:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010714d:	e8 76 9d ff ff       	call   c0100ec8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107152:	8b 45 08             	mov    0x8(%ebp),%eax
c0107155:	8b 40 0c             	mov    0xc(%eax),%eax
c0107158:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010715f:	00 
c0107160:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107163:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107167:	89 04 24             	mov    %eax,(%esp)
c010716a:	e8 84 e7 ff ff       	call   c01058f3 <get_pte>
c010716f:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0107172:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107175:	8b 00                	mov    (%eax),%eax
c0107177:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010717a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010717e:	89 04 24             	mov    %eax,(%esp)
c0107181:	e8 7b 7e 00 00       	call   c010f001 <swapfs_read>
c0107186:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107189:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010718d:	74 2a                	je     c01071b9 <swap_in+0xa6>
     {
        assert(r!=0);
c010718f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107193:	75 24                	jne    c01071b9 <swap_in+0xa6>
c0107195:	c7 44 24 0c 9d 6e 11 	movl   $0xc0116e9d,0xc(%esp)
c010719c:	c0 
c010719d:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01071a4:	c0 
c01071a5:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01071ac:	00 
c01071ad:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01071b4:	e8 0f 9d ff ff       	call   c0100ec8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01071b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071bc:	8b 00                	mov    (%eax),%eax
c01071be:	c1 e8 08             	shr    $0x8,%eax
c01071c1:	89 c2                	mov    %eax,%edx
c01071c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01071c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071ca:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071ce:	c7 04 24 a4 6e 11 c0 	movl   $0xc0116ea4,(%esp)
c01071d5:	e8 8b 91 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c01071da:	8b 45 10             	mov    0x10(%ebp),%eax
c01071dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01071e0:	89 10                	mov    %edx,(%eax)
     return 0;
c01071e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01071e7:	c9                   	leave  
c01071e8:	c3                   	ret    

c01071e9 <check_content_set>:



static inline void
check_content_set(void)
{
c01071e9:	55                   	push   %ebp
c01071ea:	89 e5                	mov    %esp,%ebp
c01071ec:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01071ef:	b8 00 10 00 00       	mov    $0x1000,%eax
c01071f4:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071f7:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c01071fc:	83 f8 01             	cmp    $0x1,%eax
c01071ff:	74 24                	je     c0107225 <check_content_set+0x3c>
c0107201:	c7 44 24 0c e2 6e 11 	movl   $0xc0116ee2,0xc(%esp)
c0107208:	c0 
c0107209:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107210:	c0 
c0107211:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107218:	00 
c0107219:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107220:	e8 a3 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107225:	b8 10 10 00 00       	mov    $0x1010,%eax
c010722a:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010722d:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107232:	83 f8 01             	cmp    $0x1,%eax
c0107235:	74 24                	je     c010725b <check_content_set+0x72>
c0107237:	c7 44 24 0c e2 6e 11 	movl   $0xc0116ee2,0xc(%esp)
c010723e:	c0 
c010723f:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107246:	c0 
c0107247:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010724e:	00 
c010724f:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107256:	e8 6d 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c010725b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107260:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107263:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107268:	83 f8 02             	cmp    $0x2,%eax
c010726b:	74 24                	je     c0107291 <check_content_set+0xa8>
c010726d:	c7 44 24 0c f1 6e 11 	movl   $0xc0116ef1,0xc(%esp)
c0107274:	c0 
c0107275:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010727c:	c0 
c010727d:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107284:	00 
c0107285:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010728c:	e8 37 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107291:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107296:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107299:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c010729e:	83 f8 02             	cmp    $0x2,%eax
c01072a1:	74 24                	je     c01072c7 <check_content_set+0xde>
c01072a3:	c7 44 24 0c f1 6e 11 	movl   $0xc0116ef1,0xc(%esp)
c01072aa:	c0 
c01072ab:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01072b2:	c0 
c01072b3:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01072ba:	00 
c01072bb:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01072c2:	e8 01 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01072c7:	b8 00 30 00 00       	mov    $0x3000,%eax
c01072cc:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01072cf:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c01072d4:	83 f8 03             	cmp    $0x3,%eax
c01072d7:	74 24                	je     c01072fd <check_content_set+0x114>
c01072d9:	c7 44 24 0c 00 6f 11 	movl   $0xc0116f00,0xc(%esp)
c01072e0:	c0 
c01072e1:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01072e8:	c0 
c01072e9:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01072f0:	00 
c01072f1:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01072f8:	e8 cb 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01072fd:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107302:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107305:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c010730a:	83 f8 03             	cmp    $0x3,%eax
c010730d:	74 24                	je     c0107333 <check_content_set+0x14a>
c010730f:	c7 44 24 0c 00 6f 11 	movl   $0xc0116f00,0xc(%esp)
c0107316:	c0 
c0107317:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010731e:	c0 
c010731f:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0107326:	00 
c0107327:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010732e:	e8 95 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107333:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107338:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010733b:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107340:	83 f8 04             	cmp    $0x4,%eax
c0107343:	74 24                	je     c0107369 <check_content_set+0x180>
c0107345:	c7 44 24 0c 0f 6f 11 	movl   $0xc0116f0f,0xc(%esp)
c010734c:	c0 
c010734d:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107354:	c0 
c0107355:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c010735c:	00 
c010735d:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107364:	e8 5f 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107369:	b8 10 40 00 00       	mov    $0x4010,%eax
c010736e:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107371:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107376:	83 f8 04             	cmp    $0x4,%eax
c0107379:	74 24                	je     c010739f <check_content_set+0x1b6>
c010737b:	c7 44 24 0c 0f 6f 11 	movl   $0xc0116f0f,0xc(%esp)
c0107382:	c0 
c0107383:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010738a:	c0 
c010738b:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0107392:	00 
c0107393:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010739a:	e8 29 9b ff ff       	call   c0100ec8 <__panic>
}
c010739f:	c9                   	leave  
c01073a0:	c3                   	ret    

c01073a1 <check_content_access>:

static inline int
check_content_access(void)
{
c01073a1:	55                   	push   %ebp
c01073a2:	89 e5                	mov    %esp,%ebp
c01073a4:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01073a7:	a1 14 0f 15 c0       	mov    0xc0150f14,%eax
c01073ac:	8b 40 1c             	mov    0x1c(%eax),%eax
c01073af:	ff d0                	call   *%eax
c01073b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01073b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01073b7:	c9                   	leave  
c01073b8:	c3                   	ret    

c01073b9 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01073b9:	55                   	push   %ebp
c01073ba:	89 e5                	mov    %esp,%ebp
c01073bc:	53                   	push   %ebx
c01073bd:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01073c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01073c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01073ce:	c7 45 e8 14 40 15 c0 	movl   $0xc0154014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01073d5:	eb 6b                	jmp    c0107442 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c01073d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073da:	83 e8 10             	sub    $0x10,%eax
c01073dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01073e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073e3:	83 c0 04             	add    $0x4,%eax
c01073e6:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01073ed:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01073f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01073f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01073f6:	0f a3 10             	bt     %edx,(%eax)
c01073f9:	19 c0                	sbb    %eax,%eax
c01073fb:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c01073fe:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107402:	0f 95 c0             	setne  %al
c0107405:	0f b6 c0             	movzbl %al,%eax
c0107408:	85 c0                	test   %eax,%eax
c010740a:	75 24                	jne    c0107430 <check_swap+0x77>
c010740c:	c7 44 24 0c 1e 6f 11 	movl   $0xc0116f1e,0xc(%esp)
c0107413:	c0 
c0107414:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010741b:	c0 
c010741c:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107423:	00 
c0107424:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010742b:	e8 98 9a ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c0107430:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107434:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107437:	8b 50 08             	mov    0x8(%eax),%edx
c010743a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010743d:	01 d0                	add    %edx,%eax
c010743f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107442:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107445:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107448:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010744b:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010744e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107451:	81 7d e8 14 40 15 c0 	cmpl   $0xc0154014,-0x18(%ebp)
c0107458:	0f 85 79 ff ff ff    	jne    c01073d7 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010745e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0107461:	e8 b3 dd ff ff       	call   c0105219 <nr_free_pages>
c0107466:	39 c3                	cmp    %eax,%ebx
c0107468:	74 24                	je     c010748e <check_swap+0xd5>
c010746a:	c7 44 24 0c 2e 6f 11 	movl   $0xc0116f2e,0xc(%esp)
c0107471:	c0 
c0107472:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107479:	c0 
c010747a:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107481:	00 
c0107482:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107489:	e8 3a 9a ff ff       	call   c0100ec8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010748e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107491:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107495:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107498:	89 44 24 04          	mov    %eax,0x4(%esp)
c010749c:	c7 04 24 48 6f 11 c0 	movl   $0xc0116f48,(%esp)
c01074a3:	e8 bd 8e ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01074a8:	e8 bc 0a 00 00       	call   c0107f69 <mm_create>
c01074ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01074b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01074b4:	75 24                	jne    c01074da <check_swap+0x121>
c01074b6:	c7 44 24 0c 6e 6f 11 	movl   $0xc0116f6e,0xc(%esp)
c01074bd:	c0 
c01074be:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01074c5:	c0 
c01074c6:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c01074cd:	00 
c01074ce:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01074d5:	e8 ee 99 ff ff       	call   c0100ec8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01074da:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c01074df:	85 c0                	test   %eax,%eax
c01074e1:	74 24                	je     c0107507 <check_swap+0x14e>
c01074e3:	c7 44 24 0c 79 6f 11 	movl   $0xc0116f79,0xc(%esp)
c01074ea:	c0 
c01074eb:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01074f2:	c0 
c01074f3:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01074fa:	00 
c01074fb:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107502:	e8 c1 99 ff ff       	call   c0100ec8 <__panic>

     check_mm_struct = mm;
c0107507:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010750a:	a3 0c 41 15 c0       	mov    %eax,0xc015410c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010750f:	8b 15 84 0e 15 c0    	mov    0xc0150e84,%edx
c0107515:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107518:	89 50 0c             	mov    %edx,0xc(%eax)
c010751b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010751e:	8b 40 0c             	mov    0xc(%eax),%eax
c0107521:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c0107524:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107527:	8b 00                	mov    (%eax),%eax
c0107529:	85 c0                	test   %eax,%eax
c010752b:	74 24                	je     c0107551 <check_swap+0x198>
c010752d:	c7 44 24 0c 91 6f 11 	movl   $0xc0116f91,0xc(%esp)
c0107534:	c0 
c0107535:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010753c:	c0 
c010753d:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107544:	00 
c0107545:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010754c:	e8 77 99 ff ff       	call   c0100ec8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107551:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107558:	00 
c0107559:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0107560:	00 
c0107561:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107568:	e8 a1 0a 00 00       	call   c010800e <vma_create>
c010756d:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c0107570:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107574:	75 24                	jne    c010759a <check_swap+0x1e1>
c0107576:	c7 44 24 0c 9f 6f 11 	movl   $0xc0116f9f,0xc(%esp)
c010757d:	c0 
c010757e:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107585:	c0 
c0107586:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010758d:	00 
c010758e:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107595:	e8 2e 99 ff ff       	call   c0100ec8 <__panic>

     insert_vma_struct(mm, vma);
c010759a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010759d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01075a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075a4:	89 04 24             	mov    %eax,(%esp)
c01075a7:	e8 f2 0b 00 00       	call   c010819e <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01075ac:	c7 04 24 ac 6f 11 c0 	movl   $0xc0116fac,(%esp)
c01075b3:	e8 ad 8d ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c01075b8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01075bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075c2:	8b 40 0c             	mov    0xc(%eax),%eax
c01075c5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01075cc:	00 
c01075cd:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01075d4:	00 
c01075d5:	89 04 24             	mov    %eax,(%esp)
c01075d8:	e8 16 e3 ff ff       	call   c01058f3 <get_pte>
c01075dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c01075e0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01075e4:	75 24                	jne    c010760a <check_swap+0x251>
c01075e6:	c7 44 24 0c e0 6f 11 	movl   $0xc0116fe0,0xc(%esp)
c01075ed:	c0 
c01075ee:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01075f5:	c0 
c01075f6:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01075fd:	00 
c01075fe:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107605:	e8 be 98 ff ff       	call   c0100ec8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c010760a:	c7 04 24 f4 6f 11 c0 	movl   $0xc0116ff4,(%esp)
c0107611:	e8 4f 8d ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107616:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010761d:	e9 a3 00 00 00       	jmp    c01076c5 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0107622:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107629:	e8 4e db ff ff       	call   c010517c <alloc_pages>
c010762e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107631:	89 04 95 40 40 15 c0 	mov    %eax,-0x3feabfc0(,%edx,4)
          assert(check_rp[i] != NULL );
c0107638:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010763b:	8b 04 85 40 40 15 c0 	mov    -0x3feabfc0(,%eax,4),%eax
c0107642:	85 c0                	test   %eax,%eax
c0107644:	75 24                	jne    c010766a <check_swap+0x2b1>
c0107646:	c7 44 24 0c 18 70 11 	movl   $0xc0117018,0xc(%esp)
c010764d:	c0 
c010764e:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107655:	c0 
c0107656:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010765d:	00 
c010765e:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107665:	e8 5e 98 ff ff       	call   c0100ec8 <__panic>
          assert(!PageProperty(check_rp[i]));
c010766a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010766d:	8b 04 85 40 40 15 c0 	mov    -0x3feabfc0(,%eax,4),%eax
c0107674:	83 c0 04             	add    $0x4,%eax
c0107677:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c010767e:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107681:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107684:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107687:	0f a3 10             	bt     %edx,(%eax)
c010768a:	19 c0                	sbb    %eax,%eax
c010768c:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c010768f:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107693:	0f 95 c0             	setne  %al
c0107696:	0f b6 c0             	movzbl %al,%eax
c0107699:	85 c0                	test   %eax,%eax
c010769b:	74 24                	je     c01076c1 <check_swap+0x308>
c010769d:	c7 44 24 0c 2c 70 11 	movl   $0xc011702c,0xc(%esp)
c01076a4:	c0 
c01076a5:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01076ac:	c0 
c01076ad:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01076b4:	00 
c01076b5:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01076bc:	e8 07 98 ff ff       	call   c0100ec8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076c1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076c5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076c9:	0f 8e 53 ff ff ff    	jle    c0107622 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c01076cf:	a1 14 40 15 c0       	mov    0xc0154014,%eax
c01076d4:	8b 15 18 40 15 c0    	mov    0xc0154018,%edx
c01076da:	89 45 98             	mov    %eax,-0x68(%ebp)
c01076dd:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01076e0:	c7 45 a8 14 40 15 c0 	movl   $0xc0154014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01076e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076ea:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01076ed:	89 50 04             	mov    %edx,0x4(%eax)
c01076f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076f3:	8b 50 04             	mov    0x4(%eax),%edx
c01076f6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076f9:	89 10                	mov    %edx,(%eax)
c01076fb:	c7 45 a4 14 40 15 c0 	movl   $0xc0154014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107702:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107705:	8b 40 04             	mov    0x4(%eax),%eax
c0107708:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c010770b:	0f 94 c0             	sete   %al
c010770e:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107711:	85 c0                	test   %eax,%eax
c0107713:	75 24                	jne    c0107739 <check_swap+0x380>
c0107715:	c7 44 24 0c 47 70 11 	movl   $0xc0117047,0xc(%esp)
c010771c:	c0 
c010771d:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107724:	c0 
c0107725:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010772c:	00 
c010772d:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107734:	e8 8f 97 ff ff       	call   c0100ec8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107739:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c010773e:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0107741:	c7 05 1c 40 15 c0 00 	movl   $0x0,0xc015401c
c0107748:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010774b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107752:	eb 1e                	jmp    c0107772 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107754:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107757:	8b 04 85 40 40 15 c0 	mov    -0x3feabfc0(,%eax,4),%eax
c010775e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107765:	00 
c0107766:	89 04 24             	mov    %eax,(%esp)
c0107769:	e8 79 da ff ff       	call   c01051e7 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010776e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107772:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107776:	7e dc                	jle    c0107754 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107778:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c010777d:	83 f8 04             	cmp    $0x4,%eax
c0107780:	74 24                	je     c01077a6 <check_swap+0x3ed>
c0107782:	c7 44 24 0c 60 70 11 	movl   $0xc0117060,0xc(%esp)
c0107789:	c0 
c010778a:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107791:	c0 
c0107792:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107799:	00 
c010779a:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01077a1:	e8 22 97 ff ff       	call   c0100ec8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01077a6:	c7 04 24 84 70 11 c0 	movl   $0xc0117084,(%esp)
c01077ad:	e8 b3 8b ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01077b2:	c7 05 18 0f 15 c0 00 	movl   $0x0,0xc0150f18
c01077b9:	00 00 00 
     
     check_content_set();
c01077bc:	e8 28 fa ff ff       	call   c01071e9 <check_content_set>
     assert( nr_free == 0);         
c01077c1:	a1 1c 40 15 c0       	mov    0xc015401c,%eax
c01077c6:	85 c0                	test   %eax,%eax
c01077c8:	74 24                	je     c01077ee <check_swap+0x435>
c01077ca:	c7 44 24 0c ab 70 11 	movl   $0xc01170ab,0xc(%esp)
c01077d1:	c0 
c01077d2:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01077d9:	c0 
c01077da:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01077e1:	00 
c01077e2:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01077e9:	e8 da 96 ff ff       	call   c0100ec8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077f5:	eb 26                	jmp    c010781d <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01077f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077fa:	c7 04 85 60 40 15 c0 	movl   $0xffffffff,-0x3feabfa0(,%eax,4)
c0107801:	ff ff ff ff 
c0107805:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107808:	8b 14 85 60 40 15 c0 	mov    -0x3feabfa0(,%eax,4),%edx
c010780f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107812:	89 14 85 a0 40 15 c0 	mov    %edx,-0x3feabf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107819:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010781d:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107821:	7e d4                	jle    c01077f7 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107823:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010782a:	e9 eb 00 00 00       	jmp    c010791a <check_swap+0x561>
         check_ptep[i]=0;
c010782f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107832:	c7 04 85 f4 40 15 c0 	movl   $0x0,-0x3feabf0c(,%eax,4)
c0107839:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010783d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107840:	83 c0 01             	add    $0x1,%eax
c0107843:	c1 e0 0c             	shl    $0xc,%eax
c0107846:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010784d:	00 
c010784e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107852:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107855:	89 04 24             	mov    %eax,(%esp)
c0107858:	e8 96 e0 ff ff       	call   c01058f3 <get_pte>
c010785d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107860:	89 04 95 f4 40 15 c0 	mov    %eax,-0x3feabf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107867:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010786a:	8b 04 85 f4 40 15 c0 	mov    -0x3feabf0c(,%eax,4),%eax
c0107871:	85 c0                	test   %eax,%eax
c0107873:	75 24                	jne    c0107899 <check_swap+0x4e0>
c0107875:	c7 44 24 0c b8 70 11 	movl   $0xc01170b8,0xc(%esp)
c010787c:	c0 
c010787d:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107884:	c0 
c0107885:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010788c:	00 
c010788d:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107894:	e8 2f 96 ff ff       	call   c0100ec8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107899:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010789c:	8b 04 85 f4 40 15 c0 	mov    -0x3feabf0c(,%eax,4),%eax
c01078a3:	8b 00                	mov    (%eax),%eax
c01078a5:	89 04 24             	mov    %eax,(%esp)
c01078a8:	e8 87 f5 ff ff       	call   c0106e34 <pte2page>
c01078ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01078b0:	8b 14 95 40 40 15 c0 	mov    -0x3feabfc0(,%edx,4),%edx
c01078b7:	39 d0                	cmp    %edx,%eax
c01078b9:	74 24                	je     c01078df <check_swap+0x526>
c01078bb:	c7 44 24 0c d0 70 11 	movl   $0xc01170d0,0xc(%esp)
c01078c2:	c0 
c01078c3:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c01078ca:	c0 
c01078cb:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01078d2:	00 
c01078d3:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c01078da:	e8 e9 95 ff ff       	call   c0100ec8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01078df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078e2:	8b 04 85 f4 40 15 c0 	mov    -0x3feabf0c(,%eax,4),%eax
c01078e9:	8b 00                	mov    (%eax),%eax
c01078eb:	83 e0 01             	and    $0x1,%eax
c01078ee:	85 c0                	test   %eax,%eax
c01078f0:	75 24                	jne    c0107916 <check_swap+0x55d>
c01078f2:	c7 44 24 0c f8 70 11 	movl   $0xc01170f8,0xc(%esp)
c01078f9:	c0 
c01078fa:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c0107901:	c0 
c0107902:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107909:	00 
c010790a:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c0107911:	e8 b2 95 ff ff       	call   c0100ec8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107916:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010791a:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010791e:	0f 8e 0b ff ff ff    	jle    c010782f <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107924:	c7 04 24 14 71 11 c0 	movl   $0xc0117114,(%esp)
c010792b:	e8 35 8a ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107930:	e8 6c fa ff ff       	call   c01073a1 <check_content_access>
c0107935:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107938:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010793c:	74 24                	je     c0107962 <check_swap+0x5a9>
c010793e:	c7 44 24 0c 3a 71 11 	movl   $0xc011713a,0xc(%esp)
c0107945:	c0 
c0107946:	c7 44 24 08 22 6e 11 	movl   $0xc0116e22,0x8(%esp)
c010794d:	c0 
c010794e:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107955:	00 
c0107956:	c7 04 24 bc 6d 11 c0 	movl   $0xc0116dbc,(%esp)
c010795d:	e8 66 95 ff ff       	call   c0100ec8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107962:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107969:	eb 1e                	jmp    c0107989 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c010796b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010796e:	8b 04 85 40 40 15 c0 	mov    -0x3feabfc0(,%eax,4),%eax
c0107975:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010797c:	00 
c010797d:	89 04 24             	mov    %eax,(%esp)
c0107980:	e8 62 d8 ff ff       	call   c01051e7 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107985:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107989:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010798d:	7e dc                	jle    c010796b <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c010798f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107992:	8b 00                	mov    (%eax),%eax
c0107994:	89 04 24             	mov    %eax,(%esp)
c0107997:	e8 d6 f4 ff ff       	call   c0106e72 <pde2page>
c010799c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01079a3:	00 
c01079a4:	89 04 24             	mov    %eax,(%esp)
c01079a7:	e8 3b d8 ff ff       	call   c01051e7 <free_pages>
     pgdir[0] = 0;
c01079ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01079b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079b8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01079bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079c2:	89 04 24             	mov    %eax,(%esp)
c01079c5:	e8 04 09 00 00       	call   c01082ce <mm_destroy>
     check_mm_struct = NULL;
c01079ca:	c7 05 0c 41 15 c0 00 	movl   $0x0,0xc015410c
c01079d1:	00 00 00 
     
     nr_free = nr_free_store;
c01079d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01079d7:	a3 1c 40 15 c0       	mov    %eax,0xc015401c
     free_list = free_list_store;
c01079dc:	8b 45 98             	mov    -0x68(%ebp),%eax
c01079df:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01079e2:	a3 14 40 15 c0       	mov    %eax,0xc0154014
c01079e7:	89 15 18 40 15 c0    	mov    %edx,0xc0154018

     
     le = &free_list;
c01079ed:	c7 45 e8 14 40 15 c0 	movl   $0xc0154014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01079f4:	eb 1d                	jmp    c0107a13 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c01079f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079f9:	83 e8 10             	sub    $0x10,%eax
c01079fc:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c01079ff:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107a03:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107a06:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107a09:	8b 40 08             	mov    0x8(%eax),%eax
c0107a0c:	29 c2                	sub    %eax,%edx
c0107a0e:	89 d0                	mov    %edx,%eax
c0107a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107a13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a16:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107a19:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107a1c:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107a1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a22:	81 7d e8 14 40 15 c0 	cmpl   $0xc0154014,-0x18(%ebp)
c0107a29:	75 cb                	jne    c01079f6 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107a2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107a32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a35:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107a39:	c7 04 24 41 71 11 c0 	movl   $0xc0117141,(%esp)
c0107a40:	e8 20 89 ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107a45:	c7 04 24 5b 71 11 c0 	movl   $0xc011715b,(%esp)
c0107a4c:	e8 14 89 ff ff       	call   c0100365 <cprintf>
}
c0107a51:	83 c4 74             	add    $0x74,%esp
c0107a54:	5b                   	pop    %ebx
c0107a55:	5d                   	pop    %ebp
c0107a56:	c3                   	ret    

c0107a57 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107a57:	55                   	push   %ebp
c0107a58:	89 e5                	mov    %esp,%ebp
c0107a5a:	83 ec 10             	sub    $0x10,%esp
c0107a5d:	c7 45 fc 04 41 15 c0 	movl   $0xc0154104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107a64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a67:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107a6a:	89 50 04             	mov    %edx,0x4(%eax)
c0107a6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a70:	8b 50 04             	mov    0x4(%eax),%edx
c0107a73:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a76:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107a78:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a7b:	c7 40 14 04 41 15 c0 	movl   $0xc0154104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107a82:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a87:	c9                   	leave  
c0107a88:	c3                   	ret    

c0107a89 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a89:	55                   	push   %ebp
c0107a8a:	89 e5                	mov    %esp,%ebp
c0107a8c:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a92:	8b 40 14             	mov    0x14(%eax),%eax
c0107a95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a98:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a9b:	83 c0 18             	add    $0x18,%eax
c0107a9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107aa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107aa5:	74 06                	je     c0107aad <_fifo_map_swappable+0x24>
c0107aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107aab:	75 24                	jne    c0107ad1 <_fifo_map_swappable+0x48>
c0107aad:	c7 44 24 0c 74 71 11 	movl   $0xc0117174,0xc(%esp)
c0107ab4:	c0 
c0107ab5:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107abc:	c0 
c0107abd:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107ac4:	00 
c0107ac5:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107acc:	e8 f7 93 ff ff       	call   c0100ec8 <__panic>
c0107ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ad4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107ad7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ada:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107add:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ae0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107ae3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ae6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107ae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107aec:	8b 40 04             	mov    0x4(%eax),%eax
c0107aef:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107af2:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107af5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107af8:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107afb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107afe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107b01:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b04:	89 10                	mov    %edx,(%eax)
c0107b06:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107b09:	8b 10                	mov    (%eax),%edx
c0107b0b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107b0e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107b11:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b14:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b17:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107b1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b1d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107b20:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107b22:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b27:	c9                   	leave  
c0107b28:	c3                   	ret    

c0107b29 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107b29:	55                   	push   %ebp
c0107b2a:	89 e5                	mov    %esp,%ebp
c0107b2c:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b32:	8b 40 14             	mov    0x14(%eax),%eax
c0107b35:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107b38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b3c:	75 24                	jne    c0107b62 <_fifo_swap_out_victim+0x39>
c0107b3e:	c7 44 24 0c bb 71 11 	movl   $0xc01171bb,0xc(%esp)
c0107b45:	c0 
c0107b46:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107b4d:	c0 
c0107b4e:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107b55:	00 
c0107b56:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107b5d:	e8 66 93 ff ff       	call   c0100ec8 <__panic>
     assert(in_tick==0);
c0107b62:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107b66:	74 24                	je     c0107b8c <_fifo_swap_out_victim+0x63>
c0107b68:	c7 44 24 0c c8 71 11 	movl   $0xc01171c8,0xc(%esp)
c0107b6f:	c0 
c0107b70:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107b77:	c0 
c0107b78:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107b7f:	00 
c0107b80:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107b87:	e8 3c 93 ff ff       	call   c0100ec8 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b8f:	8b 00                	mov    (%eax),%eax
c0107b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107b9a:	75 24                	jne    c0107bc0 <_fifo_swap_out_victim+0x97>
c0107b9c:	c7 44 24 0c d3 71 11 	movl   $0xc01171d3,0xc(%esp)
c0107ba3:	c0 
c0107ba4:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107bab:	c0 
c0107bac:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107bb3:	00 
c0107bb4:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107bbb:	e8 08 93 ff ff       	call   c0100ec8 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107bc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bc3:	83 e8 18             	sub    $0x18,%eax
c0107bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107bc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bcc:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107bcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107bd2:	8b 40 04             	mov    0x4(%eax),%eax
c0107bd5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107bd8:	8b 12                	mov    (%edx),%edx
c0107bda:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107bdd:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107be0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107be3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107be6:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107be9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107bec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107bef:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107bf1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107bf5:	75 24                	jne    c0107c1b <_fifo_swap_out_victim+0xf2>
c0107bf7:	c7 44 24 0c dc 71 11 	movl   $0xc01171dc,0xc(%esp)
c0107bfe:	c0 
c0107bff:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107c06:	c0 
c0107c07:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107c0e:	00 
c0107c0f:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107c16:	e8 ad 92 ff ff       	call   c0100ec8 <__panic>
     *ptr_page = p;
c0107c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107c21:	89 10                	mov    %edx,(%eax)
     return 0;
c0107c23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c28:	c9                   	leave  
c0107c29:	c3                   	ret    

c0107c2a <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107c2a:	55                   	push   %ebp
c0107c2b:	89 e5                	mov    %esp,%ebp
c0107c2d:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107c30:	c7 04 24 e8 71 11 c0 	movl   $0xc01171e8,(%esp)
c0107c37:	e8 29 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107c3c:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107c41:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107c44:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107c49:	83 f8 04             	cmp    $0x4,%eax
c0107c4c:	74 24                	je     c0107c72 <_fifo_check_swap+0x48>
c0107c4e:	c7 44 24 0c 0e 72 11 	movl   $0xc011720e,0xc(%esp)
c0107c55:	c0 
c0107c56:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107c5d:	c0 
c0107c5e:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107c65:	00 
c0107c66:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107c6d:	e8 56 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c72:	c7 04 24 20 72 11 c0 	movl   $0xc0117220,(%esp)
c0107c79:	e8 e7 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c7e:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c83:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107c86:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107c8b:	83 f8 04             	cmp    $0x4,%eax
c0107c8e:	74 24                	je     c0107cb4 <_fifo_check_swap+0x8a>
c0107c90:	c7 44 24 0c 0e 72 11 	movl   $0xc011720e,0xc(%esp)
c0107c97:	c0 
c0107c98:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107c9f:	c0 
c0107ca0:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107ca7:	00 
c0107ca8:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107caf:	e8 14 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107cb4:	c7 04 24 48 72 11 c0 	movl   $0xc0117248,(%esp)
c0107cbb:	e8 a5 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107cc0:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107cc5:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107cc8:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107ccd:	83 f8 04             	cmp    $0x4,%eax
c0107cd0:	74 24                	je     c0107cf6 <_fifo_check_swap+0xcc>
c0107cd2:	c7 44 24 0c 0e 72 11 	movl   $0xc011720e,0xc(%esp)
c0107cd9:	c0 
c0107cda:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107ce1:	c0 
c0107ce2:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107ce9:	00 
c0107cea:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107cf1:	e8 d2 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107cf6:	c7 04 24 70 72 11 c0 	movl   $0xc0117270,(%esp)
c0107cfd:	e8 63 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d02:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d07:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107d0a:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107d0f:	83 f8 04             	cmp    $0x4,%eax
c0107d12:	74 24                	je     c0107d38 <_fifo_check_swap+0x10e>
c0107d14:	c7 44 24 0c 0e 72 11 	movl   $0xc011720e,0xc(%esp)
c0107d1b:	c0 
c0107d1c:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107d23:	c0 
c0107d24:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107d2b:	00 
c0107d2c:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107d33:	e8 90 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107d38:	c7 04 24 98 72 11 c0 	movl   $0xc0117298,(%esp)
c0107d3f:	e8 21 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107d44:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107d49:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107d4c:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107d51:	83 f8 05             	cmp    $0x5,%eax
c0107d54:	74 24                	je     c0107d7a <_fifo_check_swap+0x150>
c0107d56:	c7 44 24 0c be 72 11 	movl   $0xc01172be,0xc(%esp)
c0107d5d:	c0 
c0107d5e:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107d65:	c0 
c0107d66:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107d6d:	00 
c0107d6e:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107d75:	e8 4e 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d7a:	c7 04 24 70 72 11 c0 	movl   $0xc0117270,(%esp)
c0107d81:	e8 df 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d86:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d8b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d8e:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107d93:	83 f8 05             	cmp    $0x5,%eax
c0107d96:	74 24                	je     c0107dbc <_fifo_check_swap+0x192>
c0107d98:	c7 44 24 0c be 72 11 	movl   $0xc01172be,0xc(%esp)
c0107d9f:	c0 
c0107da0:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107da7:	c0 
c0107da8:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107daf:	00 
c0107db0:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107db7:	e8 0c 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107dbc:	c7 04 24 20 72 11 c0 	movl   $0xc0117220,(%esp)
c0107dc3:	e8 9d 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107dc8:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107dcd:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107dd0:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107dd5:	83 f8 06             	cmp    $0x6,%eax
c0107dd8:	74 24                	je     c0107dfe <_fifo_check_swap+0x1d4>
c0107dda:	c7 44 24 0c cd 72 11 	movl   $0xc01172cd,0xc(%esp)
c0107de1:	c0 
c0107de2:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107de9:	c0 
c0107dea:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107df1:	00 
c0107df2:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107df9:	e8 ca 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107dfe:	c7 04 24 70 72 11 c0 	movl   $0xc0117270,(%esp)
c0107e05:	e8 5b 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e0a:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e0f:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107e12:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107e17:	83 f8 07             	cmp    $0x7,%eax
c0107e1a:	74 24                	je     c0107e40 <_fifo_check_swap+0x216>
c0107e1c:	c7 44 24 0c dc 72 11 	movl   $0xc01172dc,0xc(%esp)
c0107e23:	c0 
c0107e24:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107e2b:	c0 
c0107e2c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107e33:	00 
c0107e34:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107e3b:	e8 88 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107e40:	c7 04 24 e8 71 11 c0 	movl   $0xc01171e8,(%esp)
c0107e47:	e8 19 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107e4c:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107e51:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107e54:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107e59:	83 f8 08             	cmp    $0x8,%eax
c0107e5c:	74 24                	je     c0107e82 <_fifo_check_swap+0x258>
c0107e5e:	c7 44 24 0c eb 72 11 	movl   $0xc01172eb,0xc(%esp)
c0107e65:	c0 
c0107e66:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107e6d:	c0 
c0107e6e:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107e75:	00 
c0107e76:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107e7d:	e8 46 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107e82:	c7 04 24 48 72 11 c0 	movl   $0xc0117248,(%esp)
c0107e89:	e8 d7 84 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e8e:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e93:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e96:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0107e9b:	83 f8 09             	cmp    $0x9,%eax
c0107e9e:	74 24                	je     c0107ec4 <_fifo_check_swap+0x29a>
c0107ea0:	c7 44 24 0c fa 72 11 	movl   $0xc01172fa,0xc(%esp)
c0107ea7:	c0 
c0107ea8:	c7 44 24 08 92 71 11 	movl   $0xc0117192,0x8(%esp)
c0107eaf:	c0 
c0107eb0:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107eb7:	00 
c0107eb8:	c7 04 24 a7 71 11 c0 	movl   $0xc01171a7,(%esp)
c0107ebf:	e8 04 90 ff ff       	call   c0100ec8 <__panic>
    return 0;
c0107ec4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ec9:	c9                   	leave  
c0107eca:	c3                   	ret    

c0107ecb <_fifo_init>:


static int
_fifo_init(void)
{
c0107ecb:	55                   	push   %ebp
c0107ecc:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ed3:	5d                   	pop    %ebp
c0107ed4:	c3                   	ret    

c0107ed5 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107ed5:	55                   	push   %ebp
c0107ed6:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ed8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107edd:	5d                   	pop    %ebp
c0107ede:	c3                   	ret    

c0107edf <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107edf:	55                   	push   %ebp
c0107ee0:	89 e5                	mov    %esp,%ebp
c0107ee2:	b8 00 00 00 00       	mov    $0x0,%eax
c0107ee7:	5d                   	pop    %ebp
c0107ee8:	c3                   	ret    

c0107ee9 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107ee9:	55                   	push   %ebp
c0107eea:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0107eef:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107ef2:	5d                   	pop    %ebp
c0107ef3:	c3                   	ret    

c0107ef4 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107ef4:	55                   	push   %ebp
c0107ef5:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107ef7:	8b 45 08             	mov    0x8(%ebp),%eax
c0107efa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107efd:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107f00:	5d                   	pop    %ebp
c0107f01:	c3                   	ret    

c0107f02 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107f02:	55                   	push   %ebp
c0107f03:	89 e5                	mov    %esp,%ebp
c0107f05:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f0b:	c1 e8 0c             	shr    $0xc,%eax
c0107f0e:	89 c2                	mov    %eax,%edx
c0107f10:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c0107f15:	39 c2                	cmp    %eax,%edx
c0107f17:	72 1c                	jb     c0107f35 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107f19:	c7 44 24 08 1c 73 11 	movl   $0xc011731c,0x8(%esp)
c0107f20:	c0 
c0107f21:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107f28:	00 
c0107f29:	c7 04 24 3b 73 11 c0 	movl   $0xc011733b,(%esp)
c0107f30:	e8 93 8f ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0107f35:	8b 0d 28 40 15 c0    	mov    0xc0154028,%ecx
c0107f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f3e:	c1 e8 0c             	shr    $0xc,%eax
c0107f41:	89 c2                	mov    %eax,%edx
c0107f43:	89 d0                	mov    %edx,%eax
c0107f45:	c1 e0 03             	shl    $0x3,%eax
c0107f48:	01 d0                	add    %edx,%eax
c0107f4a:	c1 e0 02             	shl    $0x2,%eax
c0107f4d:	01 c8                	add    %ecx,%eax
}
c0107f4f:	c9                   	leave  
c0107f50:	c3                   	ret    

c0107f51 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107f51:	55                   	push   %ebp
c0107f52:	89 e5                	mov    %esp,%ebp
c0107f54:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107f57:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f5a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f5f:	89 04 24             	mov    %eax,(%esp)
c0107f62:	e8 9b ff ff ff       	call   c0107f02 <pa2page>
}
c0107f67:	c9                   	leave  
c0107f68:	c3                   	ret    

c0107f69 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107f69:	55                   	push   %ebp
c0107f6a:	89 e5                	mov    %esp,%ebp
c0107f6c:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107f6f:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107f76:	e8 7c cd ff ff       	call   c0104cf7 <kmalloc>
c0107f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107f7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f82:	0f 84 81 00 00 00    	je     c0108009 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f91:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107f94:	89 50 04             	mov    %edx,0x4(%eax)
c0107f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f9a:	8b 50 04             	mov    0x4(%eax),%edx
c0107f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fa0:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107fa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fa5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107faf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107fc0:	a1 0c 0f 15 c0       	mov    0xc0150f0c,%eax
c0107fc5:	85 c0                	test   %eax,%eax
c0107fc7:	74 0d                	je     c0107fd6 <mm_create+0x6d>
c0107fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fcc:	89 04 24             	mov    %eax,(%esp)
c0107fcf:	e8 46 ef ff ff       	call   c0106f1a <swap_init_mm>
c0107fd4:	eb 0a                	jmp    c0107fe0 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fd9:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107fe0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107fe7:	00 
c0107fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107feb:	89 04 24             	mov    %eax,(%esp)
c0107fee:	e8 01 ff ff ff       	call   c0107ef4 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff6:	83 c0 1c             	add    $0x1c,%eax
c0107ff9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108000:	00 
c0108001:	89 04 24             	mov    %eax,(%esp)
c0108004:	e8 80 1b 00 00       	call   c0109b89 <sem_init>
    }    
    return mm;
c0108009:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010800c:	c9                   	leave  
c010800d:	c3                   	ret    

c010800e <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c010800e:	55                   	push   %ebp
c010800f:	89 e5                	mov    %esp,%ebp
c0108011:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108014:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010801b:	e8 d7 cc ff ff       	call   c0104cf7 <kmalloc>
c0108020:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108023:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108027:	74 1b                	je     c0108044 <vma_create+0x36>
        vma->vm_start = vm_start;
c0108029:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010802c:	8b 55 08             	mov    0x8(%ebp),%edx
c010802f:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0108032:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108035:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108038:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010803b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803e:	8b 55 10             	mov    0x10(%ebp),%edx
c0108041:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0108044:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108047:	c9                   	leave  
c0108048:	c3                   	ret    

c0108049 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0108049:	55                   	push   %ebp
c010804a:	89 e5                	mov    %esp,%ebp
c010804c:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c010804f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0108056:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010805a:	0f 84 95 00 00 00    	je     c01080f5 <find_vma+0xac>
        vma = mm->mmap_cache;
c0108060:	8b 45 08             	mov    0x8(%ebp),%eax
c0108063:	8b 40 08             	mov    0x8(%eax),%eax
c0108066:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0108069:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010806d:	74 16                	je     c0108085 <find_vma+0x3c>
c010806f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108072:	8b 40 04             	mov    0x4(%eax),%eax
c0108075:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108078:	77 0b                	ja     c0108085 <find_vma+0x3c>
c010807a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010807d:	8b 40 08             	mov    0x8(%eax),%eax
c0108080:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108083:	77 61                	ja     c01080e6 <find_vma+0x9d>
                bool found = 0;
c0108085:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c010808c:	8b 45 08             	mov    0x8(%ebp),%eax
c010808f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108092:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108095:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0108098:	eb 28                	jmp    c01080c2 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c010809a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010809d:	83 e8 10             	sub    $0x10,%eax
c01080a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01080a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080a6:	8b 40 04             	mov    0x4(%eax),%eax
c01080a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080ac:	77 14                	ja     c01080c2 <find_vma+0x79>
c01080ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080b1:	8b 40 08             	mov    0x8(%eax),%eax
c01080b4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080b7:	76 09                	jbe    c01080c2 <find_vma+0x79>
                        found = 1;
c01080b9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01080c0:	eb 17                	jmp    c01080d9 <find_vma+0x90>
c01080c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01080c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080cb:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01080ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01080d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01080d7:	75 c1                	jne    c010809a <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01080d9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01080dd:	75 07                	jne    c01080e6 <find_vma+0x9d>
                    vma = NULL;
c01080df:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01080e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080ea:	74 09                	je     c01080f5 <find_vma+0xac>
            mm->mmap_cache = vma;
c01080ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01080f2:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01080f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01080f8:	c9                   	leave  
c01080f9:	c3                   	ret    

c01080fa <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01080fa:	55                   	push   %ebp
c01080fb:	89 e5                	mov    %esp,%ebp
c01080fd:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108100:	8b 45 08             	mov    0x8(%ebp),%eax
c0108103:	8b 50 04             	mov    0x4(%eax),%edx
c0108106:	8b 45 08             	mov    0x8(%ebp),%eax
c0108109:	8b 40 08             	mov    0x8(%eax),%eax
c010810c:	39 c2                	cmp    %eax,%edx
c010810e:	72 24                	jb     c0108134 <check_vma_overlap+0x3a>
c0108110:	c7 44 24 0c 49 73 11 	movl   $0xc0117349,0xc(%esp)
c0108117:	c0 
c0108118:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c010811f:	c0 
c0108120:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108127:	00 
c0108128:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c010812f:	e8 94 8d ff ff       	call   c0100ec8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108134:	8b 45 08             	mov    0x8(%ebp),%eax
c0108137:	8b 50 08             	mov    0x8(%eax),%edx
c010813a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010813d:	8b 40 04             	mov    0x4(%eax),%eax
c0108140:	39 c2                	cmp    %eax,%edx
c0108142:	76 24                	jbe    c0108168 <check_vma_overlap+0x6e>
c0108144:	c7 44 24 0c 8c 73 11 	movl   $0xc011738c,0xc(%esp)
c010814b:	c0 
c010814c:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108153:	c0 
c0108154:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010815b:	00 
c010815c:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108163:	e8 60 8d ff ff       	call   c0100ec8 <__panic>
    assert(next->vm_start < next->vm_end);
c0108168:	8b 45 0c             	mov    0xc(%ebp),%eax
c010816b:	8b 50 04             	mov    0x4(%eax),%edx
c010816e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108171:	8b 40 08             	mov    0x8(%eax),%eax
c0108174:	39 c2                	cmp    %eax,%edx
c0108176:	72 24                	jb     c010819c <check_vma_overlap+0xa2>
c0108178:	c7 44 24 0c ab 73 11 	movl   $0xc01173ab,0xc(%esp)
c010817f:	c0 
c0108180:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108187:	c0 
c0108188:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010818f:	00 
c0108190:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108197:	e8 2c 8d ff ff       	call   c0100ec8 <__panic>
}
c010819c:	c9                   	leave  
c010819d:	c3                   	ret    

c010819e <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c010819e:	55                   	push   %ebp
c010819f:	89 e5                	mov    %esp,%ebp
c01081a1:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01081a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081a7:	8b 50 04             	mov    0x4(%eax),%edx
c01081aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ad:	8b 40 08             	mov    0x8(%eax),%eax
c01081b0:	39 c2                	cmp    %eax,%edx
c01081b2:	72 24                	jb     c01081d8 <insert_vma_struct+0x3a>
c01081b4:	c7 44 24 0c c9 73 11 	movl   $0xc01173c9,0xc(%esp)
c01081bb:	c0 
c01081bc:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01081c3:	c0 
c01081c4:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01081cb:	00 
c01081cc:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c01081d3:	e8 f0 8c ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01081d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01081db:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01081de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081e1:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01081e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01081ea:	eb 21                	jmp    c010820d <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01081ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081ef:	83 e8 10             	sub    $0x10,%eax
c01081f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01081f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081f8:	8b 50 04             	mov    0x4(%eax),%edx
c01081fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081fe:	8b 40 04             	mov    0x4(%eax),%eax
c0108201:	39 c2                	cmp    %eax,%edx
c0108203:	76 02                	jbe    c0108207 <insert_vma_struct+0x69>
                break;
c0108205:	eb 1d                	jmp    c0108224 <insert_vma_struct+0x86>
            }
            le_prev = le;
c0108207:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010820a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010820d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108210:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108213:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108216:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0108219:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010821c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010821f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108222:	75 c8                	jne    c01081ec <insert_vma_struct+0x4e>
c0108224:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108227:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010822a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010822d:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108230:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108233:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108236:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108239:	74 15                	je     c0108250 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010823b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010823e:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108241:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108244:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108248:	89 14 24             	mov    %edx,(%esp)
c010824b:	e8 aa fe ff ff       	call   c01080fa <check_vma_overlap>
    }
    if (le_next != list) {
c0108250:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108253:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108256:	74 15                	je     c010826d <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0108258:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010825b:	83 e8 10             	sub    $0x10,%eax
c010825e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108262:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108265:	89 04 24             	mov    %eax,(%esp)
c0108268:	e8 8d fe ff ff       	call   c01080fa <check_vma_overlap>
    }

    vma->vm_mm = mm;
c010826d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108270:	8b 55 08             	mov    0x8(%ebp),%edx
c0108273:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0108275:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108278:	8d 50 10             	lea    0x10(%eax),%edx
c010827b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010827e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108281:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108284:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108287:	8b 40 04             	mov    0x4(%eax),%eax
c010828a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010828d:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108290:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108293:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108296:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108299:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010829c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010829f:	89 10                	mov    %edx,(%eax)
c01082a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082a4:	8b 10                	mov    (%eax),%edx
c01082a6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01082a9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01082ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01082af:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01082b2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01082b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01082b8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01082bb:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01082bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c0:	8b 40 10             	mov    0x10(%eax),%eax
c01082c3:	8d 50 01             	lea    0x1(%eax),%edx
c01082c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c9:	89 50 10             	mov    %edx,0x10(%eax)
}
c01082cc:	c9                   	leave  
c01082cd:	c3                   	ret    

c01082ce <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01082ce:	55                   	push   %ebp
c01082cf:	89 e5                	mov    %esp,%ebp
c01082d1:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01082d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01082d7:	89 04 24             	mov    %eax,(%esp)
c01082da:	e8 0a fc ff ff       	call   c0107ee9 <mm_count>
c01082df:	85 c0                	test   %eax,%eax
c01082e1:	74 24                	je     c0108307 <mm_destroy+0x39>
c01082e3:	c7 44 24 0c e5 73 11 	movl   $0xc01173e5,0xc(%esp)
c01082ea:	c0 
c01082eb:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01082f2:	c0 
c01082f3:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01082fa:	00 
c01082fb:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108302:	e8 c1 8b ff ff       	call   c0100ec8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0108307:	8b 45 08             	mov    0x8(%ebp),%eax
c010830a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010830d:	eb 36                	jmp    c0108345 <mm_destroy+0x77>
c010830f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108312:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108315:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108318:	8b 40 04             	mov    0x4(%eax),%eax
c010831b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010831e:	8b 12                	mov    (%edx),%edx
c0108320:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108323:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108326:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108329:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010832c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010832f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108332:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108335:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108337:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010833a:	83 e8 10             	sub    $0x10,%eax
c010833d:	89 04 24             	mov    %eax,(%esp)
c0108340:	e8 cd c9 ff ff       	call   c0104d12 <kfree>
c0108345:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108348:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010834b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010834e:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108351:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108354:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108357:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010835a:	75 b3                	jne    c010830f <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c010835c:	8b 45 08             	mov    0x8(%ebp),%eax
c010835f:	89 04 24             	mov    %eax,(%esp)
c0108362:	e8 ab c9 ff ff       	call   c0104d12 <kfree>
    mm=NULL;
c0108367:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c010836e:	c9                   	leave  
c010836f:	c3                   	ret    

c0108370 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0108370:	55                   	push   %ebp
c0108371:	89 e5                	mov    %esp,%ebp
c0108373:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108376:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108379:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010837c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010837f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108384:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108387:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c010838e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108391:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108394:	01 c2                	add    %eax,%edx
c0108396:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108399:	01 d0                	add    %edx,%eax
c010839b:	83 e8 01             	sub    $0x1,%eax
c010839e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01083a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083a4:	ba 00 00 00 00       	mov    $0x0,%edx
c01083a9:	f7 75 e8             	divl   -0x18(%ebp)
c01083ac:	89 d0                	mov    %edx,%eax
c01083ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01083b1:	29 c2                	sub    %eax,%edx
c01083b3:	89 d0                	mov    %edx,%eax
c01083b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01083b8:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01083bf:	76 11                	jbe    c01083d2 <mm_map+0x62>
c01083c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083c4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01083c7:	73 09                	jae    c01083d2 <mm_map+0x62>
c01083c9:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01083d0:	76 0a                	jbe    c01083dc <mm_map+0x6c>
        return -E_INVAL;
c01083d2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01083d7:	e9 ae 00 00 00       	jmp    c010848a <mm_map+0x11a>
    }

    assert(mm != NULL);
c01083dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01083e0:	75 24                	jne    c0108406 <mm_map+0x96>
c01083e2:	c7 44 24 0c f7 73 11 	movl   $0xc01173f7,0xc(%esp)
c01083e9:	c0 
c01083ea:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01083f1:	c0 
c01083f2:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01083f9:	00 
c01083fa:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108401:	e8 c2 8a ff ff       	call   c0100ec8 <__panic>

    int ret = -E_INVAL;
c0108406:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c010840d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108410:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108414:	8b 45 08             	mov    0x8(%ebp),%eax
c0108417:	89 04 24             	mov    %eax,(%esp)
c010841a:	e8 2a fc ff ff       	call   c0108049 <find_vma>
c010841f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108422:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108426:	74 0d                	je     c0108435 <mm_map+0xc5>
c0108428:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010842b:	8b 40 04             	mov    0x4(%eax),%eax
c010842e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108431:	73 02                	jae    c0108435 <mm_map+0xc5>
        goto out;
c0108433:	eb 52                	jmp    c0108487 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108435:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010843c:	8b 45 14             	mov    0x14(%ebp),%eax
c010843f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108443:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108446:	89 44 24 04          	mov    %eax,0x4(%esp)
c010844a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010844d:	89 04 24             	mov    %eax,(%esp)
c0108450:	e8 b9 fb ff ff       	call   c010800e <vma_create>
c0108455:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108458:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010845c:	75 02                	jne    c0108460 <mm_map+0xf0>
        goto out;
c010845e:	eb 27                	jmp    c0108487 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0108460:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108463:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108467:	8b 45 08             	mov    0x8(%ebp),%eax
c010846a:	89 04 24             	mov    %eax,(%esp)
c010846d:	e8 2c fd ff ff       	call   c010819e <insert_vma_struct>
    if (vma_store != NULL) {
c0108472:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108476:	74 08                	je     c0108480 <mm_map+0x110>
        *vma_store = vma;
c0108478:	8b 45 18             	mov    0x18(%ebp),%eax
c010847b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010847e:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108480:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108487:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010848a:	c9                   	leave  
c010848b:	c3                   	ret    

c010848c <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c010848c:	55                   	push   %ebp
c010848d:	89 e5                	mov    %esp,%ebp
c010848f:	56                   	push   %esi
c0108490:	53                   	push   %ebx
c0108491:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0108494:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108498:	74 06                	je     c01084a0 <dup_mmap+0x14>
c010849a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010849e:	75 24                	jne    c01084c4 <dup_mmap+0x38>
c01084a0:	c7 44 24 0c 02 74 11 	movl   $0xc0117402,0xc(%esp)
c01084a7:	c0 
c01084a8:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01084af:	c0 
c01084b0:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01084b7:	00 
c01084b8:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c01084bf:	e8 04 8a ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01084c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01084d0:	e9 92 00 00 00       	jmp    c0108567 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01084d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084d8:	83 e8 10             	sub    $0x10,%eax
c01084db:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01084de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e1:	8b 48 0c             	mov    0xc(%eax),%ecx
c01084e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e7:	8b 50 08             	mov    0x8(%eax),%edx
c01084ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084ed:	8b 40 04             	mov    0x4(%eax),%eax
c01084f0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084f8:	89 04 24             	mov    %eax,(%esp)
c01084fb:	e8 0e fb ff ff       	call   c010800e <vma_create>
c0108500:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108503:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108507:	75 07                	jne    c0108510 <dup_mmap+0x84>
            return -E_NO_MEM;
c0108509:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010850e:	eb 76                	jmp    c0108586 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108510:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108513:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108517:	8b 45 08             	mov    0x8(%ebp),%eax
c010851a:	89 04 24             	mov    %eax,(%esp)
c010851d:	e8 7c fc ff ff       	call   c010819e <insert_vma_struct>

        bool share = 0;
c0108522:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108529:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010852c:	8b 58 08             	mov    0x8(%eax),%ebx
c010852f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108532:	8b 48 04             	mov    0x4(%eax),%ecx
c0108535:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108538:	8b 50 0c             	mov    0xc(%eax),%edx
c010853b:	8b 45 08             	mov    0x8(%ebp),%eax
c010853e:	8b 40 0c             	mov    0xc(%eax),%eax
c0108541:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108544:	89 74 24 10          	mov    %esi,0x10(%esp)
c0108548:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010854c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108550:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108554:	89 04 24             	mov    %eax,(%esp)
c0108557:	e8 84 d7 ff ff       	call   c0105ce0 <copy_range>
c010855c:	85 c0                	test   %eax,%eax
c010855e:	74 07                	je     c0108567 <dup_mmap+0xdb>
            return -E_NO_MEM;
c0108560:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108565:	eb 1f                	jmp    c0108586 <dup_mmap+0xfa>
c0108567:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010856a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010856d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108570:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108572:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108575:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108578:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010857b:	0f 85 54 ff ff ff    	jne    c01084d5 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0108581:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108586:	83 c4 40             	add    $0x40,%esp
c0108589:	5b                   	pop    %ebx
c010858a:	5e                   	pop    %esi
c010858b:	5d                   	pop    %ebp
c010858c:	c3                   	ret    

c010858d <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c010858d:	55                   	push   %ebp
c010858e:	89 e5                	mov    %esp,%ebp
c0108590:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108593:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108597:	74 0f                	je     c01085a8 <exit_mmap+0x1b>
c0108599:	8b 45 08             	mov    0x8(%ebp),%eax
c010859c:	89 04 24             	mov    %eax,(%esp)
c010859f:	e8 45 f9 ff ff       	call   c0107ee9 <mm_count>
c01085a4:	85 c0                	test   %eax,%eax
c01085a6:	74 24                	je     c01085cc <exit_mmap+0x3f>
c01085a8:	c7 44 24 0c 20 74 11 	movl   $0xc0117420,0xc(%esp)
c01085af:	c0 
c01085b0:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01085b7:	c0 
c01085b8:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01085bf:	00 
c01085c0:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c01085c7:	e8 fc 88 ff ff       	call   c0100ec8 <__panic>
    pde_t *pgdir = mm->pgdir;
c01085cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01085cf:	8b 40 0c             	mov    0xc(%eax),%eax
c01085d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01085d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01085d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01085db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01085e1:	eb 28                	jmp    c010860b <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01085e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085e6:	83 e8 10             	sub    $0x10,%eax
c01085e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01085ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085ef:	8b 50 08             	mov    0x8(%eax),%edx
c01085f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085f5:	8b 40 04             	mov    0x4(%eax),%eax
c01085f8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108600:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108603:	89 04 24             	mov    %eax,(%esp)
c0108606:	e8 da d4 ff ff       	call   c0105ae5 <unmap_range>
c010860b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010860e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108611:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108614:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0108617:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010861a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010861d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108620:	75 c1                	jne    c01085e3 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108622:	eb 28                	jmp    c010864c <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108627:	83 e8 10             	sub    $0x10,%eax
c010862a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010862d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108630:	8b 50 08             	mov    0x8(%eax),%edx
c0108633:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108636:	8b 40 04             	mov    0x4(%eax),%eax
c0108639:	89 54 24 08          	mov    %edx,0x8(%esp)
c010863d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108641:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108644:	89 04 24             	mov    %eax,(%esp)
c0108647:	e8 8d d5 ff ff       	call   c0105bd9 <exit_range>
c010864c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010864f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108652:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108655:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108658:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010865b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010865e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108661:	75 c1                	jne    c0108624 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108663:	c9                   	leave  
c0108664:	c3                   	ret    

c0108665 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108665:	55                   	push   %ebp
c0108666:	89 e5                	mov    %esp,%ebp
c0108668:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c010866b:	8b 45 10             	mov    0x10(%ebp),%eax
c010866e:	8b 55 18             	mov    0x18(%ebp),%edx
c0108671:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108675:	8b 55 14             	mov    0x14(%ebp),%edx
c0108678:	89 54 24 08          	mov    %edx,0x8(%esp)
c010867c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108680:	8b 45 08             	mov    0x8(%ebp),%eax
c0108683:	89 04 24             	mov    %eax,(%esp)
c0108686:	e8 dc 09 00 00       	call   c0109067 <user_mem_check>
c010868b:	85 c0                	test   %eax,%eax
c010868d:	75 07                	jne    c0108696 <copy_from_user+0x31>
        return 0;
c010868f:	b8 00 00 00 00       	mov    $0x0,%eax
c0108694:	eb 1e                	jmp    c01086b4 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108696:	8b 45 14             	mov    0x14(%ebp),%eax
c0108699:	89 44 24 08          	mov    %eax,0x8(%esp)
c010869d:	8b 45 10             	mov    0x10(%ebp),%eax
c01086a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086a7:	89 04 24             	mov    %eax,(%esp)
c01086aa:	e8 59 d1 00 00       	call   c0115808 <memcpy>
    return 1;
c01086af:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01086b4:	c9                   	leave  
c01086b5:	c3                   	ret    

c01086b6 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01086b6:	55                   	push   %ebp
c01086b7:	89 e5                	mov    %esp,%ebp
c01086b9:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01086bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086bf:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01086c6:	00 
c01086c7:	8b 55 14             	mov    0x14(%ebp),%edx
c01086ca:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01086d5:	89 04 24             	mov    %eax,(%esp)
c01086d8:	e8 8a 09 00 00       	call   c0109067 <user_mem_check>
c01086dd:	85 c0                	test   %eax,%eax
c01086df:	75 07                	jne    c01086e8 <copy_to_user+0x32>
        return 0;
c01086e1:	b8 00 00 00 00       	mov    $0x0,%eax
c01086e6:	eb 1e                	jmp    c0108706 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01086e8:	8b 45 14             	mov    0x14(%ebp),%eax
c01086eb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086ef:	8b 45 10             	mov    0x10(%ebp),%eax
c01086f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086f9:	89 04 24             	mov    %eax,(%esp)
c01086fc:	e8 07 d1 00 00       	call   c0115808 <memcpy>
    return 1;
c0108701:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108706:	c9                   	leave  
c0108707:	c3                   	ret    

c0108708 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108708:	55                   	push   %ebp
c0108709:	89 e5                	mov    %esp,%ebp
c010870b:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c010870e:	e8 02 00 00 00       	call   c0108715 <check_vmm>
}
c0108713:	c9                   	leave  
c0108714:	c3                   	ret    

c0108715 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0108715:	55                   	push   %ebp
c0108716:	89 e5                	mov    %esp,%ebp
c0108718:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010871b:	e8 f9 ca ff ff       	call   c0105219 <nr_free_pages>
c0108720:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108723:	e8 13 00 00 00       	call   c010873b <check_vma_struct>
    check_pgfault();
c0108728:	e8 a7 04 00 00       	call   c0108bd4 <check_pgfault>

    //assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c010872d:	c7 04 24 40 74 11 c0 	movl   $0xc0117440,(%esp)
c0108734:	e8 2c 7c ff ff       	call   c0100365 <cprintf>
}
c0108739:	c9                   	leave  
c010873a:	c3                   	ret    

c010873b <check_vma_struct>:

static void
check_vma_struct(void) {
c010873b:	55                   	push   %ebp
c010873c:	89 e5                	mov    %esp,%ebp
c010873e:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108741:	e8 d3 ca ff ff       	call   c0105219 <nr_free_pages>
c0108746:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108749:	e8 1b f8 ff ff       	call   c0107f69 <mm_create>
c010874e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108751:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108755:	75 24                	jne    c010877b <check_vma_struct+0x40>
c0108757:	c7 44 24 0c f7 73 11 	movl   $0xc01173f7,0xc(%esp)
c010875e:	c0 
c010875f:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108766:	c0 
c0108767:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010876e:	00 
c010876f:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108776:	e8 4d 87 ff ff       	call   c0100ec8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c010877b:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108782:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108785:	89 d0                	mov    %edx,%eax
c0108787:	c1 e0 02             	shl    $0x2,%eax
c010878a:	01 d0                	add    %edx,%eax
c010878c:	01 c0                	add    %eax,%eax
c010878e:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108791:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108794:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108797:	eb 70                	jmp    c0108809 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108799:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010879c:	89 d0                	mov    %edx,%eax
c010879e:	c1 e0 02             	shl    $0x2,%eax
c01087a1:	01 d0                	add    %edx,%eax
c01087a3:	83 c0 02             	add    $0x2,%eax
c01087a6:	89 c1                	mov    %eax,%ecx
c01087a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087ab:	89 d0                	mov    %edx,%eax
c01087ad:	c1 e0 02             	shl    $0x2,%eax
c01087b0:	01 d0                	add    %edx,%eax
c01087b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01087b9:	00 
c01087ba:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01087be:	89 04 24             	mov    %eax,(%esp)
c01087c1:	e8 48 f8 ff ff       	call   c010800e <vma_create>
c01087c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01087c9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01087cd:	75 24                	jne    c01087f3 <check_vma_struct+0xb8>
c01087cf:	c7 44 24 0c 58 74 11 	movl   $0xc0117458,0xc(%esp)
c01087d6:	c0 
c01087d7:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01087de:	c0 
c01087df:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c01087e6:	00 
c01087e7:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c01087ee:	e8 d5 86 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c01087f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01087f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087fd:	89 04 24             	mov    %eax,(%esp)
c0108800:	e8 99 f9 ff ff       	call   c010819e <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0108805:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108809:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010880d:	7f 8a                	jg     c0108799 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010880f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108812:	83 c0 01             	add    $0x1,%eax
c0108815:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108818:	eb 70                	jmp    c010888a <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010881a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010881d:	89 d0                	mov    %edx,%eax
c010881f:	c1 e0 02             	shl    $0x2,%eax
c0108822:	01 d0                	add    %edx,%eax
c0108824:	83 c0 02             	add    $0x2,%eax
c0108827:	89 c1                	mov    %eax,%ecx
c0108829:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010882c:	89 d0                	mov    %edx,%eax
c010882e:	c1 e0 02             	shl    $0x2,%eax
c0108831:	01 d0                	add    %edx,%eax
c0108833:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010883a:	00 
c010883b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010883f:	89 04 24             	mov    %eax,(%esp)
c0108842:	e8 c7 f7 ff ff       	call   c010800e <vma_create>
c0108847:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c010884a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010884e:	75 24                	jne    c0108874 <check_vma_struct+0x139>
c0108850:	c7 44 24 0c 58 74 11 	movl   $0xc0117458,0xc(%esp)
c0108857:	c0 
c0108858:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c010885f:	c0 
c0108860:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0108867:	00 
c0108868:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c010886f:	e8 54 86 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c0108874:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108877:	89 44 24 04          	mov    %eax,0x4(%esp)
c010887b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010887e:	89 04 24             	mov    %eax,(%esp)
c0108881:	e8 18 f9 ff ff       	call   c010819e <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108886:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010888a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010888d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108890:	7e 88                	jle    c010881a <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108892:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108895:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108898:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010889b:	8b 40 04             	mov    0x4(%eax),%eax
c010889e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01088a1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01088a8:	e9 97 00 00 00       	jmp    c0108944 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01088ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01088b3:	75 24                	jne    c01088d9 <check_vma_struct+0x19e>
c01088b5:	c7 44 24 0c 64 74 11 	movl   $0xc0117464,0xc(%esp)
c01088bc:	c0 
c01088bd:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01088c4:	c0 
c01088c5:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c01088cc:	00 
c01088cd:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c01088d4:	e8 ef 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01088d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088dc:	83 e8 10             	sub    $0x10,%eax
c01088df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01088e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088e5:	8b 48 04             	mov    0x4(%eax),%ecx
c01088e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088eb:	89 d0                	mov    %edx,%eax
c01088ed:	c1 e0 02             	shl    $0x2,%eax
c01088f0:	01 d0                	add    %edx,%eax
c01088f2:	39 c1                	cmp    %eax,%ecx
c01088f4:	75 17                	jne    c010890d <check_vma_struct+0x1d2>
c01088f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088f9:	8b 48 08             	mov    0x8(%eax),%ecx
c01088fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088ff:	89 d0                	mov    %edx,%eax
c0108901:	c1 e0 02             	shl    $0x2,%eax
c0108904:	01 d0                	add    %edx,%eax
c0108906:	83 c0 02             	add    $0x2,%eax
c0108909:	39 c1                	cmp    %eax,%ecx
c010890b:	74 24                	je     c0108931 <check_vma_struct+0x1f6>
c010890d:	c7 44 24 0c 7c 74 11 	movl   $0xc011747c,0xc(%esp)
c0108914:	c0 
c0108915:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c010891c:	c0 
c010891d:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0108924:	00 
c0108925:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c010892c:	e8 97 85 ff ff       	call   c0100ec8 <__panic>
c0108931:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108934:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108937:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010893a:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010893d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108940:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108944:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108947:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010894a:	0f 8e 5d ff ff ff    	jle    c01088ad <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108950:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108957:	e9 cd 01 00 00       	jmp    c0108b29 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c010895c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010895f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108963:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108966:	89 04 24             	mov    %eax,(%esp)
c0108969:	e8 db f6 ff ff       	call   c0108049 <find_vma>
c010896e:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108971:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108975:	75 24                	jne    c010899b <check_vma_struct+0x260>
c0108977:	c7 44 24 0c b1 74 11 	movl   $0xc01174b1,0xc(%esp)
c010897e:	c0 
c010897f:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108986:	c0 
c0108987:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c010898e:	00 
c010898f:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108996:	e8 2d 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c010899b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010899e:	83 c0 01             	add    $0x1,%eax
c01089a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089a8:	89 04 24             	mov    %eax,(%esp)
c01089ab:	e8 99 f6 ff ff       	call   c0108049 <find_vma>
c01089b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01089b3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01089b7:	75 24                	jne    c01089dd <check_vma_struct+0x2a2>
c01089b9:	c7 44 24 0c be 74 11 	movl   $0xc01174be,0xc(%esp)
c01089c0:	c0 
c01089c1:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c01089c8:	c0 
c01089c9:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c01089d0:	00 
c01089d1:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c01089d8:	e8 eb 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01089dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089e0:	83 c0 02             	add    $0x2,%eax
c01089e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089ea:	89 04 24             	mov    %eax,(%esp)
c01089ed:	e8 57 f6 ff ff       	call   c0108049 <find_vma>
c01089f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01089f5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01089f9:	74 24                	je     c0108a1f <check_vma_struct+0x2e4>
c01089fb:	c7 44 24 0c cb 74 11 	movl   $0xc01174cb,0xc(%esp)
c0108a02:	c0 
c0108a03:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108a0a:	c0 
c0108a0b:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108a12:	00 
c0108a13:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108a1a:	e8 a9 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a22:	83 c0 03             	add    $0x3,%eax
c0108a25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a2c:	89 04 24             	mov    %eax,(%esp)
c0108a2f:	e8 15 f6 ff ff       	call   c0108049 <find_vma>
c0108a34:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108a37:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108a3b:	74 24                	je     c0108a61 <check_vma_struct+0x326>
c0108a3d:	c7 44 24 0c d8 74 11 	movl   $0xc01174d8,0xc(%esp)
c0108a44:	c0 
c0108a45:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108a4c:	c0 
c0108a4d:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108a54:	00 
c0108a55:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108a5c:	e8 67 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a64:	83 c0 04             	add    $0x4,%eax
c0108a67:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a6e:	89 04 24             	mov    %eax,(%esp)
c0108a71:	e8 d3 f5 ff ff       	call   c0108049 <find_vma>
c0108a76:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108a79:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108a7d:	74 24                	je     c0108aa3 <check_vma_struct+0x368>
c0108a7f:	c7 44 24 0c e5 74 11 	movl   $0xc01174e5,0xc(%esp)
c0108a86:	c0 
c0108a87:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108a8e:	c0 
c0108a8f:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108a96:	00 
c0108a97:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108a9e:	e8 25 84 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108aa3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108aa6:	8b 50 04             	mov    0x4(%eax),%edx
c0108aa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aac:	39 c2                	cmp    %eax,%edx
c0108aae:	75 10                	jne    c0108ac0 <check_vma_struct+0x385>
c0108ab0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108ab3:	8b 50 08             	mov    0x8(%eax),%edx
c0108ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ab9:	83 c0 02             	add    $0x2,%eax
c0108abc:	39 c2                	cmp    %eax,%edx
c0108abe:	74 24                	je     c0108ae4 <check_vma_struct+0x3a9>
c0108ac0:	c7 44 24 0c f4 74 11 	movl   $0xc01174f4,0xc(%esp)
c0108ac7:	c0 
c0108ac8:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108acf:	c0 
c0108ad0:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0108ad7:	00 
c0108ad8:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108adf:	e8 e4 83 ff ff       	call   c0100ec8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108ae4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108ae7:	8b 50 04             	mov    0x4(%eax),%edx
c0108aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aed:	39 c2                	cmp    %eax,%edx
c0108aef:	75 10                	jne    c0108b01 <check_vma_struct+0x3c6>
c0108af1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108af4:	8b 50 08             	mov    0x8(%eax),%edx
c0108af7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108afa:	83 c0 02             	add    $0x2,%eax
c0108afd:	39 c2                	cmp    %eax,%edx
c0108aff:	74 24                	je     c0108b25 <check_vma_struct+0x3ea>
c0108b01:	c7 44 24 0c 24 75 11 	movl   $0xc0117524,0xc(%esp)
c0108b08:	c0 
c0108b09:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108b10:	c0 
c0108b11:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0108b18:	00 
c0108b19:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108b20:	e8 a3 83 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108b25:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108b29:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b2c:	89 d0                	mov    %edx,%eax
c0108b2e:	c1 e0 02             	shl    $0x2,%eax
c0108b31:	01 d0                	add    %edx,%eax
c0108b33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b36:	0f 8d 20 fe ff ff    	jge    c010895c <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b3c:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108b43:	eb 70                	jmp    c0108bb5 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b4f:	89 04 24             	mov    %eax,(%esp)
c0108b52:	e8 f2 f4 ff ff       	call   c0108049 <find_vma>
c0108b57:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108b5a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b5e:	74 27                	je     c0108b87 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108b60:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b63:	8b 50 08             	mov    0x8(%eax),%edx
c0108b66:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b69:	8b 40 04             	mov    0x4(%eax),%eax
c0108b6c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108b70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108b74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b7b:	c7 04 24 54 75 11 c0 	movl   $0xc0117554,(%esp)
c0108b82:	e8 de 77 ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108b87:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b8b:	74 24                	je     c0108bb1 <check_vma_struct+0x476>
c0108b8d:	c7 44 24 0c 79 75 11 	movl   $0xc0117579,0xc(%esp)
c0108b94:	c0 
c0108b95:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108b9c:	c0 
c0108b9d:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0108ba4:	00 
c0108ba5:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108bac:	e8 17 83 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108bb1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108bb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108bb9:	79 8a                	jns    c0108b45 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108bbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bbe:	89 04 24             	mov    %eax,(%esp)
c0108bc1:	e8 08 f7 ff ff       	call   c01082ce <mm_destroy>

  //  assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0108bc6:	c7 04 24 90 75 11 c0 	movl   $0xc0117590,(%esp)
c0108bcd:	e8 93 77 ff ff       	call   c0100365 <cprintf>
}
c0108bd2:	c9                   	leave  
c0108bd3:	c3                   	ret    

c0108bd4 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108bd4:	55                   	push   %ebp
c0108bd5:	89 e5                	mov    %esp,%ebp
c0108bd7:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108bda:	e8 3a c6 ff ff       	call   c0105219 <nr_free_pages>
c0108bdf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108be2:	e8 82 f3 ff ff       	call   c0107f69 <mm_create>
c0108be7:	a3 0c 41 15 c0       	mov    %eax,0xc015410c
    assert(check_mm_struct != NULL);
c0108bec:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c0108bf1:	85 c0                	test   %eax,%eax
c0108bf3:	75 24                	jne    c0108c19 <check_pgfault+0x45>
c0108bf5:	c7 44 24 0c af 75 11 	movl   $0xc01175af,0xc(%esp)
c0108bfc:	c0 
c0108bfd:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108c04:	c0 
c0108c05:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108c0c:	00 
c0108c0d:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108c14:	e8 af 82 ff ff       	call   c0100ec8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108c19:	a1 0c 41 15 c0       	mov    0xc015410c,%eax
c0108c1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108c21:	8b 15 84 0e 15 c0    	mov    0xc0150e84,%edx
c0108c27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c2a:	89 50 0c             	mov    %edx,0xc(%eax)
c0108c2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c30:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108c36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c39:	8b 00                	mov    (%eax),%eax
c0108c3b:	85 c0                	test   %eax,%eax
c0108c3d:	74 24                	je     c0108c63 <check_pgfault+0x8f>
c0108c3f:	c7 44 24 0c c7 75 11 	movl   $0xc01175c7,0xc(%esp)
c0108c46:	c0 
c0108c47:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108c4e:	c0 
c0108c4f:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c0108c56:	00 
c0108c57:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108c5e:	e8 65 82 ff ff       	call   c0100ec8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108c63:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108c6a:	00 
c0108c6b:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108c72:	00 
c0108c73:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108c7a:	e8 8f f3 ff ff       	call   c010800e <vma_create>
c0108c7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108c82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108c86:	75 24                	jne    c0108cac <check_pgfault+0xd8>
c0108c88:	c7 44 24 0c 58 74 11 	movl   $0xc0117458,0xc(%esp)
c0108c8f:	c0 
c0108c90:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108c97:	c0 
c0108c98:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c0108c9f:	00 
c0108ca0:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108ca7:	e8 1c 82 ff ff       	call   c0100ec8 <__panic>

    insert_vma_struct(mm, vma);
c0108cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108caf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cb6:	89 04 24             	mov    %eax,(%esp)
c0108cb9:	e8 e0 f4 ff ff       	call   c010819e <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108cbe:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108cc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cc8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ccc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ccf:	89 04 24             	mov    %eax,(%esp)
c0108cd2:	e8 72 f3 ff ff       	call   c0108049 <find_vma>
c0108cd7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108cda:	74 24                	je     c0108d00 <check_pgfault+0x12c>
c0108cdc:	c7 44 24 0c d5 75 11 	movl   $0xc01175d5,0xc(%esp)
c0108ce3:	c0 
c0108ce4:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108ceb:	c0 
c0108cec:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c0108cf3:	00 
c0108cf4:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108cfb:	e8 c8 81 ff ff       	call   c0100ec8 <__panic>

    int i, sum = 0;
c0108d00:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108d07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d0e:	eb 17                	jmp    c0108d27 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108d10:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d13:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d16:	01 d0                	add    %edx,%eax
c0108d18:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d1b:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d20:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108d23:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d27:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d2b:	7e e3                	jle    c0108d10 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d34:	eb 15                	jmp    c0108d4b <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108d36:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d39:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d3c:	01 d0                	add    %edx,%eax
c0108d3e:	0f b6 00             	movzbl (%eax),%eax
c0108d41:	0f be c0             	movsbl %al,%eax
c0108d44:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d47:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d4b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d4f:	7e e5                	jle    c0108d36 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108d51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108d55:	74 24                	je     c0108d7b <check_pgfault+0x1a7>
c0108d57:	c7 44 24 0c ef 75 11 	movl   $0xc01175ef,0xc(%esp)
c0108d5e:	c0 
c0108d5f:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108d66:	c0 
c0108d67:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c0108d6e:	00 
c0108d6f:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108d76:	e8 4d 81 ff ff       	call   c0100ec8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108d7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108d81:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108d84:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108d89:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d90:	89 04 24             	mov    %eax,(%esp)
c0108d93:	e8 6b d1 ff ff       	call   c0105f03 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108d98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d9b:	8b 00                	mov    (%eax),%eax
c0108d9d:	89 04 24             	mov    %eax,(%esp)
c0108da0:	e8 ac f1 ff ff       	call   c0107f51 <pde2page>
c0108da5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108dac:	00 
c0108dad:	89 04 24             	mov    %eax,(%esp)
c0108db0:	e8 32 c4 ff ff       	call   c01051e7 <free_pages>
    pgdir[0] = 0;
c0108db5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108db8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108dbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dc1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108dc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dcb:	89 04 24             	mov    %eax,(%esp)
c0108dce:	e8 fb f4 ff ff       	call   c01082ce <mm_destroy>
    check_mm_struct = NULL;
c0108dd3:	c7 05 0c 41 15 c0 00 	movl   $0x0,0xc015410c
c0108dda:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108ddd:	e8 37 c4 ff ff       	call   c0105219 <nr_free_pages>
c0108de2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108de5:	74 24                	je     c0108e0b <check_pgfault+0x237>
c0108de7:	c7 44 24 0c f8 75 11 	movl   $0xc01175f8,0xc(%esp)
c0108dee:	c0 
c0108def:	c7 44 24 08 67 73 11 	movl   $0xc0117367,0x8(%esp)
c0108df6:	c0 
c0108df7:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c0108dfe:	00 
c0108dff:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108e06:	e8 bd 80 ff ff       	call   c0100ec8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108e0b:	c7 04 24 1f 76 11 c0 	movl   $0xc011761f,(%esp)
c0108e12:	e8 4e 75 ff ff       	call   c0100365 <cprintf>
}
c0108e17:	c9                   	leave  
c0108e18:	c3                   	ret    

c0108e19 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108e19:	55                   	push   %ebp
c0108e1a:	89 e5                	mov    %esp,%ebp
c0108e1c:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108e1f:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108e26:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e30:	89 04 24             	mov    %eax,(%esp)
c0108e33:	e8 11 f2 ff ff       	call   c0108049 <find_vma>
c0108e38:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108e3b:	a1 18 0f 15 c0       	mov    0xc0150f18,%eax
c0108e40:	83 c0 01             	add    $0x1,%eax
c0108e43:	a3 18 0f 15 c0       	mov    %eax,0xc0150f18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108e48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108e4c:	74 0b                	je     c0108e59 <do_pgfault+0x40>
c0108e4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e51:	8b 40 04             	mov    0x4(%eax),%eax
c0108e54:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108e57:	76 18                	jbe    c0108e71 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108e59:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e60:	c7 04 24 3c 76 11 c0 	movl   $0xc011763c,(%esp)
c0108e67:	e8 f9 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e6c:	e9 f1 01 00 00       	jmp    c0109062 <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c0108e71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e74:	83 e0 03             	and    $0x3,%eax
c0108e77:	85 c0                	test   %eax,%eax
c0108e79:	74 36                	je     c0108eb1 <do_pgfault+0x98>
c0108e7b:	83 f8 01             	cmp    $0x1,%eax
c0108e7e:	74 20                	je     c0108ea0 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108e80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e83:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e86:	83 e0 02             	and    $0x2,%eax
c0108e89:	85 c0                	test   %eax,%eax
c0108e8b:	75 11                	jne    c0108e9e <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108e8d:	c7 04 24 6c 76 11 c0 	movl   $0xc011766c,(%esp)
c0108e94:	e8 cc 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108e99:	e9 c4 01 00 00       	jmp    c0109062 <do_pgfault+0x249>
        }
        break;
c0108e9e:	eb 2f                	jmp    c0108ecf <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108ea0:	c7 04 24 cc 76 11 c0 	movl   $0xc01176cc,(%esp)
c0108ea7:	e8 b9 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108eac:	e9 b1 01 00 00       	jmp    c0109062 <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108eb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108eb4:	8b 40 0c             	mov    0xc(%eax),%eax
c0108eb7:	83 e0 05             	and    $0x5,%eax
c0108eba:	85 c0                	test   %eax,%eax
c0108ebc:	75 11                	jne    c0108ecf <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108ebe:	c7 04 24 04 77 11 c0 	movl   $0xc0117704,(%esp)
c0108ec5:	e8 9b 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108eca:	e9 93 01 00 00       	jmp    c0109062 <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108ecf:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108ed6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ed9:	8b 40 0c             	mov    0xc(%eax),%eax
c0108edc:	83 e0 02             	and    $0x2,%eax
c0108edf:	85 c0                	test   %eax,%eax
c0108ee1:	74 04                	je     c0108ee7 <do_pgfault+0xce>
        perm |= PTE_W;
c0108ee3:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108ee7:	8b 45 10             	mov    0x10(%ebp),%eax
c0108eea:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108eed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ef0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108ef5:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108ef8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108eff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108f06:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f09:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f0c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108f13:	00 
c0108f14:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f17:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f1b:	89 04 24             	mov    %eax,(%esp)
c0108f1e:	e8 d0 c9 ff ff       	call   c01058f3 <get_pte>
c0108f23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108f26:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f2a:	75 11                	jne    c0108f3d <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108f2c:	c7 04 24 67 77 11 c0 	movl   $0xc0117767,(%esp)
c0108f33:	e8 2d 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108f38:	e9 25 01 00 00       	jmp    c0109062 <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0108f3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f40:	8b 00                	mov    (%eax),%eax
c0108f42:	85 c0                	test   %eax,%eax
c0108f44:	75 35                	jne    c0108f7b <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f49:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f4f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108f53:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f56:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f5a:	89 04 24             	mov    %eax,(%esp)
c0108f5d:	e8 fb d0 ff ff       	call   c010605d <pgdir_alloc_page>
c0108f62:	85 c0                	test   %eax,%eax
c0108f64:	0f 85 f1 00 00 00    	jne    c010905b <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108f6a:	c7 04 24 88 77 11 c0 	movl   $0xc0117788,(%esp)
c0108f71:	e8 ef 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108f76:	e9 e7 00 00 00       	jmp    c0109062 <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c0108f7b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0108f82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f85:	8b 00                	mov    (%eax),%eax
c0108f87:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f92:	c7 04 24 af 77 11 c0 	movl   $0xc01177af,(%esp)
c0108f99:	e8 c7 73 ff ff       	call   c0100365 <cprintf>
        if (*ptep & PTE_P) {
c0108f9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fa1:	8b 00                	mov    (%eax),%eax
c0108fa3:	83 e0 01             	and    $0x1,%eax
c0108fa6:	85 c0                	test   %eax,%eax
c0108fa8:	74 1c                	je     c0108fc6 <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0108faa:	c7 44 24 08 cc 77 11 	movl   $0xc01177cc,0x8(%esp)
c0108fb1:	c0 
c0108fb2:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c0108fb9:	00 
c0108fba:	c7 04 24 7c 73 11 c0 	movl   $0xc011737c,(%esp)
c0108fc1:	e8 02 7f ff ff       	call   c0100ec8 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c0108fc6:	a1 0c 0f 15 c0       	mov    0xc0150f0c,%eax
c0108fcb:	85 c0                	test   %eax,%eax
c0108fcd:	74 30                	je     c0108fff <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108fcf:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108fd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108fd6:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe0:	89 04 24             	mov    %eax,(%esp)
c0108fe3:	e8 2b e1 ff ff       	call   c0107113 <swap_in>
c0108fe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108feb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108fef:	74 26                	je     c0109017 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c0108ff1:	c7 04 24 eb 77 11 c0 	movl   $0xc01177eb,(%esp)
c0108ff8:	e8 68 73 ff ff       	call   c0100365 <cprintf>
                   goto failed;
c0108ffd:	eb 63                	jmp    c0109062 <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108fff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109002:	8b 00                	mov    (%eax),%eax
c0109004:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109008:	c7 04 24 0c 78 11 c0 	movl   $0xc011780c,(%esp)
c010900f:	e8 51 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0109014:	90                   	nop
c0109015:	eb 4b                	jmp    c0109062 <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0109017:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010901a:	8b 45 08             	mov    0x8(%ebp),%eax
c010901d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109020:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109023:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0109027:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010902a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010902e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109032:	89 04 24             	mov    %eax,(%esp)
c0109035:	e8 0d cf ff ff       	call   c0105f47 <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c010903a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010903d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109044:	00 
c0109045:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109049:	8b 45 10             	mov    0x10(%ebp),%eax
c010904c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109050:	8b 45 08             	mov    0x8(%ebp),%eax
c0109053:	89 04 24             	mov    %eax,(%esp)
c0109056:	e8 ef de ff ff       	call   c0106f4a <swap_map_swappable>
   }
   ret = 0;
c010905b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109062:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109065:	c9                   	leave  
c0109066:	c3                   	ret    

c0109067 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0109067:	55                   	push   %ebp
c0109068:	89 e5                	mov    %esp,%ebp
c010906a:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010906d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109071:	0f 84 e0 00 00 00    	je     c0109157 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0109077:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010907e:	76 1c                	jbe    c010909c <user_mem_check+0x35>
c0109080:	8b 45 10             	mov    0x10(%ebp),%eax
c0109083:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109086:	01 d0                	add    %edx,%eax
c0109088:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010908b:	76 0f                	jbe    c010909c <user_mem_check+0x35>
c010908d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109090:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109093:	01 d0                	add    %edx,%eax
c0109095:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010909a:	76 0a                	jbe    c01090a6 <user_mem_check+0x3f>
            return 0;
c010909c:	b8 00 00 00 00       	mov    $0x0,%eax
c01090a1:	e9 e2 00 00 00       	jmp    c0109188 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01090a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01090ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01090af:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090b2:	01 d0                	add    %edx,%eax
c01090b4:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01090b7:	e9 88 00 00 00       	jmp    c0109144 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01090bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01090c6:	89 04 24             	mov    %eax,(%esp)
c01090c9:	e8 7b ef ff ff       	call   c0108049 <find_vma>
c01090ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01090d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01090d5:	74 0b                	je     c01090e2 <user_mem_check+0x7b>
c01090d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090da:	8b 40 04             	mov    0x4(%eax),%eax
c01090dd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01090e0:	76 0a                	jbe    c01090ec <user_mem_check+0x85>
                return 0;
c01090e2:	b8 00 00 00 00       	mov    $0x0,%eax
c01090e7:	e9 9c 00 00 00       	jmp    c0109188 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01090ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090ef:	8b 50 0c             	mov    0xc(%eax),%edx
c01090f2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01090f6:	74 07                	je     c01090ff <user_mem_check+0x98>
c01090f8:	b8 02 00 00 00       	mov    $0x2,%eax
c01090fd:	eb 05                	jmp    c0109104 <user_mem_check+0x9d>
c01090ff:	b8 01 00 00 00       	mov    $0x1,%eax
c0109104:	21 d0                	and    %edx,%eax
c0109106:	85 c0                	test   %eax,%eax
c0109108:	75 07                	jne    c0109111 <user_mem_check+0xaa>
                return 0;
c010910a:	b8 00 00 00 00       	mov    $0x0,%eax
c010910f:	eb 77                	jmp    c0109188 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109111:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109115:	74 24                	je     c010913b <user_mem_check+0xd4>
c0109117:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010911a:	8b 40 0c             	mov    0xc(%eax),%eax
c010911d:	83 e0 08             	and    $0x8,%eax
c0109120:	85 c0                	test   %eax,%eax
c0109122:	74 17                	je     c010913b <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0109124:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109127:	8b 40 04             	mov    0x4(%eax),%eax
c010912a:	05 00 10 00 00       	add    $0x1000,%eax
c010912f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109132:	76 07                	jbe    c010913b <user_mem_check+0xd4>
                    return 0;
c0109134:	b8 00 00 00 00       	mov    $0x0,%eax
c0109139:	eb 4d                	jmp    c0109188 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c010913b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010913e:	8b 40 08             	mov    0x8(%eax),%eax
c0109141:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109144:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109147:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010914a:	0f 82 6c ff ff ff    	jb     c01090bc <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109150:	b8 01 00 00 00       	mov    $0x1,%eax
c0109155:	eb 31                	jmp    c0109188 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0109157:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010915e:	76 23                	jbe    c0109183 <user_mem_check+0x11c>
c0109160:	8b 45 10             	mov    0x10(%ebp),%eax
c0109163:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109166:	01 d0                	add    %edx,%eax
c0109168:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010916b:	76 16                	jbe    c0109183 <user_mem_check+0x11c>
c010916d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109170:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109173:	01 d0                	add    %edx,%eax
c0109175:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010917a:	77 07                	ja     c0109183 <user_mem_check+0x11c>
c010917c:	b8 01 00 00 00       	mov    $0x1,%eax
c0109181:	eb 05                	jmp    c0109188 <user_mem_check+0x121>
c0109183:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109188:	c9                   	leave  
c0109189:	c3                   	ret    

c010918a <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c010918a:	55                   	push   %ebp
c010918b:	89 e5                	mov    %esp,%ebp
c010918d:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0109190:	8b 45 10             	mov    0x10(%ebp),%eax
c0109193:	05 00 10 00 00       	add    $0x1000,%eax
c0109198:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010919b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010919e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01091a3:	89 c2                	mov    %eax,%edx
c01091a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01091a8:	29 c2                	sub    %eax,%edx
c01091aa:	89 d0                	mov    %edx,%eax
c01091ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c01091af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091b2:	3b 45 14             	cmp    0x14(%ebp),%eax
c01091b5:	76 06                	jbe    c01091bd <copy_string+0x33>
            part = maxn;
c01091b7:	8b 45 14             	mov    0x14(%ebp),%eax
c01091ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01091bd:	8b 45 10             	mov    0x10(%ebp),%eax
c01091c0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01091c7:	00 
c01091c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01091cb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01091cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01091d6:	89 04 24             	mov    %eax,(%esp)
c01091d9:	e8 89 fe ff ff       	call   c0109067 <user_mem_check>
c01091de:	85 c0                	test   %eax,%eax
c01091e0:	75 0a                	jne    c01091ec <copy_string+0x62>
            return 0;
c01091e2:	b8 00 00 00 00       	mov    $0x0,%eax
c01091e7:	e9 86 00 00 00       	jmp    c0109272 <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01091ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01091f6:	89 04 24             	mov    %eax,(%esp)
c01091f9:	e8 fa c1 00 00       	call   c01153f8 <strnlen>
c01091fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109201:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109204:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109207:	73 23                	jae    c010922c <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c0109209:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010920c:	83 c0 01             	add    $0x1,%eax
c010920f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109213:	8b 45 10             	mov    0x10(%ebp),%eax
c0109216:	89 44 24 04          	mov    %eax,0x4(%esp)
c010921a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010921d:	89 04 24             	mov    %eax,(%esp)
c0109220:	e8 e3 c5 00 00       	call   c0115808 <memcpy>
            return 1;
c0109225:	b8 01 00 00 00       	mov    $0x1,%eax
c010922a:	eb 46                	jmp    c0109272 <copy_string+0xe8>
        }
        if (part == maxn) {
c010922c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010922f:	3b 45 14             	cmp    0x14(%ebp),%eax
c0109232:	75 07                	jne    c010923b <copy_string+0xb1>
            return 0;
c0109234:	b8 00 00 00 00       	mov    $0x0,%eax
c0109239:	eb 37                	jmp    c0109272 <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c010923b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010923e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109242:	8b 45 10             	mov    0x10(%ebp),%eax
c0109245:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109249:	8b 45 0c             	mov    0xc(%ebp),%eax
c010924c:	89 04 24             	mov    %eax,(%esp)
c010924f:	e8 b4 c5 00 00       	call   c0115808 <memcpy>
        dst += part, src += part, maxn -= part;
c0109254:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109257:	01 45 0c             	add    %eax,0xc(%ebp)
c010925a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010925d:	01 45 10             	add    %eax,0x10(%ebp)
c0109260:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109263:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0109266:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c010926d:	e9 3d ff ff ff       	jmp    c01091af <copy_string+0x25>
}
c0109272:	c9                   	leave  
c0109273:	c3                   	ret    

c0109274 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0109274:	55                   	push   %ebp
c0109275:	89 e5                	mov    %esp,%ebp
c0109277:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c010927a:	8b 45 08             	mov    0x8(%ebp),%eax
c010927d:	8b 04 85 20 41 15 c0 	mov    -0x3feabee0(,%eax,4),%eax
c0109284:	83 f8 01             	cmp    $0x1,%eax
c0109287:	0f 85 85 00 00 00    	jne    c0109312 <phi_test_sema+0x9e>
c010928d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109290:	8d 48 04             	lea    0x4(%eax),%ecx
c0109293:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109298:	89 c8                	mov    %ecx,%eax
c010929a:	f7 ea                	imul   %edx
c010929c:	d1 fa                	sar    %edx
c010929e:	89 c8                	mov    %ecx,%eax
c01092a0:	c1 f8 1f             	sar    $0x1f,%eax
c01092a3:	29 c2                	sub    %eax,%edx
c01092a5:	89 d0                	mov    %edx,%eax
c01092a7:	c1 e0 02             	shl    $0x2,%eax
c01092aa:	01 d0                	add    %edx,%eax
c01092ac:	29 c1                	sub    %eax,%ecx
c01092ae:	89 ca                	mov    %ecx,%edx
c01092b0:	8b 04 95 20 41 15 c0 	mov    -0x3feabee0(,%edx,4),%eax
c01092b7:	83 f8 02             	cmp    $0x2,%eax
c01092ba:	74 56                	je     c0109312 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01092bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01092bf:	8d 48 01             	lea    0x1(%eax),%ecx
c01092c2:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092c7:	89 c8                	mov    %ecx,%eax
c01092c9:	f7 ea                	imul   %edx
c01092cb:	d1 fa                	sar    %edx
c01092cd:	89 c8                	mov    %ecx,%eax
c01092cf:	c1 f8 1f             	sar    $0x1f,%eax
c01092d2:	29 c2                	sub    %eax,%edx
c01092d4:	89 d0                	mov    %edx,%eax
c01092d6:	c1 e0 02             	shl    $0x2,%eax
c01092d9:	01 d0                	add    %edx,%eax
c01092db:	29 c1                	sub    %eax,%ecx
c01092dd:	89 ca                	mov    %ecx,%edx
c01092df:	8b 04 95 20 41 15 c0 	mov    -0x3feabee0(,%edx,4),%eax
c01092e6:	83 f8 02             	cmp    $0x2,%eax
c01092e9:	74 27                	je     c0109312 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01092eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ee:	c7 04 85 20 41 15 c0 	movl   $0x2,-0x3feabee0(,%eax,4)
c01092f5:	02 00 00 00 
        up(&s[i]);
c01092f9:	8b 55 08             	mov    0x8(%ebp),%edx
c01092fc:	89 d0                	mov    %edx,%eax
c01092fe:	01 c0                	add    %eax,%eax
c0109300:	01 d0                	add    %edx,%eax
c0109302:	c1 e0 02             	shl    $0x2,%eax
c0109305:	05 c0 41 15 c0       	add    $0xc01541c0,%eax
c010930a:	89 04 24             	mov    %eax,(%esp)
c010930d:	e8 ea 09 00 00       	call   c0109cfc <up>
    }
}
c0109312:	c9                   	leave  
c0109313:	c3                   	ret    

c0109314 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109314:	55                   	push   %ebp
c0109315:	89 e5                	mov    %esp,%ebp
c0109317:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010931a:	c7 04 24 48 41 15 c0 	movl   $0xc0154148,(%esp)
c0109321:	e8 f1 09 00 00       	call   c0109d17 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0109326:	8b 45 08             	mov    0x8(%ebp),%eax
c0109329:	c7 04 85 20 41 15 c0 	movl   $0x1,-0x3feabee0(,%eax,4)
c0109330:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0109334:	8b 45 08             	mov    0x8(%ebp),%eax
c0109337:	89 04 24             	mov    %eax,(%esp)
c010933a:	e8 35 ff ff ff       	call   c0109274 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010933f:	c7 04 24 48 41 15 c0 	movl   $0xc0154148,(%esp)
c0109346:	e8 b1 09 00 00       	call   c0109cfc <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010934b:	8b 55 08             	mov    0x8(%ebp),%edx
c010934e:	89 d0                	mov    %edx,%eax
c0109350:	01 c0                	add    %eax,%eax
c0109352:	01 d0                	add    %edx,%eax
c0109354:	c1 e0 02             	shl    $0x2,%eax
c0109357:	05 c0 41 15 c0       	add    $0xc01541c0,%eax
c010935c:	89 04 24             	mov    %eax,(%esp)
c010935f:	e8 b3 09 00 00       	call   c0109d17 <down>
}
c0109364:	c9                   	leave  
c0109365:	c3                   	ret    

c0109366 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109366:	55                   	push   %ebp
c0109367:	89 e5                	mov    %esp,%ebp
c0109369:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010936c:	c7 04 24 48 41 15 c0 	movl   $0xc0154148,(%esp)
c0109373:	e8 9f 09 00 00       	call   c0109d17 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109378:	8b 45 08             	mov    0x8(%ebp),%eax
c010937b:	c7 04 85 20 41 15 c0 	movl   $0x0,-0x3feabee0(,%eax,4)
c0109382:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0109386:	8b 45 08             	mov    0x8(%ebp),%eax
c0109389:	8d 48 04             	lea    0x4(%eax),%ecx
c010938c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109391:	89 c8                	mov    %ecx,%eax
c0109393:	f7 ea                	imul   %edx
c0109395:	d1 fa                	sar    %edx
c0109397:	89 c8                	mov    %ecx,%eax
c0109399:	c1 f8 1f             	sar    $0x1f,%eax
c010939c:	29 c2                	sub    %eax,%edx
c010939e:	89 d0                	mov    %edx,%eax
c01093a0:	c1 e0 02             	shl    $0x2,%eax
c01093a3:	01 d0                	add    %edx,%eax
c01093a5:	29 c1                	sub    %eax,%ecx
c01093a7:	89 ca                	mov    %ecx,%edx
c01093a9:	89 14 24             	mov    %edx,(%esp)
c01093ac:	e8 c3 fe ff ff       	call   c0109274 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c01093b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b4:	8d 48 01             	lea    0x1(%eax),%ecx
c01093b7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093bc:	89 c8                	mov    %ecx,%eax
c01093be:	f7 ea                	imul   %edx
c01093c0:	d1 fa                	sar    %edx
c01093c2:	89 c8                	mov    %ecx,%eax
c01093c4:	c1 f8 1f             	sar    $0x1f,%eax
c01093c7:	29 c2                	sub    %eax,%edx
c01093c9:	89 d0                	mov    %edx,%eax
c01093cb:	c1 e0 02             	shl    $0x2,%eax
c01093ce:	01 d0                	add    %edx,%eax
c01093d0:	29 c1                	sub    %eax,%ecx
c01093d2:	89 ca                	mov    %ecx,%edx
c01093d4:	89 14 24             	mov    %edx,(%esp)
c01093d7:	e8 98 fe ff ff       	call   c0109274 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01093dc:	c7 04 24 48 41 15 c0 	movl   $0xc0154148,(%esp)
c01093e3:	e8 14 09 00 00       	call   c0109cfc <up>
}
c01093e8:	c9                   	leave  
c01093e9:	c3                   	ret    

c01093ea <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01093ea:	55                   	push   %ebp
c01093eb:	89 e5                	mov    %esp,%ebp
c01093ed:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01093f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01093f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01093fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01093fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109400:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109404:	c7 04 24 34 78 11 c0 	movl   $0xc0117834,(%esp)
c010940b:	e8 55 6f ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109410:	eb 62                	jmp    c0109474 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109412:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109415:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109419:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010941c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109420:	c7 04 24 54 78 11 c0 	movl   $0xc0117854,(%esp)
c0109427:	e8 39 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010942c:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109433:	e8 c9 4c 00 00       	call   c010e101 <do_sleep>
        phi_take_forks_sema(i); 
c0109438:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010943b:	89 04 24             	mov    %eax,(%esp)
c010943e:	e8 d1 fe ff ff       	call   c0109314 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109443:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109446:	89 44 24 08          	mov    %eax,0x8(%esp)
c010944a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010944d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109451:	c7 04 24 84 78 11 c0 	movl   $0xc0117884,(%esp)
c0109458:	e8 08 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010945d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109464:	e8 98 4c 00 00       	call   c010e101 <do_sleep>
        phi_put_forks_sema(i); 
c0109469:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010946c:	89 04 24             	mov    %eax,(%esp)
c010946f:	e8 f2 fe ff ff       	call   c0109366 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0109474:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109477:	8d 50 01             	lea    0x1(%eax),%edx
c010947a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010947d:	83 f8 03             	cmp    $0x3,%eax
c0109480:	7e 90                	jle    c0109412 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0109482:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109485:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109489:	c7 04 24 af 78 11 c0 	movl   $0xc01178af,(%esp)
c0109490:	e8 d0 6e ff ff       	call   c0100365 <cprintf>
    return 0;    
c0109495:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010949a:	c9                   	leave  
c010949b:	c3                   	ret    

c010949c <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                                    // mp is mutex semaphore for monitor's procedures

void phi_test_condvar (i) { 
c010949c:	55                   	push   %ebp
c010949d:	89 e5                	mov    %esp,%ebp
c010949f:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01094a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a5:	8b 04 85 80 41 15 c0 	mov    -0x3feabe80(,%eax,4),%eax
c01094ac:	83 f8 01             	cmp    $0x1,%eax
c01094af:	0f 85 b5 00 00 00    	jne    c010956a <phi_test_condvar+0xce>
c01094b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b8:	8d 48 04             	lea    0x4(%eax),%ecx
c01094bb:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094c0:	89 c8                	mov    %ecx,%eax
c01094c2:	f7 ea                	imul   %edx
c01094c4:	d1 fa                	sar    %edx
c01094c6:	89 c8                	mov    %ecx,%eax
c01094c8:	c1 f8 1f             	sar    $0x1f,%eax
c01094cb:	29 c2                	sub    %eax,%edx
c01094cd:	89 d0                	mov    %edx,%eax
c01094cf:	c1 e0 02             	shl    $0x2,%eax
c01094d2:	01 d0                	add    %edx,%eax
c01094d4:	29 c1                	sub    %eax,%ecx
c01094d6:	89 ca                	mov    %ecx,%edx
c01094d8:	8b 04 95 80 41 15 c0 	mov    -0x3feabe80(,%edx,4),%eax
c01094df:	83 f8 02             	cmp    $0x2,%eax
c01094e2:	0f 84 82 00 00 00    	je     c010956a <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01094e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01094eb:	8d 48 01             	lea    0x1(%eax),%ecx
c01094ee:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094f3:	89 c8                	mov    %ecx,%eax
c01094f5:	f7 ea                	imul   %edx
c01094f7:	d1 fa                	sar    %edx
c01094f9:	89 c8                	mov    %ecx,%eax
c01094fb:	c1 f8 1f             	sar    $0x1f,%eax
c01094fe:	29 c2                	sub    %eax,%edx
c0109500:	89 d0                	mov    %edx,%eax
c0109502:	c1 e0 02             	shl    $0x2,%eax
c0109505:	01 d0                	add    %edx,%eax
c0109507:	29 c1                	sub    %eax,%ecx
c0109509:	89 ca                	mov    %ecx,%edx
c010950b:	8b 04 95 80 41 15 c0 	mov    -0x3feabe80(,%edx,4),%eax
c0109512:	83 f8 02             	cmp    $0x2,%eax
c0109515:	74 53                	je     c010956a <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0109517:	8b 45 08             	mov    0x8(%ebp),%eax
c010951a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010951e:	c7 04 24 cc 78 11 c0 	movl   $0xc01178cc,(%esp)
c0109525:	e8 3b 6e ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c010952a:	8b 45 08             	mov    0x8(%ebp),%eax
c010952d:	c7 04 85 80 41 15 c0 	movl   $0x2,-0x3feabe80(,%eax,4)
c0109534:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109538:	8b 45 08             	mov    0x8(%ebp),%eax
c010953b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010953f:	c7 04 24 00 79 11 c0 	movl   $0xc0117900,(%esp)
c0109546:	e8 1a 6e ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c010954b:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109550:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109553:	8b 55 08             	mov    0x8(%ebp),%edx
c0109556:	89 d0                	mov    %edx,%eax
c0109558:	c1 e0 02             	shl    $0x2,%eax
c010955b:	01 d0                	add    %edx,%eax
c010955d:	c1 e0 02             	shl    $0x2,%eax
c0109560:	01 c8                	add    %ecx,%eax
c0109562:	89 04 24             	mov    %eax,(%esp)
c0109565:	e8 8f 04 00 00       	call   c01099f9 <cond_signal>
    }
}
c010956a:	c9                   	leave  
c010956b:	c3                   	ret    

c010956c <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c010956c:	55                   	push   %ebp
c010956d:	89 e5                	mov    %esp,%ebp
c010956f:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109572:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109577:	89 04 24             	mov    %eax,(%esp)
c010957a:	e8 98 07 00 00       	call   c0109d17 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c010957f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109582:	c7 04 85 80 41 15 c0 	movl   $0x1,-0x3feabe80(,%eax,4)
c0109589:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c010958d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109590:	89 04 24             	mov    %eax,(%esp)
c0109593:	e8 04 ff ff ff       	call   c010949c <phi_test_condvar>
      while (state_condvar[i] != EATING) {
c0109598:	eb 32                	jmp    c01095cc <phi_take_forks_condvar+0x60>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c010959a:	8b 45 08             	mov    0x8(%ebp),%eax
c010959d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095a1:	c7 04 24 28 79 11 c0 	movl   $0xc0117928,(%esp)
c01095a8:	e8 b8 6d ff ff       	call   c0100365 <cprintf>
          cond_wait(&mtp->cv[i]);
c01095ad:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095b2:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01095b5:	8b 55 08             	mov    0x8(%ebp),%edx
c01095b8:	89 d0                	mov    %edx,%eax
c01095ba:	c1 e0 02             	shl    $0x2,%eax
c01095bd:	01 d0                	add    %edx,%eax
c01095bf:	c1 e0 02             	shl    $0x2,%eax
c01095c2:	01 c8                	add    %ecx,%eax
c01095c4:	89 04 24             	mov    %eax,(%esp)
c01095c7:	e8 cd 04 00 00       	call   c0109a99 <cond_wait>
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
      // try to get fork
      phi_test_condvar(i); 
      while (state_condvar[i] != EATING) {
c01095cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01095cf:	8b 04 85 80 41 15 c0 	mov    -0x3feabe80(,%eax,4),%eax
c01095d6:	83 f8 02             	cmp    $0x2,%eax
c01095d9:	75 bf                	jne    c010959a <phi_take_forks_condvar+0x2e>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
          cond_wait(&mtp->cv[i]);
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01095db:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095e0:	8b 40 18             	mov    0x18(%eax),%eax
c01095e3:	85 c0                	test   %eax,%eax
c01095e5:	7e 12                	jle    c01095f9 <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c01095e7:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095ec:	83 c0 0c             	add    $0xc,%eax
c01095ef:	89 04 24             	mov    %eax,(%esp)
c01095f2:	e8 05 07 00 00       	call   c0109cfc <up>
c01095f7:	eb 0d                	jmp    c0109606 <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c01095f9:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095fe:	89 04 24             	mov    %eax,(%esp)
c0109601:	e8 f6 06 00 00       	call   c0109cfc <up>
}
c0109606:	c9                   	leave  
c0109607:	c3                   	ret    

c0109608 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109608:	55                   	push   %ebp
c0109609:	89 e5                	mov    %esp,%ebp
c010960b:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010960e:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109613:	89 04 24             	mov    %eax,(%esp)
c0109616:	e8 fc 06 00 00       	call   c0109d17 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c010961b:	8b 45 08             	mov    0x8(%ebp),%eax
c010961e:	c7 04 85 80 41 15 c0 	movl   $0x0,-0x3feabe80(,%eax,4)
c0109625:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c0109629:	8b 45 08             	mov    0x8(%ebp),%eax
c010962c:	8d 48 04             	lea    0x4(%eax),%ecx
c010962f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109634:	89 c8                	mov    %ecx,%eax
c0109636:	f7 ea                	imul   %edx
c0109638:	d1 fa                	sar    %edx
c010963a:	89 c8                	mov    %ecx,%eax
c010963c:	c1 f8 1f             	sar    $0x1f,%eax
c010963f:	29 c2                	sub    %eax,%edx
c0109641:	89 d0                	mov    %edx,%eax
c0109643:	c1 e0 02             	shl    $0x2,%eax
c0109646:	01 d0                	add    %edx,%eax
c0109648:	29 c1                	sub    %eax,%ecx
c010964a:	89 ca                	mov    %ecx,%edx
c010964c:	89 14 24             	mov    %edx,(%esp)
c010964f:	e8 48 fe ff ff       	call   c010949c <phi_test_condvar>
      phi_test_condvar(RIGHT);
c0109654:	8b 45 08             	mov    0x8(%ebp),%eax
c0109657:	8d 48 01             	lea    0x1(%eax),%ecx
c010965a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010965f:	89 c8                	mov    %ecx,%eax
c0109661:	f7 ea                	imul   %edx
c0109663:	d1 fa                	sar    %edx
c0109665:	89 c8                	mov    %ecx,%eax
c0109667:	c1 f8 1f             	sar    $0x1f,%eax
c010966a:	29 c2                	sub    %eax,%edx
c010966c:	89 d0                	mov    %edx,%eax
c010966e:	c1 e0 02             	shl    $0x2,%eax
c0109671:	01 d0                	add    %edx,%eax
c0109673:	29 c1                	sub    %eax,%ecx
c0109675:	89 ca                	mov    %ecx,%edx
c0109677:	89 14 24             	mov    %edx,(%esp)
c010967a:	e8 1d fe ff ff       	call   c010949c <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c010967f:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109684:	8b 40 18             	mov    0x18(%eax),%eax
c0109687:	85 c0                	test   %eax,%eax
c0109689:	7e 12                	jle    c010969d <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c010968b:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109690:	83 c0 0c             	add    $0xc,%eax
c0109693:	89 04 24             	mov    %eax,(%esp)
c0109696:	e8 61 06 00 00       	call   c0109cfc <up>
c010969b:	eb 0d                	jmp    c01096aa <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c010969d:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096a2:	89 04 24             	mov    %eax,(%esp)
c01096a5:	e8 52 06 00 00       	call   c0109cfc <up>
}
c01096aa:	c9                   	leave  
c01096ab:	c3                   	ret    

c01096ac <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c01096ac:	55                   	push   %ebp
c01096ad:	89 e5                	mov    %esp,%ebp
c01096af:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c01096b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01096b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01096bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c01096bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096c6:	c7 04 24 64 79 11 c0 	movl   $0xc0117964,(%esp)
c01096cd:	e8 93 6c ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c01096d2:	eb 62                	jmp    c0109736 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01096d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096d7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01096db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096e2:	c7 04 24 84 79 11 c0 	movl   $0xc0117984,(%esp)
c01096e9:	e8 77 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01096ee:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01096f5:	e8 07 4a 00 00       	call   c010e101 <do_sleep>
        phi_take_forks_condvar(i); 
c01096fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096fd:	89 04 24             	mov    %eax,(%esp)
c0109700:	e8 67 fe ff ff       	call   c010956c <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0109705:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109708:	89 44 24 08          	mov    %eax,0x8(%esp)
c010970c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010970f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109713:	c7 04 24 b4 79 11 c0 	movl   $0xc01179b4,(%esp)
c010971a:	e8 46 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c010971f:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109726:	e8 d6 49 00 00       	call   c010e101 <do_sleep>
        phi_put_forks_condvar(i); 
c010972b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010972e:	89 04 24             	mov    %eax,(%esp)
c0109731:	e8 d2 fe ff ff       	call   c0109608 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0109736:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109739:	8d 50 01             	lea    0x1(%eax),%edx
c010973c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010973f:	83 f8 03             	cmp    $0x3,%eax
c0109742:	7e 90                	jle    c01096d4 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109744:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109747:	89 44 24 04          	mov    %eax,0x4(%esp)
c010974b:	c7 04 24 e4 79 11 c0 	movl   $0xc01179e4,(%esp)
c0109752:	e8 0e 6c ff ff       	call   c0100365 <cprintf>
    return 0;    
c0109757:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010975c:	c9                   	leave  
c010975d:	c3                   	ret    

c010975e <check_sync>:

void check_sync(void){
c010975e:	55                   	push   %ebp
c010975f:	89 e5                	mov    %esp,%ebp
c0109761:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109764:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010976b:	00 
c010976c:	c7 04 24 48 41 15 c0 	movl   $0xc0154148,(%esp)
c0109773:	e8 11 04 00 00       	call   c0109b89 <sem_init>
    for(i=0;i<N;i++){
c0109778:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010977f:	e9 94 00 00 00       	jmp    c0109818 <check_sync+0xba>
        sem_init(&s[i], 0);
c0109784:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109787:	89 d0                	mov    %edx,%eax
c0109789:	01 c0                	add    %eax,%eax
c010978b:	01 d0                	add    %edx,%eax
c010978d:	c1 e0 02             	shl    $0x2,%eax
c0109790:	05 c0 41 15 c0       	add    $0xc01541c0,%eax
c0109795:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010979c:	00 
c010979d:	89 04 24             	mov    %eax,(%esp)
c01097a0:	e8 e4 03 00 00       	call   c0109b89 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01097a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097a8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01097af:	00 
c01097b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097b4:	c7 04 24 ea 93 10 c0 	movl   $0xc01093ea,(%esp)
c01097bb:	e8 52 2e 00 00       	call   c010c612 <kernel_thread>
c01097c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c01097c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01097c7:	7f 1c                	jg     c01097e5 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01097c9:	c7 44 24 08 04 7a 11 	movl   $0xc0117a04,0x8(%esp)
c01097d0:	c0 
c01097d1:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01097d8:	00 
c01097d9:	c7 04 24 36 7a 11 c0 	movl   $0xc0117a36,(%esp)
c01097e0:	e8 e3 76 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01097e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097e8:	89 04 24             	mov    %eax,(%esp)
c01097eb:	e8 ae 2d 00 00       	call   c010c59e <find_proc>
c01097f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01097f3:	89 04 95 94 41 15 c0 	mov    %eax,-0x3feabe6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01097fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097fd:	8b 04 85 94 41 15 c0 	mov    -0x3feabe6c(,%eax,4),%eax
c0109804:	c7 44 24 04 4d 7a 11 	movl   $0xc0117a4d,0x4(%esp)
c010980b:	c0 
c010980c:	89 04 24             	mov    %eax,(%esp)
c010980f:	e8 71 29 00 00       	call   c010c185 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c0109814:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109818:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010981c:	0f 8e 62 ff ff ff    	jle    c0109784 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109822:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109829:	00 
c010982a:	c7 04 24 60 41 15 c0 	movl   $0xc0154160,(%esp)
c0109831:	e8 99 00 00 00       	call   c01098cf <monitor_init>
    for(i=0;i<N;i++){
c0109836:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010983d:	e9 81 00 00 00       	jmp    c01098c3 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109842:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109845:	c7 04 85 80 41 15 c0 	movl   $0x0,-0x3feabe80(,%eax,4)
c010984c:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109850:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109853:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010985a:	00 
c010985b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010985f:	c7 04 24 ac 96 10 c0 	movl   $0xc01096ac,(%esp)
c0109866:	e8 a7 2d 00 00       	call   c010c612 <kernel_thread>
c010986b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c010986e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109872:	7f 1c                	jg     c0109890 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109874:	c7 44 24 08 64 7a 11 	movl   $0xc0117a64,0x8(%esp)
c010987b:	c0 
c010987c:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0109883:	00 
c0109884:	c7 04 24 36 7a 11 c0 	movl   $0xc0117a36,(%esp)
c010988b:	e8 38 76 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109890:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109893:	89 04 24             	mov    %eax,(%esp)
c0109896:	e8 03 2d 00 00       	call   c010c59e <find_proc>
c010989b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010989e:	89 04 95 34 41 15 c0 	mov    %eax,-0x3feabecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01098a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a8:	8b 04 85 34 41 15 c0 	mov    -0x3feabecc(,%eax,4),%eax
c01098af:	c7 44 24 04 94 7a 11 	movl   $0xc0117a94,0x4(%esp)
c01098b6:	c0 
c01098b7:	89 04 24             	mov    %eax,(%esp)
c01098ba:	e8 c6 28 00 00       	call   c010c185 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c01098bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01098c3:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01098c7:	0f 8e 75 ff ff ff    	jle    c0109842 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01098cd:	c9                   	leave  
c01098ce:	c3                   	ret    

c01098cf <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c01098cf:	55                   	push   %ebp
c01098d0:	89 e5                	mov    %esp,%ebp
c01098d2:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c01098d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01098d9:	75 24                	jne    c01098ff <monitor_init+0x30>
c01098db:	c7 44 24 0c b0 7a 11 	movl   $0xc0117ab0,0xc(%esp)
c01098e2:	c0 
c01098e3:	c7 44 24 08 b9 7a 11 	movl   $0xc0117ab9,0x8(%esp)
c01098ea:	c0 
c01098eb:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01098f2:	00 
c01098f3:	c7 04 24 ce 7a 11 c0 	movl   $0xc0117ace,(%esp)
c01098fa:	e8 c9 75 ff ff       	call   c0100ec8 <__panic>
    mtp->next_count = 0;
c01098ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109902:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109909:	8b 45 08             	mov    0x8(%ebp),%eax
c010990c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109913:	8b 45 08             	mov    0x8(%ebp),%eax
c0109916:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010991d:	00 
c010991e:	89 04 24             	mov    %eax,(%esp)
c0109921:	e8 63 02 00 00       	call   c0109b89 <sem_init>
    sem_init(&(mtp->next), 0);
c0109926:	8b 45 08             	mov    0x8(%ebp),%eax
c0109929:	83 c0 0c             	add    $0xc,%eax
c010992c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109933:	00 
c0109934:	89 04 24             	mov    %eax,(%esp)
c0109937:	e8 4d 02 00 00       	call   c0109b89 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c010993c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010993f:	89 d0                	mov    %edx,%eax
c0109941:	c1 e0 02             	shl    $0x2,%eax
c0109944:	01 d0                	add    %edx,%eax
c0109946:	c1 e0 02             	shl    $0x2,%eax
c0109949:	89 04 24             	mov    %eax,(%esp)
c010994c:	e8 a6 b3 ff ff       	call   c0104cf7 <kmalloc>
c0109951:	8b 55 08             	mov    0x8(%ebp),%edx
c0109954:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109957:	8b 45 08             	mov    0x8(%ebp),%eax
c010995a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010995d:	85 c0                	test   %eax,%eax
c010995f:	75 24                	jne    c0109985 <monitor_init+0xb6>
c0109961:	c7 44 24 0c e2 7a 11 	movl   $0xc0117ae2,0xc(%esp)
c0109968:	c0 
c0109969:	c7 44 24 08 b9 7a 11 	movl   $0xc0117ab9,0x8(%esp)
c0109970:	c0 
c0109971:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109978:	00 
c0109979:	c7 04 24 ce 7a 11 c0 	movl   $0xc0117ace,(%esp)
c0109980:	e8 43 75 ff ff       	call   c0100ec8 <__panic>
    for(i=0; i<num_cv; i++){
c0109985:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010998c:	eb 61                	jmp    c01099ef <monitor_init+0x120>
        mtp->cv[i].count=0;
c010998e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109991:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109994:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109997:	89 d0                	mov    %edx,%eax
c0109999:	c1 e0 02             	shl    $0x2,%eax
c010999c:	01 d0                	add    %edx,%eax
c010999e:	c1 e0 02             	shl    $0x2,%eax
c01099a1:	01 c8                	add    %ecx,%eax
c01099a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c01099aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ad:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01099b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099b3:	89 d0                	mov    %edx,%eax
c01099b5:	c1 e0 02             	shl    $0x2,%eax
c01099b8:	01 d0                	add    %edx,%eax
c01099ba:	c1 e0 02             	shl    $0x2,%eax
c01099bd:	01 c8                	add    %ecx,%eax
c01099bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01099c6:	00 
c01099c7:	89 04 24             	mov    %eax,(%esp)
c01099ca:	e8 ba 01 00 00       	call   c0109b89 <sem_init>
        mtp->cv[i].owner=mtp;
c01099cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d2:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01099d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099d8:	89 d0                	mov    %edx,%eax
c01099da:	c1 e0 02             	shl    $0x2,%eax
c01099dd:	01 d0                	add    %edx,%eax
c01099df:	c1 e0 02             	shl    $0x2,%eax
c01099e2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01099e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e8:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01099eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01099ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01099f5:	72 97                	jb     c010998e <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01099f7:	c9                   	leave  
c01099f8:	c3                   	ret    

c01099f9 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01099f9:	55                   	push   %ebp
c01099fa:	89 e5                	mov    %esp,%ebp
c01099fc:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01099ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a02:	8b 40 10             	mov    0x10(%eax),%eax
c0109a05:	8b 50 18             	mov    0x18(%eax),%edx
c0109a08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a0b:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a0e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a12:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a1d:	c7 04 24 f0 7a 11 c0 	movl   $0xc0117af0,(%esp)
c0109a24:	e8 3c 69 ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c0109a29:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2c:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a2f:	85 c0                	test   %eax,%eax
c0109a31:	7e 3a                	jle    c0109a6d <cond_signal+0x74>
        cvp->owner->next_count ++;
c0109a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a36:	8b 40 10             	mov    0x10(%eax),%eax
c0109a39:	8b 50 18             	mov    0x18(%eax),%edx
c0109a3c:	83 c2 01             	add    $0x1,%edx
c0109a3f:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c0109a42:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a45:	89 04 24             	mov    %eax,(%esp)
c0109a48:	e8 af 02 00 00       	call   c0109cfc <up>
        down(&(cvp->owner->next));
c0109a4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a50:	8b 40 10             	mov    0x10(%eax),%eax
c0109a53:	83 c0 0c             	add    $0xc,%eax
c0109a56:	89 04 24             	mov    %eax,(%esp)
c0109a59:	e8 b9 02 00 00       	call   c0109d17 <down>
        cvp->owner->next_count --;
c0109a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a61:	8b 40 10             	mov    0x10(%eax),%eax
c0109a64:	8b 50 18             	mov    0x18(%eax),%edx
c0109a67:	83 ea 01             	sub    $0x1,%edx
c0109a6a:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a70:	8b 40 10             	mov    0x10(%eax),%eax
c0109a73:	8b 50 18             	mov    0x18(%eax),%edx
c0109a76:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a79:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a7c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a80:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a84:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a8b:	c7 04 24 38 7b 11 c0 	movl   $0xc0117b38,(%esp)
c0109a92:	e8 ce 68 ff ff       	call   c0100365 <cprintf>
}
c0109a97:	c9                   	leave  
c0109a98:	c3                   	ret    

c0109a99 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109a99:	55                   	push   %ebp
c0109a9a:	89 e5                	mov    %esp,%ebp
c0109a9c:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa2:	8b 40 10             	mov    0x10(%eax),%eax
c0109aa5:	8b 50 18             	mov    0x18(%eax),%edx
c0109aa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aab:	8b 40 0c             	mov    0xc(%eax),%eax
c0109aae:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109ab2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109abd:	c7 04 24 7c 7b 11 c0 	movl   $0xc0117b7c,(%esp)
c0109ac4:	e8 9c 68 ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109ac9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109acc:	8b 40 0c             	mov    0xc(%eax),%eax
c0109acf:	8d 50 01             	lea    0x1(%eax),%edx
c0109ad2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad5:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109ad8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109adb:	8b 40 10             	mov    0x10(%eax),%eax
c0109ade:	8b 40 18             	mov    0x18(%eax),%eax
c0109ae1:	85 c0                	test   %eax,%eax
c0109ae3:	7e 13                	jle    c0109af8 <cond_wait+0x5f>
         up(&(cvp->owner->next));
c0109ae5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae8:	8b 40 10             	mov    0x10(%eax),%eax
c0109aeb:	83 c0 0c             	add    $0xc,%eax
c0109aee:	89 04 24             	mov    %eax,(%esp)
c0109af1:	e8 06 02 00 00       	call   c0109cfc <up>
c0109af6:	eb 0e                	jmp    c0109b06 <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c0109af8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109afb:	8b 40 10             	mov    0x10(%eax),%eax
c0109afe:	89 04 24             	mov    %eax,(%esp)
c0109b01:	e8 f6 01 00 00       	call   c0109cfc <up>
      down(&(cvp->sem));
c0109b06:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b09:	89 04 24             	mov    %eax,(%esp)
c0109b0c:	e8 06 02 00 00       	call   c0109d17 <down>
      cvp->count --;
c0109b11:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b14:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b17:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1d:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b23:	8b 40 10             	mov    0x10(%eax),%eax
c0109b26:	8b 50 18             	mov    0x18(%eax),%edx
c0109b29:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b2c:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b2f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b33:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b37:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b3e:	c7 04 24 c0 7b 11 c0 	movl   $0xc0117bc0,(%esp)
c0109b45:	e8 1b 68 ff ff       	call   c0100365 <cprintf>
}
c0109b4a:	c9                   	leave  
c0109b4b:	c3                   	ret    

c0109b4c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109b4c:	55                   	push   %ebp
c0109b4d:	89 e5                	mov    %esp,%ebp
c0109b4f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109b52:	9c                   	pushf  
c0109b53:	58                   	pop    %eax
c0109b54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109b57:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109b5a:	25 00 02 00 00       	and    $0x200,%eax
c0109b5f:	85 c0                	test   %eax,%eax
c0109b61:	74 0c                	je     c0109b6f <__intr_save+0x23>
        intr_disable();
c0109b63:	e8 da 85 ff ff       	call   c0102142 <intr_disable>
        return 1;
c0109b68:	b8 01 00 00 00       	mov    $0x1,%eax
c0109b6d:	eb 05                	jmp    c0109b74 <__intr_save+0x28>
    }
    return 0;
c0109b6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b74:	c9                   	leave  
c0109b75:	c3                   	ret    

c0109b76 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109b76:	55                   	push   %ebp
c0109b77:	89 e5                	mov    %esp,%ebp
c0109b79:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109b7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b80:	74 05                	je     c0109b87 <__intr_restore+0x11>
        intr_enable();
c0109b82:	e8 b5 85 ff ff       	call   c010213c <intr_enable>
    }
}
c0109b87:	c9                   	leave  
c0109b88:	c3                   	ret    

c0109b89 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109b89:	55                   	push   %ebp
c0109b8a:	89 e5                	mov    %esp,%ebp
c0109b8c:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109b8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b92:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b95:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109b97:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b9a:	83 c0 04             	add    $0x4,%eax
c0109b9d:	89 04 24             	mov    %eax,(%esp)
c0109ba0:	e8 33 02 00 00       	call   c0109dd8 <wait_queue_init>
}
c0109ba5:	c9                   	leave  
c0109ba6:	c3                   	ret    

c0109ba7 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109ba7:	55                   	push   %ebp
c0109ba8:	89 e5                	mov    %esp,%ebp
c0109baa:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109bad:	e8 9a ff ff ff       	call   c0109b4c <__intr_save>
c0109bb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109bb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb8:	83 c0 04             	add    $0x4,%eax
c0109bbb:	89 04 24             	mov    %eax,(%esp)
c0109bbe:	e8 69 04 00 00       	call   c010a02c <wait_queue_first>
c0109bc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109bc6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109bca:	75 0f                	jne    c0109bdb <__up+0x34>
            sem->value ++;
c0109bcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bcf:	8b 00                	mov    (%eax),%eax
c0109bd1:	8d 50 01             	lea    0x1(%eax),%edx
c0109bd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd7:	89 10                	mov    %edx,(%eax)
c0109bd9:	eb 58                	jmp    c0109c33 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109bdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bde:	8b 00                	mov    (%eax),%eax
c0109be0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109be6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109be9:	74 24                	je     c0109c0f <__up+0x68>
c0109beb:	c7 44 24 0c 04 7c 11 	movl   $0xc0117c04,0xc(%esp)
c0109bf2:	c0 
c0109bf3:	c7 44 24 08 29 7c 11 	movl   $0xc0117c29,0x8(%esp)
c0109bfa:	c0 
c0109bfb:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109c02:	00 
c0109c03:	c7 04 24 3e 7c 11 c0 	movl   $0xc0117c3e,(%esp)
c0109c0a:	e8 b9 72 ff ff       	call   c0100ec8 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c12:	8d 50 04             	lea    0x4(%eax),%edx
c0109c15:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109c1c:	00 
c0109c1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c20:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c27:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c2b:	89 14 24             	mov    %edx,(%esp)
c0109c2e:	e8 95 04 00 00       	call   c010a0c8 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109c33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c36:	89 04 24             	mov    %eax,(%esp)
c0109c39:	e8 38 ff ff ff       	call   c0109b76 <__intr_restore>
}
c0109c3e:	c9                   	leave  
c0109c3f:	c3                   	ret    

c0109c40 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109c40:	55                   	push   %ebp
c0109c41:	89 e5                	mov    %esp,%ebp
c0109c43:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109c46:	e8 01 ff ff ff       	call   c0109b4c <__intr_save>
c0109c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c51:	8b 00                	mov    (%eax),%eax
c0109c53:	85 c0                	test   %eax,%eax
c0109c55:	7e 22                	jle    c0109c79 <__down+0x39>
        sem->value --;
c0109c57:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c5a:	8b 00                	mov    (%eax),%eax
c0109c5c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c62:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c67:	89 04 24             	mov    %eax,(%esp)
c0109c6a:	e8 07 ff ff ff       	call   c0109b76 <__intr_restore>
        return 0;
c0109c6f:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c74:	e9 81 00 00 00       	jmp    c0109cfa <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109c79:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109c7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109c7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c82:	8d 50 04             	lea    0x4(%eax),%edx
c0109c85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c88:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c93:	89 14 24             	mov    %edx,(%esp)
c0109c96:	e8 34 05 00 00       	call   c010a1cf <wait_current_set>
    local_intr_restore(intr_flag);
c0109c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c9e:	89 04 24             	mov    %eax,(%esp)
c0109ca1:	e8 d0 fe ff ff       	call   c0109b76 <__intr_restore>

    schedule();
c0109ca6:	e8 66 4a 00 00       	call   c010e711 <schedule>

    local_intr_save(intr_flag);
c0109cab:	e8 9c fe ff ff       	call   c0109b4c <__intr_save>
c0109cb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109cb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cb6:	89 04 24             	mov    %eax,(%esp)
c0109cb9:	e8 e2 03 00 00       	call   c010a0a0 <wait_in_queue>
c0109cbe:	85 c0                	test   %eax,%eax
c0109cc0:	74 15                	je     c0109cd7 <__down+0x97>
c0109cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cc5:	8d 50 04             	lea    0x4(%eax),%edx
c0109cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ccb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ccf:	89 14 24             	mov    %edx,(%esp)
c0109cd2:	e8 c4 01 00 00       	call   c0109e9b <wait_queue_del>
    local_intr_restore(intr_flag);
c0109cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cda:	89 04 24             	mov    %eax,(%esp)
c0109cdd:	e8 94 fe ff ff       	call   c0109b76 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109ce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ce5:	8b 40 04             	mov    0x4(%eax),%eax
c0109ce8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ceb:	74 08                	je     c0109cf5 <__down+0xb5>
        return wait->wakeup_flags;
c0109ced:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cf0:	8b 40 04             	mov    0x4(%eax),%eax
c0109cf3:	eb 05                	jmp    c0109cfa <__down+0xba>
    }
    return 0;
c0109cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109cfa:	c9                   	leave  
c0109cfb:	c3                   	ret    

c0109cfc <up>:

void
up(semaphore_t *sem) {
c0109cfc:	55                   	push   %ebp
c0109cfd:	89 e5                	mov    %esp,%ebp
c0109cff:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109d02:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109d09:	00 
c0109d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0d:	89 04 24             	mov    %eax,(%esp)
c0109d10:	e8 92 fe ff ff       	call   c0109ba7 <__up>
}
c0109d15:	c9                   	leave  
c0109d16:	c3                   	ret    

c0109d17 <down>:

void
down(semaphore_t *sem) {
c0109d17:	55                   	push   %ebp
c0109d18:	89 e5                	mov    %esp,%ebp
c0109d1a:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109d1d:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109d24:	00 
c0109d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d28:	89 04 24             	mov    %eax,(%esp)
c0109d2b:	e8 10 ff ff ff       	call   c0109c40 <__down>
c0109d30:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109d33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d37:	74 24                	je     c0109d5d <down+0x46>
c0109d39:	c7 44 24 0c 4e 7c 11 	movl   $0xc0117c4e,0xc(%esp)
c0109d40:	c0 
c0109d41:	c7 44 24 08 29 7c 11 	movl   $0xc0117c29,0x8(%esp)
c0109d48:	c0 
c0109d49:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109d50:	00 
c0109d51:	c7 04 24 3e 7c 11 c0 	movl   $0xc0117c3e,(%esp)
c0109d58:	e8 6b 71 ff ff       	call   c0100ec8 <__panic>
}
c0109d5d:	c9                   	leave  
c0109d5e:	c3                   	ret    

c0109d5f <try_down>:

bool
try_down(semaphore_t *sem) {
c0109d5f:	55                   	push   %ebp
c0109d60:	89 e5                	mov    %esp,%ebp
c0109d62:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109d65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109d6c:	e8 db fd ff ff       	call   c0109b4c <__intr_save>
c0109d71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d77:	8b 00                	mov    (%eax),%eax
c0109d79:	85 c0                	test   %eax,%eax
c0109d7b:	7e 14                	jle    c0109d91 <try_down+0x32>
        sem->value --, ret = 1;
c0109d7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d80:	8b 00                	mov    (%eax),%eax
c0109d82:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d88:	89 10                	mov    %edx,(%eax)
c0109d8a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109d91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d94:	89 04 24             	mov    %eax,(%esp)
c0109d97:	e8 da fd ff ff       	call   c0109b76 <__intr_restore>
    return ret;
c0109d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109d9f:	c9                   	leave  
c0109da0:	c3                   	ret    

c0109da1 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109da1:	55                   	push   %ebp
c0109da2:	89 e5                	mov    %esp,%ebp
c0109da4:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109daa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109dad:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109daf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109db2:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109db9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dbc:	83 c0 0c             	add    $0xc,%eax
c0109dbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109dc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dc5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109dc8:	89 50 04             	mov    %edx,0x4(%eax)
c0109dcb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dce:	8b 50 04             	mov    0x4(%eax),%edx
c0109dd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dd4:	89 10                	mov    %edx,(%eax)
}
c0109dd6:	c9                   	leave  
c0109dd7:	c3                   	ret    

c0109dd8 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109dd8:	55                   	push   %ebp
c0109dd9:	89 e5                	mov    %esp,%ebp
c0109ddb:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0109de1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109de4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109de7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109dea:	89 50 04             	mov    %edx,0x4(%eax)
c0109ded:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109df0:	8b 50 04             	mov    0x4(%eax),%edx
c0109df3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109df6:	89 10                	mov    %edx,(%eax)
}
c0109df8:	c9                   	leave  
c0109df9:	c3                   	ret    

c0109dfa <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109dfa:	55                   	push   %ebp
c0109dfb:	89 e5                	mov    %esp,%ebp
c0109dfd:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109e00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e03:	83 c0 0c             	add    $0xc,%eax
c0109e06:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e0c:	8b 40 04             	mov    0x4(%eax),%eax
c0109e0f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109e12:	0f 94 c0             	sete   %al
c0109e15:	0f b6 c0             	movzbl %al,%eax
c0109e18:	85 c0                	test   %eax,%eax
c0109e1a:	74 09                	je     c0109e25 <wait_queue_add+0x2b>
c0109e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e1f:	8b 00                	mov    (%eax),%eax
c0109e21:	85 c0                	test   %eax,%eax
c0109e23:	75 24                	jne    c0109e49 <wait_queue_add+0x4f>
c0109e25:	c7 44 24 0c 5c 7c 11 	movl   $0xc0117c5c,0xc(%esp)
c0109e2c:	c0 
c0109e2d:	c7 44 24 08 91 7c 11 	movl   $0xc0117c91,0x8(%esp)
c0109e34:	c0 
c0109e35:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109e3c:	00 
c0109e3d:	c7 04 24 a6 7c 11 c0 	movl   $0xc0117ca6,(%esp)
c0109e44:	e8 7f 70 ff ff       	call   c0100ec8 <__panic>
    wait->wait_queue = queue;
c0109e49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e4c:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e4f:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109e52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e55:	8d 50 0c             	lea    0xc(%eax),%edx
c0109e58:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e5e:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109e61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e64:	8b 00                	mov    (%eax),%eax
c0109e66:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e69:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109e6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e72:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109e75:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e78:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109e7b:	89 10                	mov    %edx,(%eax)
c0109e7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e80:	8b 10                	mov    (%eax),%edx
c0109e82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e85:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109e88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109e8e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109e91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e94:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e97:	89 10                	mov    %edx,(%eax)
}
c0109e99:	c9                   	leave  
c0109e9a:	c3                   	ret    

c0109e9b <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109e9b:	55                   	push   %ebp
c0109e9c:	89 e5                	mov    %esp,%ebp
c0109e9e:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ea4:	83 c0 0c             	add    $0xc,%eax
c0109ea7:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ead:	8b 40 04             	mov    0x4(%eax),%eax
c0109eb0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109eb3:	0f 94 c0             	sete   %al
c0109eb6:	0f b6 c0             	movzbl %al,%eax
c0109eb9:	85 c0                	test   %eax,%eax
c0109ebb:	75 0b                	jne    c0109ec8 <wait_queue_del+0x2d>
c0109ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ec0:	8b 40 08             	mov    0x8(%eax),%eax
c0109ec3:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109ec6:	74 24                	je     c0109eec <wait_queue_del+0x51>
c0109ec8:	c7 44 24 0c b8 7c 11 	movl   $0xc0117cb8,0xc(%esp)
c0109ecf:	c0 
c0109ed0:	c7 44 24 08 91 7c 11 	movl   $0xc0117c91,0x8(%esp)
c0109ed7:	c0 
c0109ed8:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109edf:	00 
c0109ee0:	c7 04 24 a6 7c 11 c0 	movl   $0xc0117ca6,(%esp)
c0109ee7:	e8 dc 6f ff ff       	call   c0100ec8 <__panic>
    list_del_init(&(wait->wait_link));
c0109eec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eef:	83 c0 0c             	add    $0xc,%eax
c0109ef2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ef8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109efb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109efe:	8b 40 04             	mov    0x4(%eax),%eax
c0109f01:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f04:	8b 12                	mov    (%edx),%edx
c0109f06:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109f09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109f0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109f12:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109f15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109f18:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109f1b:	89 10                	mov    %edx,(%eax)
c0109f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f20:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109f23:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f26:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109f29:	89 50 04             	mov    %edx,0x4(%eax)
c0109f2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f2f:	8b 50 04             	mov    0x4(%eax),%edx
c0109f32:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f35:	89 10                	mov    %edx,(%eax)
}
c0109f37:	c9                   	leave  
c0109f38:	c3                   	ret    

c0109f39 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109f39:	55                   	push   %ebp
c0109f3a:	89 e5                	mov    %esp,%ebp
c0109f3c:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f42:	83 c0 0c             	add    $0xc,%eax
c0109f45:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f4b:	8b 40 04             	mov    0x4(%eax),%eax
c0109f4e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109f51:	0f 94 c0             	sete   %al
c0109f54:	0f b6 c0             	movzbl %al,%eax
c0109f57:	85 c0                	test   %eax,%eax
c0109f59:	75 0b                	jne    c0109f66 <wait_queue_next+0x2d>
c0109f5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f5e:	8b 40 08             	mov    0x8(%eax),%eax
c0109f61:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109f64:	74 24                	je     c0109f8a <wait_queue_next+0x51>
c0109f66:	c7 44 24 0c b8 7c 11 	movl   $0xc0117cb8,0xc(%esp)
c0109f6d:	c0 
c0109f6e:	c7 44 24 08 91 7c 11 	movl   $0xc0117c91,0x8(%esp)
c0109f75:	c0 
c0109f76:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109f7d:	00 
c0109f7e:	c7 04 24 a6 7c 11 c0 	movl   $0xc0117ca6,(%esp)
c0109f85:	e8 3e 6f ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109f8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f8d:	83 c0 0c             	add    $0xc,%eax
c0109f90:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f96:	8b 40 04             	mov    0x4(%eax),%eax
c0109f99:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109fa2:	74 08                	je     c0109fac <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fa7:	83 e8 0c             	sub    $0xc,%eax
c0109faa:	eb 05                	jmp    c0109fb1 <wait_queue_next+0x78>
    }
    return NULL;
c0109fac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fb1:	c9                   	leave  
c0109fb2:	c3                   	ret    

c0109fb3 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109fb3:	55                   	push   %ebp
c0109fb4:	89 e5                	mov    %esp,%ebp
c0109fb6:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109fb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fbc:	83 c0 0c             	add    $0xc,%eax
c0109fbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fc5:	8b 40 04             	mov    0x4(%eax),%eax
c0109fc8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109fcb:	0f 94 c0             	sete   %al
c0109fce:	0f b6 c0             	movzbl %al,%eax
c0109fd1:	85 c0                	test   %eax,%eax
c0109fd3:	75 0b                	jne    c0109fe0 <wait_queue_prev+0x2d>
c0109fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd8:	8b 40 08             	mov    0x8(%eax),%eax
c0109fdb:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109fde:	74 24                	je     c010a004 <wait_queue_prev+0x51>
c0109fe0:	c7 44 24 0c b8 7c 11 	movl   $0xc0117cb8,0xc(%esp)
c0109fe7:	c0 
c0109fe8:	c7 44 24 08 91 7c 11 	movl   $0xc0117c91,0x8(%esp)
c0109fef:	c0 
c0109ff0:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109ff7:	00 
c0109ff8:	c7 04 24 a6 7c 11 c0 	movl   $0xc0117ca6,(%esp)
c0109fff:	e8 c4 6e ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a004:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a007:	83 c0 0c             	add    $0xc,%eax
c010a00a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a00d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a010:	8b 00                	mov    (%eax),%eax
c010a012:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a015:	8b 45 08             	mov    0x8(%ebp),%eax
c010a018:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a01b:	74 08                	je     c010a025 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a020:	83 e8 0c             	sub    $0xc,%eax
c010a023:	eb 05                	jmp    c010a02a <wait_queue_prev+0x77>
    }
    return NULL;
c010a025:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a02a:	c9                   	leave  
c010a02b:	c3                   	ret    

c010a02c <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a02c:	55                   	push   %ebp
c010a02d:	89 e5                	mov    %esp,%ebp
c010a02f:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a032:	8b 45 08             	mov    0x8(%ebp),%eax
c010a035:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a038:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a03b:	8b 40 04             	mov    0x4(%eax),%eax
c010a03e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a041:	8b 45 08             	mov    0x8(%ebp),%eax
c010a044:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a047:	74 08                	je     c010a051 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a049:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a04c:	83 e8 0c             	sub    $0xc,%eax
c010a04f:	eb 05                	jmp    c010a056 <wait_queue_first+0x2a>
    }
    return NULL;
c010a051:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a056:	c9                   	leave  
c010a057:	c3                   	ret    

c010a058 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a058:	55                   	push   %ebp
c010a059:	89 e5                	mov    %esp,%ebp
c010a05b:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a05e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a061:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a064:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a067:	8b 00                	mov    (%eax),%eax
c010a069:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a06c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a06f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a072:	74 08                	je     c010a07c <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a074:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a077:	83 e8 0c             	sub    $0xc,%eax
c010a07a:	eb 05                	jmp    c010a081 <wait_queue_last+0x29>
    }
    return NULL;
c010a07c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a081:	c9                   	leave  
c010a082:	c3                   	ret    

c010a083 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a083:	55                   	push   %ebp
c010a084:	89 e5                	mov    %esp,%ebp
c010a086:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a089:	8b 45 08             	mov    0x8(%ebp),%eax
c010a08c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a08f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a092:	8b 40 04             	mov    0x4(%eax),%eax
c010a095:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a098:	0f 94 c0             	sete   %al
c010a09b:	0f b6 c0             	movzbl %al,%eax
}
c010a09e:	c9                   	leave  
c010a09f:	c3                   	ret    

c010a0a0 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a0a0:	55                   	push   %ebp
c010a0a1:	89 e5                	mov    %esp,%ebp
c010a0a3:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a0a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0a9:	83 c0 0c             	add    $0xc,%eax
c010a0ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a0af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a0b2:	8b 40 04             	mov    0x4(%eax),%eax
c010a0b5:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a0b8:	0f 94 c0             	sete   %al
c010a0bb:	0f b6 c0             	movzbl %al,%eax
c010a0be:	85 c0                	test   %eax,%eax
c010a0c0:	0f 94 c0             	sete   %al
c010a0c3:	0f b6 c0             	movzbl %al,%eax
}
c010a0c6:	c9                   	leave  
c010a0c7:	c3                   	ret    

c010a0c8 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a0c8:	55                   	push   %ebp
c010a0c9:	89 e5                	mov    %esp,%ebp
c010a0cb:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a0ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a0d2:	74 12                	je     c010a0e6 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a0d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0de:	89 04 24             	mov    %eax,(%esp)
c010a0e1:	e8 b5 fd ff ff       	call   c0109e9b <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a0e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0e9:	8b 55 10             	mov    0x10(%ebp),%edx
c010a0ec:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a0ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0f2:	8b 00                	mov    (%eax),%eax
c010a0f4:	89 04 24             	mov    %eax,(%esp)
c010a0f7:	e8 79 45 00 00       	call   c010e675 <wakeup_proc>
}
c010a0fc:	c9                   	leave  
c010a0fd:	c3                   	ret    

c010a0fe <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a0fe:	55                   	push   %ebp
c010a0ff:	89 e5                	mov    %esp,%ebp
c010a101:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a104:	8b 45 08             	mov    0x8(%ebp),%eax
c010a107:	89 04 24             	mov    %eax,(%esp)
c010a10a:	e8 1d ff ff ff       	call   c010a02c <wait_queue_first>
c010a10f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a112:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a116:	74 20                	je     c010a138 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a118:	8b 45 10             	mov    0x10(%ebp),%eax
c010a11b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a11f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a122:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a129:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a12d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a130:	89 04 24             	mov    %eax,(%esp)
c010a133:	e8 90 ff ff ff       	call   c010a0c8 <wakeup_wait>
    }
}
c010a138:	c9                   	leave  
c010a139:	c3                   	ret    

c010a13a <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a13a:	55                   	push   %ebp
c010a13b:	89 e5                	mov    %esp,%ebp
c010a13d:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a140:	8b 45 08             	mov    0x8(%ebp),%eax
c010a143:	89 04 24             	mov    %eax,(%esp)
c010a146:	e8 e1 fe ff ff       	call   c010a02c <wait_queue_first>
c010a14b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a14e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a152:	74 79                	je     c010a1cd <wakeup_queue+0x93>
        if (del) {
c010a154:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a158:	74 37                	je     c010a191 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a15a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a161:	00 
c010a162:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a165:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a169:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a16c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a170:	8b 45 08             	mov    0x8(%ebp),%eax
c010a173:	89 04 24             	mov    %eax,(%esp)
c010a176:	e8 4d ff ff ff       	call   c010a0c8 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a17b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a17e:	89 04 24             	mov    %eax,(%esp)
c010a181:	e8 a6 fe ff ff       	call   c010a02c <wait_queue_first>
c010a186:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a189:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a18d:	75 cb                	jne    c010a15a <wakeup_queue+0x20>
c010a18f:	eb 3c                	jmp    c010a1cd <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a191:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a198:	00 
c010a199:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a19c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a1a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1aa:	89 04 24             	mov    %eax,(%esp)
c010a1ad:	e8 16 ff ff ff       	call   c010a0c8 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a1b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1bc:	89 04 24             	mov    %eax,(%esp)
c010a1bf:	e8 75 fd ff ff       	call   c0109f39 <wait_queue_next>
c010a1c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1cb:	75 c4                	jne    c010a191 <wakeup_queue+0x57>
        }
    }
}
c010a1cd:	c9                   	leave  
c010a1ce:	c3                   	ret    

c010a1cf <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a1cf:	55                   	push   %ebp
c010a1d0:	89 e5                	mov    %esp,%ebp
c010a1d2:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a1d5:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010a1da:	85 c0                	test   %eax,%eax
c010a1dc:	75 24                	jne    c010a202 <wait_current_set+0x33>
c010a1de:	c7 44 24 0c f5 7c 11 	movl   $0xc0117cf5,0xc(%esp)
c010a1e5:	c0 
c010a1e6:	c7 44 24 08 91 7c 11 	movl   $0xc0117c91,0x8(%esp)
c010a1ed:	c0 
c010a1ee:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a1f5:	00 
c010a1f6:	c7 04 24 a6 7c 11 c0 	movl   $0xc0117ca6,(%esp)
c010a1fd:	e8 c6 6c ff ff       	call   c0100ec8 <__panic>
    wait_init(wait, current);
c010a202:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010a207:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a20b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a20e:	89 04 24             	mov    %eax,(%esp)
c010a211:	e8 8b fb ff ff       	call   c0109da1 <wait_init>
    current->state = PROC_SLEEPING;
c010a216:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010a21b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a221:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010a226:	8b 55 10             	mov    0x10(%ebp),%edx
c010a229:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a22f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a232:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a236:	8b 45 08             	mov    0x8(%ebp),%eax
c010a239:	89 04 24             	mov    %eax,(%esp)
c010a23c:	e8 b9 fb ff ff       	call   c0109dfa <wait_queue_add>
}
c010a241:	c9                   	leave  
c010a242:	c3                   	ret    

c010a243 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a243:	55                   	push   %ebp
c010a244:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a246:	8b 45 08             	mov    0x8(%ebp),%eax
c010a249:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a24c:	5d                   	pop    %ebp
c010a24d:	c3                   	ret    

c010a24e <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a24e:	55                   	push   %ebp
c010a24f:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a251:	8b 45 08             	mov    0x8(%ebp),%eax
c010a254:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a257:	5d                   	pop    %ebp
c010a258:	c3                   	ret    

c010a259 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a259:	55                   	push   %ebp
c010a25a:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a25c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25f:	8b 40 18             	mov    0x18(%eax),%eax
c010a262:	8d 50 01             	lea    0x1(%eax),%edx
c010a265:	8b 45 08             	mov    0x8(%ebp),%eax
c010a268:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a26b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a26e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a271:	5d                   	pop    %ebp
c010a272:	c3                   	ret    

c010a273 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a273:	55                   	push   %ebp
c010a274:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a276:	8b 45 08             	mov    0x8(%ebp),%eax
c010a279:	8b 40 18             	mov    0x18(%eax),%eax
c010a27c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a27f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a282:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a285:	8b 45 08             	mov    0x8(%ebp),%eax
c010a288:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a28b:	5d                   	pop    %ebp
c010a28c:	c3                   	ret    

c010a28d <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a28d:	55                   	push   %ebp
c010a28e:	89 e5                	mov    %esp,%ebp
c010a290:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a293:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010a298:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a29e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a2a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2a5:	74 0f                	je     c010a2b6 <get_fd_array+0x29>
c010a2a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2aa:	89 04 24             	mov    %eax,(%esp)
c010a2ad:	e8 91 ff ff ff       	call   c010a243 <files_count>
c010a2b2:	85 c0                	test   %eax,%eax
c010a2b4:	7f 24                	jg     c010a2da <get_fd_array+0x4d>
c010a2b6:	c7 44 24 0c 08 7d 11 	movl   $0xc0117d08,0xc(%esp)
c010a2bd:	c0 
c010a2be:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a2c5:	c0 
c010a2c6:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a2cd:	00 
c010a2ce:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a2d5:	e8 ee 6b ff ff       	call   c0100ec8 <__panic>
    return filesp->fd_array;
c010a2da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2dd:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a2e0:	c9                   	leave  
c010a2e1:	c3                   	ret    

c010a2e2 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a2e2:	55                   	push   %ebp
c010a2e3:	89 e5                	mov    %esp,%ebp
c010a2e5:	83 ec 28             	sub    $0x28,%esp
    cprintf("[initialize the open files table]\n");
c010a2e8:	c7 04 24 58 7d 11 c0 	movl   $0xc0117d58,(%esp)
c010a2ef:	e8 71 60 ff ff       	call   c0100365 <cprintf>
    int fd;
    struct file *file = fd_array;
c010a2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a301:	eb 24                	jmp    c010a327 <fd_array_init+0x45>
        file->open_count = 0;
c010a303:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a306:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a30d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a316:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a319:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a31c:	89 50 0c             	mov    %edx,0xc(%eax)
void
fd_array_init(struct file *fd_array) {
    cprintf("[initialize the open files table]\n");
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a31f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a323:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010a327:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a32a:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a32f:	76 d2                	jbe    c010a303 <fd_array_init+0x21>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a331:	c9                   	leave  
c010a332:	c3                   	ret    

c010a333 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a333:	55                   	push   %ebp
c010a334:	89 e5                	mov    %esp,%ebp
c010a336:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a339:	e8 4f ff ff ff       	call   c010a28d <get_fd_array>
c010a33e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a341:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a348:	75 30                	jne    c010a37a <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a34a:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a351:	eb 13                	jmp    c010a366 <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a356:	8b 00                	mov    (%eax),%eax
c010a358:	85 c0                	test   %eax,%eax
c010a35a:	75 02                	jne    c010a35e <fd_array_alloc+0x2b>
                goto found;
c010a35c:	eb 59                	jmp    c010a3b7 <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a35e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a362:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a366:	8b 45 08             	mov    0x8(%ebp),%eax
c010a369:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a36e:	76 e3                	jbe    c010a353 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a370:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a375:	e9 90 00 00 00       	jmp    c010a40a <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a37a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a37e:	78 30                	js     c010a3b0 <fd_array_alloc+0x7d>
c010a380:	8b 45 08             	mov    0x8(%ebp),%eax
c010a383:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a388:	77 26                	ja     c010a3b0 <fd_array_alloc+0x7d>
            file += fd;
c010a38a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38d:	c1 e0 02             	shl    $0x2,%eax
c010a390:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a397:	29 c2                	sub    %eax,%edx
c010a399:	89 d0                	mov    %edx,%eax
c010a39b:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a39e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a1:	8b 00                	mov    (%eax),%eax
c010a3a3:	85 c0                	test   %eax,%eax
c010a3a5:	75 02                	jne    c010a3a9 <fd_array_alloc+0x76>
                goto found;
c010a3a7:	eb 0e                	jmp    c010a3b7 <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a3a9:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a3ae:	eb 5a                	jmp    c010a40a <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a3b0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a3b5:	eb 53                	jmp    c010a40a <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a3b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3ba:	89 04 24             	mov    %eax,(%esp)
c010a3bd:	e8 8c fe ff ff       	call   c010a24e <fopen_count>
c010a3c2:	85 c0                	test   %eax,%eax
c010a3c4:	74 24                	je     c010a3ea <fd_array_alloc+0xb7>
c010a3c6:	c7 44 24 0c 7b 7d 11 	movl   $0xc0117d7b,0xc(%esp)
c010a3cd:	c0 
c010a3ce:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a3d5:	c0 
c010a3d6:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010a3dd:	00 
c010a3de:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a3e5:	e8 de 6a ff ff       	call   c0100ec8 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a3ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3ed:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a3f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3f6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a3fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a400:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a403:	89 10                	mov    %edx,(%eax)
    return 0;
c010a405:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a40a:	c9                   	leave  
c010a40b:	c3                   	ret    

c010a40c <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a40c:	55                   	push   %ebp
c010a40d:	89 e5                	mov    %esp,%ebp
c010a40f:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a412:	8b 45 08             	mov    0x8(%ebp),%eax
c010a415:	8b 00                	mov    (%eax),%eax
c010a417:	83 f8 01             	cmp    $0x1,%eax
c010a41a:	74 2e                	je     c010a44a <fd_array_free+0x3e>
c010a41c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a41f:	8b 00                	mov    (%eax),%eax
c010a421:	83 f8 03             	cmp    $0x3,%eax
c010a424:	74 24                	je     c010a44a <fd_array_free+0x3e>
c010a426:	c7 44 24 0c 94 7d 11 	movl   $0xc0117d94,0xc(%esp)
c010a42d:	c0 
c010a42e:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a435:	c0 
c010a436:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a43d:	00 
c010a43e:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a445:	e8 7e 6a ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) == 0);
c010a44a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a44d:	89 04 24             	mov    %eax,(%esp)
c010a450:	e8 f9 fd ff ff       	call   c010a24e <fopen_count>
c010a455:	85 c0                	test   %eax,%eax
c010a457:	74 24                	je     c010a47d <fd_array_free+0x71>
c010a459:	c7 44 24 0c 7b 7d 11 	movl   $0xc0117d7b,0xc(%esp)
c010a460:	c0 
c010a461:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a468:	c0 
c010a469:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010a470:	00 
c010a471:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a478:	e8 4b 6a ff ff       	call   c0100ec8 <__panic>
    if (file->status == FD_CLOSED) {
c010a47d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a480:	8b 00                	mov    (%eax),%eax
c010a482:	83 f8 03             	cmp    $0x3,%eax
c010a485:	75 0e                	jne    c010a495 <fd_array_free+0x89>
        vfs_close(file->node);
c010a487:	8b 45 08             	mov    0x8(%ebp),%eax
c010a48a:	8b 40 14             	mov    0x14(%eax),%eax
c010a48d:	89 04 24             	mov    %eax,(%esp)
c010a490:	e8 96 5d 00 00       	call   c011022b <vfs_close>
    }
    file->status = FD_NONE;
c010a495:	8b 45 08             	mov    0x8(%ebp),%eax
c010a498:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a49e:	c9                   	leave  
c010a49f:	c3                   	ret    

c010a4a0 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a4a0:	55                   	push   %ebp
c010a4a1:	89 e5                	mov    %esp,%ebp
c010a4a3:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a4a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a9:	8b 00                	mov    (%eax),%eax
c010a4ab:	83 f8 02             	cmp    $0x2,%eax
c010a4ae:	74 24                	je     c010a4d4 <fd_array_acquire+0x34>
c010a4b0:	c7 44 24 0c c9 7d 11 	movl   $0xc0117dc9,0xc(%esp)
c010a4b7:	c0 
c010a4b8:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a4bf:	c0 
c010a4c0:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c010a4c7:	00 
c010a4c8:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a4cf:	e8 f4 69 ff ff       	call   c0100ec8 <__panic>
    fopen_count_inc(file);
c010a4d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d7:	89 04 24             	mov    %eax,(%esp)
c010a4da:	e8 7a fd ff ff       	call   c010a259 <fopen_count_inc>
}
c010a4df:	c9                   	leave  
c010a4e0:	c3                   	ret    

c010a4e1 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a4e1:	55                   	push   %ebp
c010a4e2:	89 e5                	mov    %esp,%ebp
c010a4e4:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a4e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ea:	8b 00                	mov    (%eax),%eax
c010a4ec:	83 f8 02             	cmp    $0x2,%eax
c010a4ef:	74 2e                	je     c010a51f <fd_array_release+0x3e>
c010a4f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4f4:	8b 00                	mov    (%eax),%eax
c010a4f6:	83 f8 03             	cmp    $0x3,%eax
c010a4f9:	74 24                	je     c010a51f <fd_array_release+0x3e>
c010a4fb:	c7 44 24 0c e4 7d 11 	movl   $0xc0117de4,0xc(%esp)
c010a502:	c0 
c010a503:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a50a:	c0 
c010a50b:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a512:	00 
c010a513:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a51a:	e8 a9 69 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a51f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a522:	89 04 24             	mov    %eax,(%esp)
c010a525:	e8 24 fd ff ff       	call   c010a24e <fopen_count>
c010a52a:	85 c0                	test   %eax,%eax
c010a52c:	7f 24                	jg     c010a552 <fd_array_release+0x71>
c010a52e:	c7 44 24 0c 1b 7e 11 	movl   $0xc0117e1b,0xc(%esp)
c010a535:	c0 
c010a536:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a53d:	c0 
c010a53e:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c010a545:	00 
c010a546:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a54d:	e8 76 69 ff ff       	call   c0100ec8 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a552:	8b 45 08             	mov    0x8(%ebp),%eax
c010a555:	89 04 24             	mov    %eax,(%esp)
c010a558:	e8 16 fd ff ff       	call   c010a273 <fopen_count_dec>
c010a55d:	85 c0                	test   %eax,%eax
c010a55f:	75 0b                	jne    c010a56c <fd_array_release+0x8b>
        fd_array_free(file);
c010a561:	8b 45 08             	mov    0x8(%ebp),%eax
c010a564:	89 04 24             	mov    %eax,(%esp)
c010a567:	e8 a0 fe ff ff       	call   c010a40c <fd_array_free>
    }
}
c010a56c:	c9                   	leave  
c010a56d:	c3                   	ret    

c010a56e <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a56e:	55                   	push   %ebp
c010a56f:	89 e5                	mov    %esp,%ebp
c010a571:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a574:	8b 45 08             	mov    0x8(%ebp),%eax
c010a577:	8b 00                	mov    (%eax),%eax
c010a579:	83 f8 01             	cmp    $0x1,%eax
c010a57c:	75 0a                	jne    c010a588 <fd_array_open+0x1a>
c010a57e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a581:	8b 40 14             	mov    0x14(%eax),%eax
c010a584:	85 c0                	test   %eax,%eax
c010a586:	75 24                	jne    c010a5ac <fd_array_open+0x3e>
c010a588:	c7 44 24 0c 34 7e 11 	movl   $0xc0117e34,0xc(%esp)
c010a58f:	c0 
c010a590:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a597:	c0 
c010a598:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010a59f:	00 
c010a5a0:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a5a7:	e8 1c 69 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_OPENED;
c010a5ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5af:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b8:	89 04 24             	mov    %eax,(%esp)
c010a5bb:	e8 99 fc ff ff       	call   c010a259 <fopen_count_inc>
}
c010a5c0:	c9                   	leave  
c010a5c1:	c3                   	ret    

c010a5c2 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a5c2:	55                   	push   %ebp
c010a5c3:	89 e5                	mov    %esp,%ebp
c010a5c5:	83 ec 18             	sub    $0x18,%esp

    assert(file->status == FD_OPENED);
c010a5c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5cb:	8b 00                	mov    (%eax),%eax
c010a5cd:	83 f8 02             	cmp    $0x2,%eax
c010a5d0:	74 24                	je     c010a5f6 <fd_array_close+0x34>
c010a5d2:	c7 44 24 0c c9 7d 11 	movl   $0xc0117dc9,0xc(%esp)
c010a5d9:	c0 
c010a5da:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a5e1:	c0 
c010a5e2:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c010a5e9:	00 
c010a5ea:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a5f1:	e8 d2 68 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a5f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f9:	89 04 24             	mov    %eax,(%esp)
c010a5fc:	e8 4d fc ff ff       	call   c010a24e <fopen_count>
c010a601:	85 c0                	test   %eax,%eax
c010a603:	7f 24                	jg     c010a629 <fd_array_close+0x67>
c010a605:	c7 44 24 0c 1b 7e 11 	movl   $0xc0117e1b,0xc(%esp)
c010a60c:	c0 
c010a60d:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a614:	c0 
c010a615:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a61c:	00 
c010a61d:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a624:	e8 9f 68 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_CLOSED;
c010a629:	8b 45 08             	mov    0x8(%ebp),%eax
c010a62c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a632:	8b 45 08             	mov    0x8(%ebp),%eax
c010a635:	89 04 24             	mov    %eax,(%esp)
c010a638:	e8 36 fc ff ff       	call   c010a273 <fopen_count_dec>
c010a63d:	85 c0                	test   %eax,%eax
c010a63f:	75 0b                	jne    c010a64c <fd_array_close+0x8a>
        fd_array_free(file);
c010a641:	8b 45 08             	mov    0x8(%ebp),%eax
c010a644:	89 04 24             	mov    %eax,(%esp)
c010a647:	e8 c0 fd ff ff       	call   c010a40c <fd_array_free>
    }
}
c010a64c:	c9                   	leave  
c010a64d:	c3                   	ret    

c010a64e <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a64e:	55                   	push   %ebp
c010a64f:	89 e5                	mov    %esp,%ebp
c010a651:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a654:	8b 45 08             	mov    0x8(%ebp),%eax
c010a657:	8b 00                	mov    (%eax),%eax
c010a659:	83 f8 01             	cmp    $0x1,%eax
c010a65c:	75 0a                	jne    c010a668 <fd_array_dup+0x1a>
c010a65e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a661:	8b 00                	mov    (%eax),%eax
c010a663:	83 f8 02             	cmp    $0x2,%eax
c010a666:	74 24                	je     c010a68c <fd_array_dup+0x3e>
c010a668:	c7 44 24 0c 64 7e 11 	movl   $0xc0117e64,0xc(%esp)
c010a66f:	c0 
c010a670:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a677:	c0 
c010a678:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c010a67f:	00 
c010a680:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a687:	e8 3c 68 ff ff       	call   c0100ec8 <__panic>
    to->pos = from->pos;
c010a68c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a68f:	8b 50 10             	mov    0x10(%eax),%edx
c010a692:	8b 45 08             	mov    0x8(%ebp),%eax
c010a695:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a698:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a69b:	8b 50 04             	mov    0x4(%eax),%edx
c010a69e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a1:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a6a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6a7:	8b 50 08             	mov    0x8(%eax),%edx
c010a6aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ad:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a6b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6b3:	8b 40 14             	mov    0x14(%eax),%eax
c010a6b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a6b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6bc:	89 04 24             	mov    %eax,(%esp)
c010a6bf:	e8 2a 4b 00 00       	call   c010f1ee <inode_ref_inc>
c010a6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c7:	89 04 24             	mov    %eax,(%esp)
c010a6ca:	e8 26 4c 00 00       	call   c010f2f5 <inode_open_inc>
    to->node = node;
c010a6cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6d5:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a6d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6db:	89 04 24             	mov    %eax,(%esp)
c010a6de:	e8 8b fe ff ff       	call   c010a56e <fd_array_open>
}
c010a6e3:	c9                   	leave  
c010a6e4:	c3                   	ret    

c010a6e5 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a6e5:	55                   	push   %ebp
c010a6e6:	89 e5                	mov    %esp,%ebp
c010a6e8:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a6eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a6ef:	78 4b                	js     c010a73c <fd2file+0x57>
c010a6f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6f4:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a6f9:	77 41                	ja     c010a73c <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a6fb:	e8 8d fb ff ff       	call   c010a28d <get_fd_array>
c010a700:	89 c2                	mov    %eax,%edx
c010a702:	8b 45 08             	mov    0x8(%ebp),%eax
c010a705:	c1 e0 02             	shl    $0x2,%eax
c010a708:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a70f:	29 c1                	sub    %eax,%ecx
c010a711:	89 c8                	mov    %ecx,%eax
c010a713:	01 d0                	add    %edx,%eax
c010a715:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a71b:	8b 00                	mov    (%eax),%eax
c010a71d:	83 f8 02             	cmp    $0x2,%eax
c010a720:	75 1a                	jne    c010a73c <fd2file+0x57>
c010a722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a725:	8b 40 0c             	mov    0xc(%eax),%eax
c010a728:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a72b:	75 0f                	jne    c010a73c <fd2file+0x57>
            *file_store = file;
c010a72d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a730:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a733:	89 10                	mov    %edx,(%eax)
            return 0;
c010a735:	b8 00 00 00 00       	mov    $0x0,%eax
c010a73a:	eb 05                	jmp    c010a741 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a73c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a741:	c9                   	leave  
c010a742:	c3                   	ret    

c010a743 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a743:	55                   	push   %ebp
c010a744:	89 e5                	mov    %esp,%ebp
c010a746:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a749:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a74c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a750:	8b 45 08             	mov    0x8(%ebp),%eax
c010a753:	89 04 24             	mov    %eax,(%esp)
c010a756:	e8 8a ff ff ff       	call   c010a6e5 <fd2file>
c010a75b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a75e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a762:	74 07                	je     c010a76b <file_testfd+0x28>
        return 0;
c010a764:	b8 00 00 00 00       	mov    $0x0,%eax
c010a769:	eb 33                	jmp    c010a79e <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a76b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a76f:	74 11                	je     c010a782 <file_testfd+0x3f>
c010a771:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a774:	8b 40 04             	mov    0x4(%eax),%eax
c010a777:	85 c0                	test   %eax,%eax
c010a779:	75 07                	jne    c010a782 <file_testfd+0x3f>
        return 0;
c010a77b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a780:	eb 1c                	jmp    c010a79e <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a782:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a786:	74 11                	je     c010a799 <file_testfd+0x56>
c010a788:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a78b:	8b 40 08             	mov    0x8(%eax),%eax
c010a78e:	85 c0                	test   %eax,%eax
c010a790:	75 07                	jne    c010a799 <file_testfd+0x56>
        return 0;
c010a792:	b8 00 00 00 00       	mov    $0x0,%eax
c010a797:	eb 05                	jmp    c010a79e <file_testfd+0x5b>
    }
    return 1;
c010a799:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a79e:	c9                   	leave  
c010a79f:	c3                   	ret    

c010a7a0 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a7a0:	55                   	push   %ebp
c010a7a1:	89 e5                	mov    %esp,%ebp
c010a7a3:	83 ec 48             	sub    $0x48,%esp
    cprintf("[file_open]\n");
c010a7a6:	c7 04 24 97 7e 11 c0 	movl   $0xc0117e97,(%esp)
c010a7ad:	e8 b3 5b ff ff       	call   c0100365 <cprintf>
    bool readable = 0, writable = 0;
c010a7b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a7b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a7c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7c3:	83 e0 03             	and    $0x3,%eax
c010a7c6:	83 f8 01             	cmp    $0x1,%eax
c010a7c9:	74 15                	je     c010a7e0 <file_open+0x40>
c010a7cb:	83 f8 01             	cmp    $0x1,%eax
c010a7ce:	72 07                	jb     c010a7d7 <file_open+0x37>
c010a7d0:	83 f8 02             	cmp    $0x2,%eax
c010a7d3:	74 14                	je     c010a7e9 <file_open+0x49>
c010a7d5:	eb 21                	jmp    c010a7f8 <file_open+0x58>
    case O_RDONLY: readable = 1; break;
c010a7d7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a7de:	eb 22                	jmp    c010a802 <file_open+0x62>
    case O_WRONLY: writable = 1; break;
c010a7e0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a7e7:	eb 19                	jmp    c010a802 <file_open+0x62>
    case O_RDWR:
        readable = writable = 1;
c010a7e9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a7f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a7f6:	eb 0a                	jmp    c010a802 <file_open+0x62>
    default:
        return -E_INVAL;
c010a7f8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a7fd:	e9 45 01 00 00       	jmp    c010a947 <file_open+0x1a7>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a802:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a805:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a809:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a810:	e8 1e fb ff ff       	call   c010a333 <fd_array_alloc>
c010a815:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a818:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a81c:	74 08                	je     c010a826 <file_open+0x86>
        return ret;
c010a81e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a821:	e9 21 01 00 00       	jmp    c010a947 <file_open+0x1a7>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a826:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a829:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a82d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a830:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a834:	8b 45 08             	mov    0x8(%ebp),%eax
c010a837:	89 04 24             	mov    %eax,(%esp)
c010a83a:	e8 f0 56 00 00       	call   c010ff2f <vfs_open>
c010a83f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a842:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a846:	74 13                	je     c010a85b <file_open+0xbb>
        fd_array_free(file);
c010a848:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a84b:	89 04 24             	mov    %eax,(%esp)
c010a84e:	e8 b9 fb ff ff       	call   c010a40c <fd_array_free>
        return ret;
c010a853:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a856:	e9 ec 00 00 00       	jmp    c010a947 <file_open+0x1a7>
    }

    file->pos = 0;
c010a85b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a85e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a865:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a868:	83 e0 20             	and    $0x20,%eax
c010a86b:	85 c0                	test   %eax,%eax
c010a86d:	0f 84 a8 00 00 00    	je     c010a91b <file_open+0x17b>
        struct stat __stat, *stat = &__stat;
c010a873:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a876:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a879:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a87c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a87f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a883:	74 17                	je     c010a89c <file_open+0xfc>
c010a885:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a888:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a88b:	85 c0                	test   %eax,%eax
c010a88d:	74 0d                	je     c010a89c <file_open+0xfc>
c010a88f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a892:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a895:	8b 40 14             	mov    0x14(%eax),%eax
c010a898:	85 c0                	test   %eax,%eax
c010a89a:	75 24                	jne    c010a8c0 <file_open+0x120>
c010a89c:	c7 44 24 0c a4 7e 11 	movl   $0xc0117ea4,0xc(%esp)
c010a8a3:	c0 
c010a8a4:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010a8ab:	c0 
c010a8ac:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c010a8b3:	00 
c010a8b4:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010a8bb:	e8 08 66 ff ff       	call   c0100ec8 <__panic>
c010a8c0:	c7 44 24 04 f2 7e 11 	movl   $0xc0117ef2,0x4(%esp)
c010a8c7:	c0 
c010a8c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8cb:	89 04 24             	mov    %eax,(%esp)
c010a8ce:	e8 23 4b 00 00       	call   c010f3f6 <inode_check>
c010a8d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8d6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8d9:	8b 40 14             	mov    0x14(%eax),%eax
c010a8dc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a8df:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a8e2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a8e6:	89 14 24             	mov    %edx,(%esp)
c010a8e9:	ff d0                	call   *%eax
c010a8eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8f2:	74 1b                	je     c010a90f <file_open+0x16f>
            vfs_close(node);
c010a8f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a8f7:	89 04 24             	mov    %eax,(%esp)
c010a8fa:	e8 2c 59 00 00       	call   c011022b <vfs_close>
            fd_array_free(file);
c010a8ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a902:	89 04 24             	mov    %eax,(%esp)
c010a905:	e8 02 fb ff ff       	call   c010a40c <fd_array_free>
            return ret;
c010a90a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a90d:	eb 38                	jmp    c010a947 <file_open+0x1a7>
        }
        file->pos = stat->st_size;
c010a90f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a912:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a915:	8b 52 0c             	mov    0xc(%edx),%edx
c010a918:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a91b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a91e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a921:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a924:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a927:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a92a:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a92d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a930:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a933:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a936:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a939:	89 04 24             	mov    %eax,(%esp)
c010a93c:	e8 2d fc ff ff       	call   c010a56e <fd_array_open>
    return file->fd;
c010a941:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a944:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a947:	c9                   	leave  
c010a948:	c3                   	ret    

c010a949 <file_close>:

// close file
int
file_close(int fd) {
c010a949:	55                   	push   %ebp
c010a94a:	89 e5                	mov    %esp,%ebp
c010a94c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a94f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a952:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a956:	8b 45 08             	mov    0x8(%ebp),%eax
c010a959:	89 04 24             	mov    %eax,(%esp)
c010a95c:	e8 84 fd ff ff       	call   c010a6e5 <fd2file>
c010a961:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a964:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a968:	74 05                	je     c010a96f <file_close+0x26>
        return ret;
c010a96a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a96d:	eb 10                	jmp    c010a97f <file_close+0x36>
    }
    fd_array_close(file);
c010a96f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a972:	89 04 24             	mov    %eax,(%esp)
c010a975:	e8 48 fc ff ff       	call   c010a5c2 <fd_array_close>
    return 0;
c010a97a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a97f:	c9                   	leave  
c010a980:	c3                   	ret    

c010a981 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a981:	55                   	push   %ebp
c010a982:	89 e5                	mov    %esp,%ebp
c010a984:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a987:	8b 45 14             	mov    0x14(%ebp),%eax
c010a98a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a990:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a993:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a997:	8b 45 08             	mov    0x8(%ebp),%eax
c010a99a:	89 04 24             	mov    %eax,(%esp)
c010a99d:	e8 43 fd ff ff       	call   c010a6e5 <fd2file>
c010a9a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9a9:	74 08                	je     c010a9b3 <file_read+0x32>
        return ret;
c010a9ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9ae:	e9 06 01 00 00       	jmp    c010aab9 <file_read+0x138>
    }
    if (!file->readable) {
c010a9b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9b6:	8b 40 04             	mov    0x4(%eax),%eax
c010a9b9:	85 c0                	test   %eax,%eax
c010a9bb:	75 0a                	jne    c010a9c7 <file_read+0x46>
        return -E_INVAL;
c010a9bd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a9c2:	e9 f2 00 00 00       	jmp    c010aab9 <file_read+0x138>
    }
    fd_array_acquire(file);
c010a9c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9ca:	89 04 24             	mov    %eax,(%esp)
c010a9cd:	e8 ce fa ff ff       	call   c010a4a0 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a9d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9d5:	8b 40 10             	mov    0x10(%eax),%eax
c010a9d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a9dc:	8b 45 10             	mov    0x10(%ebp),%eax
c010a9df:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a9e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9ea:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a9ed:	89 04 24             	mov    %eax,(%esp)
c010a9f0:	e8 b1 09 00 00       	call   c010b3a6 <iobuf_init>
c010a9f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a9f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9fb:	8b 40 14             	mov    0x14(%eax),%eax
c010a9fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aa01:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aa05:	74 17                	je     c010aa1e <file_read+0x9d>
c010aa07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa0a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa0d:	85 c0                	test   %eax,%eax
c010aa0f:	74 0d                	je     c010aa1e <file_read+0x9d>
c010aa11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa14:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa17:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa1a:	85 c0                	test   %eax,%eax
c010aa1c:	75 24                	jne    c010aa42 <file_read+0xc1>
c010aa1e:	c7 44 24 0c f8 7e 11 	movl   $0xc0117ef8,0xc(%esp)
c010aa25:	c0 
c010aa26:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010aa2d:	c0 
c010aa2e:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c010aa35:	00 
c010aa36:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010aa3d:	e8 86 64 ff ff       	call   c0100ec8 <__panic>
c010aa42:	c7 44 24 04 45 7f 11 	movl   $0xc0117f45,0x4(%esp)
c010aa49:	c0 
c010aa4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa4d:	89 04 24             	mov    %eax,(%esp)
c010aa50:	e8 a1 49 00 00       	call   c010f3f6 <inode_check>
c010aa55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa58:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa5b:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa5e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa61:	8b 52 14             	mov    0x14(%edx),%edx
c010aa64:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aa67:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aa6b:	89 14 24             	mov    %edx,(%esp)
c010aa6e:	ff d0                	call   *%eax
c010aa70:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa76:	8b 50 08             	mov    0x8(%eax),%edx
c010aa79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa7c:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa7f:	29 c2                	sub    %eax,%edx
c010aa81:	89 d0                	mov    %edx,%eax
c010aa83:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aa86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa89:	8b 00                	mov    (%eax),%eax
c010aa8b:	83 f8 02             	cmp    $0x2,%eax
c010aa8e:	75 13                	jne    c010aaa3 <file_read+0x122>
        file->pos += copied;
c010aa90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa93:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa96:	8b 52 10             	mov    0x10(%edx),%edx
c010aa99:	89 d1                	mov    %edx,%ecx
c010aa9b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa9e:	01 ca                	add    %ecx,%edx
c010aaa0:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aaa3:	8b 45 14             	mov    0x14(%ebp),%eax
c010aaa6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aaa9:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aaab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaae:	89 04 24             	mov    %eax,(%esp)
c010aab1:	e8 2b fa ff ff       	call   c010a4e1 <fd_array_release>
    return ret;
c010aab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aab9:	c9                   	leave  
c010aaba:	c3                   	ret    

c010aabb <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010aabb:	55                   	push   %ebp
c010aabc:	89 e5                	mov    %esp,%ebp
c010aabe:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aac1:	8b 45 14             	mov    0x14(%ebp),%eax
c010aac4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aaca:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aacd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aad1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aad4:	89 04 24             	mov    %eax,(%esp)
c010aad7:	e8 09 fc ff ff       	call   c010a6e5 <fd2file>
c010aadc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aadf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aae3:	74 08                	je     c010aaed <file_write+0x32>
        return ret;
c010aae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aae8:	e9 06 01 00 00       	jmp    c010abf3 <file_write+0x138>
    }
    if (!file->writable) {
c010aaed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaf0:	8b 40 08             	mov    0x8(%eax),%eax
c010aaf3:	85 c0                	test   %eax,%eax
c010aaf5:	75 0a                	jne    c010ab01 <file_write+0x46>
        return -E_INVAL;
c010aaf7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aafc:	e9 f2 00 00 00       	jmp    c010abf3 <file_write+0x138>
    }
    fd_array_acquire(file);
c010ab01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab04:	89 04 24             	mov    %eax,(%esp)
c010ab07:	e8 94 f9 ff ff       	call   c010a4a0 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010ab0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab0f:	8b 40 10             	mov    0x10(%eax),%eax
c010ab12:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ab16:	8b 45 10             	mov    0x10(%ebp),%eax
c010ab19:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ab1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab20:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab24:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ab27:	89 04 24             	mov    %eax,(%esp)
c010ab2a:	e8 77 08 00 00       	call   c010b3a6 <iobuf_init>
c010ab2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010ab32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab35:	8b 40 14             	mov    0x14(%eax),%eax
c010ab38:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ab3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab3f:	74 17                	je     c010ab58 <file_write+0x9d>
c010ab41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab44:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab47:	85 c0                	test   %eax,%eax
c010ab49:	74 0d                	je     c010ab58 <file_write+0x9d>
c010ab4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab4e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab51:	8b 40 10             	mov    0x10(%eax),%eax
c010ab54:	85 c0                	test   %eax,%eax
c010ab56:	75 24                	jne    c010ab7c <file_write+0xc1>
c010ab58:	c7 44 24 0c 4c 7f 11 	movl   $0xc0117f4c,0xc(%esp)
c010ab5f:	c0 
c010ab60:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010ab67:	c0 
c010ab68:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c010ab6f:	00 
c010ab70:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010ab77:	e8 4c 63 ff ff       	call   c0100ec8 <__panic>
c010ab7c:	c7 44 24 04 9a 7f 11 	movl   $0xc0117f9a,0x4(%esp)
c010ab83:	c0 
c010ab84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab87:	89 04 24             	mov    %eax,(%esp)
c010ab8a:	e8 67 48 00 00       	call   c010f3f6 <inode_check>
c010ab8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab92:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab95:	8b 40 10             	mov    0x10(%eax),%eax
c010ab98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab9b:	8b 52 14             	mov    0x14(%edx),%edx
c010ab9e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aba1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aba5:	89 14 24             	mov    %edx,(%esp)
c010aba8:	ff d0                	call   *%eax
c010abaa:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010abad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abb0:	8b 50 08             	mov    0x8(%eax),%edx
c010abb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abb6:	8b 40 0c             	mov    0xc(%eax),%eax
c010abb9:	29 c2                	sub    %eax,%edx
c010abbb:	89 d0                	mov    %edx,%eax
c010abbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010abc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abc3:	8b 00                	mov    (%eax),%eax
c010abc5:	83 f8 02             	cmp    $0x2,%eax
c010abc8:	75 13                	jne    c010abdd <file_write+0x122>
        file->pos += copied;
c010abca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abcd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010abd0:	8b 52 10             	mov    0x10(%edx),%edx
c010abd3:	89 d1                	mov    %edx,%ecx
c010abd5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010abd8:	01 ca                	add    %ecx,%edx
c010abda:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010abdd:	8b 45 14             	mov    0x14(%ebp),%eax
c010abe0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010abe3:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010abe5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abe8:	89 04 24             	mov    %eax,(%esp)
c010abeb:	e8 f1 f8 ff ff       	call   c010a4e1 <fd_array_release>
    return ret;
c010abf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010abf3:	c9                   	leave  
c010abf4:	c3                   	ret    

c010abf5 <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010abf5:	55                   	push   %ebp
c010abf6:	89 e5                	mov    %esp,%ebp
c010abf8:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010abfb:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010abfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ac01:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ac04:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac08:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac0b:	89 04 24             	mov    %eax,(%esp)
c010ac0e:	e8 d2 fa ff ff       	call   c010a6e5 <fd2file>
c010ac13:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac1a:	74 08                	je     c010ac24 <file_seek+0x2f>
        return ret;
c010ac1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac1f:	e9 72 01 00 00       	jmp    c010ad96 <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010ac24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac27:	89 04 24             	mov    %eax,(%esp)
c010ac2a:	e8 71 f8 ff ff       	call   c010a4a0 <fd_array_acquire>

    switch (whence) {
c010ac2f:	8b 45 10             	mov    0x10(%ebp),%eax
c010ac32:	83 f8 01             	cmp    $0x1,%eax
c010ac35:	74 12                	je     c010ac49 <file_seek+0x54>
c010ac37:	83 f8 02             	cmp    $0x2,%eax
c010ac3a:	74 1b                	je     c010ac57 <file_seek+0x62>
c010ac3c:	85 c0                	test   %eax,%eax
c010ac3e:	0f 84 af 00 00 00    	je     c010acf3 <file_seek+0xfe>
c010ac44:	e9 a1 00 00 00       	jmp    c010acea <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ac49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac4c:	8b 40 10             	mov    0x10(%eax),%eax
c010ac4f:	01 45 0c             	add    %eax,0xc(%ebp)
c010ac52:	e9 9d 00 00 00       	jmp    c010acf4 <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ac57:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac5a:	8b 40 14             	mov    0x14(%eax),%eax
c010ac5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac64:	74 17                	je     c010ac7d <file_seek+0x88>
c010ac66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac69:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac6c:	85 c0                	test   %eax,%eax
c010ac6e:	74 0d                	je     c010ac7d <file_seek+0x88>
c010ac70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac73:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac76:	8b 40 14             	mov    0x14(%eax),%eax
c010ac79:	85 c0                	test   %eax,%eax
c010ac7b:	75 24                	jne    c010aca1 <file_seek+0xac>
c010ac7d:	c7 44 24 0c a4 7e 11 	movl   $0xc0117ea4,0xc(%esp)
c010ac84:	c0 
c010ac85:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010ac8c:	c0 
c010ac8d:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c010ac94:	00 
c010ac95:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010ac9c:	e8 27 62 ff ff       	call   c0100ec8 <__panic>
c010aca1:	c7 44 24 04 f2 7e 11 	movl   $0xc0117ef2,0x4(%esp)
c010aca8:	c0 
c010aca9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acac:	89 04 24             	mov    %eax,(%esp)
c010acaf:	e8 42 47 00 00       	call   c010f3f6 <inode_check>
c010acb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acb7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acba:	8b 40 14             	mov    0x14(%eax),%eax
c010acbd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010acc0:	8b 52 14             	mov    0x14(%edx),%edx
c010acc3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010acc6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010acca:	89 14 24             	mov    %edx,(%esp)
c010accd:	ff d0                	call   *%eax
c010accf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acd6:	75 10                	jne    c010ace8 <file_seek+0xf3>
            pos += stat->st_size;
c010acd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acdb:	8b 50 0c             	mov    0xc(%eax),%edx
c010acde:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ace1:	01 d0                	add    %edx,%eax
c010ace3:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010ace6:	eb 0c                	jmp    c010acf4 <file_seek+0xff>
c010ace8:	eb 0a                	jmp    c010acf4 <file_seek+0xff>
    default: ret = -E_INVAL;
c010acea:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010acf1:	eb 01                	jmp    c010acf4 <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010acf3:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010acf4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acf8:	0f 85 8a 00 00 00    	jne    c010ad88 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010acfe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad01:	8b 40 14             	mov    0x14(%eax),%eax
c010ad04:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ad07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ad0b:	74 17                	je     c010ad24 <file_seek+0x12f>
c010ad0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad10:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad13:	85 c0                	test   %eax,%eax
c010ad15:	74 0d                	je     c010ad24 <file_seek+0x12f>
c010ad17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad1a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad1d:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ad20:	85 c0                	test   %eax,%eax
c010ad22:	75 24                	jne    c010ad48 <file_seek+0x153>
c010ad24:	c7 44 24 0c a0 7f 11 	movl   $0xc0117fa0,0xc(%esp)
c010ad2b:	c0 
c010ad2c:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010ad33:	c0 
c010ad34:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c010ad3b:	00 
c010ad3c:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010ad43:	e8 80 61 ff ff       	call   c0100ec8 <__panic>
c010ad48:	c7 44 24 04 f0 7f 11 	movl   $0xc0117ff0,0x4(%esp)
c010ad4f:	c0 
c010ad50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad53:	89 04 24             	mov    %eax,(%esp)
c010ad56:	e8 9b 46 00 00       	call   c010f3f6 <inode_check>
c010ad5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad5e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad61:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ad64:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ad67:	8b 52 14             	mov    0x14(%edx),%edx
c010ad6a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ad6d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ad71:	89 14 24             	mov    %edx,(%esp)
c010ad74:	ff d0                	call   *%eax
c010ad76:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad7d:	75 09                	jne    c010ad88 <file_seek+0x193>
            file->pos = pos;
c010ad7f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad82:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad85:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ad88:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad8b:	89 04 24             	mov    %eax,(%esp)
c010ad8e:	e8 4e f7 ff ff       	call   c010a4e1 <fd_array_release>
    return ret;
c010ad93:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad96:	c9                   	leave  
c010ad97:	c3                   	ret    

c010ad98 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ad98:	55                   	push   %ebp
c010ad99:	89 e5                	mov    %esp,%ebp
c010ad9b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ad9e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ada1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ada5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada8:	89 04 24             	mov    %eax,(%esp)
c010adab:	e8 35 f9 ff ff       	call   c010a6e5 <fd2file>
c010adb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adb7:	74 08                	je     c010adc1 <file_fstat+0x29>
        return ret;
c010adb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adbc:	e9 94 00 00 00       	jmp    c010ae55 <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010adc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adc4:	89 04 24             	mov    %eax,(%esp)
c010adc7:	e8 d4 f6 ff ff       	call   c010a4a0 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010adcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adcf:	8b 40 14             	mov    0x14(%eax),%eax
c010add2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010add5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010add9:	74 17                	je     c010adf2 <file_fstat+0x5a>
c010addb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adde:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ade1:	85 c0                	test   %eax,%eax
c010ade3:	74 0d                	je     c010adf2 <file_fstat+0x5a>
c010ade5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ade8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adeb:	8b 40 14             	mov    0x14(%eax),%eax
c010adee:	85 c0                	test   %eax,%eax
c010adf0:	75 24                	jne    c010ae16 <file_fstat+0x7e>
c010adf2:	c7 44 24 0c a4 7e 11 	movl   $0xc0117ea4,0xc(%esp)
c010adf9:	c0 
c010adfa:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010ae01:	c0 
c010ae02:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c010ae09:	00 
c010ae0a:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010ae11:	e8 b2 60 ff ff       	call   c0100ec8 <__panic>
c010ae16:	c7 44 24 04 f2 7e 11 	movl   $0xc0117ef2,0x4(%esp)
c010ae1d:	c0 
c010ae1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae21:	89 04 24             	mov    %eax,(%esp)
c010ae24:	e8 cd 45 00 00       	call   c010f3f6 <inode_check>
c010ae29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae2f:	8b 40 14             	mov    0x14(%eax),%eax
c010ae32:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae35:	8b 52 14             	mov    0x14(%edx),%edx
c010ae38:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae3b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ae3f:	89 14 24             	mov    %edx,(%esp)
c010ae42:	ff d0                	call   *%eax
c010ae44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ae47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae4a:	89 04 24             	mov    %eax,(%esp)
c010ae4d:	e8 8f f6 ff ff       	call   c010a4e1 <fd_array_release>
    return ret;
c010ae52:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ae55:	c9                   	leave  
c010ae56:	c3                   	ret    

c010ae57 <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010ae57:	55                   	push   %ebp
c010ae58:	89 e5                	mov    %esp,%ebp
c010ae5a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ae5d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ae60:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae64:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae67:	89 04 24             	mov    %eax,(%esp)
c010ae6a:	e8 76 f8 ff ff       	call   c010a6e5 <fd2file>
c010ae6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae76:	74 08                	je     c010ae80 <file_fsync+0x29>
        return ret;
c010ae78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae7b:	e9 8d 00 00 00       	jmp    c010af0d <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010ae80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae83:	89 04 24             	mov    %eax,(%esp)
c010ae86:	e8 15 f6 ff ff       	call   c010a4a0 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010ae8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae8e:	8b 40 14             	mov    0x14(%eax),%eax
c010ae91:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae98:	74 17                	je     c010aeb1 <file_fsync+0x5a>
c010ae9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae9d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aea0:	85 c0                	test   %eax,%eax
c010aea2:	74 0d                	je     c010aeb1 <file_fsync+0x5a>
c010aea4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aea7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aeaa:	8b 40 18             	mov    0x18(%eax),%eax
c010aead:	85 c0                	test   %eax,%eax
c010aeaf:	75 24                	jne    c010aed5 <file_fsync+0x7e>
c010aeb1:	c7 44 24 0c f8 7f 11 	movl   $0xc0117ff8,0xc(%esp)
c010aeb8:	c0 
c010aeb9:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010aec0:	c0 
c010aec1:	c7 44 24 04 41 01 00 	movl   $0x141,0x4(%esp)
c010aec8:	00 
c010aec9:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010aed0:	e8 f3 5f ff ff       	call   c0100ec8 <__panic>
c010aed5:	c7 44 24 04 46 80 11 	movl   $0xc0118046,0x4(%esp)
c010aedc:	c0 
c010aedd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aee0:	89 04 24             	mov    %eax,(%esp)
c010aee3:	e8 0e 45 00 00       	call   c010f3f6 <inode_check>
c010aee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeeb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aeee:	8b 40 18             	mov    0x18(%eax),%eax
c010aef1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aef4:	8b 52 14             	mov    0x14(%edx),%edx
c010aef7:	89 14 24             	mov    %edx,(%esp)
c010aefa:	ff d0                	call   *%eax
c010aefc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010aeff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af02:	89 04 24             	mov    %eax,(%esp)
c010af05:	e8 d7 f5 ff ff       	call   c010a4e1 <fd_array_release>
    return ret;
c010af0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010af0d:	c9                   	leave  
c010af0e:	c3                   	ret    

c010af0f <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010af0f:	55                   	push   %ebp
c010af10:	89 e5                	mov    %esp,%ebp
c010af12:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010af15:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010af18:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010af1f:	89 04 24             	mov    %eax,(%esp)
c010af22:	e8 be f7 ff ff       	call   c010a6e5 <fd2file>
c010af27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af2e:	74 08                	je     c010af38 <file_getdirentry+0x29>
        return ret;
c010af30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af33:	e9 e3 00 00 00       	jmp    c010b01b <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010af38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af3b:	89 04 24             	mov    %eax,(%esp)
c010af3e:	e8 5d f5 ff ff       	call   c010a4a0 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010af43:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af46:	8b 00                	mov    (%eax),%eax
c010af48:	8b 55 0c             	mov    0xc(%ebp),%edx
c010af4b:	83 c2 04             	add    $0x4,%edx
c010af4e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010af52:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010af59:	00 
c010af5a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af5e:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010af61:	89 04 24             	mov    %eax,(%esp)
c010af64:	e8 3d 04 00 00       	call   c010b3a6 <iobuf_init>
c010af69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010af6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af6f:	8b 40 14             	mov    0x14(%eax),%eax
c010af72:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010af79:	74 17                	je     c010af92 <file_getdirentry+0x83>
c010af7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af7e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af81:	85 c0                	test   %eax,%eax
c010af83:	74 0d                	je     c010af92 <file_getdirentry+0x83>
c010af85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af88:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af8b:	8b 40 20             	mov    0x20(%eax),%eax
c010af8e:	85 c0                	test   %eax,%eax
c010af90:	75 24                	jne    c010afb6 <file_getdirentry+0xa7>
c010af92:	c7 44 24 0c 4c 80 11 	movl   $0xc011804c,0xc(%esp)
c010af99:	c0 
c010af9a:	c7 44 24 08 32 7d 11 	movl   $0xc0117d32,0x8(%esp)
c010afa1:	c0 
c010afa2:	c7 44 24 04 51 01 00 	movl   $0x151,0x4(%esp)
c010afa9:	00 
c010afaa:	c7 04 24 47 7d 11 c0 	movl   $0xc0117d47,(%esp)
c010afb1:	e8 12 5f ff ff       	call   c0100ec8 <__panic>
c010afb6:	c7 44 24 04 a0 80 11 	movl   $0xc01180a0,0x4(%esp)
c010afbd:	c0 
c010afbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afc1:	89 04 24             	mov    %eax,(%esp)
c010afc4:	e8 2d 44 00 00       	call   c010f3f6 <inode_check>
c010afc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afcc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010afcf:	8b 40 20             	mov    0x20(%eax),%eax
c010afd2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010afd5:	8b 52 14             	mov    0x14(%edx),%edx
c010afd8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010afdb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010afdf:	89 14 24             	mov    %edx,(%esp)
c010afe2:	ff d0                	call   *%eax
c010afe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afe7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afeb:	75 20                	jne    c010b00d <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010afed:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aff0:	8b 00                	mov    (%eax),%eax
c010aff2:	89 c2                	mov    %eax,%edx
c010aff4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aff7:	8b 48 08             	mov    0x8(%eax),%ecx
c010affa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010affd:	8b 40 0c             	mov    0xc(%eax),%eax
c010b000:	29 c1                	sub    %eax,%ecx
c010b002:	89 c8                	mov    %ecx,%eax
c010b004:	01 d0                	add    %edx,%eax
c010b006:	89 c2                	mov    %eax,%edx
c010b008:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b00b:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010b00d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b010:	89 04 24             	mov    %eax,(%esp)
c010b013:	e8 c9 f4 ff ff       	call   c010a4e1 <fd_array_release>
    return ret;
c010b018:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b01b:	c9                   	leave  
c010b01c:	c3                   	ret    

c010b01d <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010b01d:	55                   	push   %ebp
c010b01e:	89 e5                	mov    %esp,%ebp
c010b020:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010b023:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b026:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b02a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02d:	89 04 24             	mov    %eax,(%esp)
c010b030:	e8 b0 f6 ff ff       	call   c010a6e5 <fd2file>
c010b035:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b038:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b03c:	74 05                	je     c010b043 <file_dup+0x26>
        return ret;
c010b03e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b041:	eb 38                	jmp    c010b07b <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010b043:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b046:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b04a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b04d:	89 04 24             	mov    %eax,(%esp)
c010b050:	e8 de f2 ff ff       	call   c010a333 <fd_array_alloc>
c010b055:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b058:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b05c:	74 05                	je     c010b063 <file_dup+0x46>
        return ret;
c010b05e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b061:	eb 18                	jmp    c010b07b <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010b063:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b066:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b069:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b06d:	89 04 24             	mov    %eax,(%esp)
c010b070:	e8 d9 f5 ff ff       	call   c010a64e <fd_array_dup>
    return file2->fd;
c010b075:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b078:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b07b:	c9                   	leave  
c010b07c:	c3                   	ret    

c010b07d <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b07d:	55                   	push   %ebp
c010b07e:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b080:	8b 45 08             	mov    0x8(%ebp),%eax
c010b083:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b086:	5d                   	pop    %ebp
c010b087:	c3                   	ret    

c010b088 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b088:	55                   	push   %ebp
c010b089:	89 e5                	mov    %esp,%ebp
c010b08b:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b08e:	e8 7f 44 00 00       	call   c010f512 <vfs_init>
    dev_init();
c010b093:	e8 7c 5c 00 00       	call   c0110d14 <dev_init>
    sfs_init();
c010b098:	e8 51 6a 00 00       	call   c0111aee <sfs_init>
}
c010b09d:	c9                   	leave  
c010b09e:	c3                   	ret    

c010b09f <fs_cleanup>:

void
fs_cleanup(void) {
c010b09f:	55                   	push   %ebp
c010b0a0:	89 e5                	mov    %esp,%ebp
c010b0a2:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b0a5:	e8 21 46 00 00       	call   c010f6cb <vfs_cleanup>
}
c010b0aa:	c9                   	leave  
c010b0ab:	c3                   	ret    

c010b0ac <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b0ac:	55                   	push   %ebp
c010b0ad:	89 e5                	mov    %esp,%ebp
c010b0af:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010b0b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b5:	83 c0 0c             	add    $0xc,%eax
c010b0b8:	89 04 24             	mov    %eax,(%esp)
c010b0bb:	e8 57 ec ff ff       	call   c0109d17 <down>
}
c010b0c0:	c9                   	leave  
c010b0c1:	c3                   	ret    

c010b0c2 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b0c2:	55                   	push   %ebp
c010b0c3:	89 e5                	mov    %esp,%ebp
c010b0c5:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010b0c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cb:	83 c0 0c             	add    $0xc,%eax
c010b0ce:	89 04 24             	mov    %eax,(%esp)
c010b0d1:	e8 26 ec ff ff       	call   c0109cfc <up>
}
c010b0d6:	c9                   	leave  
c010b0d7:	c3                   	ret    

c010b0d8 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b0d8:	55                   	push   %ebp
c010b0d9:	89 e5                	mov    %esp,%ebp
c010b0db:	83 ec 28             	sub    $0x28,%esp
    cprintf("[files_create]\n");
c010b0de:	c7 04 24 ac 80 11 c0 	movl   $0xc01180ac,(%esp)
c010b0e5:	e8 7b 52 ff ff       	call   c0100365 <cprintf>
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b0ea:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b0f1:	e8 01 9c ff ff       	call   c0104cf7 <kmalloc>
c010b0f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0fd:	74 43                	je     c010b142 <files_create+0x6a>
        filesp->pwd = NULL;
c010b0ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b102:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b10b:	8d 50 18             	lea    0x18(%eax),%edx
c010b10e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b111:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b114:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b117:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b11e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b121:	83 c0 0c             	add    $0xc,%eax
c010b124:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b12b:	00 
c010b12c:	89 04 24             	mov    %eax,(%esp)
c010b12f:	e8 55 ea ff ff       	call   c0109b89 <sem_init>
        fd_array_init(filesp->fd_array);
c010b134:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b137:	8b 40 04             	mov    0x4(%eax),%eax
c010b13a:	89 04 24             	mov    %eax,(%esp)
c010b13d:	e8 a0 f1 ff ff       	call   c010a2e2 <fd_array_init>
    }
    return filesp;
c010b142:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b145:	c9                   	leave  
c010b146:	c3                   	ret    

c010b147 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b147:	55                   	push   %ebp
c010b148:	89 e5                	mov    %esp,%ebp
c010b14a:	83 ec 28             	sub    $0x28,%esp
    cprintf("[files_destroy]\n");
c010b14d:	c7 04 24 bc 80 11 c0 	movl   $0xc01180bc,(%esp)
c010b154:	e8 0c 52 ff ff       	call   c0100365 <cprintf>
    assert(filesp != NULL && files_count(filesp) == 0);
c010b159:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b15d:	74 0f                	je     c010b16e <files_destroy+0x27>
c010b15f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b162:	89 04 24             	mov    %eax,(%esp)
c010b165:	e8 13 ff ff ff       	call   c010b07d <files_count>
c010b16a:	85 c0                	test   %eax,%eax
c010b16c:	74 24                	je     c010b192 <files_destroy+0x4b>
c010b16e:	c7 44 24 0c d0 80 11 	movl   $0xc01180d0,0xc(%esp)
c010b175:	c0 
c010b176:	c7 44 24 08 fb 80 11 	movl   $0xc01180fb,0x8(%esp)
c010b17d:	c0 
c010b17e:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b185:	00 
c010b186:	c7 04 24 10 81 11 c0 	movl   $0xc0118110,(%esp)
c010b18d:	e8 36 5d ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
c010b192:	8b 45 08             	mov    0x8(%ebp),%eax
c010b195:	8b 00                	mov    (%eax),%eax
c010b197:	85 c0                	test   %eax,%eax
c010b199:	74 0d                	je     c010b1a8 <files_destroy+0x61>
        vop_ref_dec(filesp->pwd);
c010b19b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19e:	8b 00                	mov    (%eax),%eax
c010b1a0:	89 04 24             	mov    %eax,(%esp)
c010b1a3:	e8 60 40 00 00       	call   c010f208 <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b1a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ab:	8b 40 04             	mov    0x4(%eax),%eax
c010b1ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b1b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b1b8:	eb 4a                	jmp    c010b204 <files_destroy+0xbd>
        if (file->status == FD_OPENED) {
c010b1ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1bd:	8b 00                	mov    (%eax),%eax
c010b1bf:	83 f8 02             	cmp    $0x2,%eax
c010b1c2:	75 0b                	jne    c010b1cf <files_destroy+0x88>
            fd_array_close(file);
c010b1c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1c7:	89 04 24             	mov    %eax,(%esp)
c010b1ca:	e8 f3 f3 ff ff       	call   c010a5c2 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b1cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1d2:	8b 00                	mov    (%eax),%eax
c010b1d4:	85 c0                	test   %eax,%eax
c010b1d6:	74 24                	je     c010b1fc <files_destroy+0xb5>
c010b1d8:	c7 44 24 0c 1d 81 11 	movl   $0xc011811d,0xc(%esp)
c010b1df:	c0 
c010b1e0:	c7 44 24 08 fb 80 11 	movl   $0xc01180fb,0x8(%esp)
c010b1e7:	c0 
c010b1e8:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b1ef:	00 
c010b1f0:	c7 04 24 10 81 11 c0 	movl   $0xc0118110,(%esp)
c010b1f7:	e8 cc 5c ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b1fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b200:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b204:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b207:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b20c:	76 ac                	jbe    c010b1ba <files_destroy+0x73>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b20e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b211:	89 04 24             	mov    %eax,(%esp)
c010b214:	e8 f9 9a ff ff       	call   c0104d12 <kfree>
}
c010b219:	c9                   	leave  
c010b21a:	c3                   	ret    

c010b21b <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b21b:	55                   	push   %ebp
c010b21c:	89 e5                	mov    %esp,%ebp
c010b21e:	83 ec 28             	sub    $0x28,%esp
    cprintf("[files_closeall]\n");
c010b221:	c7 04 24 35 81 11 c0 	movl   $0xc0118135,(%esp)
c010b228:	e8 38 51 ff ff       	call   c0100365 <cprintf>
    assert(filesp != NULL && files_count(filesp) > 0);
c010b22d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b231:	74 0f                	je     c010b242 <files_closeall+0x27>
c010b233:	8b 45 08             	mov    0x8(%ebp),%eax
c010b236:	89 04 24             	mov    %eax,(%esp)
c010b239:	e8 3f fe ff ff       	call   c010b07d <files_count>
c010b23e:	85 c0                	test   %eax,%eax
c010b240:	7f 24                	jg     c010b266 <files_closeall+0x4b>
c010b242:	c7 44 24 0c 48 81 11 	movl   $0xc0118148,0xc(%esp)
c010b249:	c0 
c010b24a:	c7 44 24 08 fb 80 11 	movl   $0xc01180fb,0x8(%esp)
c010b251:	c0 
c010b252:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b259:	00 
c010b25a:	c7 04 24 10 81 11 c0 	movl   $0xc0118110,(%esp)
c010b261:	e8 62 5c ff ff       	call   c0100ec8 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b266:	8b 45 08             	mov    0x8(%ebp),%eax
c010b269:	8b 40 04             	mov    0x4(%eax),%eax
c010b26c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b26f:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b276:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b27a:	eb 1d                	jmp    c010b299 <files_closeall+0x7e>
        if (file->status == FD_OPENED) {
c010b27c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b27f:	8b 00                	mov    (%eax),%eax
c010b281:	83 f8 02             	cmp    $0x2,%eax
c010b284:	75 0b                	jne    c010b291 <files_closeall+0x76>
            fd_array_close(file);
c010b286:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b289:	89 04 24             	mov    %eax,(%esp)
c010b28c:	e8 31 f3 ff ff       	call   c010a5c2 <fd_array_close>
    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b291:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b295:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b299:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b29c:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b2a1:	76 d9                	jbe    c010b27c <files_closeall+0x61>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b2a3:	c9                   	leave  
c010b2a4:	c3                   	ret    

c010b2a5 <dup_fs>:

int
dup_fs(struct files_struct *to, struct files_struct *from) {
c010b2a5:	55                   	push   %ebp
c010b2a6:	89 e5                	mov    %esp,%ebp
c010b2a8:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dup_fs]\n");
c010b2ab:	c7 04 24 72 81 11 c0 	movl   $0xc0118172,(%esp)
c010b2b2:	e8 ae 50 ff ff       	call   c0100365 <cprintf>
    assert(to != NULL && from != NULL);
c010b2b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b2bb:	74 06                	je     c010b2c3 <dup_fs+0x1e>
c010b2bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b2c1:	75 24                	jne    c010b2e7 <dup_fs+0x42>
c010b2c3:	c7 44 24 0c 7c 81 11 	movl   $0xc011817c,0xc(%esp)
c010b2ca:	c0 
c010b2cb:	c7 44 24 08 fb 80 11 	movl   $0xc01180fb,0x8(%esp)
c010b2d2:	c0 
c010b2d3:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b2da:	00 
c010b2db:	c7 04 24 10 81 11 c0 	movl   $0xc0118110,(%esp)
c010b2e2:	e8 e1 5b ff ff       	call   c0100ec8 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b2e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2ea:	89 04 24             	mov    %eax,(%esp)
c010b2ed:	e8 8b fd ff ff       	call   c010b07d <files_count>
c010b2f2:	85 c0                	test   %eax,%eax
c010b2f4:	75 0f                	jne    c010b305 <dup_fs+0x60>
c010b2f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2f9:	89 04 24             	mov    %eax,(%esp)
c010b2fc:	e8 7c fd ff ff       	call   c010b07d <files_count>
c010b301:	85 c0                	test   %eax,%eax
c010b303:	7f 24                	jg     c010b329 <dup_fs+0x84>
c010b305:	c7 44 24 0c 98 81 11 	movl   $0xc0118198,0xc(%esp)
c010b30c:	c0 
c010b30d:	c7 44 24 08 fb 80 11 	movl   $0xc01180fb,0x8(%esp)
c010b314:	c0 
c010b315:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b31c:	00 
c010b31d:	c7 04 24 10 81 11 c0 	movl   $0xc0118110,(%esp)
c010b324:	e8 9f 5b ff ff       	call   c0100ec8 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b32c:	8b 10                	mov    (%eax),%edx
c010b32e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b331:	89 10                	mov    %edx,(%eax)
c010b333:	8b 45 08             	mov    0x8(%ebp),%eax
c010b336:	8b 00                	mov    (%eax),%eax
c010b338:	85 c0                	test   %eax,%eax
c010b33a:	74 0d                	je     c010b349 <dup_fs+0xa4>
        vop_ref_inc(to->pwd);
c010b33c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b33f:	8b 00                	mov    (%eax),%eax
c010b341:	89 04 24             	mov    %eax,(%esp)
c010b344:	e8 a5 3e 00 00       	call   c010f1ee <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b349:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34c:	8b 40 04             	mov    0x4(%eax),%eax
c010b34f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b352:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b355:	8b 40 04             	mov    0x4(%eax),%eax
c010b358:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b35b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b362:	eb 31                	jmp    c010b395 <dup_fs+0xf0>
        if (from_file->status == FD_OPENED) {
c010b364:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b367:	8b 00                	mov    (%eax),%eax
c010b369:	83 f8 02             	cmp    $0x2,%eax
c010b36c:	75 1b                	jne    c010b389 <dup_fs+0xe4>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b36e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b371:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b377:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b37a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b37e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b381:	89 04 24             	mov    %eax,(%esp)
c010b384:	e8 c5 f2 ff ff       	call   c010a64e <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b389:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b38d:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b391:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b398:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b39d:	76 c5                	jbe    c010b364 <dup_fs+0xbf>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b39f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b3a4:	c9                   	leave  
c010b3a5:	c3                   	ret    

c010b3a6 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b3a6:	55                   	push   %ebp
c010b3a7:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b3a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3ac:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b3af:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b3b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3b4:	8b 55 14             	mov    0x14(%ebp),%edx
c010b3b7:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b3ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3bd:	8b 55 10             	mov    0x10(%ebp),%edx
c010b3c0:	89 50 0c             	mov    %edx,0xc(%eax)
c010b3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3c6:	8b 50 0c             	mov    0xc(%eax),%edx
c010b3c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3cc:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b3cf:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b3d2:	5d                   	pop    %ebp
c010b3d3:	c3                   	ret    

c010b3d4 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b3d4:	55                   	push   %ebp
c010b3d5:	89 e5                	mov    %esp,%ebp
c010b3d7:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b3da:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3dd:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3e6:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b3e9:	76 06                	jbe    c010b3f1 <iobuf_move+0x1d>
        alen = len;
c010b3eb:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b3f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b3f5:	74 57                	je     c010b44e <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b3f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3fa:	8b 00                	mov    (%eax),%eax
c010b3fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b3ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b402:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b405:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b409:	74 12                	je     c010b41d <iobuf_move+0x49>
            void *tmp = src;
c010b40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b40e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b411:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b414:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b417:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b41a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b41d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b420:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b424:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b427:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b42b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b42e:	89 04 24             	mov    %eax,(%esp)
c010b431:	e8 2f a3 00 00       	call   c0115765 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b436:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b439:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b43d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b440:	89 04 24             	mov    %eax,(%esp)
c010b443:	e8 a1 00 00 00       	call   c010b4e9 <iobuf_skip>
c010b448:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b44b:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b44e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b452:	74 08                	je     c010b45c <iobuf_move+0x88>
        *copiedp = alen;
c010b454:	8b 45 18             	mov    0x18(%ebp),%eax
c010b457:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b45a:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b45c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b460:	75 07                	jne    c010b469 <iobuf_move+0x95>
c010b462:	b8 00 00 00 00       	mov    $0x0,%eax
c010b467:	eb 05                	jmp    c010b46e <iobuf_move+0x9a>
c010b469:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b46e:	c9                   	leave  
c010b46f:	c3                   	ret    

c010b470 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b470:	55                   	push   %ebp
c010b471:	89 e5                	mov    %esp,%ebp
c010b473:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b476:	8b 45 08             	mov    0x8(%ebp),%eax
c010b479:	8b 40 0c             	mov    0xc(%eax),%eax
c010b47c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b47f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b482:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b485:	76 06                	jbe    c010b48d <iobuf_move_zeros+0x1d>
        alen = len;
c010b487:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b48a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b48d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b491:	74 34                	je     c010b4c7 <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b493:	8b 45 08             	mov    0x8(%ebp),%eax
c010b496:	8b 00                	mov    (%eax),%eax
c010b498:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b49b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b49f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b4a6:	00 
c010b4a7:	89 04 24             	mov    %eax,(%esp)
c010b4aa:	e8 77 a2 00 00       	call   c0115726 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b4af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b9:	89 04 24             	mov    %eax,(%esp)
c010b4bc:	e8 28 00 00 00       	call   c010b4e9 <iobuf_skip>
c010b4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4c4:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b4c7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b4cb:	74 08                	je     c010b4d5 <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b4cd:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b4d3:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b4d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b4d9:	75 07                	jne    c010b4e2 <iobuf_move_zeros+0x72>
c010b4db:	b8 00 00 00 00       	mov    $0x0,%eax
c010b4e0:	eb 05                	jmp    c010b4e7 <iobuf_move_zeros+0x77>
c010b4e2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b4e7:	c9                   	leave  
c010b4e8:	c3                   	ret    

c010b4e9 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b4e9:	55                   	push   %ebp
c010b4ea:	89 e5                	mov    %esp,%ebp
c010b4ec:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b4ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4f2:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b4f8:	73 24                	jae    c010b51e <iobuf_skip+0x35>
c010b4fa:	c7 44 24 0c c6 81 11 	movl   $0xc01181c6,0xc(%esp)
c010b501:	c0 
c010b502:	c7 44 24 08 d9 81 11 	movl   $0xc01181d9,0x8(%esp)
c010b509:	c0 
c010b50a:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b511:	00 
c010b512:	c7 04 24 ee 81 11 c0 	movl   $0xc01181ee,(%esp)
c010b519:	e8 aa 59 ff ff       	call   c0100ec8 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b51e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b521:	8b 10                	mov    (%eax),%edx
c010b523:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b526:	01 c2                	add    %eax,%edx
c010b528:	8b 45 08             	mov    0x8(%ebp),%eax
c010b52b:	89 10                	mov    %edx,(%eax)
c010b52d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b530:	8b 40 04             	mov    0x4(%eax),%eax
c010b533:	89 c2                	mov    %eax,%edx
c010b535:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b538:	01 d0                	add    %edx,%eax
c010b53a:	89 c2                	mov    %eax,%edx
c010b53c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b53f:	89 50 04             	mov    %edx,0x4(%eax)
c010b542:	8b 45 08             	mov    0x8(%ebp),%eax
c010b545:	8b 40 0c             	mov    0xc(%eax),%eax
c010b548:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b54b:	89 c2                	mov    %eax,%edx
c010b54d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b550:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b553:	c9                   	leave  
c010b554:	c3                   	ret    

c010b555 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b555:	55                   	push   %ebp
c010b556:	89 e5                	mov    %esp,%ebp
c010b558:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b55b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b55f:	74 25                	je     c010b586 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b561:	8b 45 08             	mov    0x8(%ebp),%eax
c010b564:	83 c0 1c             	add    $0x1c,%eax
c010b567:	89 04 24             	mov    %eax,(%esp)
c010b56a:	e8 a8 e7 ff ff       	call   c0109d17 <down>
        if (current != NULL) {
c010b56f:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010b574:	85 c0                	test   %eax,%eax
c010b576:	74 0e                	je     c010b586 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b578:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010b57d:	8b 50 04             	mov    0x4(%eax),%edx
c010b580:	8b 45 08             	mov    0x8(%ebp),%eax
c010b583:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b586:	c9                   	leave  
c010b587:	c3                   	ret    

c010b588 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b588:	55                   	push   %ebp
c010b589:	89 e5                	mov    %esp,%ebp
c010b58b:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b58e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b592:	74 18                	je     c010b5ac <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b594:	8b 45 08             	mov    0x8(%ebp),%eax
c010b597:	83 c0 1c             	add    $0x1c,%eax
c010b59a:	89 04 24             	mov    %eax,(%esp)
c010b59d:	e8 5a e7 ff ff       	call   c0109cfc <up>
        mm->locked_by = 0;
c010b5a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5a5:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b5ac:	c9                   	leave  
c010b5ad:	c3                   	ret    

c010b5ae <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b5ae:	55                   	push   %ebp
c010b5af:	89 e5                	mov    %esp,%ebp
c010b5b1:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b5b4:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010b5b9:	8b 40 18             	mov    0x18(%eax),%eax
c010b5bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b5bf:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b5c6:	e8 2c 97 ff ff       	call   c0104cf7 <kmalloc>
c010b5cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b5d2:	75 07                	jne    c010b5db <copy_path+0x2d>
        return -E_NO_MEM;
c010b5d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b5d9:	eb 66                	jmp    c010b641 <copy_path+0x93>
    }
    lock_mm(mm);
c010b5db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5de:	89 04 24             	mov    %eax,(%esp)
c010b5e1:	e8 6f ff ff ff       	call   c010b555 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b5e6:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b5ed:	00 
c010b5ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5f1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b5f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b5fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5ff:	89 04 24             	mov    %eax,(%esp)
c010b602:	e8 83 db ff ff       	call   c010918a <copy_string>
c010b607:	85 c0                	test   %eax,%eax
c010b609:	75 1e                	jne    c010b629 <copy_path+0x7b>
        unlock_mm(mm);
c010b60b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b60e:	89 04 24             	mov    %eax,(%esp)
c010b611:	e8 72 ff ff ff       	call   c010b588 <unlock_mm>
        goto failed_cleanup;
c010b616:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b617:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b61a:	89 04 24             	mov    %eax,(%esp)
c010b61d:	e8 f0 96 ff ff       	call   c0104d12 <kfree>
    return -E_INVAL;
c010b622:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b627:	eb 18                	jmp    c010b641 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b629:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b62c:	89 04 24             	mov    %eax,(%esp)
c010b62f:	e8 54 ff ff ff       	call   c010b588 <unlock_mm>
    *to = buffer;
c010b634:	8b 45 08             	mov    0x8(%ebp),%eax
c010b637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b63a:	89 10                	mov    %edx,(%eax)
    return 0;
c010b63c:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b641:	c9                   	leave  
c010b642:	c3                   	ret    

c010b643 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b643:	55                   	push   %ebp
c010b644:	89 e5                	mov    %esp,%ebp
c010b646:	83 ec 28             	sub    $0x28,%esp
    cprintf("[sysfile_open]\n");
c010b649:	c7 04 24 fe 81 11 c0 	movl   $0xc01181fe,(%esp)
c010b650:	e8 10 4d ff ff       	call   c0100365 <cprintf>
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b655:	8b 45 08             	mov    0x8(%ebp),%eax
c010b658:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b65c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b65f:	89 04 24             	mov    %eax,(%esp)
c010b662:	e8 47 ff ff ff       	call   c010b5ae <copy_path>
c010b667:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b66a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b66e:	74 05                	je     c010b675 <sysfile_open+0x32>
        return ret;
c010b670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b673:	eb 23                	jmp    c010b698 <sysfile_open+0x55>
    }
    ret = file_open(path, open_flags);
c010b675:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b678:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b67b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b67f:	89 04 24             	mov    %eax,(%esp)
c010b682:	e8 19 f1 ff ff       	call   c010a7a0 <file_open>
c010b687:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b68a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b68d:	89 04 24             	mov    %eax,(%esp)
c010b690:	e8 7d 96 ff ff       	call   c0104d12 <kfree>
    return ret;
c010b695:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b698:	c9                   	leave  
c010b699:	c3                   	ret    

c010b69a <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b69a:	55                   	push   %ebp
c010b69b:	89 e5                	mov    %esp,%ebp
c010b69d:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b6a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6a3:	89 04 24             	mov    %eax,(%esp)
c010b6a6:	e8 9e f2 ff ff       	call   c010a949 <file_close>
}
c010b6ab:	c9                   	leave  
c010b6ac:	c3                   	ret    

c010b6ad <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b6ad:	55                   	push   %ebp
c010b6ae:	89 e5                	mov    %esp,%ebp
c010b6b0:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b6b3:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010b6b8:	8b 40 18             	mov    0x18(%eax),%eax
c010b6bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b6be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b6c2:	75 0a                	jne    c010b6ce <sysfile_read+0x21>
        return 0;
c010b6c4:	b8 00 00 00 00       	mov    $0x0,%eax
c010b6c9:	e9 55 01 00 00       	jmp    c010b823 <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b6ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b6d5:	00 
c010b6d6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b6dd:	00 
c010b6de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6e1:	89 04 24             	mov    %eax,(%esp)
c010b6e4:	e8 5a f0 ff ff       	call   c010a743 <file_testfd>
c010b6e9:	85 c0                	test   %eax,%eax
c010b6eb:	75 0a                	jne    c010b6f7 <sysfile_read+0x4a>
        return -E_INVAL;
c010b6ed:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b6f2:	e9 2c 01 00 00       	jmp    c010b823 <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b6f7:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b6fe:	e8 f4 95 ff ff       	call   c0104cf7 <kmalloc>
c010b703:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b706:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b70a:	75 0a                	jne    c010b716 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b70c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b711:	e9 0d 01 00 00       	jmp    c010b823 <sysfile_read+0x176>
    }

    int ret = 0;
c010b716:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b71d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b724:	e9 d7 00 00 00       	jmp    c010b800 <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b729:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b730:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b733:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b736:	76 06                	jbe    c010b73e <sysfile_read+0x91>
            alen = len;
c010b738:	8b 45 10             	mov    0x10(%ebp),%eax
c010b73b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b73e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b741:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b744:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b748:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b74c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b74f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b753:	8b 45 08             	mov    0x8(%ebp),%eax
c010b756:	89 04 24             	mov    %eax,(%esp)
c010b759:	e8 23 f2 ff ff       	call   c010a981 <file_read>
c010b75e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b761:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b764:	85 c0                	test   %eax,%eax
c010b766:	0f 84 87 00 00 00    	je     c010b7f3 <sysfile_read+0x146>
            lock_mm(mm);
c010b76c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b76f:	89 04 24             	mov    %eax,(%esp)
c010b772:	e8 de fd ff ff       	call   c010b555 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b777:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b77a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b77e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b781:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b785:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b788:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b78c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b78f:	89 04 24             	mov    %eax,(%esp)
c010b792:	e8 1f cf ff ff       	call   c01086b6 <copy_to_user>
c010b797:	85 c0                	test   %eax,%eax
c010b799:	74 40                	je     c010b7db <sysfile_read+0x12e>
                    assert(len >= alen);
c010b79b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b79e:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b7a1:	73 24                	jae    c010b7c7 <sysfile_read+0x11a>
c010b7a3:	c7 44 24 0c 0e 82 11 	movl   $0xc011820e,0xc(%esp)
c010b7aa:	c0 
c010b7ab:	c7 44 24 08 1a 82 11 	movl   $0xc011821a,0x8(%esp)
c010b7b2:	c0 
c010b7b3:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010b7ba:	00 
c010b7bb:	c7 04 24 2f 82 11 c0 	movl   $0xc011822f,(%esp)
c010b7c2:	e8 01 57 ff ff       	call   c0100ec8 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b7c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7ca:	01 45 0c             	add    %eax,0xc(%ebp)
c010b7cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7d0:	29 45 10             	sub    %eax,0x10(%ebp)
c010b7d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7d6:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b7d9:	eb 0d                	jmp    c010b7e8 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b7db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7df:	75 07                	jne    c010b7e8 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b7e1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b7e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7eb:	89 04 24             	mov    %eax,(%esp)
c010b7ee:	e8 95 fd ff ff       	call   c010b588 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b7f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7f7:	75 11                	jne    c010b80a <sysfile_read+0x15d>
c010b7f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7fc:	85 c0                	test   %eax,%eax
c010b7fe:	74 0a                	je     c010b80a <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b800:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b804:	0f 85 1f ff ff ff    	jne    c010b729 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b80a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b80d:	89 04 24             	mov    %eax,(%esp)
c010b810:	e8 fd 94 ff ff       	call   c0104d12 <kfree>
    if (copied != 0) {
c010b815:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b819:	74 05                	je     c010b820 <sysfile_read+0x173>
        return copied;
c010b81b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b81e:	eb 03                	jmp    c010b823 <sysfile_read+0x176>
    }
    return ret;
c010b820:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b823:	c9                   	leave  
c010b824:	c3                   	ret    

c010b825 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b825:	55                   	push   %ebp
c010b826:	89 e5                	mov    %esp,%ebp
c010b828:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b82b:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010b830:	8b 40 18             	mov    0x18(%eax),%eax
c010b833:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b836:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b83a:	75 0a                	jne    c010b846 <sysfile_write+0x21>
        return 0;
c010b83c:	b8 00 00 00 00       	mov    $0x0,%eax
c010b841:	e9 57 01 00 00       	jmp    c010b99d <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b846:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b84d:	00 
c010b84e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b855:	00 
c010b856:	8b 45 08             	mov    0x8(%ebp),%eax
c010b859:	89 04 24             	mov    %eax,(%esp)
c010b85c:	e8 e2 ee ff ff       	call   c010a743 <file_testfd>
c010b861:	85 c0                	test   %eax,%eax
c010b863:	75 0a                	jne    c010b86f <sysfile_write+0x4a>
        return -E_INVAL;
c010b865:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b86a:	e9 2e 01 00 00       	jmp    c010b99d <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b86f:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b876:	e8 7c 94 ff ff       	call   c0104cf7 <kmalloc>
c010b87b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b87e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b882:	75 0a                	jne    c010b88e <sysfile_write+0x69>
        return -E_NO_MEM;
c010b884:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b889:	e9 0f 01 00 00       	jmp    c010b99d <sysfile_write+0x178>
    }

    int ret = 0;
c010b88e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b895:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b89c:	e9 d9 00 00 00       	jmp    c010b97a <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b8a1:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b8a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8ab:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b8ae:	76 06                	jbe    c010b8b6 <sysfile_write+0x91>
            alen = len;
c010b8b0:	8b 45 10             	mov    0x10(%ebp),%eax
c010b8b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b8b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8b9:	89 04 24             	mov    %eax,(%esp)
c010b8bc:	e8 94 fc ff ff       	call   c010b555 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b8c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8c4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b8cb:	00 
c010b8cc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b8d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b8d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8da:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8e1:	89 04 24             	mov    %eax,(%esp)
c010b8e4:	e8 7c cd ff ff       	call   c0108665 <copy_from_user>
c010b8e9:	85 c0                	test   %eax,%eax
c010b8eb:	75 07                	jne    c010b8f4 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b8ed:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b8f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8f7:	89 04 24             	mov    %eax,(%esp)
c010b8fa:	e8 89 fc ff ff       	call   c010b588 <unlock_mm>
        if (ret == 0) {
c010b8ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b903:	75 68                	jne    c010b96d <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b908:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b90b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b90f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b913:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b916:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b91a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b91d:	89 04 24             	mov    %eax,(%esp)
c010b920:	e8 96 f1 ff ff       	call   c010aabb <file_write>
c010b925:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b92b:	85 c0                	test   %eax,%eax
c010b92d:	74 3e                	je     c010b96d <sysfile_write+0x148>
                assert(len >= alen);
c010b92f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b932:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b935:	73 24                	jae    c010b95b <sysfile_write+0x136>
c010b937:	c7 44 24 0c 0e 82 11 	movl   $0xc011820e,0xc(%esp)
c010b93e:	c0 
c010b93f:	c7 44 24 08 1a 82 11 	movl   $0xc011821a,0x8(%esp)
c010b946:	c0 
c010b947:	c7 44 24 04 8b 00 00 	movl   $0x8b,0x4(%esp)
c010b94e:	00 
c010b94f:	c7 04 24 2f 82 11 c0 	movl   $0xc011822f,(%esp)
c010b956:	e8 6d 55 ff ff       	call   c0100ec8 <__panic>
                base += alen, len -= alen, copied += alen;
c010b95b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b95e:	01 45 0c             	add    %eax,0xc(%ebp)
c010b961:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b964:	29 45 10             	sub    %eax,0x10(%ebp)
c010b967:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b96a:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b96d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b971:	75 11                	jne    c010b984 <sysfile_write+0x15f>
c010b973:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b976:	85 c0                	test   %eax,%eax
c010b978:	74 0a                	je     c010b984 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b97a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b97e:	0f 85 1d ff ff ff    	jne    c010b8a1 <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b984:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b987:	89 04 24             	mov    %eax,(%esp)
c010b98a:	e8 83 93 ff ff       	call   c0104d12 <kfree>
    if (copied != 0) {
c010b98f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b993:	74 05                	je     c010b99a <sysfile_write+0x175>
        return copied;
c010b995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b998:	eb 03                	jmp    c010b99d <sysfile_write+0x178>
    }
    return ret;
c010b99a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b99d:	c9                   	leave  
c010b99e:	c3                   	ret    

c010b99f <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b99f:	55                   	push   %ebp
c010b9a0:	89 e5                	mov    %esp,%ebp
c010b9a2:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b9a5:	8b 45 10             	mov    0x10(%ebp),%eax
c010b9a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b9ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b9af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9b6:	89 04 24             	mov    %eax,(%esp)
c010b9b9:	e8 37 f2 ff ff       	call   c010abf5 <file_seek>
}
c010b9be:	c9                   	leave  
c010b9bf:	c3                   	ret    

c010b9c0 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b9c0:	55                   	push   %ebp
c010b9c1:	89 e5                	mov    %esp,%ebp
c010b9c3:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b9c6:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010b9cb:	8b 40 18             	mov    0x18(%eax),%eax
c010b9ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b9d1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b9d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010b9d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9da:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9e1:	89 04 24             	mov    %eax,(%esp)
c010b9e4:	e8 af f3 ff ff       	call   c010ad98 <file_fstat>
c010b9e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9f0:	74 05                	je     c010b9f7 <sysfile_fstat+0x37>
        return ret;
c010b9f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9f5:	eb 45                	jmp    c010ba3c <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010b9f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9fa:	89 04 24             	mov    %eax,(%esp)
c010b9fd:	e8 53 fb ff ff       	call   c010b555 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010ba02:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010ba09:	00 
c010ba0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba0d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba11:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba14:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba1b:	89 04 24             	mov    %eax,(%esp)
c010ba1e:	e8 93 cc ff ff       	call   c01086b6 <copy_to_user>
c010ba23:	85 c0                	test   %eax,%eax
c010ba25:	75 07                	jne    c010ba2e <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010ba27:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010ba2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba31:	89 04 24             	mov    %eax,(%esp)
c010ba34:	e8 4f fb ff ff       	call   c010b588 <unlock_mm>
    return ret;
c010ba39:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba3c:	c9                   	leave  
c010ba3d:	c3                   	ret    

c010ba3e <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010ba3e:	55                   	push   %ebp
c010ba3f:	89 e5                	mov    %esp,%ebp
c010ba41:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010ba44:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba47:	89 04 24             	mov    %eax,(%esp)
c010ba4a:	e8 08 f4 ff ff       	call   c010ae57 <file_fsync>
}
c010ba4f:	c9                   	leave  
c010ba50:	c3                   	ret    

c010ba51 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010ba51:	55                   	push   %ebp
c010ba52:	89 e5                	mov    %esp,%ebp
c010ba54:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010ba57:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba5e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba61:	89 04 24             	mov    %eax,(%esp)
c010ba64:	e8 45 fb ff ff       	call   c010b5ae <copy_path>
c010ba69:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba70:	74 05                	je     c010ba77 <sysfile_chdir+0x26>
        return ret;
c010ba72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba75:	eb 1c                	jmp    c010ba93 <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010ba77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba7a:	89 04 24             	mov    %eax,(%esp)
c010ba7d:	e8 83 4c 00 00       	call   c0110705 <vfs_chdir>
c010ba82:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010ba85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba88:	89 04 24             	mov    %eax,(%esp)
c010ba8b:	e8 82 92 ff ff       	call   c0104d12 <kfree>
    return ret;
c010ba90:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba93:	c9                   	leave  
c010ba94:	c3                   	ret    

c010ba95 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010ba95:	55                   	push   %ebp
c010ba96:	89 e5                	mov    %esp,%ebp
c010ba98:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010ba9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baa2:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010baa5:	89 04 24             	mov    %eax,(%esp)
c010baa8:	e8 01 fb ff ff       	call   c010b5ae <copy_path>
c010baad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bab0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bab4:	74 05                	je     c010babb <sysfile_link+0x26>
        return ret;
c010bab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bab9:	eb 59                	jmp    c010bb14 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010babb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010babe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bac2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bac5:	89 04 24             	mov    %eax,(%esp)
c010bac8:	e8 e1 fa ff ff       	call   c010b5ae <copy_path>
c010bacd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bad0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bad4:	74 10                	je     c010bae6 <sysfile_link+0x51>
        kfree(old_path);
c010bad6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bad9:	89 04 24             	mov    %eax,(%esp)
c010badc:	e8 31 92 ff ff       	call   c0104d12 <kfree>
        return ret;
c010bae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bae4:	eb 2e                	jmp    c010bb14 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010bae6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baec:	89 54 24 04          	mov    %edx,0x4(%esp)
c010baf0:	89 04 24             	mov    %eax,(%esp)
c010baf3:	e8 76 47 00 00       	call   c011026e <vfs_link>
c010baf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bafb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bafe:	89 04 24             	mov    %eax,(%esp)
c010bb01:	e8 0c 92 ff ff       	call   c0104d12 <kfree>
c010bb06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb09:	89 04 24             	mov    %eax,(%esp)
c010bb0c:	e8 01 92 ff ff       	call   c0104d12 <kfree>
    return ret;
c010bb11:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb14:	c9                   	leave  
c010bb15:	c3                   	ret    

c010bb16 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010bb16:	55                   	push   %ebp
c010bb17:	89 e5                	mov    %esp,%ebp
c010bb19:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bb1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb23:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bb26:	89 04 24             	mov    %eax,(%esp)
c010bb29:	e8 80 fa ff ff       	call   c010b5ae <copy_path>
c010bb2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb35:	74 05                	je     c010bb3c <sysfile_rename+0x26>
        return ret;
c010bb37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb3a:	eb 59                	jmp    c010bb95 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bb3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb43:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bb46:	89 04 24             	mov    %eax,(%esp)
c010bb49:	e8 60 fa ff ff       	call   c010b5ae <copy_path>
c010bb4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb55:	74 10                	je     c010bb67 <sysfile_rename+0x51>
        kfree(old_path);
c010bb57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb5a:	89 04 24             	mov    %eax,(%esp)
c010bb5d:	e8 b0 91 ff ff       	call   c0104d12 <kfree>
        return ret;
c010bb62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb65:	eb 2e                	jmp    c010bb95 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010bb67:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb6d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb71:	89 04 24             	mov    %eax,(%esp)
c010bb74:	e8 eb 46 00 00       	call   c0110264 <vfs_rename>
c010bb79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bb7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb7f:	89 04 24             	mov    %eax,(%esp)
c010bb82:	e8 8b 91 ff ff       	call   c0104d12 <kfree>
c010bb87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb8a:	89 04 24             	mov    %eax,(%esp)
c010bb8d:	e8 80 91 ff ff       	call   c0104d12 <kfree>
    return ret;
c010bb92:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb95:	c9                   	leave  
c010bb96:	c3                   	ret    

c010bb97 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010bb97:	55                   	push   %ebp
c010bb98:	89 e5                	mov    %esp,%ebp
c010bb9a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bb9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bba0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bba4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bba7:	89 04 24             	mov    %eax,(%esp)
c010bbaa:	e8 ff f9 ff ff       	call   c010b5ae <copy_path>
c010bbaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbb6:	74 05                	je     c010bbbd <sysfile_unlink+0x26>
        return ret;
c010bbb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbbb:	eb 1c                	jmp    c010bbd9 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010bbbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbc0:	89 04 24             	mov    %eax,(%esp)
c010bbc3:	e8 92 46 00 00       	call   c011025a <vfs_unlink>
c010bbc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bbcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbce:	89 04 24             	mov    %eax,(%esp)
c010bbd1:	e8 3c 91 ff ff       	call   c0104d12 <kfree>
    return ret;
c010bbd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bbd9:	c9                   	leave  
c010bbda:	c3                   	ret    

c010bbdb <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010bbdb:	55                   	push   %ebp
c010bbdc:	89 e5                	mov    %esp,%ebp
c010bbde:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bbe1:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010bbe6:	8b 40 18             	mov    0x18(%eax),%eax
c010bbe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010bbec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bbf0:	75 07                	jne    c010bbf9 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010bbf2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bbf7:	eb 77                	jmp    c010bc70 <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010bbf9:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010bc00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc03:	89 04 24             	mov    %eax,(%esp)
c010bc06:	e8 4a f9 ff ff       	call   c010b555 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bc0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc0e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bc15:	00 
c010bc16:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc19:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc24:	89 04 24             	mov    %eax,(%esp)
c010bc27:	e8 3b d4 ff ff       	call   c0109067 <user_mem_check>
c010bc2c:	85 c0                	test   %eax,%eax
c010bc2e:	74 32                	je     c010bc62 <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010bc30:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bc37:	00 
c010bc38:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc3b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc42:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc46:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bc49:	89 04 24             	mov    %eax,(%esp)
c010bc4c:	e8 55 f7 ff ff       	call   c010b3a6 <iobuf_init>
c010bc51:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bc54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc57:	89 04 24             	mov    %eax,(%esp)
c010bc5a:	e8 e5 4a 00 00       	call   c0110744 <vfs_getcwd>
c010bc5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bc62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc65:	89 04 24             	mov    %eax,(%esp)
c010bc68:	e8 1b f9 ff ff       	call   c010b588 <unlock_mm>
    return ret;
c010bc6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc70:	c9                   	leave  
c010bc71:	c3                   	ret    

c010bc72 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bc72:	55                   	push   %ebp
c010bc73:	89 e5                	mov    %esp,%ebp
c010bc75:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bc78:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010bc7d:	8b 40 18             	mov    0x18(%eax),%eax
c010bc80:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bc83:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bc8a:	e8 68 90 ff ff       	call   c0104cf7 <kmalloc>
c010bc8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bc92:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bc96:	75 0a                	jne    c010bca2 <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bc98:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bc9d:	e9 c2 00 00 00       	jmp    c010bd64 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bca2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcac:	89 04 24             	mov    %eax,(%esp)
c010bcaf:	e8 a1 f8 ff ff       	call   c010b555 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bcb4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bcb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcba:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bcc1:	00 
c010bcc2:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bcc9:	00 
c010bcca:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bcce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcd5:	89 04 24             	mov    %eax,(%esp)
c010bcd8:	e8 88 c9 ff ff       	call   c0108665 <copy_from_user>
c010bcdd:	85 c0                	test   %eax,%eax
c010bcdf:	75 07                	jne    c010bce8 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bce1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bceb:	89 04 24             	mov    %eax,(%esp)
c010bcee:	e8 95 f8 ff ff       	call   c010b588 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bcf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bcf7:	75 5d                	jne    c010bd56 <sysfile_getdirentry+0xe4>
c010bcf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcfc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd00:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd03:	89 04 24             	mov    %eax,(%esp)
c010bd06:	e8 04 f2 ff ff       	call   c010af0f <file_getdirentry>
c010bd0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd12:	75 42                	jne    c010bd56 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bd14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd17:	89 04 24             	mov    %eax,(%esp)
c010bd1a:	e8 36 f8 ff ff       	call   c010b555 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bd1f:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bd26:	00 
c010bd27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd2a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bd2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd31:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd38:	89 04 24             	mov    %eax,(%esp)
c010bd3b:	e8 76 c9 ff ff       	call   c01086b6 <copy_to_user>
c010bd40:	85 c0                	test   %eax,%eax
c010bd42:	75 07                	jne    c010bd4b <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bd44:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bd4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd4e:	89 04 24             	mov    %eax,(%esp)
c010bd51:	e8 32 f8 ff ff       	call   c010b588 <unlock_mm>

out:
    kfree(direntp);
c010bd56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd59:	89 04 24             	mov    %eax,(%esp)
c010bd5c:	e8 b1 8f ff ff       	call   c0104d12 <kfree>
    return ret;
c010bd61:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bd64:	c9                   	leave  
c010bd65:	c3                   	ret    

c010bd66 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bd66:	55                   	push   %ebp
c010bd67:	89 e5                	mov    %esp,%ebp
c010bd69:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bd6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd73:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd76:	89 04 24             	mov    %eax,(%esp)
c010bd79:	e8 9f f2 ff ff       	call   c010b01d <file_dup>
}
c010bd7e:	c9                   	leave  
c010bd7f:	c3                   	ret    

c010bd80 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010bd80:	55                   	push   %ebp
c010bd81:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bd83:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bd88:	5d                   	pop    %ebp
c010bd89:	c3                   	ret    

c010bd8a <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010bd8a:	55                   	push   %ebp
c010bd8b:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bd8d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bd92:	5d                   	pop    %ebp
c010bd93:	c3                   	ret    

c010bd94 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bd94:	52                   	push   %edx
    call *%ebx              # call fn
c010bd95:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bd97:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bd98:	e8 2e 0e 00 00       	call   c010cbcb <do_exit>

c010bd9d <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bd9d:	55                   	push   %ebp
c010bd9e:	89 e5                	mov    %esp,%ebp
c010bda0:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bda3:	8b 55 10             	mov    0x10(%ebp),%edx
c010bda6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bda9:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bdab:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdae:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bdb1:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bdb4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdb7:	83 c0 08             	add    $0x8,%eax
c010bdba:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bdbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdc0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bdc3:	89 50 04             	mov    %edx,0x4(%eax)
c010bdc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdc9:	8b 50 04             	mov    0x4(%eax),%edx
c010bdcc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdcf:	89 10                	mov    %edx,(%eax)
    return timer;
c010bdd1:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bdd4:	c9                   	leave  
c010bdd5:	c3                   	ret    

c010bdd6 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010bdd6:	55                   	push   %ebp
c010bdd7:	89 e5                	mov    %esp,%ebp
c010bdd9:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bddc:	9c                   	pushf  
c010bddd:	58                   	pop    %eax
c010bdde:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bde1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bde4:	25 00 02 00 00       	and    $0x200,%eax
c010bde9:	85 c0                	test   %eax,%eax
c010bdeb:	74 0c                	je     c010bdf9 <__intr_save+0x23>
        intr_disable();
c010bded:	e8 50 63 ff ff       	call   c0102142 <intr_disable>
        return 1;
c010bdf2:	b8 01 00 00 00       	mov    $0x1,%eax
c010bdf7:	eb 05                	jmp    c010bdfe <__intr_save+0x28>
    }
    return 0;
c010bdf9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bdfe:	c9                   	leave  
c010bdff:	c3                   	ret    

c010be00 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010be00:	55                   	push   %ebp
c010be01:	89 e5                	mov    %esp,%ebp
c010be03:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010be06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be0a:	74 05                	je     c010be11 <__intr_restore+0x11>
        intr_enable();
c010be0c:	e8 2b 63 ff ff       	call   c010213c <intr_enable>
    }
}
c010be11:	c9                   	leave  
c010be12:	c3                   	ret    

c010be13 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010be13:	55                   	push   %ebp
c010be14:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010be16:	8b 55 08             	mov    0x8(%ebp),%edx
c010be19:	a1 28 40 15 c0       	mov    0xc0154028,%eax
c010be1e:	29 c2                	sub    %eax,%edx
c010be20:	89 d0                	mov    %edx,%eax
c010be22:	c1 f8 02             	sar    $0x2,%eax
c010be25:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010be2b:	5d                   	pop    %ebp
c010be2c:	c3                   	ret    

c010be2d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010be2d:	55                   	push   %ebp
c010be2e:	89 e5                	mov    %esp,%ebp
c010be30:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010be33:	8b 45 08             	mov    0x8(%ebp),%eax
c010be36:	89 04 24             	mov    %eax,(%esp)
c010be39:	e8 d5 ff ff ff       	call   c010be13 <page2ppn>
c010be3e:	c1 e0 0c             	shl    $0xc,%eax
}
c010be41:	c9                   	leave  
c010be42:	c3                   	ret    

c010be43 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010be43:	55                   	push   %ebp
c010be44:	89 e5                	mov    %esp,%ebp
c010be46:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010be49:	8b 45 08             	mov    0x8(%ebp),%eax
c010be4c:	c1 e8 0c             	shr    $0xc,%eax
c010be4f:	89 c2                	mov    %eax,%edx
c010be51:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c010be56:	39 c2                	cmp    %eax,%edx
c010be58:	72 1c                	jb     c010be76 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010be5a:	c7 44 24 08 44 82 11 	movl   $0xc0118244,0x8(%esp)
c010be61:	c0 
c010be62:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010be69:	00 
c010be6a:	c7 04 24 63 82 11 c0 	movl   $0xc0118263,(%esp)
c010be71:	e8 52 50 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010be76:	8b 0d 28 40 15 c0    	mov    0xc0154028,%ecx
c010be7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be7f:	c1 e8 0c             	shr    $0xc,%eax
c010be82:	89 c2                	mov    %eax,%edx
c010be84:	89 d0                	mov    %edx,%eax
c010be86:	c1 e0 03             	shl    $0x3,%eax
c010be89:	01 d0                	add    %edx,%eax
c010be8b:	c1 e0 02             	shl    $0x2,%eax
c010be8e:	01 c8                	add    %ecx,%eax
}
c010be90:	c9                   	leave  
c010be91:	c3                   	ret    

c010be92 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010be92:	55                   	push   %ebp
c010be93:	89 e5                	mov    %esp,%ebp
c010be95:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010be98:	8b 45 08             	mov    0x8(%ebp),%eax
c010be9b:	89 04 24             	mov    %eax,(%esp)
c010be9e:	e8 8a ff ff ff       	call   c010be2d <page2pa>
c010bea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bea9:	c1 e8 0c             	shr    $0xc,%eax
c010beac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010beaf:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c010beb4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010beb7:	72 23                	jb     c010bedc <page2kva+0x4a>
c010beb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bebc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bec0:	c7 44 24 08 74 82 11 	movl   $0xc0118274,0x8(%esp)
c010bec7:	c0 
c010bec8:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010becf:	00 
c010bed0:	c7 04 24 63 82 11 c0 	movl   $0xc0118263,(%esp)
c010bed7:	e8 ec 4f ff ff       	call   c0100ec8 <__panic>
c010bedc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bedf:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bee4:	c9                   	leave  
c010bee5:	c3                   	ret    

c010bee6 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bee6:	55                   	push   %ebp
c010bee7:	89 e5                	mov    %esp,%ebp
c010bee9:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010beec:	8b 45 08             	mov    0x8(%ebp),%eax
c010beef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bef2:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bef9:	77 23                	ja     c010bf1e <kva2page+0x38>
c010befb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010befe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf02:	c7 44 24 08 98 82 11 	movl   $0xc0118298,0x8(%esp)
c010bf09:	c0 
c010bf0a:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bf11:	00 
c010bf12:	c7 04 24 63 82 11 c0 	movl   $0xc0118263,(%esp)
c010bf19:	e8 aa 4f ff ff       	call   c0100ec8 <__panic>
c010bf1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf21:	05 00 00 00 40       	add    $0x40000000,%eax
c010bf26:	89 04 24             	mov    %eax,(%esp)
c010bf29:	e8 15 ff ff ff       	call   c010be43 <pa2page>
}
c010bf2e:	c9                   	leave  
c010bf2f:	c3                   	ret    

c010bf30 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010bf30:	55                   	push   %ebp
c010bf31:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010bf33:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf36:	8b 40 18             	mov    0x18(%eax),%eax
c010bf39:	8d 50 01             	lea    0x1(%eax),%edx
c010bf3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf3f:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bf42:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf45:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bf48:	5d                   	pop    %ebp
c010bf49:	c3                   	ret    

c010bf4a <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010bf4a:	55                   	push   %ebp
c010bf4b:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010bf4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf50:	8b 40 18             	mov    0x18(%eax),%eax
c010bf53:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bf56:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf59:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bf5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf5f:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bf62:	5d                   	pop    %ebp
c010bf63:	c3                   	ret    

c010bf64 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010bf64:	55                   	push   %ebp
c010bf65:	89 e5                	mov    %esp,%ebp
c010bf67:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bf6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf6e:	74 25                	je     c010bf95 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010bf70:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf73:	83 c0 1c             	add    $0x1c,%eax
c010bf76:	89 04 24             	mov    %eax,(%esp)
c010bf79:	e8 99 dd ff ff       	call   c0109d17 <down>
        if (current != NULL) {
c010bf7e:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010bf83:	85 c0                	test   %eax,%eax
c010bf85:	74 0e                	je     c010bf95 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010bf87:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010bf8c:	8b 50 04             	mov    0x4(%eax),%edx
c010bf8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf92:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010bf95:	c9                   	leave  
c010bf96:	c3                   	ret    

c010bf97 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010bf97:	55                   	push   %ebp
c010bf98:	89 e5                	mov    %esp,%ebp
c010bf9a:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bf9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bfa1:	74 18                	je     c010bfbb <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010bfa3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfa6:	83 c0 1c             	add    $0x1c,%eax
c010bfa9:	89 04 24             	mov    %eax,(%esp)
c010bfac:	e8 4b dd ff ff       	call   c0109cfc <up>
        mm->locked_by = 0;
c010bfb1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb4:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010bfbb:	c9                   	leave  
c010bfbc:	c3                   	ret    

c010bfbd <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010bfbd:	55                   	push   %ebp
c010bfbe:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010bfc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfc3:	8b 40 08             	mov    0x8(%eax),%eax
c010bfc6:	8d 50 01             	lea    0x1(%eax),%edx
c010bfc9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfcc:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bfcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd2:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bfd5:	5d                   	pop    %ebp
c010bfd6:	c3                   	ret    

c010bfd7 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010bfd7:	55                   	push   %ebp
c010bfd8:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010bfda:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfdd:	8b 40 08             	mov    0x8(%eax),%eax
c010bfe0:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bfe3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfe6:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bfe9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfec:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bfef:	5d                   	pop    %ebp
c010bff0:	c3                   	ret    

c010bff1 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010bff1:	55                   	push   %ebp
c010bff2:	89 e5                	mov    %esp,%ebp
c010bff4:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010bff7:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010bffe:	e8 f4 8c ff ff       	call   c0104cf7 <kmalloc>
c010c003:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010c006:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c00a:	0f 84 70 01 00 00    	je     c010c180 <alloc_proc+0x18f>
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c010c010:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c013:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010c019:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c01c:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010c023:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c026:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010c02d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c030:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010c037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c03a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010c041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c044:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010c04b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c04e:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010c055:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c058:	83 c0 1c             	add    $0x1c,%eax
c010c05b:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010c062:	00 
c010c063:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c06a:	00 
c010c06b:	89 04 24             	mov    %eax,(%esp)
c010c06e:	e8 b3 96 00 00       	call   c0115726 <memset>
        proc->tf = NULL;
c010c073:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c076:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010c07d:	8b 15 24 40 15 c0    	mov    0xc0154024,%edx
c010c083:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c086:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010c089:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c08c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010c093:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c096:	83 c0 48             	add    $0x48,%eax
c010c099:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c0a0:	00 
c010c0a1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0a8:	00 
c010c0a9:	89 04 24             	mov    %eax,(%esp)
c010c0ac:	e8 75 96 00 00       	call   c0115726 <memset>
        proc->wait_state = 0;
c010c0b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0b4:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c0bb:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010c0be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0c1:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c0c8:	00 00 00 
c010c0cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0ce:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010c0d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0d7:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c0dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e0:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010c0e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e9:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c010c0ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0f2:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010c0f9:	00 00 00 
        proc->run_link.prev = proc->run_link.next = NULL;
c010c0fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0ff:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
c010c106:	00 00 00 
c010c109:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c10c:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
c010c112:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c115:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
        proc->time_slice = 0;
c010c11b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c11e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010c125:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010c128:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c12b:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010c132:	00 00 00 
c010c135:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c138:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010c13e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c141:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010c147:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c14a:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010c150:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c153:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010c159:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c15c:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010c163:	00 00 00 
        proc->lab6_priority = 0;
c010c166:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c169:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c170:	00 00 00 
        proc->filesp = NULL;
c010c173:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c176:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c17d:	00 00 00 
    }
    return proc;
c010c180:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c183:	c9                   	leave  
c010c184:	c3                   	ret    

c010c185 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c185:	55                   	push   %ebp
c010c186:	89 e5                	mov    %esp,%ebp
c010c188:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c18b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c18e:	83 c0 48             	add    $0x48,%eax
c010c191:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c198:	00 
c010c199:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c1a0:	00 
c010c1a1:	89 04 24             	mov    %eax,(%esp)
c010c1a4:	e8 7d 95 00 00       	call   c0115726 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c1a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ac:	8d 50 48             	lea    0x48(%eax),%edx
c010c1af:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c1b6:	00 
c010c1b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1be:	89 14 24             	mov    %edx,(%esp)
c010c1c1:	e8 42 96 00 00       	call   c0115808 <memcpy>
}
c010c1c6:	c9                   	leave  
c010c1c7:	c3                   	ret    

c010c1c8 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c1c8:	55                   	push   %ebp
c010c1c9:	89 e5                	mov    %esp,%ebp
c010c1cb:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c1ce:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c1d5:	00 
c010c1d6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c1dd:	00 
c010c1de:	c7 04 24 60 2f 15 c0 	movl   $0xc0152f60,(%esp)
c010c1e5:	e8 3c 95 00 00       	call   c0115726 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c1ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ed:	83 c0 48             	add    $0x48,%eax
c010c1f0:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c1f7:	00 
c010c1f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1fc:	c7 04 24 60 2f 15 c0 	movl   $0xc0152f60,(%esp)
c010c203:	e8 00 96 00 00       	call   c0115808 <memcpy>
}
c010c208:	c9                   	leave  
c010c209:	c3                   	ret    

c010c20a <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c20a:	55                   	push   %ebp
c010c20b:	89 e5                	mov    %esp,%ebp
c010c20d:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c210:	8b 45 08             	mov    0x8(%ebp),%eax
c010c213:	83 c0 7c             	add    $0x7c,%eax
c010c216:	c7 45 fc fc 41 15 c0 	movl   $0xc01541fc,-0x4(%ebp)
c010c21d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c220:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c223:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c226:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c229:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c22c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c22f:	8b 40 04             	mov    0x4(%eax),%eax
c010c232:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c235:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c238:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c23b:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c23e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c244:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c247:	89 10                	mov    %edx,(%eax)
c010c249:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c24c:	8b 10                	mov    (%eax),%edx
c010c24e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c251:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c254:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c257:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c25a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c25d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c260:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c263:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c265:	8b 45 08             	mov    0x8(%ebp),%eax
c010c268:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c26f:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c272:	8b 45 08             	mov    0x8(%ebp),%eax
c010c275:	8b 40 14             	mov    0x14(%eax),%eax
c010c278:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c27e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c281:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c287:	8b 45 08             	mov    0x8(%ebp),%eax
c010c28a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c290:	85 c0                	test   %eax,%eax
c010c292:	74 12                	je     c010c2a6 <set_links+0x9c>
        proc->optr->yptr = proc;
c010c294:	8b 45 08             	mov    0x8(%ebp),%eax
c010c297:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c29d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2a0:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2a9:	8b 40 14             	mov    0x14(%eax),%eax
c010c2ac:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2af:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c2b5:	a1 40 2f 15 c0       	mov    0xc0152f40,%eax
c010c2ba:	83 c0 01             	add    $0x1,%eax
c010c2bd:	a3 40 2f 15 c0       	mov    %eax,0xc0152f40
}
c010c2c2:	c9                   	leave  
c010c2c3:	c3                   	ret    

c010c2c4 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c2c4:	55                   	push   %ebp
c010c2c5:	89 e5                	mov    %esp,%ebp
c010c2c7:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c2ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2cd:	83 c0 7c             	add    $0x7c,%eax
c010c2d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c2d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2d6:	8b 40 04             	mov    0x4(%eax),%eax
c010c2d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c2dc:	8b 12                	mov    (%edx),%edx
c010c2de:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c2e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c2e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c2e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2ea:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c2ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2f0:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c2f3:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c2f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c2fe:	85 c0                	test   %eax,%eax
c010c300:	74 18                	je     c010c31a <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c302:	8b 45 08             	mov    0x8(%ebp),%eax
c010c305:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c30b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c30e:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c314:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c31a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c31d:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c323:	85 c0                	test   %eax,%eax
c010c325:	74 1a                	je     c010c341 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c327:	8b 45 08             	mov    0x8(%ebp),%eax
c010c32a:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c330:	8b 55 08             	mov    0x8(%ebp),%edx
c010c333:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c339:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c33f:	eb 15                	jmp    c010c356 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c341:	8b 45 08             	mov    0x8(%ebp),%eax
c010c344:	8b 40 14             	mov    0x14(%eax),%eax
c010c347:	8b 55 08             	mov    0x8(%ebp),%edx
c010c34a:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c350:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c356:	a1 40 2f 15 c0       	mov    0xc0152f40,%eax
c010c35b:	83 e8 01             	sub    $0x1,%eax
c010c35e:	a3 40 2f 15 c0       	mov    %eax,0xc0152f40
}
c010c363:	c9                   	leave  
c010c364:	c3                   	ret    

c010c365 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c365:	55                   	push   %ebp
c010c366:	89 e5                	mov    %esp,%ebp
c010c368:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c36b:	c7 45 f8 fc 41 15 c0 	movl   $0xc01541fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c372:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c377:	83 c0 01             	add    $0x1,%eax
c010c37a:	a3 84 fa 14 c0       	mov    %eax,0xc014fa84
c010c37f:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c384:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c389:	7e 0c                	jle    c010c397 <get_pid+0x32>
        last_pid = 1;
c010c38b:	c7 05 84 fa 14 c0 01 	movl   $0x1,0xc014fa84
c010c392:	00 00 00 
        goto inside;
c010c395:	eb 13                	jmp    c010c3aa <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c397:	8b 15 84 fa 14 c0    	mov    0xc014fa84,%edx
c010c39d:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c3a2:	39 c2                	cmp    %eax,%edx
c010c3a4:	0f 8c ac 00 00 00    	jl     c010c456 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c3aa:	c7 05 88 fa 14 c0 00 	movl   $0x2000,0xc014fa88
c010c3b1:	20 00 00 
    repeat:
        le = list;
c010c3b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c3ba:	eb 7f                	jmp    c010c43b <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c3bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3bf:	83 e8 7c             	sub    $0x7c,%eax
c010c3c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c3c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3c8:	8b 50 04             	mov    0x4(%eax),%edx
c010c3cb:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3d0:	39 c2                	cmp    %eax,%edx
c010c3d2:	75 3e                	jne    c010c412 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c3d4:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3d9:	83 c0 01             	add    $0x1,%eax
c010c3dc:	a3 84 fa 14 c0       	mov    %eax,0xc014fa84
c010c3e1:	8b 15 84 fa 14 c0    	mov    0xc014fa84,%edx
c010c3e7:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c3ec:	39 c2                	cmp    %eax,%edx
c010c3ee:	7c 4b                	jl     c010c43b <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c3f0:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3f5:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c3fa:	7e 0a                	jle    c010c406 <get_pid+0xa1>
                        last_pid = 1;
c010c3fc:	c7 05 84 fa 14 c0 01 	movl   $0x1,0xc014fa84
c010c403:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c406:	c7 05 88 fa 14 c0 00 	movl   $0x2000,0xc014fa88
c010c40d:	20 00 00 
                    goto repeat;
c010c410:	eb a2                	jmp    c010c3b4 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c412:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c415:	8b 50 04             	mov    0x4(%eax),%edx
c010c418:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c41d:	39 c2                	cmp    %eax,%edx
c010c41f:	7e 1a                	jle    c010c43b <get_pid+0xd6>
c010c421:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c424:	8b 50 04             	mov    0x4(%eax),%edx
c010c427:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c42c:	39 c2                	cmp    %eax,%edx
c010c42e:	7d 0b                	jge    c010c43b <get_pid+0xd6>
                next_safe = proc->pid;
c010c430:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c433:	8b 40 04             	mov    0x4(%eax),%eax
c010c436:	a3 88 fa 14 c0       	mov    %eax,0xc014fa88
c010c43b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c43e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c441:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c444:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c447:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c44a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c44d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c450:	0f 85 66 ff ff ff    	jne    c010c3bc <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c456:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
}
c010c45b:	c9                   	leave  
c010c45c:	c3                   	ret    

c010c45d <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c45d:	55                   	push   %ebp
c010c45e:	89 e5                	mov    %esp,%ebp
c010c460:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c463:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010c468:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c46b:	74 63                	je     c010c4d0 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c46d:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010c472:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c475:	8b 45 08             	mov    0x8(%ebp),%eax
c010c478:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c47b:	e8 56 f9 ff ff       	call   c010bdd6 <__intr_save>
c010c480:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c483:	8b 45 08             	mov    0x8(%ebp),%eax
c010c486:	a3 28 0f 15 c0       	mov    %eax,0xc0150f28
            load_esp0(next->kstack + KSTACKSIZE);
c010c48b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c48e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c491:	05 00 20 00 00       	add    $0x2000,%eax
c010c496:	89 04 24             	mov    %eax,(%esp)
c010c499:	e8 90 8b ff ff       	call   c010502e <load_esp0>
            lcr3(next->cr3);
c010c49e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4a1:	8b 40 40             	mov    0x40(%eax),%eax
c010c4a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c4a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4aa:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c4ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4b0:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c4b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4b6:	83 c0 1c             	add    $0x1c,%eax
c010c4b9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c4bd:	89 04 24             	mov    %eax,(%esp)
c010c4c0:	e8 bc 1c 00 00       	call   c010e181 <switch_to>
        }
        local_intr_restore(intr_flag);
c010c4c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4c8:	89 04 24             	mov    %eax,(%esp)
c010c4cb:	e8 30 f9 ff ff       	call   c010be00 <__intr_restore>
    }
}
c010c4d0:	c9                   	leave  
c010c4d1:	c3                   	ret    

c010c4d2 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c4d2:	55                   	push   %ebp
c010c4d3:	89 e5                	mov    %esp,%ebp
c010c4d5:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c4d8:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010c4dd:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c4e0:	89 04 24             	mov    %eax,(%esp)
c010c4e3:	e8 52 66 ff ff       	call   c0102b3a <forkrets>
}
c010c4e8:	c9                   	leave  
c010c4e9:	c3                   	ret    

c010c4ea <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c4ea:	55                   	push   %ebp
c010c4eb:	89 e5                	mov    %esp,%ebp
c010c4ed:	53                   	push   %ebx
c010c4ee:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c4f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4f4:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c4fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4fd:	8b 40 04             	mov    0x4(%eax),%eax
c010c500:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c507:	00 
c010c508:	89 04 24             	mov    %eax,(%esp)
c010c50b:	e8 bc 86 00 00       	call   c0114bcc <hash32>
c010c510:	c1 e0 03             	shl    $0x3,%eax
c010c513:	05 40 0f 15 c0       	add    $0xc0150f40,%eax
c010c518:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c51b:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c51e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c521:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c524:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c527:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c52a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c52d:	8b 40 04             	mov    0x4(%eax),%eax
c010c530:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c533:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c536:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c539:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c53c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c53f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c542:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c545:	89 10                	mov    %edx,(%eax)
c010c547:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c54a:	8b 10                	mov    (%eax),%edx
c010c54c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c54f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c555:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c558:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c55b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c55e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c561:	89 10                	mov    %edx,(%eax)
}
c010c563:	83 c4 34             	add    $0x34,%esp
c010c566:	5b                   	pop    %ebx
c010c567:	5d                   	pop    %ebp
c010c568:	c3                   	ret    

c010c569 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c569:	55                   	push   %ebp
c010c56a:	89 e5                	mov    %esp,%ebp
c010c56c:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c56f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c572:	05 84 00 00 00       	add    $0x84,%eax
c010c577:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c57a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c57d:	8b 40 04             	mov    0x4(%eax),%eax
c010c580:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c583:	8b 12                	mov    (%edx),%edx
c010c585:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c588:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c58b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c58e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c591:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c594:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c597:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c59a:	89 10                	mov    %edx,(%eax)
}
c010c59c:	c9                   	leave  
c010c59d:	c3                   	ret    

c010c59e <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c59e:	55                   	push   %ebp
c010c59f:	89 e5                	mov    %esp,%ebp
c010c5a1:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c5a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c5a8:	7e 61                	jle    c010c60b <find_proc+0x6d>
c010c5aa:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c5b1:	7f 58                	jg     c010c60b <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c5b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5b6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c5bd:	00 
c010c5be:	89 04 24             	mov    %eax,(%esp)
c010c5c1:	e8 06 86 00 00       	call   c0114bcc <hash32>
c010c5c6:	c1 e0 03             	shl    $0x3,%eax
c010c5c9:	05 40 0f 15 c0       	add    $0xc0150f40,%eax
c010c5ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c5d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c5d7:	eb 1b                	jmp    c010c5f4 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c5d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5dc:	2d 84 00 00 00       	sub    $0x84,%eax
c010c5e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c5e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5e7:	8b 40 04             	mov    0x4(%eax),%eax
c010c5ea:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c5ed:	75 05                	jne    c010c5f4 <find_proc+0x56>
                return proc;
c010c5ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5f2:	eb 1c                	jmp    c010c610 <find_proc+0x72>
c010c5f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c5fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5fd:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c600:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c606:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c609:	75 ce                	jne    c010c5d9 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c60b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c610:	c9                   	leave  
c010c611:	c3                   	ret    

c010c612 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c612:	55                   	push   %ebp
c010c613:	89 e5                	mov    %esp,%ebp
c010c615:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c618:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c61f:	00 
c010c620:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c627:	00 
c010c628:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c62b:	89 04 24             	mov    %eax,(%esp)
c010c62e:	e8 f3 90 00 00       	call   c0115726 <memset>
    tf.tf_cs = KERNEL_CS;
c010c633:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c639:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c63f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c643:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c647:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c64b:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c64f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c652:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c655:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c658:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c65b:	b8 94 bd 10 c0       	mov    $0xc010bd94,%eax
c010c660:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c663:	8b 45 10             	mov    0x10(%ebp),%eax
c010c666:	80 cc 01             	or     $0x1,%ah
c010c669:	89 c2                	mov    %eax,%edx
c010c66b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c66e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c672:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c679:	00 
c010c67a:	89 14 24             	mov    %edx,(%esp)
c010c67d:	e8 0e 04 00 00       	call   c010ca90 <do_fork>
}
c010c682:	c9                   	leave  
c010c683:	c3                   	ret    

c010c684 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c684:	55                   	push   %ebp
c010c685:	89 e5                	mov    %esp,%ebp
c010c687:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c68a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c691:	e8 e6 8a ff ff       	call   c010517c <alloc_pages>
c010c696:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c699:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c69d:	74 1a                	je     c010c6b9 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c69f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6a2:	89 04 24             	mov    %eax,(%esp)
c010c6a5:	e8 e8 f7 ff ff       	call   c010be92 <page2kva>
c010c6aa:	89 c2                	mov    %eax,%edx
c010c6ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6af:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c6b2:	b8 00 00 00 00       	mov    $0x0,%eax
c010c6b7:	eb 05                	jmp    c010c6be <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c6b9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c6be:	c9                   	leave  
c010c6bf:	c3                   	ret    

c010c6c0 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c6c0:	55                   	push   %ebp
c010c6c1:	89 e5                	mov    %esp,%ebp
c010c6c3:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c6c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6c9:	8b 40 0c             	mov    0xc(%eax),%eax
c010c6cc:	89 04 24             	mov    %eax,(%esp)
c010c6cf:	e8 12 f8 ff ff       	call   c010bee6 <kva2page>
c010c6d4:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c6db:	00 
c010c6dc:	89 04 24             	mov    %eax,(%esp)
c010c6df:	e8 03 8b ff ff       	call   c01051e7 <free_pages>
}
c010c6e4:	c9                   	leave  
c010c6e5:	c3                   	ret    

c010c6e6 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c6e6:	55                   	push   %ebp
c010c6e7:	89 e5                	mov    %esp,%ebp
c010c6e9:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c6ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c6f3:	e8 84 8a ff ff       	call   c010517c <alloc_pages>
c010c6f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c6fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c6ff:	75 0a                	jne    c010c70b <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c701:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c706:	e9 80 00 00 00       	jmp    c010c78b <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c70b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c70e:	89 04 24             	mov    %eax,(%esp)
c010c711:	e8 7c f7 ff ff       	call   c010be92 <page2kva>
c010c716:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c719:	a1 84 0e 15 c0       	mov    0xc0150e84,%eax
c010c71e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c725:	00 
c010c726:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c72a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c72d:	89 04 24             	mov    %eax,(%esp)
c010c730:	e8 d3 90 00 00       	call   c0115808 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c738:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c73e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c741:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c744:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c74b:	77 23                	ja     c010c770 <setup_pgdir+0x8a>
c010c74d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c750:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c754:	c7 44 24 08 98 82 11 	movl   $0xc0118298,0x8(%esp)
c010c75b:	c0 
c010c75c:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010c763:	00 
c010c764:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010c76b:	e8 58 47 ff ff       	call   c0100ec8 <__panic>
c010c770:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c773:	05 00 00 00 40       	add    $0x40000000,%eax
c010c778:	83 c8 03             	or     $0x3,%eax
c010c77b:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c77d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c780:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c783:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c786:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c78b:	c9                   	leave  
c010c78c:	c3                   	ret    

c010c78d <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c78d:	55                   	push   %ebp
c010c78e:	89 e5                	mov    %esp,%ebp
c010c790:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c793:	8b 45 08             	mov    0x8(%ebp),%eax
c010c796:	8b 40 0c             	mov    0xc(%eax),%eax
c010c799:	89 04 24             	mov    %eax,(%esp)
c010c79c:	e8 45 f7 ff ff       	call   c010bee6 <kva2page>
c010c7a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c7a8:	00 
c010c7a9:	89 04 24             	mov    %eax,(%esp)
c010c7ac:	e8 36 8a ff ff       	call   c01051e7 <free_pages>
}
c010c7b1:	c9                   	leave  
c010c7b2:	c3                   	ret    

c010c7b3 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c7b3:	55                   	push   %ebp
c010c7b4:	89 e5                	mov    %esp,%ebp
c010c7b6:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c7b9:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010c7be:	8b 40 18             	mov    0x18(%eax),%eax
c010c7c1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c7c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c7c8:	75 0a                	jne    c010c7d4 <copy_mm+0x21>
        return 0;
c010c7ca:	b8 00 00 00 00       	mov    $0x0,%eax
c010c7cf:	e9 f9 00 00 00       	jmp    c010c8cd <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c7d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7d7:	25 00 01 00 00       	and    $0x100,%eax
c010c7dc:	85 c0                	test   %eax,%eax
c010c7de:	74 08                	je     c010c7e8 <copy_mm+0x35>
        mm = oldmm;
c010c7e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c7e6:	eb 78                	jmp    c010c860 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c7e8:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c7ef:	e8 75 b7 ff ff       	call   c0107f69 <mm_create>
c010c7f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c7f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c7fb:	75 05                	jne    c010c802 <copy_mm+0x4f>
        goto bad_mm;
c010c7fd:	e9 c8 00 00 00       	jmp    c010c8ca <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c802:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c805:	89 04 24             	mov    %eax,(%esp)
c010c808:	e8 d9 fe ff ff       	call   c010c6e6 <setup_pgdir>
c010c80d:	85 c0                	test   %eax,%eax
c010c80f:	74 05                	je     c010c816 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c811:	e9 a9 00 00 00       	jmp    c010c8bf <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c816:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c819:	89 04 24             	mov    %eax,(%esp)
c010c81c:	e8 43 f7 ff ff       	call   c010bf64 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c821:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c824:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c828:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c82b:	89 04 24             	mov    %eax,(%esp)
c010c82e:	e8 59 bc ff ff       	call   c010848c <dup_mmap>
c010c833:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c836:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c839:	89 04 24             	mov    %eax,(%esp)
c010c83c:	e8 56 f7 ff ff       	call   c010bf97 <unlock_mm>

    if (ret != 0) {
c010c841:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c845:	74 19                	je     c010c860 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c847:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c84b:	89 04 24             	mov    %eax,(%esp)
c010c84e:	e8 3a bd ff ff       	call   c010858d <exit_mmap>
    put_pgdir(mm);
c010c853:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c856:	89 04 24             	mov    %eax,(%esp)
c010c859:	e8 2f ff ff ff       	call   c010c78d <put_pgdir>
c010c85e:	eb 5f                	jmp    c010c8bf <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c860:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c863:	89 04 24             	mov    %eax,(%esp)
c010c866:	e8 c5 f6 ff ff       	call   c010bf30 <mm_count_inc>
    proc->mm = mm;
c010c86b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c86e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c871:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c874:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c877:	8b 40 0c             	mov    0xc(%eax),%eax
c010c87a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c87d:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c884:	77 23                	ja     c010c8a9 <copy_mm+0xf6>
c010c886:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c889:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c88d:	c7 44 24 08 98 82 11 	movl   $0xc0118298,0x8(%esp)
c010c894:	c0 
c010c895:	c7 44 24 04 68 01 00 	movl   $0x168,0x4(%esp)
c010c89c:	00 
c010c89d:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010c8a4:	e8 1f 46 ff ff       	call   c0100ec8 <__panic>
c010c8a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8ac:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c8b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8b5:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c8b8:	b8 00 00 00 00       	mov    $0x0,%eax
c010c8bd:	eb 0e                	jmp    c010c8cd <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c8bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8c2:	89 04 24             	mov    %eax,(%esp)
c010c8c5:	e8 04 ba ff ff       	call   c01082ce <mm_destroy>
bad_mm:
    return ret;
c010c8ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c8cd:	c9                   	leave  
c010c8ce:	c3                   	ret    

c010c8cf <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c8cf:	55                   	push   %ebp
c010c8d0:	89 e5                	mov    %esp,%ebp
c010c8d2:	57                   	push   %edi
c010c8d3:	56                   	push   %esi
c010c8d4:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c8d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8d8:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8db:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c8e0:	89 c2                	mov    %eax,%edx
c010c8e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8e5:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c8e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8eb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8ee:	8b 55 10             	mov    0x10(%ebp),%edx
c010c8f1:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c8f6:	89 c1                	mov    %eax,%ecx
c010c8f8:	83 e1 01             	and    $0x1,%ecx
c010c8fb:	85 c9                	test   %ecx,%ecx
c010c8fd:	74 0e                	je     c010c90d <copy_thread+0x3e>
c010c8ff:	0f b6 0a             	movzbl (%edx),%ecx
c010c902:	88 08                	mov    %cl,(%eax)
c010c904:	83 c0 01             	add    $0x1,%eax
c010c907:	83 c2 01             	add    $0x1,%edx
c010c90a:	83 eb 01             	sub    $0x1,%ebx
c010c90d:	89 c1                	mov    %eax,%ecx
c010c90f:	83 e1 02             	and    $0x2,%ecx
c010c912:	85 c9                	test   %ecx,%ecx
c010c914:	74 0f                	je     c010c925 <copy_thread+0x56>
c010c916:	0f b7 0a             	movzwl (%edx),%ecx
c010c919:	66 89 08             	mov    %cx,(%eax)
c010c91c:	83 c0 02             	add    $0x2,%eax
c010c91f:	83 c2 02             	add    $0x2,%edx
c010c922:	83 eb 02             	sub    $0x2,%ebx
c010c925:	89 d9                	mov    %ebx,%ecx
c010c927:	c1 e9 02             	shr    $0x2,%ecx
c010c92a:	89 c7                	mov    %eax,%edi
c010c92c:	89 d6                	mov    %edx,%esi
c010c92e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c930:	89 f2                	mov    %esi,%edx
c010c932:	89 f8                	mov    %edi,%eax
c010c934:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c939:	89 de                	mov    %ebx,%esi
c010c93b:	83 e6 02             	and    $0x2,%esi
c010c93e:	85 f6                	test   %esi,%esi
c010c940:	74 0b                	je     c010c94d <copy_thread+0x7e>
c010c942:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c946:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c94a:	83 c1 02             	add    $0x2,%ecx
c010c94d:	83 e3 01             	and    $0x1,%ebx
c010c950:	85 db                	test   %ebx,%ebx
c010c952:	74 07                	je     c010c95b <copy_thread+0x8c>
c010c954:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c958:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c95b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c95e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c961:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c968:	8b 45 08             	mov    0x8(%ebp),%eax
c010c96b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c96e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c971:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c974:	8b 45 08             	mov    0x8(%ebp),%eax
c010c977:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c97a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c97d:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c980:	8b 52 40             	mov    0x40(%edx),%edx
c010c983:	80 ce 02             	or     $0x2,%dh
c010c986:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c989:	ba d2 c4 10 c0       	mov    $0xc010c4d2,%edx
c010c98e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c991:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c994:	8b 45 08             	mov    0x8(%ebp),%eax
c010c997:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c99a:	89 c2                	mov    %eax,%edx
c010c99c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c99f:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c9a2:	5b                   	pop    %ebx
c010c9a3:	5e                   	pop    %esi
c010c9a4:	5f                   	pop    %edi
c010c9a5:	5d                   	pop    %ebp
c010c9a6:	c3                   	ret    

c010c9a7 <copy_fs>:

//copy_fs&put_fs function used by do_fork in LAB8
static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
c010c9a7:	55                   	push   %ebp
c010c9a8:	89 e5                	mov    %esp,%ebp
c010c9aa:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c9ad:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010c9b2:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c9b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c9bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c9bf:	75 24                	jne    c010c9e5 <copy_fs+0x3e>
c010c9c1:	c7 44 24 0c d0 82 11 	movl   $0xc01182d0,0xc(%esp)
c010c9c8:	c0 
c010c9c9:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010c9d0:	c0 
c010c9d1:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c010c9d8:	00 
c010c9d9:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010c9e0:	e8 e3 44 ff ff       	call   c0100ec8 <__panic>

    if (clone_flags & CLONE_FS) {
c010c9e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9e8:	25 00 08 00 00       	and    $0x800,%eax
c010c9ed:	85 c0                	test   %eax,%eax
c010c9ef:	74 08                	je     c010c9f9 <copy_fs+0x52>
        filesp = old_filesp;
c010c9f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c9f7:	eb 40                	jmp    c010ca39 <copy_fs+0x92>
    }

    int ret = -E_NO_MEM;
c010c9f9:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010ca00:	e8 d3 e6 ff ff       	call   c010b0d8 <files_create>
c010ca05:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ca08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca0c:	75 02                	jne    c010ca10 <copy_fs+0x69>
        goto bad_files_struct;
c010ca0e:	eb 47                	jmp    c010ca57 <copy_fs+0xb0>
    }

    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
c010ca10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca13:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca1a:	89 04 24             	mov    %eax,(%esp)
c010ca1d:	e8 83 e8 ff ff       	call   c010b2a5 <dup_fs>
c010ca22:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca25:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ca29:	74 0e                	je     c010ca39 <copy_fs+0x92>
        goto bad_dup_cleanup_fs;
c010ca2b:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010ca2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca2f:	89 04 24             	mov    %eax,(%esp)
c010ca32:	e8 10 e7 ff ff       	call   c010b147 <files_destroy>
c010ca37:	eb 1e                	jmp    c010ca57 <copy_fs+0xb0>
    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010ca39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca3c:	89 04 24             	mov    %eax,(%esp)
c010ca3f:	e8 79 f5 ff ff       	call   c010bfbd <files_count_inc>
    proc->filesp = filesp;
c010ca44:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca4a:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010ca50:	b8 00 00 00 00       	mov    $0x0,%eax
c010ca55:	eb 03                	jmp    c010ca5a <copy_fs+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010ca57:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ca5a:	c9                   	leave  
c010ca5b:	c3                   	ret    

c010ca5c <put_fs>:

static void
put_fs(struct proc_struct *proc) {
c010ca5c:	55                   	push   %ebp
c010ca5d:	89 e5                	mov    %esp,%ebp
c010ca5f:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010ca62:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca65:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ca6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010ca6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca72:	74 1a                	je     c010ca8e <put_fs+0x32>
        if (files_count_dec(filesp) == 0) {
c010ca74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca77:	89 04 24             	mov    %eax,(%esp)
c010ca7a:	e8 58 f5 ff ff       	call   c010bfd7 <files_count_dec>
c010ca7f:	85 c0                	test   %eax,%eax
c010ca81:	75 0b                	jne    c010ca8e <put_fs+0x32>
            files_destroy(filesp);
c010ca83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca86:	89 04 24             	mov    %eax,(%esp)
c010ca89:	e8 b9 e6 ff ff       	call   c010b147 <files_destroy>
        }
    }
}
c010ca8e:	c9                   	leave  
c010ca8f:	c3                   	ret    

c010ca90 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ca90:	55                   	push   %ebp
c010ca91:	89 e5                	mov    %esp,%ebp
c010ca93:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010ca96:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ca9d:	a1 40 2f 15 c0       	mov    0xc0152f40,%eax
c010caa2:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010caa7:	7e 05                	jle    c010caae <do_fork+0x1e>
        goto fork_out;
c010caa9:	e9 fe 00 00 00       	jmp    c010cbac <do_fork+0x11c>
    }
    ret = -E_NO_MEM;
c010caae:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010cab5:	e8 37 f5 ff ff       	call   c010bff1 <alloc_proc>
c010caba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cabd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cac1:	75 05                	jne    c010cac8 <do_fork+0x38>
        goto fork_out;
c010cac3:	e9 e4 00 00 00       	jmp    c010cbac <do_fork+0x11c>
    }

    proc->parent = current;
c010cac8:	8b 15 28 0f 15 c0    	mov    0xc0150f28,%edx
c010cace:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cad1:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010cad4:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cad9:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cadf:	85 c0                	test   %eax,%eax
c010cae1:	74 24                	je     c010cb07 <do_fork+0x77>
c010cae3:	c7 44 24 0c f8 82 11 	movl   $0xc01182f8,0xc(%esp)
c010caea:	c0 
c010caeb:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010caf2:	c0 
c010caf3:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
c010cafa:	00 
c010cafb:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010cb02:	e8 c1 43 ff ff       	call   c0100ec8 <__panic>

    if (setup_kstack(proc) != 0) {
c010cb07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb0a:	89 04 24             	mov    %eax,(%esp)
c010cb0d:	e8 72 fb ff ff       	call   c010c684 <setup_kstack>
c010cb12:	85 c0                	test   %eax,%eax
c010cb14:	74 05                	je     c010cb1b <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010cb16:	e9 a1 00 00 00       	jmp    c010cbbc <do_fork+0x12c>
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
c010cb1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb22:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb25:	89 04 24             	mov    %eax,(%esp)
c010cb28:	e8 7a fe ff ff       	call   c010c9a7 <copy_fs>
c010cb2d:	85 c0                	test   %eax,%eax
c010cb2f:	74 02                	je     c010cb33 <do_fork+0xa3>
        goto bad_fork_cleanup_kstack;
c010cb31:	eb 7e                	jmp    c010cbb1 <do_fork+0x121>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010cb33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb36:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb3d:	89 04 24             	mov    %eax,(%esp)
c010cb40:	e8 6e fc ff ff       	call   c010c7b3 <copy_mm>
c010cb45:	85 c0                	test   %eax,%eax
c010cb47:	74 02                	je     c010cb4b <do_fork+0xbb>
        goto bad_fork_cleanup_kstack;
c010cb49:	eb 66                	jmp    c010cbb1 <do_fork+0x121>
    }
    copy_thread(proc, stack, tf);
c010cb4b:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cb52:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb55:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb5c:	89 04 24             	mov    %eax,(%esp)
c010cb5f:	e8 6b fd ff ff       	call   c010c8cf <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010cb64:	e8 6d f2 ff ff       	call   c010bdd6 <__intr_save>
c010cb69:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010cb6c:	e8 f4 f7 ff ff       	call   c010c365 <get_pid>
c010cb71:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cb74:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010cb77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb7a:	89 04 24             	mov    %eax,(%esp)
c010cb7d:	e8 68 f9 ff ff       	call   c010c4ea <hash_proc>
        set_links(proc);
c010cb82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb85:	89 04 24             	mov    %eax,(%esp)
c010cb88:	e8 7d f6 ff ff       	call   c010c20a <set_links>

    }
    local_intr_restore(intr_flag);
c010cb8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb90:	89 04 24             	mov    %eax,(%esp)
c010cb93:	e8 68 f2 ff ff       	call   c010be00 <__intr_restore>

    wakeup_proc(proc);
c010cb98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb9b:	89 04 24             	mov    %eax,(%esp)
c010cb9e:	e8 d2 1a 00 00       	call   c010e675 <wakeup_proc>

    ret = proc->pid;
c010cba3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cba6:	8b 40 04             	mov    0x4(%eax),%eax
c010cba9:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010cbac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbaf:	eb 18                	jmp    c010cbc9 <do_fork+0x139>

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010cbb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbb4:	89 04 24             	mov    %eax,(%esp)
c010cbb7:	e8 04 fb ff ff       	call   c010c6c0 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010cbbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbbf:	89 04 24             	mov    %eax,(%esp)
c010cbc2:	e8 4b 81 ff ff       	call   c0104d12 <kfree>
    goto fork_out;
c010cbc7:	eb e3                	jmp    c010cbac <do_fork+0x11c>
}
c010cbc9:	c9                   	leave  
c010cbca:	c3                   	ret    

c010cbcb <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cbcb:	55                   	push   %ebp
c010cbcc:	89 e5                	mov    %esp,%ebp
c010cbce:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cbd1:	8b 15 28 0f 15 c0    	mov    0xc0150f28,%edx
c010cbd7:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010cbdc:	39 c2                	cmp    %eax,%edx
c010cbde:	75 1c                	jne    c010cbfc <do_exit+0x31>
        panic("idleproc exit.\n");
c010cbe0:	c7 44 24 08 11 83 11 	movl   $0xc0118311,0x8(%esp)
c010cbe7:	c0 
c010cbe8:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
c010cbef:	00 
c010cbf0:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010cbf7:	e8 cc 42 ff ff       	call   c0100ec8 <__panic>
    }
    if (current == initproc) {
c010cbfc:	8b 15 28 0f 15 c0    	mov    0xc0150f28,%edx
c010cc02:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010cc07:	39 c2                	cmp    %eax,%edx
c010cc09:	75 1c                	jne    c010cc27 <do_exit+0x5c>
        panic("initproc exit.\n");
c010cc0b:	c7 44 24 08 21 83 11 	movl   $0xc0118321,0x8(%esp)
c010cc12:	c0 
c010cc13:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c010cc1a:	00 
c010cc1b:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010cc22:	e8 a1 42 ff ff       	call   c0100ec8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cc27:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cc2c:	8b 40 18             	mov    0x18(%eax),%eax
c010cc2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cc32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cc36:	74 4a                	je     c010cc82 <do_exit+0xb7>
        lcr3(boot_cr3);
c010cc38:	a1 24 40 15 c0       	mov    0xc0154024,%eax
c010cc3d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cc40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc43:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cc46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc49:	89 04 24             	mov    %eax,(%esp)
c010cc4c:	e8 f9 f2 ff ff       	call   c010bf4a <mm_count_dec>
c010cc51:	85 c0                	test   %eax,%eax
c010cc53:	75 21                	jne    c010cc76 <do_exit+0xab>
            exit_mmap(mm);
c010cc55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc58:	89 04 24             	mov    %eax,(%esp)
c010cc5b:	e8 2d b9 ff ff       	call   c010858d <exit_mmap>
            put_pgdir(mm);
c010cc60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc63:	89 04 24             	mov    %eax,(%esp)
c010cc66:	e8 22 fb ff ff       	call   c010c78d <put_pgdir>
            mm_destroy(mm);
c010cc6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc6e:	89 04 24             	mov    %eax,(%esp)
c010cc71:	e8 58 b6 ff ff       	call   c01082ce <mm_destroy>
        }
        current->mm = NULL;
c010cc76:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cc7b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_fs(current); //for LAB8
c010cc82:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cc87:	89 04 24             	mov    %eax,(%esp)
c010cc8a:	e8 cd fd ff ff       	call   c010ca5c <put_fs>
    current->state = PROC_ZOMBIE;
c010cc8f:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cc94:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cc9a:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cc9f:	8b 55 08             	mov    0x8(%ebp),%edx
c010cca2:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cca8:	e8 29 f1 ff ff       	call   c010bdd6 <__intr_save>
c010ccad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010ccb0:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010ccb5:	8b 40 14             	mov    0x14(%eax),%eax
c010ccb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010ccbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccbe:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ccc4:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ccc9:	75 10                	jne    c010ccdb <do_exit+0x110>
            wakeup_proc(proc);
c010cccb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccce:	89 04 24             	mov    %eax,(%esp)
c010ccd1:	e8 9f 19 00 00       	call   c010e675 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010ccd6:	e9 ac 00 00 00       	jmp    c010cd87 <do_exit+0x1bc>
c010ccdb:	e9 a7 00 00 00       	jmp    c010cd87 <do_exit+0x1bc>
            proc = current->cptr;
c010cce0:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cce5:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cceb:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010ccee:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010ccf3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ccf6:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ccfc:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010cd02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd05:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cd0c:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cd0f:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010cd14:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cd1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd1d:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cd23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd26:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cd2c:	85 c0                	test   %eax,%eax
c010cd2e:	74 14                	je     c010cd44 <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010cd30:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010cd35:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd3b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd3e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cd44:	8b 15 24 0f 15 c0    	mov    0xc0150f24,%edx
c010cd4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd4d:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cd50:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010cd55:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd58:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cd5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd61:	8b 00                	mov    (%eax),%eax
c010cd63:	83 f8 03             	cmp    $0x3,%eax
c010cd66:	75 1f                	jne    c010cd87 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010cd68:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010cd6d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cd73:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cd78:	75 0d                	jne    c010cd87 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010cd7a:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010cd7f:	89 04 24             	mov    %eax,(%esp)
c010cd82:	e8 ee 18 00 00       	call   c010e675 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010cd87:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cd8c:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd92:	85 c0                	test   %eax,%eax
c010cd94:	0f 85 46 ff ff ff    	jne    c010cce0 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010cd9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd9d:	89 04 24             	mov    %eax,(%esp)
c010cda0:	e8 5b f0 ff ff       	call   c010be00 <__intr_restore>
    
    schedule();
c010cda5:	e8 67 19 00 00       	call   c010e711 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010cdaa:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010cdaf:	8b 40 04             	mov    0x4(%eax),%eax
c010cdb2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cdb6:	c7 44 24 08 34 83 11 	movl   $0xc0118334,0x8(%esp)
c010cdbd:	c0 
c010cdbe:	c7 44 24 04 3b 02 00 	movl   $0x23b,0x4(%esp)
c010cdc5:	00 
c010cdc6:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010cdcd:	e8 f6 40 ff ff       	call   c0100ec8 <__panic>

c010cdd2 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cdd2:	55                   	push   %ebp
c010cdd3:	89 e5                	mov    %esp,%ebp
c010cdd5:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010cdd8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cddf:	00 
c010cde0:	8b 45 14             	mov    0x14(%ebp),%eax
c010cde3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cde7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdea:	89 04 24             	mov    %eax,(%esp)
c010cded:	e8 ad eb ff ff       	call   c010b99f <sysfile_seek>
c010cdf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cdf5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cdf9:	74 05                	je     c010ce00 <load_icode_read+0x2e>
        return ret;
c010cdfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdfe:	eb 38                	jmp    c010ce38 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010ce00:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce03:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ce07:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce11:	89 04 24             	mov    %eax,(%esp)
c010ce14:	e8 94 e8 ff ff       	call   c010b6ad <sysfile_read>
c010ce19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce1f:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ce22:	74 0f                	je     c010ce33 <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010ce24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010ce29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce2d:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010ce31:	eb 05                	jmp    c010ce38 <load_icode_read+0x66>
    }
    return 0;
c010ce33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ce38:	c9                   	leave  
c010ce39:	c3                   	ret    

c010ce3a <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010ce3a:	55                   	push   %ebp
c010ce3b:	89 e5                	mov    %esp,%ebp
c010ce3d:	53                   	push   %ebx
c010ce3e:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010ce44:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ce48:	78 06                	js     c010ce50 <load_icode+0x16>
c010ce4a:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010ce4e:	7e 24                	jle    c010ce74 <load_icode+0x3a>
c010ce50:	c7 44 24 0c 54 83 11 	movl   $0xc0118354,0xc(%esp)
c010ce57:	c0 
c010ce58:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010ce5f:	c0 
c010ce60:	c7 44 24 04 67 02 00 	movl   $0x267,0x4(%esp)
c010ce67:	00 
c010ce68:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010ce6f:	e8 54 40 ff ff       	call   c0100ec8 <__panic>

    if (current->mm != NULL) {
c010ce74:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010ce79:	8b 40 18             	mov    0x18(%eax),%eax
c010ce7c:	85 c0                	test   %eax,%eax
c010ce7e:	74 1c                	je     c010ce9c <load_icode+0x62>
        panic("load_icode: current->mm must be empty.\n");
c010ce80:	c7 44 24 08 7c 83 11 	movl   $0xc011837c,0x8(%esp)
c010ce87:	c0 
c010ce88:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c010ce8f:	00 
c010ce90:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010ce97:	e8 2c 40 ff ff       	call   c0100ec8 <__panic>
    }

    int ret = -E_NO_MEM;
c010ce9c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c010cea3:	e8 c1 b0 ff ff       	call   c0107f69 <mm_create>
c010cea8:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ceab:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010ceaf:	75 06                	jne    c010ceb7 <load_icode+0x7d>
        goto bad_mm;
c010ceb1:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010ceb2:	e9 85 07 00 00       	jmp    c010d63c <load_icode+0x802>
    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010ceb7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ceba:	89 04 24             	mov    %eax,(%esp)
c010cebd:	e8 24 f8 ff ff       	call   c010c6e6 <setup_pgdir>
c010cec2:	85 c0                	test   %eax,%eax
c010cec4:	74 05                	je     c010cecb <load_icode+0x91>
        goto bad_pgdir_cleanup_mm;
c010cec6:	e9 8c 07 00 00       	jmp    c010d657 <load_icode+0x81d>
    }

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
c010cecb:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010ced1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010ced4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cedb:	00 
c010cedc:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010cee3:	00 
c010cee4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cee7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ceeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ceee:	89 04 24             	mov    %eax,(%esp)
c010cef1:	e8 dc fe ff ff       	call   c010cdd2 <load_icode_read>
c010cef6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cefd:	74 05                	je     c010cf04 <load_icode+0xca>
        goto bad_elf_cleanup_pgdir;
c010ceff:	e9 48 07 00 00       	jmp    c010d64c <load_icode+0x812>
    }

    if (elf->e_magic != ELF_MAGIC) {
c010cf04:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf07:	8b 00                	mov    (%eax),%eax
c010cf09:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cf0e:	74 0c                	je     c010cf1c <load_icode+0xe2>
        ret = -E_INVAL_ELF;
c010cf10:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010cf17:	e9 30 07 00 00       	jmp    c010d64c <load_icode+0x812>
    }

    struct proghdr __ph, *ph = &__ph;
c010cf1c:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010cf22:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010cf25:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010cf2c:	e9 76 03 00 00       	jmp    c010d2a7 <load_icode+0x46d>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010cf31:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf34:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cf37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cf3a:	c1 e2 05             	shl    $0x5,%edx
c010cf3d:	01 d0                	add    %edx,%eax
c010cf3f:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010cf42:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cf45:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf49:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010cf50:	00 
c010cf51:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf54:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf58:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf5b:	89 04 24             	mov    %eax,(%esp)
c010cf5e:	e8 6f fe ff ff       	call   c010cdd2 <load_icode_read>
c010cf63:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf6a:	74 05                	je     c010cf71 <load_icode+0x137>
            goto bad_cleanup_mmap;
c010cf6c:	e9 d0 06 00 00       	jmp    c010d641 <load_icode+0x807>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010cf71:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf74:	8b 00                	mov    (%eax),%eax
c010cf76:	83 f8 01             	cmp    $0x1,%eax
c010cf79:	74 05                	je     c010cf80 <load_icode+0x146>
            continue ;
c010cf7b:	e9 23 03 00 00       	jmp    c010d2a3 <load_icode+0x469>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010cf80:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf83:	8b 50 10             	mov    0x10(%eax),%edx
c010cf86:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf89:	8b 40 14             	mov    0x14(%eax),%eax
c010cf8c:	39 c2                	cmp    %eax,%edx
c010cf8e:	76 0c                	jbe    c010cf9c <load_icode+0x162>
            ret = -E_INVAL_ELF;
c010cf90:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010cf97:	e9 a5 06 00 00       	jmp    c010d641 <load_icode+0x807>
        }
        if (ph->p_filesz == 0) {
c010cf9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf9f:	8b 40 10             	mov    0x10(%eax),%eax
c010cfa2:	85 c0                	test   %eax,%eax
c010cfa4:	75 05                	jne    c010cfab <load_icode+0x171>
            continue ;
c010cfa6:	e9 f8 02 00 00       	jmp    c010d2a3 <load_icode+0x469>
        }
        vm_flags = 0, perm = PTE_U;
c010cfab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010cfb2:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010cfb9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfbc:	8b 40 18             	mov    0x18(%eax),%eax
c010cfbf:	83 e0 01             	and    $0x1,%eax
c010cfc2:	85 c0                	test   %eax,%eax
c010cfc4:	74 04                	je     c010cfca <load_icode+0x190>
c010cfc6:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010cfca:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfcd:	8b 40 18             	mov    0x18(%eax),%eax
c010cfd0:	83 e0 02             	and    $0x2,%eax
c010cfd3:	85 c0                	test   %eax,%eax
c010cfd5:	74 04                	je     c010cfdb <load_icode+0x1a1>
c010cfd7:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010cfdb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfde:	8b 40 18             	mov    0x18(%eax),%eax
c010cfe1:	83 e0 04             	and    $0x4,%eax
c010cfe4:	85 c0                	test   %eax,%eax
c010cfe6:	74 04                	je     c010cfec <load_icode+0x1b2>
c010cfe8:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010cfec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cfef:	83 e0 02             	and    $0x2,%eax
c010cff2:	85 c0                	test   %eax,%eax
c010cff4:	74 04                	je     c010cffa <load_icode+0x1c0>
c010cff6:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010cffa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cffd:	8b 50 14             	mov    0x14(%eax),%edx
c010d000:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d003:	8b 40 08             	mov    0x8(%eax),%eax
c010d006:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d00d:	00 
c010d00e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d011:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010d015:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d019:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d01d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d020:	89 04 24             	mov    %eax,(%esp)
c010d023:	e8 48 b3 ff ff       	call   c0108370 <mm_map>
c010d028:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d02b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d02f:	74 05                	je     c010d036 <load_icode+0x1fc>
            goto bad_cleanup_mmap;
c010d031:	e9 0b 06 00 00       	jmp    c010d641 <load_icode+0x807>
        }
        off_t offset = ph->p_offset;
c010d036:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d039:	8b 40 04             	mov    0x4(%eax),%eax
c010d03c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010d03f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d042:	8b 40 08             	mov    0x8(%eax),%eax
c010d045:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d048:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d04b:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010d04e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010d051:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d056:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010d059:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c010d060:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d063:	8b 50 08             	mov    0x8(%eax),%edx
c010d066:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d069:	8b 40 10             	mov    0x10(%eax),%eax
c010d06c:	01 d0                	add    %edx,%eax
c010d06e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010d071:	e9 b1 00 00 00       	jmp    c010d127 <load_icode+0x2ed>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d076:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d079:	8b 40 0c             	mov    0xc(%eax),%eax
c010d07c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d07f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d083:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d086:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d08a:	89 04 24             	mov    %eax,(%esp)
c010d08d:	e8 cb 8f ff ff       	call   c010605d <pgdir_alloc_page>
c010d092:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d095:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d099:	75 0c                	jne    c010d0a7 <load_icode+0x26d>
                ret = -E_NO_MEM;
c010d09b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d0a2:	e9 9a 05 00 00       	jmp    c010d641 <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d0a7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0aa:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d0ad:	29 c2                	sub    %eax,%edx
c010d0af:	89 d0                	mov    %edx,%eax
c010d0b1:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d0b4:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d0b9:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d0bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d0bf:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d0c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d0c9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0cc:	73 0d                	jae    c010d0db <load_icode+0x2a1>
                size -= la - end;
c010d0ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0d1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d0d4:	29 c2                	sub    %eax,%edx
c010d0d6:	89 d0                	mov    %edx,%eax
c010d0d8:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010d0db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d0de:	89 04 24             	mov    %eax,(%esp)
c010d0e1:	e8 ac ed ff ff       	call   c010be92 <page2kva>
c010d0e6:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d0e9:	01 c2                	add    %eax,%edx
c010d0eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d0ee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d0f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d0f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d0f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d0fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d100:	89 04 24             	mov    %eax,(%esp)
c010d103:	e8 ca fc ff ff       	call   c010cdd2 <load_icode_read>
c010d108:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d10b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d10f:	74 05                	je     c010d116 <load_icode+0x2dc>
                goto bad_cleanup_mmap;
c010d111:	e9 2b 05 00 00       	jmp    c010d641 <load_icode+0x807>
            }
            start += size, offset += size;
c010d116:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d119:	01 45 d8             	add    %eax,-0x28(%ebp)
c010d11c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d11f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d122:	01 d0                	add    %edx,%eax
c010d124:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010d127:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d12a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d12d:	0f 82 43 ff ff ff    	jb     c010d076 <load_icode+0x23c>
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
        }
        end = ph->p_va + ph->p_memsz;
c010d133:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d136:	8b 50 08             	mov    0x8(%eax),%edx
c010d139:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d13c:	8b 40 14             	mov    0x14(%eax),%eax
c010d13f:	01 d0                	add    %edx,%eax
c010d141:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        if (start < la) {
c010d144:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d147:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d14a:	0f 83 b0 00 00 00    	jae    c010d200 <load_icode+0x3c6>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010d150:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d153:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d156:	75 05                	jne    c010d15d <load_icode+0x323>
                continue ;
c010d158:	e9 46 01 00 00       	jmp    c010d2a3 <load_icode+0x469>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d15d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d160:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d163:	29 c2                	sub    %eax,%edx
c010d165:	89 d0                	mov    %edx,%eax
c010d167:	05 00 10 00 00       	add    $0x1000,%eax
c010d16c:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d16f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d174:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d177:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d17a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d17d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d180:	73 0d                	jae    c010d18f <load_icode+0x355>
                size -= la - end;
c010d182:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d185:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d188:	29 c2                	sub    %eax,%edx
c010d18a:	89 d0                	mov    %edx,%eax
c010d18c:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d18f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d192:	89 04 24             	mov    %eax,(%esp)
c010d195:	e8 f8 ec ff ff       	call   c010be92 <page2kva>
c010d19a:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d19d:	01 c2                	add    %eax,%edx
c010d19f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1a2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d1a6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d1ad:	00 
c010d1ae:	89 14 24             	mov    %edx,(%esp)
c010d1b1:	e8 70 85 00 00       	call   c0115726 <memset>
            start += size;
c010d1b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1b9:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d1bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1bf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1c2:	73 08                	jae    c010d1cc <load_icode+0x392>
c010d1c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1c7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d1ca:	74 34                	je     c010d200 <load_icode+0x3c6>
c010d1cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1d2:	72 08                	jb     c010d1dc <load_icode+0x3a2>
c010d1d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1d7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1da:	74 24                	je     c010d200 <load_icode+0x3c6>
c010d1dc:	c7 44 24 0c a4 83 11 	movl   $0xc01183a4,0xc(%esp)
c010d1e3:	c0 
c010d1e4:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010d1eb:	c0 
c010d1ec:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010d1f3:	00 
c010d1f4:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d1fb:	e8 c8 3c ff ff       	call   c0100ec8 <__panic>
        }
        while (start < end) {
c010d200:	e9 92 00 00 00       	jmp    c010d297 <load_icode+0x45d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d205:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d208:	8b 40 0c             	mov    0xc(%eax),%eax
c010d20b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d20e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d212:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d215:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d219:	89 04 24             	mov    %eax,(%esp)
c010d21c:	e8 3c 8e ff ff       	call   c010605d <pgdir_alloc_page>
c010d221:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d224:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d228:	75 0c                	jne    c010d236 <load_icode+0x3fc>
                ret = -E_NO_MEM;
c010d22a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d231:	e9 0b 04 00 00       	jmp    c010d641 <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d236:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d239:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d23c:	29 c2                	sub    %eax,%edx
c010d23e:	89 d0                	mov    %edx,%eax
c010d240:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d243:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d248:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d24b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d24e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d255:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d258:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d25b:	73 0d                	jae    c010d26a <load_icode+0x430>
                size -= la - end;
c010d25d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d260:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d263:	29 c2                	sub    %eax,%edx
c010d265:	89 d0                	mov    %edx,%eax
c010d267:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d26a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d26d:	89 04 24             	mov    %eax,(%esp)
c010d270:	e8 1d ec ff ff       	call   c010be92 <page2kva>
c010d275:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d278:	01 c2                	add    %eax,%edx
c010d27a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d27d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d281:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d288:	00 
c010d289:	89 14 24             	mov    %edx,(%esp)
c010d28c:	e8 95 84 00 00       	call   c0115726 <memset>
            start += size;
c010d291:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d294:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d297:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d29a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d29d:	0f 82 62 ff ff ff    	jb     c010d205 <load_icode+0x3cb>
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d2a3:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d2a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d2aa:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d2ae:	0f b7 c0             	movzwl %ax,%eax
c010d2b1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d2b4:	0f 87 77 fc ff ff    	ja     c010cf31 <load_icode+0xf7>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010d2ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2bd:	89 04 24             	mov    %eax,(%esp)
c010d2c0:	e8 d5 e3 ff ff       	call   c010b69a <sysfile_close>

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d2c5:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d2cc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d2d3:	00 
c010d2d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d2d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d2db:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d2e2:	00 
c010d2e3:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d2ea:	af 
c010d2eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d2ee:	89 04 24             	mov    %eax,(%esp)
c010d2f1:	e8 7a b0 ff ff       	call   c0108370 <mm_map>
c010d2f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d2f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d2fd:	74 05                	je     c010d304 <load_icode+0x4ca>
        goto bad_cleanup_mmap;
c010d2ff:	e9 3d 03 00 00       	jmp    c010d641 <load_icode+0x807>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d304:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d307:	8b 40 0c             	mov    0xc(%eax),%eax
c010d30a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d311:	00 
c010d312:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d319:	af 
c010d31a:	89 04 24             	mov    %eax,(%esp)
c010d31d:	e8 3b 8d ff ff       	call   c010605d <pgdir_alloc_page>
c010d322:	85 c0                	test   %eax,%eax
c010d324:	75 24                	jne    c010d34a <load_icode+0x510>
c010d326:	c7 44 24 0c e0 83 11 	movl   $0xc01183e0,0xc(%esp)
c010d32d:	c0 
c010d32e:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010d335:	c0 
c010d336:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
c010d33d:	00 
c010d33e:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d345:	e8 7e 3b ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d34a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d34d:	8b 40 0c             	mov    0xc(%eax),%eax
c010d350:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d357:	00 
c010d358:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d35f:	af 
c010d360:	89 04 24             	mov    %eax,(%esp)
c010d363:	e8 f5 8c ff ff       	call   c010605d <pgdir_alloc_page>
c010d368:	85 c0                	test   %eax,%eax
c010d36a:	75 24                	jne    c010d390 <load_icode+0x556>
c010d36c:	c7 44 24 0c 24 84 11 	movl   $0xc0118424,0xc(%esp)
c010d373:	c0 
c010d374:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010d37b:	c0 
c010d37c:	c7 44 24 04 d3 02 00 	movl   $0x2d3,0x4(%esp)
c010d383:	00 
c010d384:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d38b:	e8 38 3b ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d390:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d393:	8b 40 0c             	mov    0xc(%eax),%eax
c010d396:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d39d:	00 
c010d39e:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d3a5:	af 
c010d3a6:	89 04 24             	mov    %eax,(%esp)
c010d3a9:	e8 af 8c ff ff       	call   c010605d <pgdir_alloc_page>
c010d3ae:	85 c0                	test   %eax,%eax
c010d3b0:	75 24                	jne    c010d3d6 <load_icode+0x59c>
c010d3b2:	c7 44 24 0c 68 84 11 	movl   $0xc0118468,0xc(%esp)
c010d3b9:	c0 
c010d3ba:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010d3c1:	c0 
c010d3c2:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
c010d3c9:	00 
c010d3ca:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d3d1:	e8 f2 3a ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d3d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d3d9:	8b 40 0c             	mov    0xc(%eax),%eax
c010d3dc:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d3e3:	00 
c010d3e4:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d3eb:	af 
c010d3ec:	89 04 24             	mov    %eax,(%esp)
c010d3ef:	e8 69 8c ff ff       	call   c010605d <pgdir_alloc_page>
c010d3f4:	85 c0                	test   %eax,%eax
c010d3f6:	75 24                	jne    c010d41c <load_icode+0x5e2>
c010d3f8:	c7 44 24 0c ac 84 11 	movl   $0xc01184ac,0xc(%esp)
c010d3ff:	c0 
c010d400:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010d407:	c0 
c010d408:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
c010d40f:	00 
c010d410:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d417:	e8 ac 3a ff ff       	call   c0100ec8 <__panic>
    
    mm_count_inc(mm);
c010d41c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d41f:	89 04 24             	mov    %eax,(%esp)
c010d422:	e8 09 eb ff ff       	call   c010bf30 <mm_count_inc>
    current->mm = mm;
c010d427:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d42c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d42f:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d432:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d437:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d43a:	8b 52 0c             	mov    0xc(%edx),%edx
c010d43d:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d440:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d447:	77 23                	ja     c010d46c <load_icode+0x632>
c010d449:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d44c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d450:	c7 44 24 08 98 82 11 	movl   $0xc0118298,0x8(%esp)
c010d457:	c0 
c010d458:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c010d45f:	00 
c010d460:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d467:	e8 5c 3a ff ff       	call   c0100ec8 <__panic>
c010d46c:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d46f:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d475:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d478:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d47b:	8b 40 0c             	mov    0xc(%eax),%eax
c010d47e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d481:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d488:	77 23                	ja     c010d4ad <load_icode+0x673>
c010d48a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d48d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d491:	c7 44 24 08 98 82 11 	movl   $0xc0118298,0x8(%esp)
c010d498:	c0 
c010d499:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c010d4a0:	00 
c010d4a1:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d4a8:	e8 1b 3a ff ff       	call   c0100ec8 <__panic>
c010d4ad:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d4b0:	05 00 00 00 40       	add    $0x40000000,%eax
c010d4b5:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d4b8:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d4bb:	0f 22 d8             	mov    %eax,%cr3

    //setup argc, argv
    uint32_t argv_size=0, i;
c010d4be:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d4c5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d4cc:	eb 30                	jmp    c010d4fe <load_icode+0x6c4>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d4ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d4d8:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4db:	01 d0                	add    %edx,%eax
c010d4dd:	8b 00                	mov    (%eax),%eax
c010d4df:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d4e6:	00 
c010d4e7:	89 04 24             	mov    %eax,(%esp)
c010d4ea:	e8 09 7f 00 00       	call   c01153f8 <strnlen>
c010d4ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d4f2:	01 d0                	add    %edx,%eax
c010d4f4:	83 c0 01             	add    $0x1,%eax
c010d4f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //setup argc, argv
    uint32_t argv_size=0, i;
    for (i = 0; i < argc; i ++) {
c010d4fa:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d4fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d501:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d504:	77 c8                	ja     c010d4ce <load_icode+0x694>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010d506:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d509:	c1 e8 02             	shr    $0x2,%eax
c010d50c:	89 c2                	mov    %eax,%edx
c010d50e:	b8 00 00 00 00       	mov    $0x0,%eax
c010d513:	29 d0                	sub    %edx,%eax
c010d515:	c1 e0 02             	shl    $0x2,%eax
c010d518:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d51d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010d520:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d523:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d52a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d52d:	29 d0                	sub    %edx,%eax
c010d52f:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    argv_size = 0;
c010d532:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d539:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d540:	eb 67                	jmp    c010d5a9 <load_icode+0x76f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010d542:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d545:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d54c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d54f:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d552:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d555:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d55c:	8b 45 10             	mov    0x10(%ebp),%eax
c010d55f:	01 d0                	add    %edx,%eax
c010d561:	8b 10                	mov    (%eax),%edx
c010d563:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d566:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d569:	01 c8                	add    %ecx,%eax
c010d56b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d56f:	89 04 24             	mov    %eax,(%esp)
c010d572:	e8 d8 7e 00 00       	call   c011544f <strcpy>
c010d577:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d579:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d57c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d583:	8b 45 10             	mov    0x10(%ebp),%eax
c010d586:	01 d0                	add    %edx,%eax
c010d588:	8b 00                	mov    (%eax),%eax
c010d58a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d591:	00 
c010d592:	89 04 24             	mov    %eax,(%esp)
c010d595:	e8 5e 7e 00 00       	call   c01153f8 <strnlen>
c010d59a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d59d:	01 d0                	add    %edx,%eax
c010d59f:	83 c0 01             	add    $0x1,%eax
c010d5a2:	89 45 d0             	mov    %eax,-0x30(%ebp)

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
    
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c010d5a5:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d5a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d5af:	77 91                	ja     c010d542 <load_icode+0x708>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }
    
    stacktop = (uintptr_t)uargv - sizeof(int);
c010d5b1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d5b4:	83 e8 04             	sub    $0x4,%eax
c010d5b7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010d5ba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d5bd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d5c0:	89 10                	mov    %edx,(%eax)
    
    struct trapframe *tf = current->tf;
c010d5c2:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d5c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d5ca:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d5cd:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d5d4:	00 
c010d5d5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d5dc:	00 
c010d5dd:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d5e0:	89 04 24             	mov    %eax,(%esp)
c010d5e3:	e8 3e 81 00 00       	call   c0115726 <memset>
    tf->tf_cs = USER_CS;
c010d5e8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d5eb:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d5f1:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d5f4:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d5fa:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d5fd:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d601:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d604:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d608:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d60b:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d60f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d612:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d616:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d619:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d61c:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d61f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d622:	8b 50 18             	mov    0x18(%eax),%edx
c010d625:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d628:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d62b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d62e:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d635:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010d63c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d63f:	eb 23                	jmp    c010d664 <load_icode+0x82a>
bad_cleanup_mmap:
    exit_mmap(mm);
c010d641:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d644:	89 04 24             	mov    %eax,(%esp)
c010d647:	e8 41 af ff ff       	call   c010858d <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d64c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d64f:	89 04 24             	mov    %eax,(%esp)
c010d652:	e8 36 f1 ff ff       	call   c010c78d <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d657:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d65a:	89 04 24             	mov    %eax,(%esp)
c010d65d:	e8 6c ac ff ff       	call   c01082ce <mm_destroy>
bad_mm:
    goto out;
c010d662:	eb d8                	jmp    c010d63c <load_icode+0x802>
}
c010d664:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d66a:	5b                   	pop    %ebx
c010d66b:	5d                   	pop    %ebp
c010d66c:	c3                   	ret    

c010d66d <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d66d:	55                   	push   %ebp
c010d66e:	89 e5                	mov    %esp,%ebp
c010d670:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d673:	eb 1d                	jmp    c010d692 <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d675:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d679:	8b 45 08             	mov    0x8(%ebp),%eax
c010d67c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d683:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d686:	01 d0                	add    %edx,%eax
c010d688:	8b 00                	mov    (%eax),%eax
c010d68a:	89 04 24             	mov    %eax,(%esp)
c010d68d:	e8 80 76 ff ff       	call   c0104d12 <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d692:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d696:	7f dd                	jg     c010d675 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d698:	c9                   	leave  
c010d699:	c3                   	ret    

c010d69a <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d69a:	55                   	push   %ebp
c010d69b:	89 e5                	mov    %esp,%ebp
c010d69d:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d6a0:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d6a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d6b1:	8b 45 14             	mov    0x14(%ebp),%eax
c010d6b4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d6bb:	00 
c010d6bc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d6c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6c7:	89 04 24             	mov    %eax,(%esp)
c010d6ca:	e8 98 b9 ff ff       	call   c0109067 <user_mem_check>
c010d6cf:	85 c0                	test   %eax,%eax
c010d6d1:	75 08                	jne    c010d6db <copy_kargv+0x41>
        return ret;
c010d6d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6d6:	e9 a4 00 00 00       	jmp    c010d77f <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d6db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d6e2:	eb 77                	jmp    c010d75b <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d6e4:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d6eb:	e8 07 76 ff ff       	call   c0104cf7 <kmalloc>
c010d6f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d6f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d6f7:	75 0a                	jne    c010d703 <copy_kargv+0x69>
            goto failed_nomem;
c010d6f9:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d6fa:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d701:	eb 67                	jmp    c010d76a <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d706:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d70d:	8b 45 14             	mov    0x14(%ebp),%eax
c010d710:	01 d0                	add    %edx,%eax
c010d712:	8b 00                	mov    (%eax),%eax
c010d714:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d71b:	00 
c010d71c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d720:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d723:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d727:	8b 45 08             	mov    0x8(%ebp),%eax
c010d72a:	89 04 24             	mov    %eax,(%esp)
c010d72d:	e8 58 ba ff ff       	call   c010918a <copy_string>
c010d732:	85 c0                	test   %eax,%eax
c010d734:	75 0d                	jne    c010d743 <copy_kargv+0xa9>
            kfree(buffer);
c010d736:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d739:	89 04 24             	mov    %eax,(%esp)
c010d73c:	e8 d1 75 ff ff       	call   c0104d12 <kfree>
            goto failed_cleanup;
c010d741:	eb 27                	jmp    c010d76a <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d743:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d746:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d74d:	8b 45 10             	mov    0x10(%ebp),%eax
c010d750:	01 c2                	add    %eax,%edx
c010d752:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d755:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d757:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d75e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d761:	7c 81                	jl     c010d6e4 <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d763:	b8 00 00 00 00       	mov    $0x0,%eax
c010d768:	eb 15                	jmp    c010d77f <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d76a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d76d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d771:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d774:	89 04 24             	mov    %eax,(%esp)
c010d777:	e8 f1 fe ff ff       	call   c010d66d <put_kargv>
    return ret;
c010d77c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d77f:	c9                   	leave  
c010d780:	c3                   	ret    

c010d781 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d781:	55                   	push   %ebp
c010d782:	89 e5                	mov    %esp,%ebp
c010d784:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d78a:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d78f:	8b 40 18             	mov    0x18(%eax),%eax
c010d792:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d795:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d799:	7e 06                	jle    c010d7a1 <do_execve+0x20>
c010d79b:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d79f:	7e 0a                	jle    c010d7ab <do_execve+0x2a>
        return -E_INVAL;
c010d7a1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d7a6:	e9 11 02 00 00       	jmp    c010d9bc <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d7ab:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d7b2:	00 
c010d7b3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d7ba:	00 
c010d7bb:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d7be:	89 04 24             	mov    %eax,(%esp)
c010d7c1:	e8 60 7f 00 00       	call   c0115726 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d7c6:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d7cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7d0:	89 04 24             	mov    %eax,(%esp)
c010d7d3:	e8 8c e7 ff ff       	call   c010bf64 <lock_mm>
    if (name == NULL) {
c010d7d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d7dc:	75 29                	jne    c010d807 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d7de:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d7e3:	8b 40 04             	mov    0x4(%eax),%eax
c010d7e6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d7ea:	c7 44 24 08 ef 84 11 	movl   $0xc01184ef,0x8(%esp)
c010d7f1:	c0 
c010d7f2:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d7f9:	00 
c010d7fa:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d7fd:	89 04 24             	mov    %eax,(%esp)
c010d800:	e8 53 7a 00 00       	call   c0115258 <snprintf>
c010d805:	eb 38                	jmp    c010d83f <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d807:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d80e:	00 
c010d80f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d812:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d816:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d819:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d81d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d820:	89 04 24             	mov    %eax,(%esp)
c010d823:	e8 62 b9 ff ff       	call   c010918a <copy_string>
c010d828:	85 c0                	test   %eax,%eax
c010d82a:	75 13                	jne    c010d83f <do_execve+0xbe>
            unlock_mm(mm);
c010d82c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d82f:	89 04 24             	mov    %eax,(%esp)
c010d832:	e8 60 e7 ff ff       	call   c010bf97 <unlock_mm>
            return ret;
c010d837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d83a:	e9 7d 01 00 00       	jmp    c010d9bc <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d83f:	8b 45 10             	mov    0x10(%ebp),%eax
c010d842:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d846:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d84c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d850:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d853:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d857:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d85a:	89 04 24             	mov    %eax,(%esp)
c010d85d:	e8 38 fe ff ff       	call   c010d69a <copy_kargv>
c010d862:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d869:	74 13                	je     c010d87e <do_execve+0xfd>
        unlock_mm(mm);
c010d86b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d86e:	89 04 24             	mov    %eax,(%esp)
c010d871:	e8 21 e7 ff ff       	call   c010bf97 <unlock_mm>
        return ret;
c010d876:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d879:	e9 3e 01 00 00       	jmp    c010d9bc <do_execve+0x23b>
    }
    path = argv[0];
c010d87e:	8b 45 10             	mov    0x10(%ebp),%eax
c010d881:	8b 00                	mov    (%eax),%eax
c010d883:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d886:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d889:	89 04 24             	mov    %eax,(%esp)
c010d88c:	e8 06 e7 ff ff       	call   c010bf97 <unlock_mm>
    files_closeall(current->filesp);
c010d891:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d896:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d89c:	89 04 24             	mov    %eax,(%esp)
c010d89f:	e8 77 d9 ff ff       	call   c010b21b <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d8a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d8ab:	00 
c010d8ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8af:	89 04 24             	mov    %eax,(%esp)
c010d8b2:	e8 8c dd ff ff       	call   c010b643 <sysfile_open>
c010d8b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d8ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d8bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8c4:	79 05                	jns    c010d8cb <do_execve+0x14a>
        goto execve_exit;
c010d8c6:	e9 ae 00 00 00       	jmp    c010d979 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d8cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d8cf:	74 4a                	je     c010d91b <do_execve+0x19a>
        lcr3(boot_cr3);
c010d8d1:	a1 24 40 15 c0       	mov    0xc0154024,%eax
c010d8d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d8d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d8dc:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d8df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8e2:	89 04 24             	mov    %eax,(%esp)
c010d8e5:	e8 60 e6 ff ff       	call   c010bf4a <mm_count_dec>
c010d8ea:	85 c0                	test   %eax,%eax
c010d8ec:	75 21                	jne    c010d90f <do_execve+0x18e>
            exit_mmap(mm);
c010d8ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8f1:	89 04 24             	mov    %eax,(%esp)
c010d8f4:	e8 94 ac ff ff       	call   c010858d <exit_mmap>
            put_pgdir(mm);
c010d8f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8fc:	89 04 24             	mov    %eax,(%esp)
c010d8ff:	e8 89 ee ff ff       	call   c010c78d <put_pgdir>
            mm_destroy(mm);
c010d904:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d907:	89 04 24             	mov    %eax,(%esp)
c010d90a:	e8 bf a9 ff ff       	call   c01082ce <mm_destroy>
        }
        current->mm = NULL;
c010d90f:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d914:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d91b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d922:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d928:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d92c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d92f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d933:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d936:	89 04 24             	mov    %eax,(%esp)
c010d939:	e8 fc f4 ff ff       	call   c010ce3a <load_icode>
c010d93e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d941:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d945:	74 02                	je     c010d949 <do_execve+0x1c8>
        goto execve_exit;
c010d947:	eb 30                	jmp    c010d979 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d949:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d94f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d953:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d956:	89 04 24             	mov    %eax,(%esp)
c010d959:	e8 0f fd ff ff       	call   c010d66d <put_kargv>
    set_proc_name(current, local_name);
c010d95e:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d963:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d966:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d96a:	89 04 24             	mov    %eax,(%esp)
c010d96d:	e8 13 e8 ff ff       	call   c010c185 <set_proc_name>
    return 0;
c010d972:	b8 00 00 00 00       	mov    $0x0,%eax
c010d977:	eb 43                	jmp    c010d9bc <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d979:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d97f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d983:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d986:	89 04 24             	mov    %eax,(%esp)
c010d989:	e8 df fc ff ff       	call   c010d66d <put_kargv>
    do_exit(ret);
c010d98e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d991:	89 04 24             	mov    %eax,(%esp)
c010d994:	e8 32 f2 ff ff       	call   c010cbcb <do_exit>
    panic("already exit: %e.\n", ret);
c010d999:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d99c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d9a0:	c7 44 24 08 f9 84 11 	movl   $0xc01184f9,0x8(%esp)
c010d9a7:	c0 
c010d9a8:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010d9af:	00 
c010d9b0:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010d9b7:	e8 0c 35 ff ff       	call   c0100ec8 <__panic>
}
c010d9bc:	c9                   	leave  
c010d9bd:	c3                   	ret    

c010d9be <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d9be:	55                   	push   %ebp
c010d9bf:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d9c1:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d9c6:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d9cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d9d2:	5d                   	pop    %ebp
c010d9d3:	c3                   	ret    

c010d9d4 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d9d4:	55                   	push   %ebp
c010d9d5:	89 e5                	mov    %esp,%ebp
c010d9d7:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d9da:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010d9df:	8b 40 18             	mov    0x18(%eax),%eax
c010d9e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d9e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d9e9:	74 30                	je     c010da1b <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d9eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9ee:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d9f5:	00 
c010d9f6:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d9fd:	00 
c010d9fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010da02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da05:	89 04 24             	mov    %eax,(%esp)
c010da08:	e8 5a b6 ff ff       	call   c0109067 <user_mem_check>
c010da0d:	85 c0                	test   %eax,%eax
c010da0f:	75 0a                	jne    c010da1b <do_wait+0x47>
            return -E_INVAL;
c010da11:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010da16:	e9 57 01 00 00       	jmp    c010db72 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010da1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010da22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010da26:	74 39                	je     c010da61 <do_wait+0x8d>
        proc = find_proc(pid);
c010da28:	8b 45 08             	mov    0x8(%ebp),%eax
c010da2b:	89 04 24             	mov    %eax,(%esp)
c010da2e:	e8 6b eb ff ff       	call   c010c59e <find_proc>
c010da33:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010da36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da3a:	74 5a                	je     c010da96 <do_wait+0xc2>
c010da3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da3f:	8b 50 14             	mov    0x14(%eax),%edx
c010da42:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010da47:	39 c2                	cmp    %eax,%edx
c010da49:	75 4b                	jne    c010da96 <do_wait+0xc2>
            haskid = 1;
c010da4b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010da52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da55:	8b 00                	mov    (%eax),%eax
c010da57:	83 f8 03             	cmp    $0x3,%eax
c010da5a:	75 3a                	jne    c010da96 <do_wait+0xc2>
                goto found;
c010da5c:	e9 89 00 00 00       	jmp    c010daea <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010da61:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010da66:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010da6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010da6f:	eb 1f                	jmp    c010da90 <do_wait+0xbc>
            haskid = 1;
c010da71:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010da78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da7b:	8b 00                	mov    (%eax),%eax
c010da7d:	83 f8 03             	cmp    $0x3,%eax
c010da80:	75 02                	jne    c010da84 <do_wait+0xb0>
                goto found;
c010da82:	eb 66                	jmp    c010daea <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010da84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da87:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010da8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da94:	75 db                	jne    c010da71 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010da96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010da9a:	74 44                	je     c010dae0 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010da9c:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010daa1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010daa7:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010daac:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010dab3:	00 00 80 
        schedule();
c010dab6:	e8 56 0c 00 00       	call   c010e711 <schedule>
        if (current->flags & PF_EXITING) {
c010dabb:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010dac0:	8b 40 44             	mov    0x44(%eax),%eax
c010dac3:	83 e0 01             	and    $0x1,%eax
c010dac6:	85 c0                	test   %eax,%eax
c010dac8:	74 11                	je     c010dadb <do_wait+0x107>
            do_exit(-E_KILLED);
c010daca:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010dad1:	e8 f5 f0 ff ff       	call   c010cbcb <do_exit>
        }
        goto repeat;
c010dad6:	e9 40 ff ff ff       	jmp    c010da1b <do_wait+0x47>
c010dadb:	e9 3b ff ff ff       	jmp    c010da1b <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010dae0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010dae5:	e9 88 00 00 00       	jmp    c010db72 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010daea:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010daef:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010daf2:	74 0a                	je     c010dafe <do_wait+0x12a>
c010daf4:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010daf9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010dafc:	75 1c                	jne    c010db1a <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010dafe:	c7 44 24 08 0c 85 11 	movl   $0xc011850c,0x8(%esp)
c010db05:	c0 
c010db06:	c7 44 24 04 9a 03 00 	movl   $0x39a,0x4(%esp)
c010db0d:	00 
c010db0e:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010db15:	e8 ae 33 ff ff       	call   c0100ec8 <__panic>
    }
    if (code_store != NULL) {
c010db1a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010db1e:	74 0e                	je     c010db2e <do_wait+0x15a>
        *code_store = proc->exit_code;
c010db20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db23:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010db29:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db2c:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010db2e:	e8 a3 e2 ff ff       	call   c010bdd6 <__intr_save>
c010db33:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010db36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db39:	89 04 24             	mov    %eax,(%esp)
c010db3c:	e8 28 ea ff ff       	call   c010c569 <unhash_proc>
        remove_links(proc);
c010db41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db44:	89 04 24             	mov    %eax,(%esp)
c010db47:	e8 78 e7 ff ff       	call   c010c2c4 <remove_links>
    }
    local_intr_restore(intr_flag);
c010db4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010db4f:	89 04 24             	mov    %eax,(%esp)
c010db52:	e8 a9 e2 ff ff       	call   c010be00 <__intr_restore>
    put_kstack(proc);
c010db57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db5a:	89 04 24             	mov    %eax,(%esp)
c010db5d:	e8 5e eb ff ff       	call   c010c6c0 <put_kstack>
    kfree(proc);
c010db62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db65:	89 04 24             	mov    %eax,(%esp)
c010db68:	e8 a5 71 ff ff       	call   c0104d12 <kfree>
    return 0;
c010db6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010db72:	c9                   	leave  
c010db73:	c3                   	ret    

c010db74 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010db74:	55                   	push   %ebp
c010db75:	89 e5                	mov    %esp,%ebp
c010db77:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010db7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010db7d:	89 04 24             	mov    %eax,(%esp)
c010db80:	e8 19 ea ff ff       	call   c010c59e <find_proc>
c010db85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010db88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010db8c:	74 44                	je     c010dbd2 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010db8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db91:	8b 40 44             	mov    0x44(%eax),%eax
c010db94:	83 e0 01             	and    $0x1,%eax
c010db97:	85 c0                	test   %eax,%eax
c010db99:	75 30                	jne    c010dbcb <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010db9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db9e:	8b 40 44             	mov    0x44(%eax),%eax
c010dba1:	83 c8 01             	or     $0x1,%eax
c010dba4:	89 c2                	mov    %eax,%edx
c010dba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dba9:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010dbac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbaf:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dbb5:	85 c0                	test   %eax,%eax
c010dbb7:	79 0b                	jns    c010dbc4 <do_kill+0x50>
                wakeup_proc(proc);
c010dbb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbbc:	89 04 24             	mov    %eax,(%esp)
c010dbbf:	e8 b1 0a 00 00       	call   c010e675 <wakeup_proc>
            }
            return 0;
c010dbc4:	b8 00 00 00 00       	mov    $0x0,%eax
c010dbc9:	eb 0c                	jmp    c010dbd7 <do_kill+0x63>
        }
        return -E_KILLED;
c010dbcb:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010dbd0:	eb 05                	jmp    c010dbd7 <do_kill+0x63>
    }
    return -E_INVAL;
c010dbd2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010dbd7:	c9                   	leave  
c010dbd8:	c3                   	ret    

c010dbd9 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010dbd9:	55                   	push   %ebp
c010dbda:	89 e5                	mov    %esp,%ebp
c010dbdc:	53                   	push   %ebx
c010dbdd:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010dbe0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010dbe7:	eb 04                	jmp    c010dbed <kernel_execve+0x14>
        argc ++;
c010dbe9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010dbed:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dbf0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dbf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dbfa:	01 d0                	add    %edx,%eax
c010dbfc:	8b 00                	mov    (%eax),%eax
c010dbfe:	85 c0                	test   %eax,%eax
c010dc00:	75 e7                	jne    c010dbe9 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010dc02:	b8 04 00 00 00       	mov    $0x4,%eax
c010dc07:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc0a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010dc0d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010dc10:	cd 80                	int    $0x80
c010dc12:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010dc15:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dc18:	83 c4 10             	add    $0x10,%esp
c010dc1b:	5b                   	pop    %ebx
c010dc1c:	5d                   	pop    %ebp
c010dc1d:	c3                   	ret    

c010dc1e <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010dc1e:	55                   	push   %ebp
c010dc1f:	89 e5                	mov    %esp,%ebp
c010dc21:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010dc24:	c7 45 f0 28 85 11 c0 	movl   $0xc0118528,-0x10(%ebp)
c010dc2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dc32:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010dc37:	8b 40 04             	mov    0x4(%eax),%eax
c010dc3a:	c7 44 24 08 28 85 11 	movl   $0xc0118528,0x8(%esp)
c010dc41:	c0 
c010dc42:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dc46:	c7 04 24 2c 85 11 c0 	movl   $0xc011852c,(%esp)
c010dc4d:	e8 13 27 ff ff       	call   c0100365 <cprintf>
c010dc52:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dc55:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dc59:	c7 04 24 28 85 11 c0 	movl   $0xc0118528,(%esp)
c010dc60:	e8 74 ff ff ff       	call   c010dbd9 <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010dc65:	c7 44 24 08 53 85 11 	movl   $0xc0118553,0x8(%esp)
c010dc6c:	c0 
c010dc6d:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
c010dc74:	00 
c010dc75:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010dc7c:	e8 47 32 ff ff       	call   c0100ec8 <__panic>

c010dc81 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010dc81:	55                   	push   %ebp
c010dc82:	89 e5                	mov    %esp,%ebp
c010dc84:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010dc87:	c7 04 24 6d 85 11 c0 	movl   $0xc011856d,(%esp)
c010dc8e:	e8 fb 18 00 00       	call   c010f58e <vfs_set_bootfs>
c010dc93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dc96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dc9a:	74 23                	je     c010dcbf <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010dc9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dca3:	c7 44 24 08 74 85 11 	movl   $0xc0118574,0x8(%esp)
c010dcaa:	c0 
c010dcab:	c7 44 24 04 ed 03 00 	movl   $0x3ed,0x4(%esp)
c010dcb2:	00 
c010dcb3:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010dcba:	e8 09 32 ff ff       	call   c0100ec8 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010dcbf:	e8 55 75 ff ff       	call   c0105219 <nr_free_pages>
c010dcc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010dcc7:	e8 0e 6f ff ff       	call   c0104bda <kallocated>
c010dccc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010dccf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dcd6:	00 
c010dcd7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dcde:	00 
c010dcdf:	c7 04 24 1e dc 10 c0 	movl   $0xc010dc1e,(%esp)
c010dce6:	e8 27 e9 ff ff       	call   c010c612 <kernel_thread>
c010dceb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010dcee:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dcf2:	7f 1c                	jg     c010dd10 <init_main+0x8f>
        panic("create user_main failed.\n");
c010dcf4:	c7 44 24 08 8d 85 11 	movl   $0xc011858d,0x8(%esp)
c010dcfb:	c0 
c010dcfc:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
c010dd03:	00 
c010dd04:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010dd0b:	e8 b8 31 ff ff       	call   c0100ec8 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dd10:	e8 49 ba ff ff       	call   c010975e <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dd15:	eb 05                	jmp    c010dd1c <init_main+0x9b>
        schedule();
c010dd17:	e8 f5 09 00 00       	call   c010e711 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010dd1c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dd23:	00 
c010dd24:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dd2b:	e8 a4 fc ff ff       	call   c010d9d4 <do_wait>
c010dd30:	85 c0                	test   %eax,%eax
c010dd32:	74 e3                	je     c010dd17 <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dd34:	e8 66 d3 ff ff       	call   c010b09f <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dd39:	c7 04 24 a8 85 11 c0 	movl   $0xc01185a8,(%esp)
c010dd40:	e8 20 26 ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dd45:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010dd4a:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dd50:	85 c0                	test   %eax,%eax
c010dd52:	75 1e                	jne    c010dd72 <init_main+0xf1>
c010dd54:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010dd59:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dd5f:	85 c0                	test   %eax,%eax
c010dd61:	75 0f                	jne    c010dd72 <init_main+0xf1>
c010dd63:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010dd68:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dd6e:	85 c0                	test   %eax,%eax
c010dd70:	74 24                	je     c010dd96 <init_main+0x115>
c010dd72:	c7 44 24 0c cc 85 11 	movl   $0xc01185cc,0xc(%esp)
c010dd79:	c0 
c010dd7a:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010dd81:	c0 
c010dd82:	c7 44 24 04 01 04 00 	movl   $0x401,0x4(%esp)
c010dd89:	00 
c010dd8a:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010dd91:	e8 32 31 ff ff       	call   c0100ec8 <__panic>
    assert(nr_process == 2);
c010dd96:	a1 40 2f 15 c0       	mov    0xc0152f40,%eax
c010dd9b:	83 f8 02             	cmp    $0x2,%eax
c010dd9e:	74 24                	je     c010ddc4 <init_main+0x143>
c010dda0:	c7 44 24 0c 17 86 11 	movl   $0xc0118617,0xc(%esp)
c010dda7:	c0 
c010dda8:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010ddaf:	c0 
c010ddb0:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c010ddb7:	00 
c010ddb8:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010ddbf:	e8 04 31 ff ff       	call   c0100ec8 <__panic>
c010ddc4:	c7 45 e4 fc 41 15 c0 	movl   $0xc01541fc,-0x1c(%ebp)
c010ddcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ddce:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010ddd1:	8b 15 24 0f 15 c0    	mov    0xc0150f24,%edx
c010ddd7:	83 c2 7c             	add    $0x7c,%edx
c010ddda:	39 d0                	cmp    %edx,%eax
c010dddc:	74 24                	je     c010de02 <init_main+0x181>
c010ddde:	c7 44 24 0c 28 86 11 	movl   $0xc0118628,0xc(%esp)
c010dde5:	c0 
c010dde6:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010dded:	c0 
c010ddee:	c7 44 24 04 03 04 00 	movl   $0x403,0x4(%esp)
c010ddf5:	00 
c010ddf6:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010ddfd:	e8 c6 30 ff ff       	call   c0100ec8 <__panic>
c010de02:	c7 45 e0 fc 41 15 c0 	movl   $0xc01541fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010de09:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010de0c:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010de0e:	8b 15 24 0f 15 c0    	mov    0xc0150f24,%edx
c010de14:	83 c2 7c             	add    $0x7c,%edx
c010de17:	39 d0                	cmp    %edx,%eax
c010de19:	74 24                	je     c010de3f <init_main+0x1be>
c010de1b:	c7 44 24 0c 58 86 11 	movl   $0xc0118658,0xc(%esp)
c010de22:	c0 
c010de23:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010de2a:	c0 
c010de2b:	c7 44 24 04 04 04 00 	movl   $0x404,0x4(%esp)
c010de32:	00 
c010de33:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010de3a:	e8 89 30 ff ff       	call   c0100ec8 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010de3f:	e8 d5 73 ff ff       	call   c0105219 <nr_free_pages>
c010de44:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010de47:	74 24                	je     c010de6d <init_main+0x1ec>
c010de49:	c7 44 24 0c 88 86 11 	movl   $0xc0118688,0xc(%esp)
c010de50:	c0 
c010de51:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010de58:	c0 
c010de59:	c7 44 24 04 05 04 00 	movl   $0x405,0x4(%esp)
c010de60:	00 
c010de61:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010de68:	e8 5b 30 ff ff       	call   c0100ec8 <__panic>
    assert(kernel_allocated_store == kallocated());
c010de6d:	e8 68 6d ff ff       	call   c0104bda <kallocated>
c010de72:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010de75:	74 24                	je     c010de9b <init_main+0x21a>
c010de77:	c7 44 24 0c b0 86 11 	movl   $0xc01186b0,0xc(%esp)
c010de7e:	c0 
c010de7f:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010de86:	c0 
c010de87:	c7 44 24 04 06 04 00 	movl   $0x406,0x4(%esp)
c010de8e:	00 
c010de8f:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010de96:	e8 2d 30 ff ff       	call   c0100ec8 <__panic>
    cprintf("init check memory pass.\n");
c010de9b:	c7 04 24 d7 86 11 c0 	movl   $0xc01186d7,(%esp)
c010dea2:	e8 be 24 ff ff       	call   c0100365 <cprintf>
    return 0;
c010dea7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010deac:	c9                   	leave  
c010dead:	c3                   	ret    

c010deae <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010deae:	55                   	push   %ebp
c010deaf:	89 e5                	mov    %esp,%ebp
c010deb1:	53                   	push   %ebx
c010deb2:	83 ec 24             	sub    $0x24,%esp
c010deb5:	c7 45 ec fc 41 15 c0 	movl   $0xc01541fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010debc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010debf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dec2:	89 50 04             	mov    %edx,0x4(%eax)
c010dec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dec8:	8b 50 04             	mov    0x4(%eax),%edx
c010decb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dece:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ded0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ded7:	eb 26                	jmp    c010deff <proc_init+0x51>
        list_init(hash_list + i);
c010ded9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dedc:	c1 e0 03             	shl    $0x3,%eax
c010dedf:	05 40 0f 15 c0       	add    $0xc0150f40,%eax
c010dee4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dee7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010deea:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010deed:	89 50 04             	mov    %edx,0x4(%eax)
c010def0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010def3:	8b 50 04             	mov    0x4(%eax),%edx
c010def6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010def9:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010defb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010deff:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010df06:	7e d1                	jle    c010ded9 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010df08:	e8 e4 e0 ff ff       	call   c010bff1 <alloc_proc>
c010df0d:	a3 20 0f 15 c0       	mov    %eax,0xc0150f20
c010df12:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010df17:	85 c0                	test   %eax,%eax
c010df19:	75 1c                	jne    c010df37 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010df1b:	c7 44 24 08 f0 86 11 	movl   $0xc01186f0,0x8(%esp)
c010df22:	c0 
c010df23:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
c010df2a:	00 
c010df2b:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010df32:	e8 91 2f ff ff       	call   c0100ec8 <__panic>
    }

    idleproc->pid = 0;
c010df37:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010df3c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010df43:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010df48:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010df4e:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010df53:	ba 00 d0 14 c0       	mov    $0xc014d000,%edx
c010df58:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010df5b:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010df60:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010df67:	8b 1d 20 0f 15 c0    	mov    0xc0150f20,%ebx
c010df6d:	e8 66 d1 ff ff       	call   c010b0d8 <files_create>
c010df72:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010df78:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010df7e:	85 c0                	test   %eax,%eax
c010df80:	75 1c                	jne    c010df9e <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010df82:	c7 44 24 08 08 87 11 	movl   $0xc0118708,0x8(%esp)
c010df89:	c0 
c010df8a:	c7 44 24 04 20 04 00 	movl   $0x420,0x4(%esp)
c010df91:	00 
c010df92:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010df99:	e8 2a 2f ff ff       	call   c0100ec8 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010df9e:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010dfa3:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010dfa9:	89 04 24             	mov    %eax,(%esp)
c010dfac:	e8 0c e0 ff ff       	call   c010bfbd <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010dfb1:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010dfb6:	c7 44 24 04 2a 87 11 	movl   $0xc011872a,0x4(%esp)
c010dfbd:	c0 
c010dfbe:	89 04 24             	mov    %eax,(%esp)
c010dfc1:	e8 bf e1 ff ff       	call   c010c185 <set_proc_name>
    nr_process ++;
c010dfc6:	a1 40 2f 15 c0       	mov    0xc0152f40,%eax
c010dfcb:	83 c0 01             	add    $0x1,%eax
c010dfce:	a3 40 2f 15 c0       	mov    %eax,0xc0152f40

    current = idleproc;
c010dfd3:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010dfd8:	a3 28 0f 15 c0       	mov    %eax,0xc0150f28

    int pid = kernel_thread(init_main, NULL, 0);
c010dfdd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dfe4:	00 
c010dfe5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dfec:	00 
c010dfed:	c7 04 24 81 dc 10 c0 	movl   $0xc010dc81,(%esp)
c010dff4:	e8 19 e6 ff ff       	call   c010c612 <kernel_thread>
c010dff9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010dffc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e000:	7f 1c                	jg     c010e01e <proc_init+0x170>
        panic("create init_main failed.\n");
c010e002:	c7 44 24 08 2f 87 11 	movl   $0xc011872f,0x8(%esp)
c010e009:	c0 
c010e00a:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
c010e011:	00 
c010e012:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010e019:	e8 aa 2e ff ff       	call   c0100ec8 <__panic>
    }

    initproc = find_proc(pid);
c010e01e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e021:	89 04 24             	mov    %eax,(%esp)
c010e024:	e8 75 e5 ff ff       	call   c010c59e <find_proc>
c010e029:	a3 24 0f 15 c0       	mov    %eax,0xc0150f24
    set_proc_name(initproc, "init");
c010e02e:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010e033:	c7 44 24 04 49 87 11 	movl   $0xc0118749,0x4(%esp)
c010e03a:	c0 
c010e03b:	89 04 24             	mov    %eax,(%esp)
c010e03e:	e8 42 e1 ff ff       	call   c010c185 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010e043:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010e048:	85 c0                	test   %eax,%eax
c010e04a:	74 0c                	je     c010e058 <proc_init+0x1aa>
c010e04c:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010e051:	8b 40 04             	mov    0x4(%eax),%eax
c010e054:	85 c0                	test   %eax,%eax
c010e056:	74 24                	je     c010e07c <proc_init+0x1ce>
c010e058:	c7 44 24 0c 50 87 11 	movl   $0xc0118750,0xc(%esp)
c010e05f:	c0 
c010e060:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010e067:	c0 
c010e068:	c7 44 24 04 31 04 00 	movl   $0x431,0x4(%esp)
c010e06f:	00 
c010e070:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010e077:	e8 4c 2e ff ff       	call   c0100ec8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010e07c:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010e081:	85 c0                	test   %eax,%eax
c010e083:	74 0d                	je     c010e092 <proc_init+0x1e4>
c010e085:	a1 24 0f 15 c0       	mov    0xc0150f24,%eax
c010e08a:	8b 40 04             	mov    0x4(%eax),%eax
c010e08d:	83 f8 01             	cmp    $0x1,%eax
c010e090:	74 24                	je     c010e0b6 <proc_init+0x208>
c010e092:	c7 44 24 0c 78 87 11 	movl   $0xc0118778,0xc(%esp)
c010e099:	c0 
c010e09a:	c7 44 24 08 e3 82 11 	movl   $0xc01182e3,0x8(%esp)
c010e0a1:	c0 
c010e0a2:	c7 44 24 04 32 04 00 	movl   $0x432,0x4(%esp)
c010e0a9:	00 
c010e0aa:	c7 04 24 bc 82 11 c0 	movl   $0xc01182bc,(%esp)
c010e0b1:	e8 12 2e ff ff       	call   c0100ec8 <__panic>
}
c010e0b6:	83 c4 24             	add    $0x24,%esp
c010e0b9:	5b                   	pop    %ebx
c010e0ba:	5d                   	pop    %ebp
c010e0bb:	c3                   	ret    

c010e0bc <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010e0bc:	55                   	push   %ebp
c010e0bd:	89 e5                	mov    %esp,%ebp
c010e0bf:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010e0c2:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e0c7:	8b 40 10             	mov    0x10(%eax),%eax
c010e0ca:	85 c0                	test   %eax,%eax
c010e0cc:	74 07                	je     c010e0d5 <cpu_idle+0x19>
            schedule();
c010e0ce:	e8 3e 06 00 00       	call   c010e711 <schedule>
        }
    }
c010e0d3:	eb ed                	jmp    c010e0c2 <cpu_idle+0x6>
c010e0d5:	eb eb                	jmp    c010e0c2 <cpu_idle+0x6>

c010e0d7 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010e0d7:	55                   	push   %ebp
c010e0d8:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010e0da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e0de:	75 11                	jne    c010e0f1 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010e0e0:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e0e5:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010e0ec:	00 00 00 
c010e0ef:	eb 0e                	jmp    c010e0ff <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010e0f1:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e0f6:	8b 55 08             	mov    0x8(%ebp),%edx
c010e0f9:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010e0ff:	5d                   	pop    %ebp
c010e100:	c3                   	ret    

c010e101 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010e101:	55                   	push   %ebp
c010e102:	89 e5                	mov    %esp,%ebp
c010e104:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010e107:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e10b:	75 07                	jne    c010e114 <do_sleep+0x13>
        return 0;
c010e10d:	b8 00 00 00 00       	mov    $0x0,%eax
c010e112:	eb 6b                	jmp    c010e17f <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010e114:	e8 bd dc ff ff       	call   c010bdd6 <__intr_save>
c010e119:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010e11c:	8b 55 08             	mov    0x8(%ebp),%edx
c010e11f:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e124:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e128:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e12c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010e12f:	89 04 24             	mov    %eax,(%esp)
c010e132:	e8 66 dc ff ff       	call   c010bd9d <timer_init>
c010e137:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010e13a:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e13f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010e145:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e14a:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010e151:	00 00 80 
    add_timer(timer);
c010e154:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e157:	89 04 24             	mov    %eax,(%esp)
c010e15a:	e8 3d 06 00 00       	call   c010e79c <add_timer>
    local_intr_restore(intr_flag);
c010e15f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e162:	89 04 24             	mov    %eax,(%esp)
c010e165:	e8 96 dc ff ff       	call   c010be00 <__intr_restore>

    schedule();
c010e16a:	e8 a2 05 00 00       	call   c010e711 <schedule>

    del_timer(timer);
c010e16f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e172:	89 04 24             	mov    %eax,(%esp)
c010e175:	e8 60 07 00 00       	call   c010e8da <del_timer>
    return 0;
c010e17a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e17f:	c9                   	leave  
c010e180:	c3                   	ret    

c010e181 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010e181:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010e185:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010e187:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010e18a:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010e18d:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010e190:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010e193:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010e196:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010e199:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010e19c:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010e1a0:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010e1a3:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010e1a6:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010e1a9:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010e1ac:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010e1af:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010e1b2:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e1b5:	ff 30                	pushl  (%eax)

    ret
c010e1b7:	c3                   	ret    

c010e1b8 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e1b8:	55                   	push   %ebp
c010e1b9:	89 e5                	mov    %esp,%ebp
c010e1bb:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e1be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e1c2:	75 08                	jne    c010e1cc <skew_heap_merge+0x14>
c010e1c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1c7:	e9 bd 00 00 00       	jmp    c010e289 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e1cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e1d0:	75 08                	jne    c010e1da <skew_heap_merge+0x22>
c010e1d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1d5:	e9 af 00 00 00       	jmp    c010e289 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e1da:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1e4:	89 04 24             	mov    %eax,(%esp)
c010e1e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010e1ea:	ff d0                	call   *%eax
c010e1ec:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e1ef:	75 4d                	jne    c010e23e <skew_heap_merge+0x86>
     {
          r = a->left;
c010e1f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1f4:	8b 40 04             	mov    0x4(%eax),%eax
c010e1f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1fd:	8b 40 08             	mov    0x8(%eax),%eax
c010e200:	8b 55 10             	mov    0x10(%ebp),%edx
c010e203:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e207:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e20a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e20e:	89 04 24             	mov    %eax,(%esp)
c010e211:	e8 a2 ff ff ff       	call   c010e1b8 <skew_heap_merge>
c010e216:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e219:	8b 45 08             	mov    0x8(%ebp),%eax
c010e21c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e21f:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e222:	8b 45 08             	mov    0x8(%ebp),%eax
c010e225:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e228:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e22b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e22f:	74 08                	je     c010e239 <skew_heap_merge+0x81>
c010e231:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e234:	8b 55 08             	mov    0x8(%ebp),%edx
c010e237:	89 10                	mov    %edx,(%eax)

          return a;
c010e239:	8b 45 08             	mov    0x8(%ebp),%eax
c010e23c:	eb 4b                	jmp    c010e289 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e23e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e241:	8b 40 04             	mov    0x4(%eax),%eax
c010e244:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e247:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e24a:	8b 40 08             	mov    0x8(%eax),%eax
c010e24d:	8b 55 10             	mov    0x10(%ebp),%edx
c010e250:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e254:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e258:	8b 45 08             	mov    0x8(%ebp),%eax
c010e25b:	89 04 24             	mov    %eax,(%esp)
c010e25e:	e8 55 ff ff ff       	call   c010e1b8 <skew_heap_merge>
c010e263:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e266:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e269:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e26c:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e26f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e272:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e275:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e278:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e27c:	74 08                	je     c010e286 <skew_heap_merge+0xce>
c010e27e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e281:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e284:	89 10                	mov    %edx,(%eax)

          return b;
c010e286:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e289:	c9                   	leave  
c010e28a:	c3                   	ret    

c010e28b <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e28b:	55                   	push   %ebp
c010e28c:	89 e5                	mov    %esp,%ebp
c010e28e:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e291:	8b 45 08             	mov    0x8(%ebp),%eax
c010e294:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e299:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e29c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e29f:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e2a4:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e2a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2aa:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e2b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2b3:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e2b9:	29 c2                	sub    %eax,%edx
c010e2bb:	89 d0                	mov    %edx,%eax
c010e2bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e2c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e2c4:	7e 07                	jle    c010e2cd <proc_stride_comp_f+0x42>
c010e2c6:	b8 01 00 00 00       	mov    $0x1,%eax
c010e2cb:	eb 12                	jmp    c010e2df <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e2cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e2d1:	75 07                	jne    c010e2da <proc_stride_comp_f+0x4f>
c010e2d3:	b8 00 00 00 00       	mov    $0x0,%eax
c010e2d8:	eb 05                	jmp    c010e2df <proc_stride_comp_f+0x54>
     else return -1;
c010e2da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e2df:	c9                   	leave  
c010e2e0:	c3                   	ret    

c010e2e1 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e2e1:	55                   	push   %ebp
c010e2e2:	89 e5                	mov    %esp,%ebp
c010e2e4:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010e2e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e2ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2f0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e2f3:	89 50 04             	mov    %edx,0x4(%eax)
c010e2f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2f9:	8b 50 04             	mov    0x4(%eax),%edx
c010e2fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2ff:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010e301:	8b 45 08             	mov    0x8(%ebp),%eax
c010e304:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010e30b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e30e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e315:	c9                   	leave  
c010e316:	c3                   	ret    

c010e317 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e317:	55                   	push   %ebp
c010e318:	89 e5                	mov    %esp,%ebp
c010e31a:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e31d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e320:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e326:	8b 45 08             	mov    0x8(%ebp),%eax
c010e329:	8b 40 10             	mov    0x10(%eax),%eax
c010e32c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e32f:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e332:	c7 45 ec 8b e2 10 c0 	movl   $0xc010e28b,-0x14(%ebp)
c010e339:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e33c:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e33f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e342:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e348:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e34b:	8b 10                	mov    (%eax),%edx
c010e34d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e350:	89 50 08             	mov    %edx,0x8(%eax)
c010e353:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e356:	8b 50 08             	mov    0x8(%eax),%edx
c010e359:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e35c:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e35f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e362:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e366:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e369:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e36d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e370:	89 04 24             	mov    %eax,(%esp)
c010e373:	e8 40 fe ff ff       	call   c010e1b8 <skew_heap_merge>
c010e378:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e37a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e37d:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e380:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e383:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e389:	85 c0                	test   %eax,%eax
c010e38b:	74 13                	je     c010e3a0 <stride_enqueue+0x89>
c010e38d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e390:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e396:	8b 45 08             	mov    0x8(%ebp),%eax
c010e399:	8b 40 0c             	mov    0xc(%eax),%eax
c010e39c:	39 c2                	cmp    %eax,%edx
c010e39e:	7e 0f                	jle    c010e3af <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010e3a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3a3:	8b 50 0c             	mov    0xc(%eax),%edx
c010e3a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3a9:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010e3af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3b2:	8b 55 08             	mov    0x8(%ebp),%edx
c010e3b5:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010e3bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3be:	8b 40 08             	mov    0x8(%eax),%eax
c010e3c1:	8d 50 01             	lea    0x1(%eax),%edx
c010e3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3c7:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e3ca:	c9                   	leave  
c010e3cb:	c3                   	ret    

c010e3cc <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e3cc:	55                   	push   %ebp
c010e3cd:	89 e5                	mov    %esp,%ebp
c010e3cf:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e3d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3d5:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e3db:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3de:	8b 40 10             	mov    0x10(%eax),%eax
c010e3e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e3e4:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e3e7:	c7 45 ec 8b e2 10 c0 	movl   $0xc010e28b,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e3ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3f1:	8b 00                	mov    (%eax),%eax
c010e3f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e3f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3f9:	8b 50 08             	mov    0x8(%eax),%edx
c010e3fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e3ff:	8b 40 04             	mov    0x4(%eax),%eax
c010e402:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e405:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e409:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e40d:	89 04 24             	mov    %eax,(%esp)
c010e410:	e8 a3 fd ff ff       	call   c010e1b8 <skew_heap_merge>
c010e415:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e418:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e41c:	74 08                	je     c010e426 <stride_dequeue+0x5a>
c010e41e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e421:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e424:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e426:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e42a:	74 24                	je     c010e450 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e42c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e42f:	8b 40 04             	mov    0x4(%eax),%eax
c010e432:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e435:	75 0b                	jne    c010e442 <stride_dequeue+0x76>
               p->left = rep;
c010e437:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e43a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e43d:	89 50 04             	mov    %edx,0x4(%eax)
c010e440:	eb 09                	jmp    c010e44b <stride_dequeue+0x7f>
          else p->right = rep;
c010e442:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e445:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e448:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e44b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e44e:	eb 03                	jmp    c010e453 <stride_dequeue+0x87>
     }
     else return rep;
c010e450:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e453:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e455:	8b 45 08             	mov    0x8(%ebp),%eax
c010e458:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010e45b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e45e:	8b 40 08             	mov    0x8(%eax),%eax
c010e461:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e464:	8b 45 08             	mov    0x8(%ebp),%eax
c010e467:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e46a:	c9                   	leave  
c010e46b:	c3                   	ret    

c010e46c <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e46c:	55                   	push   %ebp
c010e46d:	89 e5                	mov    %esp,%ebp
c010e46f:	53                   	push   %ebx
c010e470:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010e473:	8b 45 08             	mov    0x8(%ebp),%eax
c010e476:	8b 40 10             	mov    0x10(%eax),%eax
c010e479:	85 c0                	test   %eax,%eax
c010e47b:	75 07                	jne    c010e484 <stride_pick_next+0x18>
c010e47d:	b8 00 00 00 00       	mov    $0x0,%eax
c010e482:	eb 62                	jmp    c010e4e6 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e484:	8b 45 08             	mov    0x8(%ebp),%eax
c010e487:	8b 40 10             	mov    0x10(%eax),%eax
c010e48a:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e48f:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010e492:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e495:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e49b:	85 c0                	test   %eax,%eax
c010e49d:	75 1a                	jne    c010e4b9 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010e49f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4a2:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e4a8:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e4ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4b1:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e4b7:	eb 2a                	jmp    c010e4e3 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010e4b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4bc:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e4c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4c5:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e4cb:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e4d0:	ba 00 00 00 00       	mov    $0x0,%edx
c010e4d5:	f7 f3                	div    %ebx
c010e4d7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e4da:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4dd:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010e4e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010e4e6:	83 c4 10             	add    $0x10,%esp
c010e4e9:	5b                   	pop    %ebx
c010e4ea:	5d                   	pop    %ebp
c010e4eb:	c3                   	ret    

c010e4ec <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e4ec:	55                   	push   %ebp
c010e4ed:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010e4ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4f2:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e4f8:	85 c0                	test   %eax,%eax
c010e4fa:	7e 15                	jle    c010e511 <stride_proc_tick+0x25>
          proc->time_slice --;
c010e4fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4ff:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e505:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e508:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e50b:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010e511:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e514:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e51a:	85 c0                	test   %eax,%eax
c010e51c:	75 0a                	jne    c010e528 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010e51e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e521:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010e528:	5d                   	pop    %ebp
c010e529:	c3                   	ret    

c010e52a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e52a:	55                   	push   %ebp
c010e52b:	89 e5                	mov    %esp,%ebp
c010e52d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e530:	9c                   	pushf  
c010e531:	58                   	pop    %eax
c010e532:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e535:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e538:	25 00 02 00 00       	and    $0x200,%eax
c010e53d:	85 c0                	test   %eax,%eax
c010e53f:	74 0c                	je     c010e54d <__intr_save+0x23>
        intr_disable();
c010e541:	e8 fc 3b ff ff       	call   c0102142 <intr_disable>
        return 1;
c010e546:	b8 01 00 00 00       	mov    $0x1,%eax
c010e54b:	eb 05                	jmp    c010e552 <__intr_save+0x28>
    }
    return 0;
c010e54d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e552:	c9                   	leave  
c010e553:	c3                   	ret    

c010e554 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e554:	55                   	push   %ebp
c010e555:	89 e5                	mov    %esp,%ebp
c010e557:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e55a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e55e:	74 05                	je     c010e565 <__intr_restore+0x11>
        intr_enable();
c010e560:	e8 d7 3b ff ff       	call   c010213c <intr_enable>
    }
}
c010e565:	c9                   	leave  
c010e566:	c3                   	ret    

c010e567 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e567:	55                   	push   %ebp
c010e568:	89 e5                	mov    %esp,%ebp
c010e56a:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e56d:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010e572:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e575:	74 1a                	je     c010e591 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e577:	a1 9c 2f 15 c0       	mov    0xc0152f9c,%eax
c010e57c:	8b 40 08             	mov    0x8(%eax),%eax
c010e57f:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c010e585:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e588:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e58c:	89 14 24             	mov    %edx,(%esp)
c010e58f:	ff d0                	call   *%eax
    }
}
c010e591:	c9                   	leave  
c010e592:	c3                   	ret    

c010e593 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e593:	55                   	push   %ebp
c010e594:	89 e5                	mov    %esp,%ebp
c010e596:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e599:	a1 9c 2f 15 c0       	mov    0xc0152f9c,%eax
c010e59e:	8b 40 0c             	mov    0xc(%eax),%eax
c010e5a1:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c010e5a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e5aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e5ae:	89 14 24             	mov    %edx,(%esp)
c010e5b1:	ff d0                	call   *%eax
}
c010e5b3:	c9                   	leave  
c010e5b4:	c3                   	ret    

c010e5b5 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e5b5:	55                   	push   %ebp
c010e5b6:	89 e5                	mov    %esp,%ebp
c010e5b8:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e5bb:	a1 9c 2f 15 c0       	mov    0xc0152f9c,%eax
c010e5c0:	8b 40 10             	mov    0x10(%eax),%eax
c010e5c3:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c010e5c9:	89 14 24             	mov    %edx,(%esp)
c010e5cc:	ff d0                	call   *%eax
}
c010e5ce:	c9                   	leave  
c010e5cf:	c3                   	ret    

c010e5d0 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e5d0:	55                   	push   %ebp
c010e5d1:	89 e5                	mov    %esp,%ebp
c010e5d3:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e5d6:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010e5db:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e5de:	74 1c                	je     c010e5fc <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e5e0:	a1 9c 2f 15 c0       	mov    0xc0152f9c,%eax
c010e5e5:	8b 40 14             	mov    0x14(%eax),%eax
c010e5e8:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c010e5ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e5f1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e5f5:	89 14 24             	mov    %edx,(%esp)
c010e5f8:	ff d0                	call   *%eax
c010e5fa:	eb 0a                	jmp    c010e606 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e5fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5ff:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e606:	c9                   	leave  
c010e607:	c3                   	ret    

c010e608 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e608:	55                   	push   %ebp
c010e609:	89 e5                	mov    %esp,%ebp
c010e60b:	83 ec 28             	sub    $0x28,%esp
c010e60e:	c7 45 f4 94 2f 15 c0 	movl   $0xc0152f94,-0xc(%ebp)
c010e615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e618:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e61b:	89 50 04             	mov    %edx,0x4(%eax)
c010e61e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e621:	8b 50 04             	mov    0x4(%eax),%edx
c010e624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e627:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e629:	c7 05 9c 2f 15 c0 8c 	movl   $0xc014fa8c,0xc0152f9c
c010e630:	fa 14 c0 

    rq = &__rq;
c010e633:	c7 05 a0 2f 15 c0 a4 	movl   $0xc0152fa4,0xc0152fa0
c010e63a:	2f 15 c0 
    rq->max_time_slice = 5;
c010e63d:	a1 a0 2f 15 c0       	mov    0xc0152fa0,%eax
c010e642:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010e649:	a1 9c 2f 15 c0       	mov    0xc0152f9c,%eax
c010e64e:	8b 40 04             	mov    0x4(%eax),%eax
c010e651:	8b 15 a0 2f 15 c0    	mov    0xc0152fa0,%edx
c010e657:	89 14 24             	mov    %edx,(%esp)
c010e65a:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e65c:	a1 9c 2f 15 c0       	mov    0xc0152f9c,%eax
c010e661:	8b 00                	mov    (%eax),%eax
c010e663:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e667:	c7 04 24 b0 87 11 c0 	movl   $0xc01187b0,(%esp)
c010e66e:	e8 f2 1c ff ff       	call   c0100365 <cprintf>
}
c010e673:	c9                   	leave  
c010e674:	c3                   	ret    

c010e675 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e675:	55                   	push   %ebp
c010e676:	89 e5                	mov    %esp,%ebp
c010e678:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e67b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e67e:	8b 00                	mov    (%eax),%eax
c010e680:	83 f8 03             	cmp    $0x3,%eax
c010e683:	75 24                	jne    c010e6a9 <wakeup_proc+0x34>
c010e685:	c7 44 24 0c c1 87 11 	movl   $0xc01187c1,0xc(%esp)
c010e68c:	c0 
c010e68d:	c7 44 24 08 dc 87 11 	movl   $0xc01187dc,0x8(%esp)
c010e694:	c0 
c010e695:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010e69c:	00 
c010e69d:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010e6a4:	e8 1f 28 ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e6a9:	e8 7c fe ff ff       	call   c010e52a <__intr_save>
c010e6ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e6b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6b4:	8b 00                	mov    (%eax),%eax
c010e6b6:	83 f8 02             	cmp    $0x2,%eax
c010e6b9:	74 2d                	je     c010e6e8 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e6bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6be:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e6c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6c7:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e6ce:	00 00 00 
            if (proc != current) {
c010e6d1:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e6d6:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e6d9:	74 29                	je     c010e704 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e6db:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6de:	89 04 24             	mov    %eax,(%esp)
c010e6e1:	e8 81 fe ff ff       	call   c010e567 <sched_class_enqueue>
c010e6e6:	eb 1c                	jmp    c010e704 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e6e8:	c7 44 24 08 07 88 11 	movl   $0xc0118807,0x8(%esp)
c010e6ef:	c0 
c010e6f0:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010e6f7:	00 
c010e6f8:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010e6ff:	e8 30 28 ff ff       	call   c0100f34 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e707:	89 04 24             	mov    %eax,(%esp)
c010e70a:	e8 45 fe ff ff       	call   c010e554 <__intr_restore>
}
c010e70f:	c9                   	leave  
c010e710:	c3                   	ret    

c010e711 <schedule>:

void
schedule(void) {
c010e711:	55                   	push   %ebp
c010e712:	89 e5                	mov    %esp,%ebp
c010e714:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e717:	e8 0e fe ff ff       	call   c010e52a <__intr_save>
c010e71c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e71f:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e724:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e72b:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e730:	8b 00                	mov    (%eax),%eax
c010e732:	83 f8 02             	cmp    $0x2,%eax
c010e735:	75 0d                	jne    c010e744 <schedule+0x33>
            sched_class_enqueue(current);
c010e737:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e73c:	89 04 24             	mov    %eax,(%esp)
c010e73f:	e8 23 fe ff ff       	call   c010e567 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e744:	e8 6c fe ff ff       	call   c010e5b5 <sched_class_pick_next>
c010e749:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e74c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e750:	74 0b                	je     c010e75d <schedule+0x4c>
            sched_class_dequeue(next);
c010e752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e755:	89 04 24             	mov    %eax,(%esp)
c010e758:	e8 36 fe ff ff       	call   c010e593 <sched_class_dequeue>
        }
        if (next == NULL) {
c010e75d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e761:	75 08                	jne    c010e76b <schedule+0x5a>
            next = idleproc;
c010e763:	a1 20 0f 15 c0       	mov    0xc0150f20,%eax
c010e768:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e76b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e76e:	8b 40 08             	mov    0x8(%eax),%eax
c010e771:	8d 50 01             	lea    0x1(%eax),%edx
c010e774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e777:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e77a:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010e77f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e782:	74 0b                	je     c010e78f <schedule+0x7e>
            proc_run(next);
c010e784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e787:	89 04 24             	mov    %eax,(%esp)
c010e78a:	e8 ce dc ff ff       	call   c010c45d <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e78f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e792:	89 04 24             	mov    %eax,(%esp)
c010e795:	e8 ba fd ff ff       	call   c010e554 <__intr_restore>
}
c010e79a:	c9                   	leave  
c010e79b:	c3                   	ret    

c010e79c <add_timer>:

void
add_timer(timer_t *timer) {
c010e79c:	55                   	push   %ebp
c010e79d:	89 e5                	mov    %esp,%ebp
c010e79f:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e7a2:	e8 83 fd ff ff       	call   c010e52a <__intr_save>
c010e7a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e7aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7ad:	8b 00                	mov    (%eax),%eax
c010e7af:	85 c0                	test   %eax,%eax
c010e7b1:	74 0a                	je     c010e7bd <add_timer+0x21>
c010e7b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7b6:	8b 40 04             	mov    0x4(%eax),%eax
c010e7b9:	85 c0                	test   %eax,%eax
c010e7bb:	75 24                	jne    c010e7e1 <add_timer+0x45>
c010e7bd:	c7 44 24 0c 24 88 11 	movl   $0xc0118824,0xc(%esp)
c010e7c4:	c0 
c010e7c5:	c7 44 24 08 dc 87 11 	movl   $0xc01187dc,0x8(%esp)
c010e7cc:	c0 
c010e7cd:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010e7d4:	00 
c010e7d5:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010e7dc:	e8 e7 26 ff ff       	call   c0100ec8 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e7e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7e4:	83 c0 08             	add    $0x8,%eax
c010e7e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e7ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e7ed:	8b 40 04             	mov    0x4(%eax),%eax
c010e7f0:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e7f3:	0f 94 c0             	sete   %al
c010e7f6:	0f b6 c0             	movzbl %al,%eax
c010e7f9:	85 c0                	test   %eax,%eax
c010e7fb:	75 24                	jne    c010e821 <add_timer+0x85>
c010e7fd:	c7 44 24 0c 50 88 11 	movl   $0xc0118850,0xc(%esp)
c010e804:	c0 
c010e805:	c7 44 24 08 dc 87 11 	movl   $0xc01187dc,0x8(%esp)
c010e80c:	c0 
c010e80d:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e814:	00 
c010e815:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010e81c:	e8 a7 26 ff ff       	call   c0100ec8 <__panic>
c010e821:	c7 45 e4 94 2f 15 c0 	movl   $0xc0152f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e828:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e82b:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e831:	eb 4a                	jmp    c010e87d <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e836:	83 e8 08             	sub    $0x8,%eax
c010e839:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e83c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e83f:	8b 10                	mov    (%eax),%edx
c010e841:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e844:	8b 00                	mov    (%eax),%eax
c010e846:	39 c2                	cmp    %eax,%edx
c010e848:	73 13                	jae    c010e85d <add_timer+0xc1>
                next->expires -= timer->expires;
c010e84a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e84d:	8b 10                	mov    (%eax),%edx
c010e84f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e852:	8b 00                	mov    (%eax),%eax
c010e854:	29 c2                	sub    %eax,%edx
c010e856:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e859:	89 10                	mov    %edx,(%eax)
                break;
c010e85b:	eb 29                	jmp    c010e886 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e85d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e860:	8b 10                	mov    (%eax),%edx
c010e862:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e865:	8b 00                	mov    (%eax),%eax
c010e867:	29 c2                	sub    %eax,%edx
c010e869:	8b 45 08             	mov    0x8(%ebp),%eax
c010e86c:	89 10                	mov    %edx,(%eax)
c010e86e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e871:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e874:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e877:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e87a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e87d:	81 7d f4 94 2f 15 c0 	cmpl   $0xc0152f94,-0xc(%ebp)
c010e884:	75 ad                	jne    c010e833 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e886:	8b 45 08             	mov    0x8(%ebp),%eax
c010e889:	8d 50 08             	lea    0x8(%eax),%edx
c010e88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e88f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e892:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e895:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e898:	8b 00                	mov    (%eax),%eax
c010e89a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e89d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e8a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e8a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e8a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e8a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e8ac:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e8af:	89 10                	mov    %edx,(%eax)
c010e8b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e8b4:	8b 10                	mov    (%eax),%edx
c010e8b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8b9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e8bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e8bf:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e8c2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e8c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e8c8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e8cb:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e8cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8d0:	89 04 24             	mov    %eax,(%esp)
c010e8d3:	e8 7c fc ff ff       	call   c010e554 <__intr_restore>
}
c010e8d8:	c9                   	leave  
c010e8d9:	c3                   	ret    

c010e8da <del_timer>:

void
del_timer(timer_t *timer) {
c010e8da:	55                   	push   %ebp
c010e8db:	89 e5                	mov    %esp,%ebp
c010e8dd:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e8e0:	e8 45 fc ff ff       	call   c010e52a <__intr_save>
c010e8e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e8e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8eb:	83 c0 08             	add    $0x8,%eax
c010e8ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e8f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8f4:	8b 40 04             	mov    0x4(%eax),%eax
c010e8f7:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e8fa:	0f 94 c0             	sete   %al
c010e8fd:	0f b6 c0             	movzbl %al,%eax
c010e900:	85 c0                	test   %eax,%eax
c010e902:	0f 85 89 00 00 00    	jne    c010e991 <del_timer+0xb7>
            if (timer->expires != 0) {
c010e908:	8b 45 08             	mov    0x8(%ebp),%eax
c010e90b:	8b 00                	mov    (%eax),%eax
c010e90d:	85 c0                	test   %eax,%eax
c010e90f:	74 35                	je     c010e946 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e911:	8b 45 08             	mov    0x8(%ebp),%eax
c010e914:	83 c0 08             	add    $0x8,%eax
c010e917:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e91a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e91d:	8b 40 04             	mov    0x4(%eax),%eax
c010e920:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e923:	81 7d f0 94 2f 15 c0 	cmpl   $0xc0152f94,-0x10(%ebp)
c010e92a:	74 1a                	je     c010e946 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e92c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e92f:	83 e8 08             	sub    $0x8,%eax
c010e932:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e935:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e938:	8b 10                	mov    (%eax),%edx
c010e93a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e93d:	8b 00                	mov    (%eax),%eax
c010e93f:	01 c2                	add    %eax,%edx
c010e941:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e944:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e946:	8b 45 08             	mov    0x8(%ebp),%eax
c010e949:	83 c0 08             	add    $0x8,%eax
c010e94c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e94f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e952:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e955:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e958:	8b 40 04             	mov    0x4(%eax),%eax
c010e95b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e95e:	8b 12                	mov    (%edx),%edx
c010e960:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e963:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e966:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e969:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e96c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e96f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e972:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e975:	89 10                	mov    %edx,(%eax)
c010e977:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e97a:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e97d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e980:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e983:	89 50 04             	mov    %edx,0x4(%eax)
c010e986:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e989:	8b 50 04             	mov    0x4(%eax),%edx
c010e98c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e98f:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e991:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e994:	89 04 24             	mov    %eax,(%esp)
c010e997:	e8 b8 fb ff ff       	call   c010e554 <__intr_restore>
}
c010e99c:	c9                   	leave  
c010e99d:	c3                   	ret    

c010e99e <run_timer_list>:

void
run_timer_list(void) {
c010e99e:	55                   	push   %ebp
c010e99f:	89 e5                	mov    %esp,%ebp
c010e9a1:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e9a4:	e8 81 fb ff ff       	call   c010e52a <__intr_save>
c010e9a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e9ac:	c7 45 e4 94 2f 15 c0 	movl   $0xc0152f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e9b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e9b6:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e9b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e9bc:	81 7d f4 94 2f 15 c0 	cmpl   $0xc0152f94,-0xc(%ebp)
c010e9c3:	0f 84 fb 00 00 00    	je     c010eac4 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e9c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9cc:	83 e8 08             	sub    $0x8,%eax
c010e9cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e9d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9d5:	8b 00                	mov    (%eax),%eax
c010e9d7:	85 c0                	test   %eax,%eax
c010e9d9:	75 24                	jne    c010e9ff <run_timer_list+0x61>
c010e9db:	c7 44 24 0c 71 88 11 	movl   $0xc0118871,0xc(%esp)
c010e9e2:	c0 
c010e9e3:	c7 44 24 08 dc 87 11 	movl   $0xc01187dc,0x8(%esp)
c010e9ea:	c0 
c010e9eb:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010e9f2:	00 
c010e9f3:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010e9fa:	e8 c9 24 ff ff       	call   c0100ec8 <__panic>
            timer->expires --;
c010e9ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea02:	8b 00                	mov    (%eax),%eax
c010ea04:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ea07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea0a:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010ea0c:	e9 a6 00 00 00       	jmp    c010eab7 <run_timer_list+0x119>
c010ea11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea14:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ea17:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ea1a:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010ea1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010ea20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea23:	8b 40 04             	mov    0x4(%eax),%eax
c010ea26:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010ea29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea2c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ea32:	85 c0                	test   %eax,%eax
c010ea34:	74 31                	je     c010ea67 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010ea36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea39:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ea3f:	85 c0                	test   %eax,%eax
c010ea41:	78 4a                	js     c010ea8d <run_timer_list+0xef>
c010ea43:	c7 44 24 0c 88 88 11 	movl   $0xc0118888,0xc(%esp)
c010ea4a:	c0 
c010ea4b:	c7 44 24 08 dc 87 11 	movl   $0xc01187dc,0x8(%esp)
c010ea52:	c0 
c010ea53:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010ea5a:	00 
c010ea5b:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010ea62:	e8 61 24 ff ff       	call   c0100ec8 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010ea67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea6a:	8b 40 04             	mov    0x4(%eax),%eax
c010ea6d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ea71:	c7 44 24 08 ac 88 11 	movl   $0xc01188ac,0x8(%esp)
c010ea78:	c0 
c010ea79:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010ea80:	00 
c010ea81:	c7 04 24 f1 87 11 c0 	movl   $0xc01187f1,(%esp)
c010ea88:	e8 a7 24 ff ff       	call   c0100f34 <__warn>
                }
                wakeup_proc(proc);
c010ea8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea90:	89 04 24             	mov    %eax,(%esp)
c010ea93:	e8 dd fb ff ff       	call   c010e675 <wakeup_proc>
                del_timer(timer);
c010ea98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea9b:	89 04 24             	mov    %eax,(%esp)
c010ea9e:	e8 37 fe ff ff       	call   c010e8da <del_timer>
                if (le == &timer_list) {
c010eaa3:	81 7d f4 94 2f 15 c0 	cmpl   $0xc0152f94,-0xc(%ebp)
c010eaaa:	75 02                	jne    c010eaae <run_timer_list+0x110>
                    break;
c010eaac:	eb 16                	jmp    c010eac4 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010eaae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eab1:	83 e8 08             	sub    $0x8,%eax
c010eab4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010eab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eaba:	8b 00                	mov    (%eax),%eax
c010eabc:	85 c0                	test   %eax,%eax
c010eabe:	0f 84 4d ff ff ff    	je     c010ea11 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010eac4:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010eac9:	89 04 24             	mov    %eax,(%esp)
c010eacc:	e8 ff fa ff ff       	call   c010e5d0 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010ead1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ead4:	89 04 24             	mov    %eax,(%esp)
c010ead7:	e8 78 fa ff ff       	call   c010e554 <__intr_restore>
}
c010eadc:	c9                   	leave  
c010eadd:	c3                   	ret    

c010eade <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010eade:	55                   	push   %ebp
c010eadf:	89 e5                	mov    %esp,%ebp
c010eae1:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010eae4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eae7:	8b 00                	mov    (%eax),%eax
c010eae9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010eaec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eaef:	89 04 24             	mov    %eax,(%esp)
c010eaf2:	e8 d4 e0 ff ff       	call   c010cbcb <do_exit>
}
c010eaf7:	c9                   	leave  
c010eaf8:	c3                   	ret    

c010eaf9 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010eaf9:	55                   	push   %ebp
c010eafa:	89 e5                	mov    %esp,%ebp
c010eafc:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010eaff:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010eb04:	8b 40 3c             	mov    0x3c(%eax),%eax
c010eb07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010eb0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb0d:	8b 40 44             	mov    0x44(%eax),%eax
c010eb10:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010eb13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb16:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb21:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010eb28:	e8 63 df ff ff       	call   c010ca90 <do_fork>
}
c010eb2d:	c9                   	leave  
c010eb2e:	c3                   	ret    

c010eb2f <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010eb2f:	55                   	push   %ebp
c010eb30:	89 e5                	mov    %esp,%ebp
c010eb32:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010eb35:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb38:	8b 00                	mov    (%eax),%eax
c010eb3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010eb3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb40:	83 c0 04             	add    $0x4,%eax
c010eb43:	8b 00                	mov    (%eax),%eax
c010eb45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010eb48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb52:	89 04 24             	mov    %eax,(%esp)
c010eb55:	e8 7a ee ff ff       	call   c010d9d4 <do_wait>
}
c010eb5a:	c9                   	leave  
c010eb5b:	c3                   	ret    

c010eb5c <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010eb5c:	55                   	push   %ebp
c010eb5d:	89 e5                	mov    %esp,%ebp
c010eb5f:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010eb62:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb65:	8b 00                	mov    (%eax),%eax
c010eb67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010eb6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb6d:	83 c0 04             	add    $0x4,%eax
c010eb70:	8b 00                	mov    (%eax),%eax
c010eb72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010eb75:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb78:	83 c0 08             	add    $0x8,%eax
c010eb7b:	8b 00                	mov    (%eax),%eax
c010eb7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010eb80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb83:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb91:	89 04 24             	mov    %eax,(%esp)
c010eb94:	e8 e8 eb ff ff       	call   c010d781 <do_execve>
}
c010eb99:	c9                   	leave  
c010eb9a:	c3                   	ret    

c010eb9b <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010eb9b:	55                   	push   %ebp
c010eb9c:	89 e5                	mov    %esp,%ebp
c010eb9e:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010eba1:	e8 18 ee ff ff       	call   c010d9be <do_yield>
}
c010eba6:	c9                   	leave  
c010eba7:	c3                   	ret    

c010eba8 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010eba8:	55                   	push   %ebp
c010eba9:	89 e5                	mov    %esp,%ebp
c010ebab:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ebae:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebb1:	8b 00                	mov    (%eax),%eax
c010ebb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ebb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebb9:	89 04 24             	mov    %eax,(%esp)
c010ebbc:	e8 b3 ef ff ff       	call   c010db74 <do_kill>
}
c010ebc1:	c9                   	leave  
c010ebc2:	c3                   	ret    

c010ebc3 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ebc3:	55                   	push   %ebp
c010ebc4:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ebc6:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010ebcb:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ebce:	5d                   	pop    %ebp
c010ebcf:	c3                   	ret    

c010ebd0 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ebd0:	55                   	push   %ebp
c010ebd1:	89 e5                	mov    %esp,%ebp
c010ebd3:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ebd6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebd9:	8b 00                	mov    (%eax),%eax
c010ebdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ebde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebe1:	89 04 24             	mov    %eax,(%esp)
c010ebe4:	e8 a2 17 ff ff       	call   c010038b <cputchar>
    return 0;
c010ebe9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ebee:	c9                   	leave  
c010ebef:	c3                   	ret    

c010ebf0 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ebf0:	55                   	push   %ebp
c010ebf1:	89 e5                	mov    %esp,%ebp
c010ebf3:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ebf6:	e8 7c 80 ff ff       	call   c0106c77 <print_pgdir>
    return 0;
c010ebfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec00:	c9                   	leave  
c010ec01:	c3                   	ret    

c010ec02 <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010ec02:	55                   	push   %ebp
c010ec03:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ec05:	a1 10 40 15 c0       	mov    0xc0154010,%eax
}
c010ec0a:	5d                   	pop    %ebp
c010ec0b:	c3                   	ret    

c010ec0c <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010ec0c:	55                   	push   %ebp
c010ec0d:	89 e5                	mov    %esp,%ebp
c010ec0f:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ec12:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec15:	8b 00                	mov    (%eax),%eax
c010ec17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ec1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec1d:	89 04 24             	mov    %eax,(%esp)
c010ec20:	e8 b2 f4 ff ff       	call   c010e0d7 <lab6_set_priority>
    return 0;
c010ec25:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec2a:	c9                   	leave  
c010ec2b:	c3                   	ret    

c010ec2c <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ec2c:	55                   	push   %ebp
c010ec2d:	89 e5                	mov    %esp,%ebp
c010ec2f:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ec32:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec35:	8b 00                	mov    (%eax),%eax
c010ec37:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ec3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec3d:	89 04 24             	mov    %eax,(%esp)
c010ec40:	e8 bc f4 ff ff       	call   c010e101 <do_sleep>
}
c010ec45:	c9                   	leave  
c010ec46:	c3                   	ret    

c010ec47 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ec47:	55                   	push   %ebp
c010ec48:	89 e5                	mov    %esp,%ebp
c010ec4a:	83 ec 28             	sub    $0x28,%esp
    cprintf("%d [sys_open]\n", _filestep++);
c010ec4d:	a1 b8 2f 15 c0       	mov    0xc0152fb8,%eax
c010ec52:	8d 50 01             	lea    0x1(%eax),%edx
c010ec55:	89 15 b8 2f 15 c0    	mov    %edx,0xc0152fb8
c010ec5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec5f:	c7 04 24 cc 88 11 c0 	movl   $0xc01188cc,(%esp)
c010ec66:	e8 fa 16 ff ff       	call   c0100365 <cprintf>
    const char *path = (const char *)arg[0];
c010ec6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec6e:	8b 00                	mov    (%eax),%eax
c010ec70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ec73:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec76:	8b 40 04             	mov    0x4(%eax),%eax
c010ec79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010ec7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec86:	89 04 24             	mov    %eax,(%esp)
c010ec89:	e8 b5 c9 ff ff       	call   c010b643 <sysfile_open>
}
c010ec8e:	c9                   	leave  
c010ec8f:	c3                   	ret    

c010ec90 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ec90:	55                   	push   %ebp
c010ec91:	89 e5                	mov    %esp,%ebp
c010ec93:	83 ec 28             	sub    $0x28,%esp
    cprintf("%d [sys_close]\n", _filestep++);
c010ec96:	a1 b8 2f 15 c0       	mov    0xc0152fb8,%eax
c010ec9b:	8d 50 01             	lea    0x1(%eax),%edx
c010ec9e:	89 15 b8 2f 15 c0    	mov    %edx,0xc0152fb8
c010eca4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eca8:	c7 04 24 db 88 11 c0 	movl   $0xc01188db,(%esp)
c010ecaf:	e8 b1 16 ff ff       	call   c0100365 <cprintf>
    int fd = (int)arg[0];
c010ecb4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecb7:	8b 00                	mov    (%eax),%eax
c010ecb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010ecbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecbf:	89 04 24             	mov    %eax,(%esp)
c010ecc2:	e8 d3 c9 ff ff       	call   c010b69a <sysfile_close>
}
c010ecc7:	c9                   	leave  
c010ecc8:	c3                   	ret    

c010ecc9 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ecc9:	55                   	push   %ebp
c010ecca:	89 e5                	mov    %esp,%ebp
c010eccc:	83 ec 28             	sub    $0x28,%esp
    cprintf("%d [sys_read]\n", _filestep++);
c010eccf:	a1 b8 2f 15 c0       	mov    0xc0152fb8,%eax
c010ecd4:	8d 50 01             	lea    0x1(%eax),%edx
c010ecd7:	89 15 b8 2f 15 c0    	mov    %edx,0xc0152fb8
c010ecdd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ece1:	c7 04 24 eb 88 11 c0 	movl   $0xc01188eb,(%esp)
c010ece8:	e8 78 16 ff ff       	call   c0100365 <cprintf>
    int fd = (int)arg[0];
c010eced:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecf0:	8b 00                	mov    (%eax),%eax
c010ecf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ecf5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecf8:	83 c0 04             	add    $0x4,%eax
c010ecfb:	8b 00                	mov    (%eax),%eax
c010ecfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed03:	8b 40 08             	mov    0x8(%eax),%eax
c010ed06:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010ed09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed0c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed13:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed1a:	89 04 24             	mov    %eax,(%esp)
c010ed1d:	e8 8b c9 ff ff       	call   c010b6ad <sysfile_read>
}
c010ed22:	c9                   	leave  
c010ed23:	c3                   	ret    

c010ed24 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010ed24:	55                   	push   %ebp
c010ed25:	89 e5                	mov    %esp,%ebp
c010ed27:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed2d:	8b 00                	mov    (%eax),%eax
c010ed2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed32:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed35:	83 c0 04             	add    $0x4,%eax
c010ed38:	8b 00                	mov    (%eax),%eax
c010ed3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed40:	8b 40 08             	mov    0x8(%eax),%eax
c010ed43:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010ed46:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed49:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed50:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed57:	89 04 24             	mov    %eax,(%esp)
c010ed5a:	e8 c6 ca ff ff       	call   c010b825 <sysfile_write>
}
c010ed5f:	c9                   	leave  
c010ed60:	c3                   	ret    

c010ed61 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010ed61:	55                   	push   %ebp
c010ed62:	89 e5                	mov    %esp,%ebp
c010ed64:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed67:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed6a:	8b 00                	mov    (%eax),%eax
c010ed6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010ed6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed72:	83 c0 04             	add    $0x4,%eax
c010ed75:	8b 00                	mov    (%eax),%eax
c010ed77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010ed7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed7d:	83 c0 08             	add    $0x8,%eax
c010ed80:	8b 00                	mov    (%eax),%eax
c010ed82:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010ed85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed88:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed96:	89 04 24             	mov    %eax,(%esp)
c010ed99:	e8 01 cc ff ff       	call   c010b99f <sysfile_seek>
}
c010ed9e:	c9                   	leave  
c010ed9f:	c3                   	ret    

c010eda0 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010eda0:	55                   	push   %ebp
c010eda1:	89 e5                	mov    %esp,%ebp
c010eda3:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eda6:	8b 45 08             	mov    0x8(%ebp),%eax
c010eda9:	8b 00                	mov    (%eax),%eax
c010edab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010edae:	8b 45 08             	mov    0x8(%ebp),%eax
c010edb1:	83 c0 04             	add    $0x4,%eax
c010edb4:	8b 00                	mov    (%eax),%eax
c010edb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010edb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edc3:	89 04 24             	mov    %eax,(%esp)
c010edc6:	e8 f5 cb ff ff       	call   c010b9c0 <sysfile_fstat>
}
c010edcb:	c9                   	leave  
c010edcc:	c3                   	ret    

c010edcd <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010edcd:	55                   	push   %ebp
c010edce:	89 e5                	mov    %esp,%ebp
c010edd0:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010edd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010edd6:	8b 00                	mov    (%eax),%eax
c010edd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010eddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edde:	89 04 24             	mov    %eax,(%esp)
c010ede1:	e8 58 cc ff ff       	call   c010ba3e <sysfile_fsync>
}
c010ede6:	c9                   	leave  
c010ede7:	c3                   	ret    

c010ede8 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ede8:	55                   	push   %ebp
c010ede9:	89 e5                	mov    %esp,%ebp
c010edeb:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010edee:	8b 45 08             	mov    0x8(%ebp),%eax
c010edf1:	8b 00                	mov    (%eax),%eax
c010edf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010edf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010edf9:	8b 40 04             	mov    0x4(%eax),%eax
c010edfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010edff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee02:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee09:	89 04 24             	mov    %eax,(%esp)
c010ee0c:	e8 ca cd ff ff       	call   c010bbdb <sysfile_getcwd>
}
c010ee11:	c9                   	leave  
c010ee12:	c3                   	ret    

c010ee13 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ee13:	55                   	push   %ebp
c010ee14:	89 e5                	mov    %esp,%ebp
c010ee16:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee19:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee1c:	8b 00                	mov    (%eax),%eax
c010ee1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ee21:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee24:	83 c0 04             	add    $0x4,%eax
c010ee27:	8b 00                	mov    (%eax),%eax
c010ee29:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ee2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee36:	89 04 24             	mov    %eax,(%esp)
c010ee39:	e8 34 ce ff ff       	call   c010bc72 <sysfile_getdirentry>
}
c010ee3e:	c9                   	leave  
c010ee3f:	c3                   	ret    

c010ee40 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ee40:	55                   	push   %ebp
c010ee41:	89 e5                	mov    %esp,%ebp
c010ee43:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ee46:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee49:	8b 00                	mov    (%eax),%eax
c010ee4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ee4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee51:	83 c0 04             	add    $0x4,%eax
c010ee54:	8b 00                	mov    (%eax),%eax
c010ee56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ee59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee63:	89 04 24             	mov    %eax,(%esp)
c010ee66:	e8 fb ce ff ff       	call   c010bd66 <sysfile_dup>
}
c010ee6b:	c9                   	leave  
c010ee6c:	c3                   	ret    

c010ee6d <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ee6d:	55                   	push   %ebp
c010ee6e:	89 e5                	mov    %esp,%ebp
c010ee70:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010ee73:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010ee78:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ee7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ee7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee81:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ee84:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ee87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ee8b:	78 60                	js     c010eeed <syscall+0x80>
c010ee8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee90:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ee95:	77 56                	ja     c010eeed <syscall+0x80>
        if (syscalls[num] != NULL) {
c010ee97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee9a:	8b 04 85 c0 fa 14 c0 	mov    -0x3feb0540(,%eax,4),%eax
c010eea1:	85 c0                	test   %eax,%eax
c010eea3:	74 48                	je     c010eeed <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010eea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eea8:	8b 40 14             	mov    0x14(%eax),%eax
c010eeab:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010eeae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb1:	8b 40 18             	mov    0x18(%eax),%eax
c010eeb4:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010eeb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeba:	8b 40 10             	mov    0x10(%eax),%eax
c010eebd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010eec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eec3:	8b 00                	mov    (%eax),%eax
c010eec5:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010eec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eecb:	8b 40 04             	mov    0x4(%eax),%eax
c010eece:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010eed1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eed4:	8b 04 85 c0 fa 14 c0 	mov    -0x3feb0540(,%eax,4),%eax
c010eedb:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010eede:	89 14 24             	mov    %edx,(%esp)
c010eee1:	ff d0                	call   *%eax
c010eee3:	89 c2                	mov    %eax,%edx
c010eee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eee8:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010eeeb:	eb 46                	jmp    c010ef33 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010eeed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eef0:	89 04 24             	mov    %eax,(%esp)
c010eef3:	e8 e2 35 ff ff       	call   c01024da <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010eef8:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010eefd:	8d 50 48             	lea    0x48(%eax),%edx
c010ef00:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c010ef05:	8b 40 04             	mov    0x4(%eax),%eax
c010ef08:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ef0c:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ef10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef13:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef17:	c7 44 24 08 fc 88 11 	movl   $0xc01188fc,0x8(%esp)
c010ef1e:	c0 
c010ef1f:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c010ef26:	00 
c010ef27:	c7 04 24 28 89 11 c0 	movl   $0xc0118928,(%esp)
c010ef2e:	e8 95 1f ff ff       	call   c0100ec8 <__panic>
            num, current->pid, current->name);
}
c010ef33:	c9                   	leave  
c010ef34:	c3                   	ret    

c010ef35 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ef35:	55                   	push   %ebp
c010ef36:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ef38:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef3b:	a1 28 40 15 c0       	mov    0xc0154028,%eax
c010ef40:	29 c2                	sub    %eax,%edx
c010ef42:	89 d0                	mov    %edx,%eax
c010ef44:	c1 f8 02             	sar    $0x2,%eax
c010ef47:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010ef4d:	5d                   	pop    %ebp
c010ef4e:	c3                   	ret    

c010ef4f <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ef4f:	55                   	push   %ebp
c010ef50:	89 e5                	mov    %esp,%ebp
c010ef52:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ef55:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef58:	89 04 24             	mov    %eax,(%esp)
c010ef5b:	e8 d5 ff ff ff       	call   c010ef35 <page2ppn>
c010ef60:	c1 e0 0c             	shl    $0xc,%eax
}
c010ef63:	c9                   	leave  
c010ef64:	c3                   	ret    

c010ef65 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ef65:	55                   	push   %ebp
c010ef66:	89 e5                	mov    %esp,%ebp
c010ef68:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ef6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef6e:	89 04 24             	mov    %eax,(%esp)
c010ef71:	e8 d9 ff ff ff       	call   c010ef4f <page2pa>
c010ef76:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef7c:	c1 e8 0c             	shr    $0xc,%eax
c010ef7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ef82:	a1 80 0e 15 c0       	mov    0xc0150e80,%eax
c010ef87:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ef8a:	72 23                	jb     c010efaf <page2kva+0x4a>
c010ef8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef93:	c7 44 24 08 40 89 11 	movl   $0xc0118940,0x8(%esp)
c010ef9a:	c0 
c010ef9b:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010efa2:	00 
c010efa3:	c7 04 24 63 89 11 c0 	movl   $0xc0118963,(%esp)
c010efaa:	e8 19 1f ff ff       	call   c0100ec8 <__panic>
c010efaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efb2:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010efb7:	c9                   	leave  
c010efb8:	c3                   	ret    

c010efb9 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010efb9:	55                   	push   %ebp
c010efba:	89 e5                	mov    %esp,%ebp
c010efbc:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010efbf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010efc6:	e8 57 2c ff ff       	call   c0101c22 <ide_device_valid>
c010efcb:	85 c0                	test   %eax,%eax
c010efcd:	75 1c                	jne    c010efeb <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010efcf:	c7 44 24 08 71 89 11 	movl   $0xc0118971,0x8(%esp)
c010efd6:	c0 
c010efd7:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010efde:	00 
c010efdf:	c7 04 24 8b 89 11 c0 	movl   $0xc011898b,(%esp)
c010efe6:	e8 dd 1e ff ff       	call   c0100ec8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010efeb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010eff2:	e8 6a 2c ff ff       	call   c0101c61 <ide_device_size>
c010eff7:	c1 e8 03             	shr    $0x3,%eax
c010effa:	a3 dc 40 15 c0       	mov    %eax,0xc01540dc
}
c010efff:	c9                   	leave  
c010f000:	c3                   	ret    

c010f001 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010f001:	55                   	push   %ebp
c010f002:	89 e5                	mov    %esp,%ebp
c010f004:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f007:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f00a:	89 04 24             	mov    %eax,(%esp)
c010f00d:	e8 53 ff ff ff       	call   c010ef65 <page2kva>
c010f012:	8b 55 08             	mov    0x8(%ebp),%edx
c010f015:	c1 ea 08             	shr    $0x8,%edx
c010f018:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f01b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f01f:	74 0b                	je     c010f02c <swapfs_read+0x2b>
c010f021:	8b 15 dc 40 15 c0    	mov    0xc01540dc,%edx
c010f027:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f02a:	72 23                	jb     c010f04f <swapfs_read+0x4e>
c010f02c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f02f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f033:	c7 44 24 08 a1 89 11 	movl   $0xc01189a1,0x8(%esp)
c010f03a:	c0 
c010f03b:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010f042:	00 
c010f043:	c7 04 24 8b 89 11 c0 	movl   $0xc011898b,(%esp)
c010f04a:	e8 79 1e ff ff       	call   c0100ec8 <__panic>
c010f04f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f052:	c1 e2 03             	shl    $0x3,%edx
c010f055:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f05c:	00 
c010f05d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f061:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f065:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f06c:	e8 2f 2c ff ff       	call   c0101ca0 <ide_read_secs>
}
c010f071:	c9                   	leave  
c010f072:	c3                   	ret    

c010f073 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010f073:	55                   	push   %ebp
c010f074:	89 e5                	mov    %esp,%ebp
c010f076:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f079:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f07c:	89 04 24             	mov    %eax,(%esp)
c010f07f:	e8 e1 fe ff ff       	call   c010ef65 <page2kva>
c010f084:	8b 55 08             	mov    0x8(%ebp),%edx
c010f087:	c1 ea 08             	shr    $0x8,%edx
c010f08a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f08d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f091:	74 0b                	je     c010f09e <swapfs_write+0x2b>
c010f093:	8b 15 dc 40 15 c0    	mov    0xc01540dc,%edx
c010f099:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f09c:	72 23                	jb     c010f0c1 <swapfs_write+0x4e>
c010f09e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f0a5:	c7 44 24 08 a1 89 11 	movl   $0xc01189a1,0x8(%esp)
c010f0ac:	c0 
c010f0ad:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010f0b4:	00 
c010f0b5:	c7 04 24 8b 89 11 c0 	movl   $0xc011898b,(%esp)
c010f0bc:	e8 07 1e ff ff       	call   c0100ec8 <__panic>
c010f0c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f0c4:	c1 e2 03             	shl    $0x3,%edx
c010f0c7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f0ce:	00 
c010f0cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f0d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f0d7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f0de:	e8 0b 2e ff ff       	call   c0101eee <ide_write_secs>
}
c010f0e3:	c9                   	leave  
c010f0e4:	c3                   	ret    

c010f0e5 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f0e5:	55                   	push   %ebp
c010f0e6:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f0e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0eb:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f0ee:	5d                   	pop    %ebp
c010f0ef:	c3                   	ret    

c010f0f0 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010f0f0:	55                   	push   %ebp
c010f0f1:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f0f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0f6:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f0f9:	5d                   	pop    %ebp
c010f0fa:	c3                   	ret    

c010f0fb <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f0fb:	55                   	push   %ebp
c010f0fc:	89 e5                	mov    %esp,%ebp
c010f0fe:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f101:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010f108:	e8 ea 5b ff ff       	call   c0104cf7 <kmalloc>
c010f10d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f110:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f114:	74 09                	je     c010f11f <__alloc_inode+0x24>
        node->in_type = type;
c010f116:	8b 55 08             	mov    0x8(%ebp),%edx
c010f119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f11c:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f11f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f122:	c9                   	leave  
c010f123:	c3                   	ret    

c010f124 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f124:	55                   	push   %ebp
c010f125:	89 e5                	mov    %esp,%ebp
c010f127:	83 ec 18             	sub    $0x18,%esp
    cprintf("[inode_init]\n");
c010f12a:	c7 04 24 c0 89 11 c0 	movl   $0xc01189c0,(%esp)
c010f131:	e8 2f 12 ff ff       	call   c0100365 <cprintf>
    node->ref_count = 0;
c010f136:	8b 45 08             	mov    0x8(%ebp),%eax
c010f139:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f140:	8b 45 08             	mov    0x8(%ebp),%eax
c010f143:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f14a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f14d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f150:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f153:	8b 45 08             	mov    0x8(%ebp),%eax
c010f156:	8b 55 10             	mov    0x10(%ebp),%edx
c010f159:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f15c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f15f:	89 04 24             	mov    %eax,(%esp)
c010f162:	e8 87 00 00 00       	call   c010f1ee <inode_ref_inc>
}
c010f167:	c9                   	leave  
c010f168:	c3                   	ret    

c010f169 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f169:	55                   	push   %ebp
c010f16a:	89 e5                	mov    %esp,%ebp
c010f16c:	83 ec 18             	sub    $0x18,%esp
    cprintf("[inode_kill]\n");
c010f16f:	c7 04 24 ce 89 11 c0 	movl   $0xc01189ce,(%esp)
c010f176:	e8 ea 11 ff ff       	call   c0100365 <cprintf>
    assert(inode_ref_count(node) == 0);
c010f17b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f17e:	89 04 24             	mov    %eax,(%esp)
c010f181:	e8 5f ff ff ff       	call   c010f0e5 <inode_ref_count>
c010f186:	85 c0                	test   %eax,%eax
c010f188:	74 24                	je     c010f1ae <inode_kill+0x45>
c010f18a:	c7 44 24 0c dc 89 11 	movl   $0xc01189dc,0xc(%esp)
c010f191:	c0 
c010f192:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f199:	c0 
c010f19a:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c010f1a1:	00 
c010f1a2:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f1a9:	e8 1a 1d ff ff       	call   c0100ec8 <__panic>
    assert(inode_open_count(node) == 0);
c010f1ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1b1:	89 04 24             	mov    %eax,(%esp)
c010f1b4:	e8 37 ff ff ff       	call   c010f0f0 <inode_open_count>
c010f1b9:	85 c0                	test   %eax,%eax
c010f1bb:	74 24                	je     c010f1e1 <inode_kill+0x78>
c010f1bd:	c7 44 24 0c 20 8a 11 	movl   $0xc0118a20,0xc(%esp)
c010f1c4:	c0 
c010f1c5:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f1cc:	c0 
c010f1cd:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010f1d4:	00 
c010f1d5:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f1dc:	e8 e7 1c ff ff       	call   c0100ec8 <__panic>
    kfree(node);
c010f1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1e4:	89 04 24             	mov    %eax,(%esp)
c010f1e7:	e8 26 5b ff ff       	call   c0104d12 <kfree>
}
c010f1ec:	c9                   	leave  
c010f1ed:	c3                   	ret    

c010f1ee <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f1ee:	55                   	push   %ebp
c010f1ef:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f1f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1f4:	8b 40 30             	mov    0x30(%eax),%eax
c010f1f7:	8d 50 01             	lea    0x1(%eax),%edx
c010f1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1fd:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f200:	8b 45 08             	mov    0x8(%ebp),%eax
c010f203:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f206:	5d                   	pop    %ebp
c010f207:	c3                   	ret    

c010f208 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f208:	55                   	push   %ebp
c010f209:	89 e5                	mov    %esp,%ebp
c010f20b:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010f20e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f211:	89 04 24             	mov    %eax,(%esp)
c010f214:	e8 cc fe ff ff       	call   c010f0e5 <inode_ref_count>
c010f219:	85 c0                	test   %eax,%eax
c010f21b:	7f 24                	jg     c010f241 <inode_ref_dec+0x39>
c010f21d:	c7 44 24 0c 3c 8a 11 	movl   $0xc0118a3c,0xc(%esp)
c010f224:	c0 
c010f225:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f22c:	c0 
c010f22d:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c010f234:	00 
c010f235:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f23c:	e8 87 1c ff ff       	call   c0100ec8 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f241:	8b 45 08             	mov    0x8(%ebp),%eax
c010f244:	8b 40 30             	mov    0x30(%eax),%eax
c010f247:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f24a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f24d:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f250:	8b 45 08             	mov    0x8(%ebp),%eax
c010f253:	8b 40 30             	mov    0x30(%eax),%eax
c010f256:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f259:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f25d:	0f 85 8d 00 00 00    	jne    c010f2f0 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f263:	8b 45 08             	mov    0x8(%ebp),%eax
c010f266:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f269:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f26d:	74 17                	je     c010f286 <inode_ref_dec+0x7e>
c010f26f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f272:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f275:	85 c0                	test   %eax,%eax
c010f277:	74 0d                	je     c010f286 <inode_ref_dec+0x7e>
c010f279:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f27c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f27f:	8b 40 24             	mov    0x24(%eax),%eax
c010f282:	85 c0                	test   %eax,%eax
c010f284:	75 24                	jne    c010f2aa <inode_ref_dec+0xa2>
c010f286:	c7 44 24 0c 58 8a 11 	movl   $0xc0118a58,0xc(%esp)
c010f28d:	c0 
c010f28e:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f295:	c0 
c010f296:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010f29d:	00 
c010f29e:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f2a5:	e8 1e 1c ff ff       	call   c0100ec8 <__panic>
c010f2aa:	c7 44 24 04 a8 8a 11 	movl   $0xc0118aa8,0x4(%esp)
c010f2b1:	c0 
c010f2b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2b5:	89 04 24             	mov    %eax,(%esp)
c010f2b8:	e8 39 01 00 00       	call   c010f3f6 <inode_check>
c010f2bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2c0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f2c3:	8b 40 24             	mov    0x24(%eax),%eax
c010f2c6:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2c9:	89 14 24             	mov    %edx,(%esp)
c010f2cc:	ff d0                	call   *%eax
c010f2ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f2d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f2d5:	74 19                	je     c010f2f0 <inode_ref_dec+0xe8>
c010f2d7:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f2db:	74 13                	je     c010f2f0 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f2dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f2e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f2e4:	c7 04 24 b0 8a 11 c0 	movl   $0xc0118ab0,(%esp)
c010f2eb:	e8 75 10 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010f2f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f2f3:	c9                   	leave  
c010f2f4:	c3                   	ret    

c010f2f5 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f2f5:	55                   	push   %ebp
c010f2f6:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f2f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2fb:	8b 40 34             	mov    0x34(%eax),%eax
c010f2fe:	8d 50 01             	lea    0x1(%eax),%edx
c010f301:	8b 45 08             	mov    0x8(%ebp),%eax
c010f304:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f307:	8b 45 08             	mov    0x8(%ebp),%eax
c010f30a:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f30d:	5d                   	pop    %ebp
c010f30e:	c3                   	ret    

c010f30f <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f30f:	55                   	push   %ebp
c010f310:	89 e5                	mov    %esp,%ebp
c010f312:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f315:	8b 45 08             	mov    0x8(%ebp),%eax
c010f318:	89 04 24             	mov    %eax,(%esp)
c010f31b:	e8 d0 fd ff ff       	call   c010f0f0 <inode_open_count>
c010f320:	85 c0                	test   %eax,%eax
c010f322:	7f 24                	jg     c010f348 <inode_open_dec+0x39>
c010f324:	c7 44 24 0c d0 8a 11 	movl   $0xc0118ad0,0xc(%esp)
c010f32b:	c0 
c010f32c:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f333:	c0 
c010f334:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010f33b:	00 
c010f33c:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f343:	e8 80 1b ff ff       	call   c0100ec8 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f348:	8b 45 08             	mov    0x8(%ebp),%eax
c010f34b:	8b 40 34             	mov    0x34(%eax),%eax
c010f34e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f351:	8b 45 08             	mov    0x8(%ebp),%eax
c010f354:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f357:	8b 45 08             	mov    0x8(%ebp),%eax
c010f35a:	8b 40 34             	mov    0x34(%eax),%eax
c010f35d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f360:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f364:	0f 85 87 00 00 00    	jne    c010f3f1 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f36a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f36d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f370:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f374:	74 17                	je     c010f38d <inode_open_dec+0x7e>
c010f376:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f379:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f37c:	85 c0                	test   %eax,%eax
c010f37e:	74 0d                	je     c010f38d <inode_open_dec+0x7e>
c010f380:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f383:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f386:	8b 40 08             	mov    0x8(%eax),%eax
c010f389:	85 c0                	test   %eax,%eax
c010f38b:	75 24                	jne    c010f3b1 <inode_open_dec+0xa2>
c010f38d:	c7 44 24 0c ec 8a 11 	movl   $0xc0118aec,0xc(%esp)
c010f394:	c0 
c010f395:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f39c:	c0 
c010f39d:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c010f3a4:	00 
c010f3a5:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f3ac:	e8 17 1b ff ff       	call   c0100ec8 <__panic>
c010f3b1:	c7 44 24 04 3a 8b 11 	movl   $0xc0118b3a,0x4(%esp)
c010f3b8:	c0 
c010f3b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3bc:	89 04 24             	mov    %eax,(%esp)
c010f3bf:	e8 32 00 00 00       	call   c010f3f6 <inode_check>
c010f3c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3ca:	8b 40 08             	mov    0x8(%eax),%eax
c010f3cd:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3d0:	89 14 24             	mov    %edx,(%esp)
c010f3d3:	ff d0                	call   *%eax
c010f3d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f3d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f3dc:	74 13                	je     c010f3f1 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f3de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f3e5:	c7 04 24 40 8b 11 c0 	movl   $0xc0118b40,(%esp)
c010f3ec:	e8 74 0f ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010f3f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f3f4:	c9                   	leave  
c010f3f5:	c3                   	ret    

c010f3f6 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f3f6:	55                   	push   %ebp
c010f3f7:	89 e5                	mov    %esp,%ebp
c010f3f9:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f3fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f400:	74 0a                	je     c010f40c <inode_check+0x16>
c010f402:	8b 45 08             	mov    0x8(%ebp),%eax
c010f405:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f408:	85 c0                	test   %eax,%eax
c010f40a:	75 24                	jne    c010f430 <inode_check+0x3a>
c010f40c:	c7 44 24 0c 60 8b 11 	movl   $0xc0118b60,0xc(%esp)
c010f413:	c0 
c010f414:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f41b:	c0 
c010f41c:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010f423:	00 
c010f424:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f42b:	e8 98 1a ff ff       	call   c0100ec8 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f430:	8b 45 08             	mov    0x8(%ebp),%eax
c010f433:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f436:	8b 00                	mov    (%eax),%eax
c010f438:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f43d:	74 24                	je     c010f463 <inode_check+0x6d>
c010f43f:	c7 44 24 0c 88 8b 11 	movl   $0xc0118b88,0xc(%esp)
c010f446:	c0 
c010f447:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f44e:	c0 
c010f44f:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f456:	00 
c010f457:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f45e:	e8 65 1a ff ff       	call   c0100ec8 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f463:	8b 45 08             	mov    0x8(%ebp),%eax
c010f466:	89 04 24             	mov    %eax,(%esp)
c010f469:	e8 77 fc ff ff       	call   c010f0e5 <inode_ref_count>
c010f46e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f471:	8b 45 08             	mov    0x8(%ebp),%eax
c010f474:	89 04 24             	mov    %eax,(%esp)
c010f477:	e8 74 fc ff ff       	call   c010f0f0 <inode_open_count>
c010f47c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f47f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f482:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f485:	7c 06                	jl     c010f48d <inode_check+0x97>
c010f487:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f48b:	79 24                	jns    c010f4b1 <inode_check+0xbb>
c010f48d:	c7 44 24 0c b0 8b 11 	movl   $0xc0118bb0,0xc(%esp)
c010f494:	c0 
c010f495:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f49c:	c0 
c010f49d:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010f4a4:	00 
c010f4a5:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f4ac:	e8 17 1a ff ff       	call   c0100ec8 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f4b1:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f4b8:	7f 09                	jg     c010f4c3 <inode_check+0xcd>
c010f4ba:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f4c1:	7e 24                	jle    c010f4e7 <inode_check+0xf1>
c010f4c3:	c7 44 24 0c dc 8b 11 	movl   $0xc0118bdc,0xc(%esp)
c010f4ca:	c0 
c010f4cb:	c7 44 24 08 f7 89 11 	movl   $0xc01189f7,0x8(%esp)
c010f4d2:	c0 
c010f4d3:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010f4da:	00 
c010f4db:	c7 04 24 0c 8a 11 c0 	movl   $0xc0118a0c,(%esp)
c010f4e2:	e8 e1 19 ff ff       	call   c0100ec8 <__panic>
}
c010f4e7:	c9                   	leave  
c010f4e8:	c3                   	ret    

c010f4e9 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f4e9:	55                   	push   %ebp
c010f4ea:	89 e5                	mov    %esp,%ebp
c010f4ec:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f4ef:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f4f6:	e8 fc 57 ff ff       	call   c0104cf7 <kmalloc>
c010f4fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f4fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f502:	74 09                	je     c010f50d <__alloc_fs+0x24>
        fs->fs_type = type;
c010f504:	8b 55 08             	mov    0x8(%ebp),%edx
c010f507:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f50a:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f50d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f510:	c9                   	leave  
c010f511:	c3                   	ret    

c010f512 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f512:	55                   	push   %ebp
c010f513:	89 e5                	mov    %esp,%ebp
c010f515:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f518:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f51f:	00 
c010f520:	c7 04 24 bc 2f 15 c0 	movl   $0xc0152fbc,(%esp)
c010f527:	e8 5d a6 ff ff       	call   c0109b89 <sem_init>
    vfs_devlist_init();
c010f52c:	e8 63 01 00 00       	call   c010f694 <vfs_devlist_init>
}
c010f531:	c9                   	leave  
c010f532:	c3                   	ret    

c010f533 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f533:	55                   	push   %ebp
c010f534:	89 e5                	mov    %esp,%ebp
c010f536:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f539:	c7 04 24 bc 2f 15 c0 	movl   $0xc0152fbc,(%esp)
c010f540:	e8 d2 a7 ff ff       	call   c0109d17 <down>
}
c010f545:	c9                   	leave  
c010f546:	c3                   	ret    

c010f547 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f547:	55                   	push   %ebp
c010f548:	89 e5                	mov    %esp,%ebp
c010f54a:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f54d:	c7 04 24 bc 2f 15 c0 	movl   $0xc0152fbc,(%esp)
c010f554:	e8 a3 a7 ff ff       	call   c0109cfc <up>
}
c010f559:	c9                   	leave  
c010f55a:	c3                   	ret    

c010f55b <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f55b:	55                   	push   %ebp
c010f55c:	89 e5                	mov    %esp,%ebp
c010f55e:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f561:	e8 cd ff ff ff       	call   c010f533 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f566:	a1 c8 2f 15 c0       	mov    0xc0152fc8,%eax
c010f56b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f56e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f571:	a3 c8 2f 15 c0       	mov    %eax,0xc0152fc8
    }
    unlock_bootfs();
c010f576:	e8 cc ff ff ff       	call   c010f547 <unlock_bootfs>
    if (old != NULL) {
c010f57b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f57f:	74 0b                	je     c010f58c <change_bootfs+0x31>
        vop_ref_dec(old);
c010f581:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f584:	89 04 24             	mov    %eax,(%esp)
c010f587:	e8 7c fc ff ff       	call   c010f208 <inode_ref_dec>
    }
}
c010f58c:	c9                   	leave  
c010f58d:	c3                   	ret    

c010f58e <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f58e:	55                   	push   %ebp
c010f58f:	89 e5                	mov    %esp,%ebp
c010f591:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f594:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f59b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f59f:	74 62                	je     c010f603 <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f5a1:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f5a8:	00 
c010f5a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5ac:	89 04 24             	mov    %eax,(%esp)
c010f5af:	e8 b3 5f 00 00       	call   c0115567 <strchr>
c010f5b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f5b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f5bb:	74 0d                	je     c010f5ca <vfs_set_bootfs+0x3c>
c010f5bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5c0:	83 c0 01             	add    $0x1,%eax
c010f5c3:	0f b6 00             	movzbl (%eax),%eax
c010f5c6:	84 c0                	test   %al,%al
c010f5c8:	74 07                	je     c010f5d1 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f5ca:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f5cf:	eb 42                	jmp    c010f613 <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f5d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5d4:	89 04 24             	mov    %eax,(%esp)
c010f5d7:	e8 29 11 00 00       	call   c0110705 <vfs_chdir>
c010f5dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f5df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f5e3:	74 05                	je     c010f5ea <vfs_set_bootfs+0x5c>
            return ret;
c010f5e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5e8:	eb 29                	jmp    c010f613 <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f5ea:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f5ed:	89 04 24             	mov    %eax,(%esp)
c010f5f0:	e8 e4 0f 00 00       	call   c01105d9 <vfs_get_curdir>
c010f5f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f5f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f5fc:	74 05                	je     c010f603 <vfs_set_bootfs+0x75>
            return ret;
c010f5fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f601:	eb 10                	jmp    c010f613 <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f603:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f606:	89 04 24             	mov    %eax,(%esp)
c010f609:	e8 4d ff ff ff       	call   c010f55b <change_bootfs>
    return 0;
c010f60e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f613:	c9                   	leave  
c010f614:	c3                   	ret    

c010f615 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f615:	55                   	push   %ebp
c010f616:	89 e5                	mov    %esp,%ebp
c010f618:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f61b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f622:	a1 c8 2f 15 c0       	mov    0xc0152fc8,%eax
c010f627:	85 c0                	test   %eax,%eax
c010f629:	74 25                	je     c010f650 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f62b:	e8 03 ff ff ff       	call   c010f533 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f630:	a1 c8 2f 15 c0       	mov    0xc0152fc8,%eax
c010f635:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f638:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f63c:	74 0d                	je     c010f64b <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f63e:	a1 c8 2f 15 c0       	mov    0xc0152fc8,%eax
c010f643:	89 04 24             	mov    %eax,(%esp)
c010f646:	e8 a3 fb ff ff       	call   c010f1ee <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f64b:	e8 f7 fe ff ff       	call   c010f547 <unlock_bootfs>
    }
    if (node == NULL) {
c010f650:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f654:	75 07                	jne    c010f65d <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f656:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f65b:	eb 0d                	jmp    c010f66a <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f65d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f660:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f663:	89 10                	mov    %edx,(%eax)
    return 0;
c010f665:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f66a:	c9                   	leave  
c010f66b:	c3                   	ret    

c010f66c <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f66c:	55                   	push   %ebp
c010f66d:	89 e5                	mov    %esp,%ebp
c010f66f:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f672:	c7 04 24 d4 2f 15 c0 	movl   $0xc0152fd4,(%esp)
c010f679:	e8 99 a6 ff ff       	call   c0109d17 <down>
}
c010f67e:	c9                   	leave  
c010f67f:	c3                   	ret    

c010f680 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f680:	55                   	push   %ebp
c010f681:	89 e5                	mov    %esp,%ebp
c010f683:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f686:	c7 04 24 d4 2f 15 c0 	movl   $0xc0152fd4,(%esp)
c010f68d:	e8 6a a6 ff ff       	call   c0109cfc <up>
}
c010f692:	c9                   	leave  
c010f693:	c3                   	ret    

c010f694 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f694:	55                   	push   %ebp
c010f695:	89 e5                	mov    %esp,%ebp
c010f697:	83 ec 28             	sub    $0x28,%esp
c010f69a:	c7 45 f4 cc 2f 15 c0 	movl   $0xc0152fcc,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f6a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f6a7:	89 50 04             	mov    %edx,0x4(%eax)
c010f6aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6ad:	8b 50 04             	mov    0x4(%eax),%edx
c010f6b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6b3:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f6b5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f6bc:	00 
c010f6bd:	c7 04 24 d4 2f 15 c0 	movl   $0xc0152fd4,(%esp)
c010f6c4:	e8 c0 a4 ff ff       	call   c0109b89 <sem_init>
}
c010f6c9:	c9                   	leave  
c010f6ca:	c3                   	ret    

c010f6cb <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f6cb:	55                   	push   %ebp
c010f6cc:	89 e5                	mov    %esp,%ebp
c010f6ce:	83 ec 38             	sub    $0x38,%esp
c010f6d1:	c7 45 e8 cc 2f 15 c0 	movl   $0xc0152fcc,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f6d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6db:	8b 40 04             	mov    0x4(%eax),%eax
c010f6de:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f6e1:	0f 94 c0             	sete   %al
c010f6e4:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f6e7:	85 c0                	test   %eax,%eax
c010f6e9:	75 57                	jne    c010f742 <vfs_cleanup+0x77>
        lock_vdev_list();
c010f6eb:	e8 7c ff ff ff       	call   c010f66c <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f6f0:	c7 45 f0 cc 2f 15 c0 	movl   $0xc0152fcc,-0x10(%ebp)
c010f6f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f6fd:	eb 27                	jmp    c010f726 <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f6ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f702:	83 e8 10             	sub    $0x10,%eax
c010f705:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f708:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f70b:	8b 40 08             	mov    0x8(%eax),%eax
c010f70e:	85 c0                	test   %eax,%eax
c010f710:	74 14                	je     c010f726 <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f712:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f715:	8b 40 08             	mov    0x8(%eax),%eax
c010f718:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f71b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f71e:	8b 52 08             	mov    0x8(%edx),%edx
c010f721:	89 14 24             	mov    %edx,(%esp)
c010f724:	ff d0                	call   *%eax
c010f726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f729:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f72c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f72f:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f732:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f738:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f73b:	75 c2                	jne    c010f6ff <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f73d:	e8 3e ff ff ff       	call   c010f680 <unlock_vdev_list>
    }
}
c010f742:	c9                   	leave  
c010f743:	c3                   	ret    

c010f744 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f744:	55                   	push   %ebp
c010f745:	89 e5                	mov    %esp,%ebp
c010f747:	83 ec 38             	sub    $0x38,%esp
    cprintf("[vfs_get_root]\n");
c010f74a:	c7 04 24 18 8c 11 c0 	movl   $0xc0118c18,(%esp)
c010f751:	e8 0f 0c ff ff       	call   c0100365 <cprintf>
    assert(devname != NULL);
c010f756:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f75a:	75 24                	jne    c010f780 <vfs_get_root+0x3c>
c010f75c:	c7 44 24 0c 28 8c 11 	movl   $0xc0118c28,0xc(%esp)
c010f763:	c0 
c010f764:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010f76b:	c0 
c010f76c:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010f773:	00 
c010f774:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010f77b:	e8 48 17 ff ff       	call   c0100ec8 <__panic>
    int ret = -E_NO_DEV;
c010f780:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f787:	c7 45 e0 cc 2f 15 c0 	movl   $0xc0152fcc,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f78e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f791:	8b 40 04             	mov    0x4(%eax),%eax
c010f794:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f797:	0f 94 c0             	sete   %al
c010f79a:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f79d:	85 c0                	test   %eax,%eax
c010f79f:	0f 85 c3 00 00 00    	jne    c010f868 <vfs_get_root+0x124>
        lock_vdev_list();
c010f7a5:	e8 c2 fe ff ff       	call   c010f66c <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f7aa:	c7 45 e8 cc 2f 15 c0 	movl   $0xc0152fcc,-0x18(%ebp)
c010f7b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f7b7:	e9 8c 00 00 00       	jmp    c010f848 <vfs_get_root+0x104>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f7bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7bf:	83 e8 10             	sub    $0x10,%eax
c010f7c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f7c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7c8:	8b 00                	mov    (%eax),%eax
c010f7ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7d1:	89 04 24             	mov    %eax,(%esp)
c010f7d4:	e8 ef 5c 00 00       	call   c01154c8 <strcmp>
c010f7d9:	85 c0                	test   %eax,%eax
c010f7db:	75 6b                	jne    c010f848 <vfs_get_root+0x104>
                    struct inode *found = NULL;
c010f7dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f7e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7e7:	8b 40 08             	mov    0x8(%eax),%eax
c010f7ea:	85 c0                	test   %eax,%eax
c010f7ec:	74 19                	je     c010f807 <vfs_get_root+0xc3>
                        found = fsop_get_root(vdev->fs);
c010f7ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7f1:	8b 40 08             	mov    0x8(%eax),%eax
c010f7f4:	8b 40 74             	mov    0x74(%eax),%eax
c010f7f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f7fa:	8b 52 08             	mov    0x8(%edx),%edx
c010f7fd:	89 14 24             	mov    %edx,(%esp)
c010f800:	ff d0                	call   *%eax
c010f802:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f805:	eb 21                	jmp    c010f828 <vfs_get_root+0xe4>
                    }
                    else if (!vdev->mountable) {
c010f807:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f80a:	8b 40 0c             	mov    0xc(%eax),%eax
c010f80d:	85 c0                	test   %eax,%eax
c010f80f:	75 17                	jne    c010f828 <vfs_get_root+0xe4>
                        vop_ref_inc(vdev->devnode);
c010f811:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f814:	8b 40 04             	mov    0x4(%eax),%eax
c010f817:	89 04 24             	mov    %eax,(%esp)
c010f81a:	e8 cf f9 ff ff       	call   c010f1ee <inode_ref_inc>
                        found = vdev->devnode;
c010f81f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f822:	8b 40 04             	mov    0x4(%eax),%eax
c010f825:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f828:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f82c:	74 11                	je     c010f83f <vfs_get_root+0xfb>
                        ret = 0, *node_store = found;
c010f82e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f835:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f838:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f83b:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f83d:	eb 24                	jmp    c010f863 <vfs_get_root+0x11f>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f83f:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f846:	eb 1b                	jmp    c010f863 <vfs_get_root+0x11f>
c010f848:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f84b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f84e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f851:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f854:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f857:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f85a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f85d:	0f 85 59 ff ff ff    	jne    c010f7bc <vfs_get_root+0x78>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f863:	e8 18 fe ff ff       	call   c010f680 <unlock_vdev_list>
    }
    return ret;
c010f868:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f86b:	c9                   	leave  
c010f86c:	c3                   	ret    

c010f86d <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f86d:	55                   	push   %ebp
c010f86e:	89 e5                	mov    %esp,%ebp
c010f870:	83 ec 28             	sub    $0x28,%esp
    cprintf("[vfs_get_devname]\n");
c010f873:	c7 04 24 62 8c 11 c0 	movl   $0xc0118c62,(%esp)
c010f87a:	e8 e6 0a ff ff       	call   c0100365 <cprintf>
    assert(fs != NULL);
c010f87f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f883:	75 24                	jne    c010f8a9 <vfs_get_devname+0x3c>
c010f885:	c7 44 24 0c 75 8c 11 	movl   $0xc0118c75,0xc(%esp)
c010f88c:	c0 
c010f88d:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010f894:	c0 
c010f895:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010f89c:	00 
c010f89d:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010f8a4:	e8 1f 16 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f8a9:	c7 45 f0 cc 2f 15 c0 	movl   $0xc0152fcc,-0x10(%ebp)
c010f8b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f8b6:	eb 1b                	jmp    c010f8d3 <vfs_get_devname+0x66>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f8b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8bb:	83 e8 10             	sub    $0x10,%eax
c010f8be:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f8c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8c4:	8b 40 08             	mov    0x8(%eax),%eax
c010f8c7:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f8ca:	75 07                	jne    c010f8d3 <vfs_get_devname+0x66>
            return vdev->devname;
c010f8cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8cf:	8b 00                	mov    (%eax),%eax
c010f8d1:	eb 1c                	jmp    c010f8ef <vfs_get_devname+0x82>
c010f8d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f8d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f8dc:	8b 40 04             	mov    0x4(%eax),%eax
const char *
vfs_get_devname(struct fs *fs) {
    cprintf("[vfs_get_devname]\n");
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f8df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f8e8:	75 ce                	jne    c010f8b8 <vfs_get_devname+0x4b>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f8ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f8ef:	c9                   	leave  
c010f8f0:	c3                   	ret    

c010f8f1 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f8f1:	55                   	push   %ebp
c010f8f2:	89 e5                	mov    %esp,%ebp
c010f8f4:	83 ec 28             	sub    $0x28,%esp
    cprintf("[check_devname_conflict]\n");
c010f8f7:	c7 04 24 80 8c 11 c0 	movl   $0xc0118c80,(%esp)
c010f8fe:	e8 62 0a ff ff       	call   c0100365 <cprintf>
    list_entry_t *list = &vdev_list, *le = list;
c010f903:	c7 45 f0 cc 2f 15 c0 	movl   $0xc0152fcc,-0x10(%ebp)
c010f90a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f90d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f910:	eb 28                	jmp    c010f93a <check_devname_conflict+0x49>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f912:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f915:	83 e8 10             	sub    $0x10,%eax
c010f918:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f91b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f91e:	8b 00                	mov    (%eax),%eax
c010f920:	8b 55 08             	mov    0x8(%ebp),%edx
c010f923:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f927:	89 04 24             	mov    %eax,(%esp)
c010f92a:	e8 99 5b 00 00       	call   c01154c8 <strcmp>
c010f92f:	85 c0                	test   %eax,%eax
c010f931:	75 07                	jne    c010f93a <check_devname_conflict+0x49>
            return 0;
c010f933:	b8 00 00 00 00       	mov    $0x0,%eax
c010f938:	eb 1c                	jmp    c010f956 <check_devname_conflict+0x65>
c010f93a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f93d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f940:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f943:	8b 40 04             	mov    0x4(%eax),%eax
 */
static bool
check_devname_conflict(const char *devname) {
    cprintf("[check_devname_conflict]\n");
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f946:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f949:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f94c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f94f:	75 c1                	jne    c010f912 <check_devname_conflict+0x21>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f951:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f956:	c9                   	leave  
c010f957:	c3                   	ret    

c010f958 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f958:	55                   	push   %ebp
c010f959:	89 e5                	mov    %esp,%ebp
c010f95b:	83 ec 48             	sub    $0x48,%esp
    cprintf("[vfs_do_add] Add a new device to the VFS layer's device table\n");
c010f95e:	c7 04 24 9c 8c 11 c0 	movl   $0xc0118c9c,(%esp)
c010f965:	e8 fb 09 ff ff       	call   c0100365 <cprintf>
    assert(devname != NULL);
c010f96a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f96e:	75 24                	jne    c010f994 <vfs_do_add+0x3c>
c010f970:	c7 44 24 0c 28 8c 11 	movl   $0xc0118c28,0xc(%esp)
c010f977:	c0 
c010f978:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010f97f:	c0 
c010f980:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c010f987:	00 
c010f988:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010f98f:	e8 34 15 ff ff       	call   c0100ec8 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f994:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f998:	75 06                	jne    c010f9a0 <vfs_do_add+0x48>
c010f99a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f99e:	74 37                	je     c010f9d7 <vfs_do_add+0x7f>
c010f9a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f9a4:	74 0d                	je     c010f9b3 <vfs_do_add+0x5b>
c010f9a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f9a9:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f9ac:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f9b1:	74 24                	je     c010f9d7 <vfs_do_add+0x7f>
c010f9b3:	c7 44 24 0c dc 8c 11 	movl   $0xc0118cdc,0xc(%esp)
c010f9ba:	c0 
c010f9bb:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010f9c2:	c0 
c010f9c3:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
c010f9ca:	00 
c010f9cb:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010f9d2:	e8 f1 14 ff ff       	call   c0100ec8 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f9d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9da:	89 04 24             	mov    %eax,(%esp)
c010f9dd:	e8 ee 59 00 00       	call   c01153d0 <strlen>
c010f9e2:	83 f8 1f             	cmp    $0x1f,%eax
c010f9e5:	76 0a                	jbe    c010f9f1 <vfs_do_add+0x99>
        return -E_TOO_BIG;
c010f9e7:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f9ec:	e9 00 01 00 00       	jmp    c010faf1 <vfs_do_add+0x199>
    }

    int ret = -E_NO_MEM;
c010f9f1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f9f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9fb:	89 04 24             	mov    %eax,(%esp)
c010f9fe:	e8 03 0a ff ff       	call   c0100406 <strdup>
c010fa03:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa0a:	75 08                	jne    c010fa14 <vfs_do_add+0xbc>
        return ret;
c010fa0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa0f:	e9 dd 00 00 00       	jmp    c010faf1 <vfs_do_add+0x199>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010fa14:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010fa1b:	e8 d7 52 ff ff       	call   c0104cf7 <kmalloc>
c010fa20:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fa23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fa27:	75 05                	jne    c010fa2e <vfs_do_add+0xd6>
        goto failed_cleanup_name;
c010fa29:	e9 b5 00 00 00       	jmp    c010fae3 <vfs_do_add+0x18b>
    }

    ret = -E_EXISTS;
c010fa2e:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010fa35:	e8 32 fc ff ff       	call   c010f66c <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010fa3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa3d:	89 04 24             	mov    %eax,(%esp)
c010fa40:	e8 ac fe ff ff       	call   c010f8f1 <check_devname_conflict>
c010fa45:	85 c0                	test   %eax,%eax
c010fa47:	75 16                	jne    c010fa5f <vfs_do_add+0x107>
        unlock_vdev_list();
c010fa49:	e8 32 fc ff ff       	call   c010f680 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010fa4e:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010fa4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa52:	89 04 24             	mov    %eax,(%esp)
c010fa55:	e8 b8 52 ff ff       	call   c0104d12 <kfree>
c010fa5a:	e9 84 00 00 00       	jmp    c010fae3 <vfs_do_add+0x18b>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010fa5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa62:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fa65:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010fa67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa6a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010fa6d:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010fa70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa73:	8b 55 14             	mov    0x14(%ebp),%edx
c010fa76:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010fa79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa7c:	8b 55 10             	mov    0x10(%ebp),%edx
c010fa7f:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010fa82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa85:	83 c0 10             	add    $0x10,%eax
c010fa88:	c7 45 e8 cc 2f 15 c0 	movl   $0xc0152fcc,-0x18(%ebp)
c010fa8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fa92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa95:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010fa98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fa9b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010fa9e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010faa1:	8b 40 04             	mov    0x4(%eax),%eax
c010faa4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010faa7:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010faaa:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010faad:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010fab0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010fab3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fab6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fab9:	89 10                	mov    %edx,(%eax)
c010fabb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fabe:	8b 10                	mov    (%eax),%edx
c010fac0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010fac3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010fac6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fac9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010facc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010facf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fad2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fad5:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010fad7:	e8 a4 fb ff ff       	call   c010f680 <unlock_vdev_list>
    return 0;
c010fadc:	b8 00 00 00 00       	mov    $0x0,%eax
c010fae1:	eb 0e                	jmp    c010faf1 <vfs_do_add+0x199>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010fae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fae6:	89 04 24             	mov    %eax,(%esp)
c010fae9:	e8 24 52 ff ff       	call   c0104d12 <kfree>
    return ret;
c010faee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010faf1:	c9                   	leave  
c010faf2:	c3                   	ret    

c010faf3 <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010faf3:	55                   	push   %ebp
c010faf4:	89 e5                	mov    %esp,%ebp
c010faf6:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010faf9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010fb00:	00 
c010fb01:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb04:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fb08:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010fb0f:	00 
c010fb10:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb13:	89 04 24             	mov    %eax,(%esp)
c010fb16:	e8 3d fe ff ff       	call   c010f958 <vfs_do_add>
}
c010fb1b:	c9                   	leave  
c010fb1c:	c3                   	ret    

c010fb1d <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010fb1d:	55                   	push   %ebp
c010fb1e:	89 e5                	mov    %esp,%ebp
c010fb20:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010fb23:	8b 45 10             	mov    0x10(%ebp),%eax
c010fb26:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010fb2a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010fb31:	00 
c010fb32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb39:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb3c:	89 04 24             	mov    %eax,(%esp)
c010fb3f:	e8 14 fe ff ff       	call   c010f958 <vfs_do_add>
}
c010fb44:	c9                   	leave  
c010fb45:	c3                   	ret    

c010fb46 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010fb46:	55                   	push   %ebp
c010fb47:	89 e5                	mov    %esp,%ebp
c010fb49:	83 ec 28             	sub    $0x28,%esp
        cprintf("[find_mount] Look for a mountable device named DEVNAME\n");
c010fb4c:	c7 04 24 38 8d 11 c0 	movl   $0xc0118d38,(%esp)
c010fb53:	e8 0d 08 ff ff       	call   c0100365 <cprintf>

    assert(devname != NULL);
c010fb58:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fb5c:	75 24                	jne    c010fb82 <find_mount+0x3c>
c010fb5e:	c7 44 24 0c 28 8c 11 	movl   $0xc0118c28,0xc(%esp)
c010fb65:	c0 
c010fb66:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010fb6d:	c0 
c010fb6e:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010fb75:	00 
c010fb76:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010fb7d:	e8 46 13 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010fb82:	c7 45 f0 cc 2f 15 c0 	movl   $0xc0152fcc,-0x10(%ebp)
c010fb89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010fb8f:	eb 3a                	jmp    c010fbcb <find_mount+0x85>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fb91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb94:	83 e8 10             	sub    $0x10,%eax
c010fb97:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010fb9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fb9d:	8b 40 0c             	mov    0xc(%eax),%eax
c010fba0:	85 c0                	test   %eax,%eax
c010fba2:	74 27                	je     c010fbcb <find_mount+0x85>
c010fba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fba7:	8b 00                	mov    (%eax),%eax
c010fba9:	8b 55 08             	mov    0x8(%ebp),%edx
c010fbac:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fbb0:	89 04 24             	mov    %eax,(%esp)
c010fbb3:	e8 10 59 00 00       	call   c01154c8 <strcmp>
c010fbb8:	85 c0                	test   %eax,%eax
c010fbba:	75 0f                	jne    c010fbcb <find_mount+0x85>
            *vdev_store = vdev;
c010fbbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fbbf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fbc2:	89 10                	mov    %edx,(%eax)
            return 0;
c010fbc4:	b8 00 00 00 00       	mov    $0x0,%eax
c010fbc9:	eb 1c                	jmp    c010fbe7 <find_mount+0xa1>
c010fbcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbce:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fbd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fbd4:	8b 40 04             	mov    0x4(%eax),%eax
find_mount(const char *devname, vfs_dev_t **vdev_store) {
        cprintf("[find_mount] Look for a mountable device named DEVNAME\n");

    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010fbd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fbda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbdd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fbe0:	75 af                	jne    c010fb91 <find_mount+0x4b>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010fbe2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010fbe7:	c9                   	leave  
c010fbe8:	c3                   	ret    

c010fbe9 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010fbe9:	55                   	push   %ebp
c010fbea:	89 e5                	mov    %esp,%ebp
c010fbec:	83 ec 28             	sub    $0x28,%esp
    cprintf("[vfs_mount] Mount a filesystem\n");
c010fbef:	c7 04 24 70 8d 11 c0 	movl   $0xc0118d70,(%esp)
c010fbf6:	e8 6a 07 ff ff       	call   c0100365 <cprintf>
    int ret;
    lock_vdev_list();
c010fbfb:	e8 6c fa ff ff       	call   c010f66c <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fc00:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fc03:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc07:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc0a:	89 04 24             	mov    %eax,(%esp)
c010fc0d:	e8 34 ff ff ff       	call   c010fb46 <find_mount>
c010fc12:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc19:	74 05                	je     c010fc20 <vfs_mount+0x37>
        goto out;
c010fc1b:	e9 f4 00 00 00       	jmp    c010fd14 <vfs_mount+0x12b>
    }
    if (vdev->fs != NULL) {
c010fc20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc23:	8b 40 08             	mov    0x8(%eax),%eax
c010fc26:	85 c0                	test   %eax,%eax
c010fc28:	74 0c                	je     c010fc36 <vfs_mount+0x4d>
        ret = -E_BUSY;
c010fc2a:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010fc31:	e9 de 00 00 00       	jmp    c010fd14 <vfs_mount+0x12b>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fc36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc39:	8b 00                	mov    (%eax),%eax
c010fc3b:	85 c0                	test   %eax,%eax
c010fc3d:	74 0a                	je     c010fc49 <vfs_mount+0x60>
c010fc3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc42:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc45:	85 c0                	test   %eax,%eax
c010fc47:	75 24                	jne    c010fc6d <vfs_mount+0x84>
c010fc49:	c7 44 24 0c 90 8d 11 	movl   $0xc0118d90,0xc(%esp)
c010fc50:	c0 
c010fc51:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010fc58:	c0 
c010fc59:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010fc60:	00 
c010fc61:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010fc68:	e8 5b 12 ff ff       	call   c0100ec8 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010fc6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc70:	8b 40 04             	mov    0x4(%eax),%eax
c010fc73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fc76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc7a:	74 0d                	je     c010fc89 <vfs_mount+0xa0>
c010fc7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc7f:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fc82:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fc87:	74 24                	je     c010fcad <vfs_mount+0xc4>
c010fc89:	c7 44 24 0c bc 8d 11 	movl   $0xc0118dbc,0xc(%esp)
c010fc90:	c0 
c010fc91:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010fc98:	c0 
c010fc99:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c010fca0:	00 
c010fca1:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010fca8:	e8 1b 12 ff ff       	call   c0100ec8 <__panic>
c010fcad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fcb0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fcb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcb6:	83 c0 08             	add    $0x8,%eax
c010fcb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fcbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fcc0:	89 04 24             	mov    %eax,(%esp)
c010fcc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcc6:	ff d0                	call   *%eax
c010fcc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fccb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fccf:	75 43                	jne    c010fd14 <vfs_mount+0x12b>
        assert(vdev->fs != NULL);
c010fcd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcd4:	8b 40 08             	mov    0x8(%eax),%eax
c010fcd7:	85 c0                	test   %eax,%eax
c010fcd9:	75 24                	jne    c010fcff <vfs_mount+0x116>
c010fcdb:	c7 44 24 0c ef 8d 11 	movl   $0xc0118def,0xc(%esp)
c010fce2:	c0 
c010fce3:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010fcea:	c0 
c010fceb:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c010fcf2:	00 
c010fcf3:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010fcfa:	e8 c9 11 ff ff       	call   c0100ec8 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fcff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd02:	8b 00                	mov    (%eax),%eax
c010fd04:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd08:	c7 04 24 00 8e 11 c0 	movl   $0xc0118e00,(%esp)
c010fd0f:	e8 51 06 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fd14:	e8 67 f9 ff ff       	call   c010f680 <unlock_vdev_list>
    return ret;
c010fd19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fd1c:	c9                   	leave  
c010fd1d:	c3                   	ret    

c010fd1e <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010fd1e:	55                   	push   %ebp
c010fd1f:	89 e5                	mov    %esp,%ebp
c010fd21:	83 ec 28             	sub    $0x28,%esp
    cprintf("[vfs_unmount] Unmount a filesystem/device by name\n");
c010fd24:	c7 04 24 10 8e 11 c0 	movl   $0xc0118e10,(%esp)
c010fd2b:	e8 35 06 ff ff       	call   c0100365 <cprintf>
    int ret;
    lock_vdev_list();
c010fd30:	e8 37 f9 ff ff       	call   c010f66c <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fd35:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fd38:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd3f:	89 04 24             	mov    %eax,(%esp)
c010fd42:	e8 ff fd ff ff       	call   c010fb46 <find_mount>
c010fd47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd4e:	74 05                	je     c010fd55 <vfs_unmount+0x37>
        goto out;
c010fd50:	e9 a8 00 00 00       	jmp    c010fdfd <vfs_unmount+0xdf>
    }
    if (vdev->fs == NULL) {
c010fd55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd58:	8b 40 08             	mov    0x8(%eax),%eax
c010fd5b:	85 c0                	test   %eax,%eax
c010fd5d:	75 0c                	jne    c010fd6b <vfs_unmount+0x4d>
        ret = -E_INVAL;
c010fd5f:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fd66:	e9 92 00 00 00       	jmp    c010fdfd <vfs_unmount+0xdf>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fd6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd6e:	8b 00                	mov    (%eax),%eax
c010fd70:	85 c0                	test   %eax,%eax
c010fd72:	74 0a                	je     c010fd7e <vfs_unmount+0x60>
c010fd74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd77:	8b 40 0c             	mov    0xc(%eax),%eax
c010fd7a:	85 c0                	test   %eax,%eax
c010fd7c:	75 24                	jne    c010fda2 <vfs_unmount+0x84>
c010fd7e:	c7 44 24 0c 90 8d 11 	movl   $0xc0118d90,0xc(%esp)
c010fd85:	c0 
c010fd86:	c7 44 24 08 38 8c 11 	movl   $0xc0118c38,0x8(%esp)
c010fd8d:	c0 
c010fd8e:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c010fd95:	00 
c010fd96:	c7 04 24 4d 8c 11 c0 	movl   $0xc0118c4d,(%esp)
c010fd9d:	e8 26 11 ff ff       	call   c0100ec8 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fda2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fda5:	8b 40 08             	mov    0x8(%eax),%eax
c010fda8:	8b 40 70             	mov    0x70(%eax),%eax
c010fdab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fdae:	8b 52 08             	mov    0x8(%edx),%edx
c010fdb1:	89 14 24             	mov    %edx,(%esp)
c010fdb4:	ff d0                	call   *%eax
c010fdb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdb9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fdbd:	74 02                	je     c010fdc1 <vfs_unmount+0xa3>
        goto out;
c010fdbf:	eb 3c                	jmp    c010fdfd <vfs_unmount+0xdf>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fdc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdc4:	8b 40 08             	mov    0x8(%eax),%eax
c010fdc7:	8b 40 78             	mov    0x78(%eax),%eax
c010fdca:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fdcd:	8b 52 08             	mov    0x8(%edx),%edx
c010fdd0:	89 14 24             	mov    %edx,(%esp)
c010fdd3:	ff d0                	call   *%eax
c010fdd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdd8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fddc:	75 1f                	jne    c010fdfd <vfs_unmount+0xdf>
        vdev->fs = NULL;
c010fdde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fde1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fde8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdeb:	8b 00                	mov    (%eax),%eax
c010fded:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fdf1:	c7 04 24 43 8e 11 c0 	movl   $0xc0118e43,(%esp)
c010fdf8:	e8 68 05 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fdfd:	e8 7e f8 ff ff       	call   c010f680 <unlock_vdev_list>
    return ret;
c010fe02:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fe05:	c9                   	leave  
c010fe06:	c3                   	ret    

c010fe07 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fe07:	55                   	push   %ebp
c010fe08:	89 e5                	mov    %esp,%ebp
c010fe0a:	83 ec 38             	sub    $0x38,%esp
    cprintf("[vfs_unmount_all] Global unmount function\n");
c010fe0d:	c7 04 24 58 8e 11 c0 	movl   $0xc0118e58,(%esp)
c010fe14:	e8 4c 05 ff ff       	call   c0100365 <cprintf>
c010fe19:	c7 45 e4 cc 2f 15 c0 	movl   $0xc0152fcc,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fe20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe23:	8b 40 04             	mov    0x4(%eax),%eax
c010fe26:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fe29:	0f 94 c0             	sete   %al
c010fe2c:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fe2f:	85 c0                	test   %eax,%eax
c010fe31:	0f 85 f1 00 00 00    	jne    c010ff28 <vfs_unmount_all+0x121>
        lock_vdev_list();
c010fe37:	e8 30 f8 ff ff       	call   c010f66c <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fe3c:	c7 45 f0 cc 2f 15 c0 	movl   $0xc0152fcc,-0x10(%ebp)
c010fe43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe46:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fe49:	e9 ba 00 00 00       	jmp    c010ff08 <vfs_unmount_all+0x101>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fe4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe51:	83 e8 10             	sub    $0x10,%eax
c010fe54:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fe57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe5a:	8b 40 0c             	mov    0xc(%eax),%eax
c010fe5d:	85 c0                	test   %eax,%eax
c010fe5f:	0f 84 a3 00 00 00    	je     c010ff08 <vfs_unmount_all+0x101>
c010fe65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe68:	8b 40 08             	mov    0x8(%eax),%eax
c010fe6b:	85 c0                	test   %eax,%eax
c010fe6d:	0f 84 95 00 00 00    	je     c010ff08 <vfs_unmount_all+0x101>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fe73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe76:	8b 40 08             	mov    0x8(%eax),%eax
c010fe79:	8b 40 70             	mov    0x70(%eax),%eax
c010fe7c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fe7f:	8b 52 08             	mov    0x8(%edx),%edx
c010fe82:	89 14 24             	mov    %edx,(%esp)
c010fe85:	ff d0                	call   *%eax
c010fe87:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fe8a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fe8e:	74 1e                	je     c010feae <vfs_unmount_all+0xa7>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fe90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe93:	8b 00                	mov    (%eax),%eax
c010fe95:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fe98:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fea0:	c7 04 24 84 8e 11 c0 	movl   $0xc0118e84,(%esp)
c010fea7:	e8 b9 04 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010feac:	eb 5a                	jmp    c010ff08 <vfs_unmount_all+0x101>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010feae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010feb1:	8b 40 08             	mov    0x8(%eax),%eax
c010feb4:	8b 40 78             	mov    0x78(%eax),%eax
c010feb7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010feba:	8b 52 08             	mov    0x8(%edx),%edx
c010febd:	89 14 24             	mov    %edx,(%esp)
c010fec0:	ff d0                	call   *%eax
c010fec2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fec5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fec9:	74 1e                	je     c010fee9 <vfs_unmount_all+0xe2>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fece:	8b 00                	mov    (%eax),%eax
c010fed0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fed3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fed7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fedb:	c7 04 24 ac 8e 11 c0 	movl   $0xc0118eac,(%esp)
c010fee2:	e8 7e 04 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fee7:	eb 1f                	jmp    c010ff08 <vfs_unmount_all+0x101>
                    }
                    vdev->fs = NULL;
c010fee9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010feec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010fef3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fef6:	8b 00                	mov    (%eax),%eax
c010fef8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fefc:	c7 04 24 43 8e 11 c0 	movl   $0xc0118e43,(%esp)
c010ff03:	e8 5d 04 ff ff       	call   c0100365 <cprintf>
c010ff08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff0b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ff0e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff11:	8b 40 04             	mov    0x4(%eax),%eax
    cprintf("[vfs_unmount_all] Global unmount function\n");
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010ff14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ff17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff1a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ff1d:	0f 85 2b ff ff ff    	jne    c010fe4e <vfs_unmount_all+0x47>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010ff23:	e8 58 f7 ff ff       	call   c010f680 <unlock_vdev_list>
    }
    return 0;
c010ff28:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff2d:	c9                   	leave  
c010ff2e:	c3                   	ret    

c010ff2f <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010ff2f:	55                   	push   %ebp
c010ff30:	89 e5                	mov    %esp,%ebp
c010ff32:	53                   	push   %ebx
c010ff33:	83 ec 44             	sub    $0x44,%esp
    cprintf("[vfs_open]\n");
c010ff36:	c7 04 24 d8 8e 11 c0 	movl   $0xc0118ed8,(%esp)
c010ff3d:	e8 23 04 ff ff       	call   c0100365 <cprintf>
    bool can_write = 0;
c010ff42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010ff49:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff4c:	83 e0 03             	and    $0x3,%eax
c010ff4f:	85 c0                	test   %eax,%eax
c010ff51:	74 18                	je     c010ff6b <vfs_open+0x3c>
c010ff53:	83 f8 02             	cmp    $0x2,%eax
c010ff56:	77 09                	ja     c010ff61 <vfs_open+0x32>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010ff58:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010ff5f:	eb 0b                	jmp    c010ff6c <vfs_open+0x3d>
    default:
        return -E_INVAL;
c010ff61:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff66:	e9 ba 02 00 00       	jmp    c0110225 <vfs_open+0x2f6>
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    cprintf("[vfs_open]\n");
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010ff6b:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010ff6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff6f:	83 e0 10             	and    $0x10,%eax
c010ff72:	85 c0                	test   %eax,%eax
c010ff74:	74 10                	je     c010ff86 <vfs_open+0x57>
        if (!can_write) {
c010ff76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff7a:	75 0a                	jne    c010ff86 <vfs_open+0x57>
            return -E_INVAL;
c010ff7c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff81:	e9 9f 02 00 00       	jmp    c0110225 <vfs_open+0x2f6>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010ff86:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff89:	83 e0 08             	and    $0x8,%eax
c010ff8c:	85 c0                	test   %eax,%eax
c010ff8e:	0f 95 c0             	setne  %al
c010ff91:	0f b6 c0             	movzbl %al,%eax
c010ff94:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010ff97:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff9a:	83 e0 04             	and    $0x4,%eax
c010ff9d:	85 c0                	test   %eax,%eax
c010ff9f:	0f 95 c0             	setne  %al
c010ffa2:	0f b6 c0             	movzbl %al,%eax
c010ffa5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010ffa8:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ffab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ffaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffb2:	89 04 24             	mov    %eax,(%esp)
c010ffb5:	e8 92 04 00 00       	call   c011044c <vfs_lookup>
c010ffba:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010ffbd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ffc1:	0f 84 cc 00 00 00    	je     c0110093 <vfs_open+0x164>
        if (ret == -16 && (create)) {
c010ffc7:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010ffcb:	0f 85 ba 00 00 00    	jne    c011008b <vfs_open+0x15c>
c010ffd1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ffd5:	0f 84 b0 00 00 00    	je     c011008b <vfs_open+0x15c>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010ffdb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ffde:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ffe2:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010ffe5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ffe9:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffec:	89 04 24             	mov    %eax,(%esp)
c010ffef:	e8 44 05 00 00       	call   c0110538 <vfs_lookup_parent>
c010fff4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fff7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fffb:	74 08                	je     c0110005 <vfs_open+0xd6>
                return ret;
c010fffd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110000:	e9 20 02 00 00       	jmp    c0110225 <vfs_open+0x2f6>
            }
            ret = vop_create(dir, name, excl, &node);
c0110005:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0110008:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011000b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011000f:	74 17                	je     c0110028 <vfs_open+0xf9>
c0110011:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110014:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110017:	85 c0                	test   %eax,%eax
c0110019:	74 0d                	je     c0110028 <vfs_open+0xf9>
c011001b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011001e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110021:	8b 40 34             	mov    0x34(%eax),%eax
c0110024:	85 c0                	test   %eax,%eax
c0110026:	75 24                	jne    c011004c <vfs_open+0x11d>
c0110028:	c7 44 24 0c e4 8e 11 	movl   $0xc0118ee4,0xc(%esp)
c011002f:	c0 
c0110030:	c7 44 24 08 33 8f 11 	movl   $0xc0118f33,0x8(%esp)
c0110037:	c0 
c0110038:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%esp)
c011003f:	00 
c0110040:	c7 04 24 48 8f 11 c0 	movl   $0xc0118f48,(%esp)
c0110047:	e8 7c 0e ff ff       	call   c0100ec8 <__panic>
c011004c:	c7 44 24 04 5e 8f 11 	movl   $0xc0118f5e,0x4(%esp)
c0110053:	c0 
c0110054:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110057:	89 04 24             	mov    %eax,(%esp)
c011005a:	e8 97 f3 ff ff       	call   c010f3f6 <inode_check>
c011005f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110062:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110065:	8b 40 34             	mov    0x34(%eax),%eax
c0110068:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c011006b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011006e:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c0110071:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0110075:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0110078:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011007c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110080:	89 14 24             	mov    %edx,(%esp)
c0110083:	ff d0                	call   *%eax
c0110085:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c0110088:	90                   	nop
c0110089:	eb 1e                	jmp    c01100a9 <vfs_open+0x17a>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c011008b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011008e:	e9 92 01 00 00       	jmp    c0110225 <vfs_open+0x2f6>
    } else if (excl && create) {
c0110093:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110097:	74 10                	je     c01100a9 <vfs_open+0x17a>
c0110099:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011009d:	74 0a                	je     c01100a9 <vfs_open+0x17a>
        return -E_EXISTS;
c011009f:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c01100a4:	e9 7c 01 00 00       	jmp    c0110225 <vfs_open+0x2f6>
    }
    assert(node != NULL);
c01100a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100ac:	85 c0                	test   %eax,%eax
c01100ae:	75 24                	jne    c01100d4 <vfs_open+0x1a5>
c01100b0:	c7 44 24 0c 65 8f 11 	movl   $0xc0118f65,0xc(%esp)
c01100b7:	c0 
c01100b8:	c7 44 24 08 33 8f 11 	movl   $0xc0118f33,0x8(%esp)
c01100bf:	c0 
c01100c0:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c01100c7:	00 
c01100c8:	c7 04 24 48 8f 11 c0 	movl   $0xc0118f48,(%esp)
c01100cf:	e8 f4 0d ff ff       	call   c0100ec8 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c01100d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01100da:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01100de:	74 17                	je     c01100f7 <vfs_open+0x1c8>
c01100e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01100e3:	8b 40 3c             	mov    0x3c(%eax),%eax
c01100e6:	85 c0                	test   %eax,%eax
c01100e8:	74 0d                	je     c01100f7 <vfs_open+0x1c8>
c01100ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01100ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c01100f0:	8b 40 04             	mov    0x4(%eax),%eax
c01100f3:	85 c0                	test   %eax,%eax
c01100f5:	75 24                	jne    c011011b <vfs_open+0x1ec>
c01100f7:	c7 44 24 0c 74 8f 11 	movl   $0xc0118f74,0xc(%esp)
c01100fe:	c0 
c01100ff:	c7 44 24 08 33 8f 11 	movl   $0xc0118f33,0x8(%esp)
c0110106:	c0 
c0110107:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c011010e:	00 
c011010f:	c7 04 24 48 8f 11 c0 	movl   $0xc0118f48,(%esp)
c0110116:	e8 ad 0d ff ff       	call   c0100ec8 <__panic>
c011011b:	c7 44 24 04 c1 8f 11 	movl   $0xc0118fc1,0x4(%esp)
c0110122:	c0 
c0110123:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110126:	89 04 24             	mov    %eax,(%esp)
c0110129:	e8 c8 f2 ff ff       	call   c010f3f6 <inode_check>
c011012e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110131:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110134:	8b 40 04             	mov    0x4(%eax),%eax
c0110137:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011013a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c011013d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110141:	89 14 24             	mov    %edx,(%esp)
c0110144:	ff d0                	call   *%eax
c0110146:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110149:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011014d:	74 13                	je     c0110162 <vfs_open+0x233>
        vop_ref_dec(node);
c011014f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110152:	89 04 24             	mov    %eax,(%esp)
c0110155:	e8 ae f0 ff ff       	call   c010f208 <inode_ref_dec>
        return ret;
c011015a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011015d:	e9 c3 00 00 00       	jmp    c0110225 <vfs_open+0x2f6>
    }

    vop_open_inc(node);
c0110162:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110165:	89 04 24             	mov    %eax,(%esp)
c0110168:	e8 88 f1 ff ff       	call   c010f2f5 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c011016d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110170:	83 e0 10             	and    $0x10,%eax
c0110173:	85 c0                	test   %eax,%eax
c0110175:	75 0a                	jne    c0110181 <vfs_open+0x252>
c0110177:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011017b:	0f 84 97 00 00 00    	je     c0110218 <vfs_open+0x2e9>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0110181:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110184:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0110187:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011018b:	74 17                	je     c01101a4 <vfs_open+0x275>
c011018d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110190:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110193:	85 c0                	test   %eax,%eax
c0110195:	74 0d                	je     c01101a4 <vfs_open+0x275>
c0110197:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011019a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011019d:	8b 40 30             	mov    0x30(%eax),%eax
c01101a0:	85 c0                	test   %eax,%eax
c01101a2:	75 24                	jne    c01101c8 <vfs_open+0x299>
c01101a4:	c7 44 24 0c c8 8f 11 	movl   $0xc0118fc8,0xc(%esp)
c01101ab:	c0 
c01101ac:	c7 44 24 08 33 8f 11 	movl   $0xc0118f33,0x8(%esp)
c01101b3:	c0 
c01101b4:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c01101bb:	00 
c01101bc:	c7 04 24 48 8f 11 c0 	movl   $0xc0118f48,(%esp)
c01101c3:	e8 00 0d ff ff       	call   c0100ec8 <__panic>
c01101c8:	c7 44 24 04 19 90 11 	movl   $0xc0119019,0x4(%esp)
c01101cf:	c0 
c01101d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101d3:	89 04 24             	mov    %eax,(%esp)
c01101d6:	e8 1b f2 ff ff       	call   c010f3f6 <inode_check>
c01101db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101de:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101e1:	8b 40 30             	mov    0x30(%eax),%eax
c01101e4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01101e7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01101ee:	00 
c01101ef:	89 14 24             	mov    %edx,(%esp)
c01101f2:	ff d0                	call   *%eax
c01101f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01101f7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01101fb:	74 1b                	je     c0110218 <vfs_open+0x2e9>
            vop_open_dec(node);
c01101fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110200:	89 04 24             	mov    %eax,(%esp)
c0110203:	e8 07 f1 ff ff       	call   c010f30f <inode_open_dec>
            vop_ref_dec(node);
c0110208:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011020b:	89 04 24             	mov    %eax,(%esp)
c011020e:	e8 f5 ef ff ff       	call   c010f208 <inode_ref_dec>
            return ret;
c0110213:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110216:	eb 0d                	jmp    c0110225 <vfs_open+0x2f6>
        }
    }
    *node_store = node;
c0110218:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011021b:	8b 45 10             	mov    0x10(%ebp),%eax
c011021e:	89 10                	mov    %edx,(%eax)
    return 0;
c0110220:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110225:	83 c4 44             	add    $0x44,%esp
c0110228:	5b                   	pop    %ebx
c0110229:	5d                   	pop    %ebp
c011022a:	c3                   	ret    

c011022b <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c011022b:	55                   	push   %ebp
c011022c:	89 e5                	mov    %esp,%ebp
c011022e:	83 ec 18             	sub    $0x18,%esp
    cprintf("[vfs_close]\n");
c0110231:	c7 04 24 22 90 11 c0 	movl   $0xc0119022,(%esp)
c0110238:	e8 28 01 ff ff       	call   c0100365 <cprintf>
    vop_open_dec(node);
c011023d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110240:	89 04 24             	mov    %eax,(%esp)
c0110243:	e8 c7 f0 ff ff       	call   c010f30f <inode_open_dec>
    vop_ref_dec(node);
c0110248:	8b 45 08             	mov    0x8(%ebp),%eax
c011024b:	89 04 24             	mov    %eax,(%esp)
c011024e:	e8 b5 ef ff ff       	call   c010f208 <inode_ref_dec>
    return 0;
c0110253:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110258:	c9                   	leave  
c0110259:	c3                   	ret    

c011025a <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c011025a:	55                   	push   %ebp
c011025b:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011025d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110262:	5d                   	pop    %ebp
c0110263:	c3                   	ret    

c0110264 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c0110264:	55                   	push   %ebp
c0110265:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110267:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011026c:	5d                   	pop    %ebp
c011026d:	c3                   	ret    

c011026e <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c011026e:	55                   	push   %ebp
c011026f:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110271:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110276:	5d                   	pop    %ebp
c0110277:	c3                   	ret    

c0110278 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c0110278:	55                   	push   %ebp
c0110279:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011027b:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110280:	5d                   	pop    %ebp
c0110281:	c3                   	ret    

c0110282 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c0110282:	55                   	push   %ebp
c0110283:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110285:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011028a:	5d                   	pop    %ebp
c011028b:	c3                   	ret    

c011028c <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c011028c:	55                   	push   %ebp
c011028d:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011028f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110294:	5d                   	pop    %ebp
c0110295:	c3                   	ret    

c0110296 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c0110296:	55                   	push   %ebp
c0110297:	89 e5                	mov    %esp,%ebp
c0110299:	83 ec 38             	sub    $0x38,%esp
    cprintf("[get_device] pull the device name, if any, off the front of a path and choose the inode to begin the name lookup relative to\n");
c011029c:	c7 04 24 30 90 11 c0 	movl   $0xc0119030,(%esp)
c01102a3:	e8 bd 00 ff ff       	call   c0100365 <cprintf>
    int i, slash = -1, colon = -1;
c01102a8:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c01102af:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c01102b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01102bd:	eb 32                	jmp    c01102f1 <get_device+0x5b>
        if (path[i] == ':') { colon = i; break; }
c01102bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01102c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01102c5:	01 d0                	add    %edx,%eax
c01102c7:	0f b6 00             	movzbl (%eax),%eax
c01102ca:	3c 3a                	cmp    $0x3a,%al
c01102cc:	75 08                	jne    c01102d6 <get_device+0x40>
c01102ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01102d4:	eb 2a                	jmp    c0110300 <get_device+0x6a>
        if (path[i] == '/') { slash = i; break; }
c01102d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01102d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01102dc:	01 d0                	add    %edx,%eax
c01102de:	0f b6 00             	movzbl (%eax),%eax
c01102e1:	3c 2f                	cmp    $0x2f,%al
c01102e3:	75 08                	jne    c01102ed <get_device+0x57>
c01102e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01102eb:	eb 13                	jmp    c0110300 <get_device+0x6a>

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    cprintf("[get_device] pull the device name, if any, off the front of a path and choose the inode to begin the name lookup relative to\n");
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c01102ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01102f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01102f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01102f7:	01 d0                	add    %edx,%eax
c01102f9:	0f b6 00             	movzbl (%eax),%eax
c01102fc:	84 c0                	test   %al,%al
c01102fe:	75 bf                	jne    c01102bf <get_device+0x29>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110300:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110304:	79 1e                	jns    c0110324 <get_device+0x8e>
c0110306:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011030a:	74 18                	je     c0110324 <get_device+0x8e>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c011030c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011030f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110312:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c0110314:	8b 45 10             	mov    0x10(%ebp),%eax
c0110317:	89 04 24             	mov    %eax,(%esp)
c011031a:	e8 ba 02 00 00       	call   c01105d9 <vfs_get_curdir>
c011031f:	e9 26 01 00 00       	jmp    c011044a <get_device+0x1b4>
    }
    if (colon > 0) {
c0110324:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110328:	7e 42                	jle    c011036c <get_device+0xd6>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c011032a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011032d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110330:	01 d0                	add    %edx,%eax
c0110332:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c0110335:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0110339:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011033c:	8b 45 08             	mov    0x8(%ebp),%eax
c011033f:	01 d0                	add    %edx,%eax
c0110341:	0f b6 00             	movzbl (%eax),%eax
c0110344:	3c 2f                	cmp    $0x2f,%al
c0110346:	74 ed                	je     c0110335 <get_device+0x9f>
        *subpath = path + colon;
c0110348:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011034b:	8b 45 08             	mov    0x8(%ebp),%eax
c011034e:	01 c2                	add    %eax,%edx
c0110350:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110353:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c0110355:	8b 45 10             	mov    0x10(%ebp),%eax
c0110358:	89 44 24 04          	mov    %eax,0x4(%esp)
c011035c:	8b 45 08             	mov    0x8(%ebp),%eax
c011035f:	89 04 24             	mov    %eax,(%esp)
c0110362:	e8 dd f3 ff ff       	call   c010f744 <vfs_get_root>
c0110367:	e9 de 00 00 00       	jmp    c011044a <get_device+0x1b4>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c011036c:	8b 45 08             	mov    0x8(%ebp),%eax
c011036f:	0f b6 00             	movzbl (%eax),%eax
c0110372:	3c 2f                	cmp    $0x2f,%al
c0110374:	75 20                	jne    c0110396 <get_device+0x100>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c0110376:	8b 45 10             	mov    0x10(%ebp),%eax
c0110379:	89 04 24             	mov    %eax,(%esp)
c011037c:	e8 94 f2 ff ff       	call   c010f615 <vfs_get_bootfs>
c0110381:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110384:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110388:	0f 84 a1 00 00 00    	je     c011042f <get_device+0x199>
            return ret;
c011038e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110391:	e9 b4 00 00 00       	jmp    c011044a <get_device+0x1b4>
        }
    }
    else {
        assert(*path == ':');
c0110396:	8b 45 08             	mov    0x8(%ebp),%eax
c0110399:	0f b6 00             	movzbl (%eax),%eax
c011039c:	3c 3a                	cmp    $0x3a,%al
c011039e:	74 24                	je     c01103c4 <get_device+0x12e>
c01103a0:	c7 44 24 0c ae 90 11 	movl   $0xc01190ae,0xc(%esp)
c01103a7:	c0 
c01103a8:	c7 44 24 08 bb 90 11 	movl   $0xc01190bb,0x8(%esp)
c01103af:	c0 
c01103b0:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c01103b7:	00 
c01103b8:	c7 04 24 d0 90 11 c0 	movl   $0xc01190d0,(%esp)
c01103bf:	e8 04 0b ff ff       	call   c0100ec8 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c01103c4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01103c7:	89 04 24             	mov    %eax,(%esp)
c01103ca:	e8 0a 02 00 00       	call   c01105d9 <vfs_get_curdir>
c01103cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01103d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01103d6:	74 05                	je     c01103dd <get_device+0x147>
            return ret;
c01103d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01103db:	eb 6d                	jmp    c011044a <get_device+0x1b4>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c01103dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01103e0:	8b 40 38             	mov    0x38(%eax),%eax
c01103e3:	85 c0                	test   %eax,%eax
c01103e5:	75 24                	jne    c011040b <get_device+0x175>
c01103e7:	c7 44 24 0c e8 90 11 	movl   $0xc01190e8,0xc(%esp)
c01103ee:	c0 
c01103ef:	c7 44 24 08 bb 90 11 	movl   $0xc01190bb,0x8(%esp)
c01103f6:	c0 
c01103f7:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01103fe:	00 
c01103ff:	c7 04 24 d0 90 11 c0 	movl   $0xc01190d0,(%esp)
c0110406:	e8 bd 0a ff ff       	call   c0100ec8 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011040b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011040e:	8b 40 38             	mov    0x38(%eax),%eax
c0110411:	8b 40 74             	mov    0x74(%eax),%eax
c0110414:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0110417:	8b 52 38             	mov    0x38(%edx),%edx
c011041a:	89 14 24             	mov    %edx,(%esp)
c011041d:	ff d0                	call   *%eax
c011041f:	8b 55 10             	mov    0x10(%ebp),%edx
c0110422:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c0110424:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110427:	89 04 24             	mov    %eax,(%esp)
c011042a:	e8 d9 ed ff ff       	call   c010f208 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c011042f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0110433:	8b 45 08             	mov    0x8(%ebp),%eax
c0110436:	0f b6 00             	movzbl (%eax),%eax
c0110439:	3c 2f                	cmp    $0x2f,%al
c011043b:	74 f2                	je     c011042f <get_device+0x199>
    *subpath = path;
c011043d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110440:	8b 55 08             	mov    0x8(%ebp),%edx
c0110443:	89 10                	mov    %edx,(%eax)
    return 0;
c0110445:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011044a:	c9                   	leave  
c011044b:	c3                   	ret    

c011044c <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c011044c:	55                   	push   %ebp
c011044d:	89 e5                	mov    %esp,%ebp
c011044f:	56                   	push   %esi
c0110450:	53                   	push   %ebx
c0110451:	83 ec 20             	sub    $0x20,%esp
    cprintf("[vfs_lookup] get the inode according to the path filename\n");
c0110454:	c7 04 24 fc 90 11 c0 	movl   $0xc01190fc,(%esp)
c011045b:	e8 05 ff fe ff       	call   c0100365 <cprintf>
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110460:	8b 45 08             	mov    0x8(%ebp),%eax
c0110463:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0110466:	89 54 24 08          	mov    %edx,0x8(%esp)
c011046a:	8d 75 08             	lea    0x8(%ebp),%esi
c011046d:	89 74 24 04          	mov    %esi,0x4(%esp)
c0110471:	89 04 24             	mov    %eax,(%esp)
c0110474:	e8 1d fe ff ff       	call   c0110296 <get_device>
c0110479:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011047c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110480:	74 08                	je     c011048a <vfs_lookup+0x3e>
        return ret;
c0110482:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110485:	e9 a7 00 00 00       	jmp    c0110531 <vfs_lookup+0xe5>
    }
    if (*path != '\0') {
c011048a:	8b 45 08             	mov    0x8(%ebp),%eax
c011048d:	0f b6 00             	movzbl (%eax),%eax
c0110490:	84 c0                	test   %al,%al
c0110492:	0f 84 8c 00 00 00    	je     c0110524 <vfs_lookup+0xd8>
        ret = vop_lookup(node, path, node_store);
c0110498:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011049b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011049e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01104a2:	74 17                	je     c01104bb <vfs_lookup+0x6f>
c01104a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104a7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104aa:	85 c0                	test   %eax,%eax
c01104ac:	74 0d                	je     c01104bb <vfs_lookup+0x6f>
c01104ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104b1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104b4:	8b 40 38             	mov    0x38(%eax),%eax
c01104b7:	85 c0                	test   %eax,%eax
c01104b9:	75 24                	jne    c01104df <vfs_lookup+0x93>
c01104bb:	c7 44 24 0c 38 91 11 	movl   $0xc0119138,0xc(%esp)
c01104c2:	c0 
c01104c3:	c7 44 24 08 bb 90 11 	movl   $0xc01190bb,0x8(%esp)
c01104ca:	c0 
c01104cb:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
c01104d2:	00 
c01104d3:	c7 04 24 d0 90 11 c0 	movl   $0xc01190d0,(%esp)
c01104da:	e8 e9 09 ff ff       	call   c0100ec8 <__panic>
c01104df:	c7 44 24 04 87 91 11 	movl   $0xc0119187,0x4(%esp)
c01104e6:	c0 
c01104e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104ea:	89 04 24             	mov    %eax,(%esp)
c01104ed:	e8 04 ef ff ff       	call   c010f3f6 <inode_check>
c01104f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104f5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104f8:	8b 40 38             	mov    0x38(%eax),%eax
c01104fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01104fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110501:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0110504:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0110508:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011050c:	89 14 24             	mov    %edx,(%esp)
c011050f:	ff d0                	call   *%eax
c0110511:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110514:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110517:	89 04 24             	mov    %eax,(%esp)
c011051a:	e8 e9 ec ff ff       	call   c010f208 <inode_ref_dec>
        return ret;
c011051f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110522:	eb 0d                	jmp    c0110531 <vfs_lookup+0xe5>
    }
    *node_store = node;
c0110524:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110527:	8b 45 0c             	mov    0xc(%ebp),%eax
c011052a:	89 10                	mov    %edx,(%eax)
    return 0;
c011052c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110531:	83 c4 20             	add    $0x20,%esp
c0110534:	5b                   	pop    %ebx
c0110535:	5e                   	pop    %esi
c0110536:	5d                   	pop    %ebp
c0110537:	c3                   	ret    

c0110538 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c0110538:	55                   	push   %ebp
c0110539:	89 e5                	mov    %esp,%ebp
c011053b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c011053e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110541:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0110544:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110548:	8d 4d 08             	lea    0x8(%ebp),%ecx
c011054b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011054f:	89 04 24             	mov    %eax,(%esp)
c0110552:	e8 3f fd ff ff       	call   c0110296 <get_device>
c0110557:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011055a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011055e:	74 05                	je     c0110565 <vfs_lookup_parent+0x2d>
        return ret;
c0110560:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110563:	eb 15                	jmp    c011057a <vfs_lookup_parent+0x42>
    }
    *endp = path;
c0110565:	8b 55 08             	mov    0x8(%ebp),%edx
c0110568:	8b 45 10             	mov    0x10(%ebp),%eax
c011056b:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c011056d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110570:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110573:	89 10                	mov    %edx,(%eax)
    return 0;
c0110575:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011057a:	c9                   	leave  
c011057b:	c3                   	ret    

c011057c <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c011057c:	55                   	push   %ebp
c011057d:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c011057f:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0110584:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011058a:	8b 00                	mov    (%eax),%eax
}
c011058c:	5d                   	pop    %ebp
c011058d:	c3                   	ret    

c011058e <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c011058e:	55                   	push   %ebp
c011058f:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c0110591:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c0110596:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011059c:	8b 55 08             	mov    0x8(%ebp),%edx
c011059f:	89 10                	mov    %edx,(%eax)
}
c01105a1:	5d                   	pop    %ebp
c01105a2:	c3                   	ret    

c01105a3 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c01105a3:	55                   	push   %ebp
c01105a4:	89 e5                	mov    %esp,%ebp
c01105a6:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c01105a9:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c01105ae:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105b4:	89 04 24             	mov    %eax,(%esp)
c01105b7:	e8 f0 aa ff ff       	call   c010b0ac <lock_files>
}
c01105bc:	c9                   	leave  
c01105bd:	c3                   	ret    

c01105be <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c01105be:	55                   	push   %ebp
c01105bf:	89 e5                	mov    %esp,%ebp
c01105c1:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c01105c4:	a1 28 0f 15 c0       	mov    0xc0150f28,%eax
c01105c9:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105cf:	89 04 24             	mov    %eax,(%esp)
c01105d2:	e8 eb aa ff ff       	call   c010b0c2 <unlock_files>
}
c01105d7:	c9                   	leave  
c01105d8:	c3                   	ret    

c01105d9 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c01105d9:	55                   	push   %ebp
c01105da:	89 e5                	mov    %esp,%ebp
c01105dc:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c01105df:	e8 98 ff ff ff       	call   c011057c <get_cwd_nolock>
c01105e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105eb:	74 1a                	je     c0110607 <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c01105ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105f0:	89 04 24             	mov    %eax,(%esp)
c01105f3:	e8 f6 eb ff ff       	call   c010f1ee <inode_ref_inc>
        *dir_store = node;
c01105f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01105fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01105fe:	89 10                	mov    %edx,(%eax)
        return 0;
c0110600:	b8 00 00 00 00       	mov    $0x0,%eax
c0110605:	eb 05                	jmp    c011060c <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c0110607:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c011060c:	c9                   	leave  
c011060d:	c3                   	ret    

c011060e <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c011060e:	55                   	push   %ebp
c011060f:	89 e5                	mov    %esp,%ebp
c0110611:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c0110614:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c011061b:	e8 83 ff ff ff       	call   c01105a3 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c0110620:	e8 57 ff ff ff       	call   c011057c <get_cwd_nolock>
c0110625:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110628:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011062b:	3b 45 08             	cmp    0x8(%ebp),%eax
c011062e:	0f 84 c7 00 00 00    	je     c01106fb <vfs_set_curdir+0xed>
        if (dir != NULL) {
c0110634:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110638:	0f 84 a1 00 00 00    	je     c01106df <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c011063e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110641:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110644:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110648:	74 17                	je     c0110661 <vfs_set_curdir+0x53>
c011064a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011064d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110650:	85 c0                	test   %eax,%eax
c0110652:	74 0d                	je     c0110661 <vfs_set_curdir+0x53>
c0110654:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110657:	8b 40 3c             	mov    0x3c(%eax),%eax
c011065a:	8b 40 28             	mov    0x28(%eax),%eax
c011065d:	85 c0                	test   %eax,%eax
c011065f:	75 24                	jne    c0110685 <vfs_set_curdir+0x77>
c0110661:	c7 44 24 0c 90 91 11 	movl   $0xc0119190,0xc(%esp)
c0110668:	c0 
c0110669:	c7 44 24 08 e0 91 11 	movl   $0xc01191e0,0x8(%esp)
c0110670:	c0 
c0110671:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c0110678:	00 
c0110679:	c7 04 24 f5 91 11 c0 	movl   $0xc01191f5,(%esp)
c0110680:	e8 43 08 ff ff       	call   c0100ec8 <__panic>
c0110685:	c7 44 24 04 0b 92 11 	movl   $0xc011920b,0x4(%esp)
c011068c:	c0 
c011068d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110690:	89 04 24             	mov    %eax,(%esp)
c0110693:	e8 5e ed ff ff       	call   c010f3f6 <inode_check>
c0110698:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011069b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011069e:	8b 40 28             	mov    0x28(%eax),%eax
c01106a1:	8d 55 e8             	lea    -0x18(%ebp),%edx
c01106a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01106a8:	8b 55 08             	mov    0x8(%ebp),%edx
c01106ab:	89 14 24             	mov    %edx,(%esp)
c01106ae:	ff d0                	call   *%eax
c01106b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106b7:	74 02                	je     c01106bb <vfs_set_curdir+0xad>
                goto out;
c01106b9:	eb 40                	jmp    c01106fb <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c01106bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01106be:	25 00 70 00 00       	and    $0x7000,%eax
c01106c3:	3d 00 20 00 00       	cmp    $0x2000,%eax
c01106c8:	74 0a                	je     c01106d4 <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c01106ca:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c01106d1:	90                   	nop
c01106d2:	eb 27                	jmp    c01106fb <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c01106d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01106d7:	89 04 24             	mov    %eax,(%esp)
c01106da:	e8 0f eb ff ff       	call   c010f1ee <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c01106df:	8b 45 08             	mov    0x8(%ebp),%eax
c01106e2:	89 04 24             	mov    %eax,(%esp)
c01106e5:	e8 a4 fe ff ff       	call   c011058e <set_cwd_nolock>
        if (old_dir != NULL) {
c01106ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01106ee:	74 0b                	je     c01106fb <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c01106f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106f3:	89 04 24             	mov    %eax,(%esp)
c01106f6:	e8 0d eb ff ff       	call   c010f208 <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c01106fb:	e8 be fe ff ff       	call   c01105be <unlock_cfs>
    return ret;
c0110700:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110703:	c9                   	leave  
c0110704:	c3                   	ret    

c0110705 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c0110705:	55                   	push   %ebp
c0110706:	89 e5                	mov    %esp,%ebp
c0110708:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c011070b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011070e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110712:	8b 45 08             	mov    0x8(%ebp),%eax
c0110715:	89 04 24             	mov    %eax,(%esp)
c0110718:	e8 2f fd ff ff       	call   c011044c <vfs_lookup>
c011071d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110720:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110724:	75 19                	jne    c011073f <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c0110726:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110729:	89 04 24             	mov    %eax,(%esp)
c011072c:	e8 dd fe ff ff       	call   c011060e <vfs_set_curdir>
c0110731:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110734:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110737:	89 04 24             	mov    %eax,(%esp)
c011073a:	e8 c9 ea ff ff       	call   c010f208 <inode_ref_dec>
    }
    return ret;
c011073f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110742:	c9                   	leave  
c0110743:	c3                   	ret    

c0110744 <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c0110744:	55                   	push   %ebp
c0110745:	89 e5                	mov    %esp,%ebp
c0110747:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c011074a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011074d:	89 04 24             	mov    %eax,(%esp)
c0110750:	e8 84 fe ff ff       	call   c01105d9 <vfs_get_curdir>
c0110755:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110758:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011075c:	74 08                	je     c0110766 <vfs_getcwd+0x22>
        return ret;
c011075e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110761:	e9 3a 01 00 00       	jmp    c01108a0 <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c0110766:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110769:	8b 40 38             	mov    0x38(%eax),%eax
c011076c:	85 c0                	test   %eax,%eax
c011076e:	75 24                	jne    c0110794 <vfs_getcwd+0x50>
c0110770:	c7 44 24 0c 13 92 11 	movl   $0xc0119213,0xc(%esp)
c0110777:	c0 
c0110778:	c7 44 24 08 e0 91 11 	movl   $0xc01191e0,0x8(%esp)
c011077f:	c0 
c0110780:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c0110787:	00 
c0110788:	c7 04 24 f5 91 11 c0 	movl   $0xc01191f5,(%esp)
c011078f:	e8 34 07 ff ff       	call   c0100ec8 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c0110794:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110797:	8b 40 38             	mov    0x38(%eax),%eax
c011079a:	89 04 24             	mov    %eax,(%esp)
c011079d:	e8 cb f0 ff ff       	call   c010f86d <vfs_get_devname>
c01107a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c01107a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107a8:	89 04 24             	mov    %eax,(%esp)
c01107ab:	e8 20 4c 00 00       	call   c01153d0 <strlen>
c01107b0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01107b7:	00 
c01107b8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01107bf:	00 
c01107c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01107c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01107cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01107ce:	89 04 24             	mov    %eax,(%esp)
c01107d1:	e8 fe ab ff ff       	call   c010b3d4 <iobuf_move>
c01107d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01107d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01107dd:	74 05                	je     c01107e4 <vfs_getcwd+0xa0>
        goto out;
c01107df:	e9 ae 00 00 00       	jmp    c0110892 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c01107e4:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c01107e8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01107ef:	00 
c01107f0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01107f7:	00 
c01107f8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01107ff:	00 
c0110800:	8d 45 e7             	lea    -0x19(%ebp),%eax
c0110803:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110807:	8b 45 08             	mov    0x8(%ebp),%eax
c011080a:	89 04 24             	mov    %eax,(%esp)
c011080d:	e8 c2 ab ff ff       	call   c010b3d4 <iobuf_move>
c0110812:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110815:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110819:	74 02                	je     c011081d <vfs_getcwd+0xd9>
        goto out;
c011081b:	eb 75                	jmp    c0110892 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c011081d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110820:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110827:	74 17                	je     c0110840 <vfs_getcwd+0xfc>
c0110829:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011082c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011082f:	85 c0                	test   %eax,%eax
c0110831:	74 0d                	je     c0110840 <vfs_getcwd+0xfc>
c0110833:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110836:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110839:	8b 40 1c             	mov    0x1c(%eax),%eax
c011083c:	85 c0                	test   %eax,%eax
c011083e:	75 24                	jne    c0110864 <vfs_getcwd+0x120>
c0110840:	c7 44 24 0c 28 92 11 	movl   $0xc0119228,0xc(%esp)
c0110847:	c0 
c0110848:	c7 44 24 08 e0 91 11 	movl   $0xc01191e0,0x8(%esp)
c011084f:	c0 
c0110850:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0110857:	00 
c0110858:	c7 04 24 f5 91 11 c0 	movl   $0xc01191f5,(%esp)
c011085f:	e8 64 06 ff ff       	call   c0100ec8 <__panic>
c0110864:	c7 44 24 04 79 92 11 	movl   $0xc0119279,0x4(%esp)
c011086b:	c0 
c011086c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011086f:	89 04 24             	mov    %eax,(%esp)
c0110872:	e8 7f eb ff ff       	call   c010f3f6 <inode_check>
c0110877:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011087a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011087d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0110880:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110883:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110886:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011088a:	89 14 24             	mov    %edx,(%esp)
c011088d:	ff d0                	call   *%eax
c011088f:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c0110892:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110895:	89 04 24             	mov    %eax,(%esp)
c0110898:	e8 6b e9 ff ff       	call   c010f208 <inode_ref_dec>
    return ret;
c011089d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01108a0:	c9                   	leave  
c01108a1:	c3                   	ret    

c01108a2 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01108a2:	55                   	push   %ebp
c01108a3:	89 e5                	mov    %esp,%ebp
c01108a5:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_open]\n");
c01108a8:	c7 04 24 a0 92 11 c0 	movl   $0xc01192a0,(%esp)
c01108af:	e8 b1 fa fe ff       	call   c0100365 <cprintf>
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01108b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108b7:	83 e0 3c             	and    $0x3c,%eax
c01108ba:	85 c0                	test   %eax,%eax
c01108bc:	74 07                	je     c01108c5 <dev_open+0x23>
        return -E_INVAL;
c01108be:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01108c3:	eb 58                	jmp    c011091d <dev_open+0x7b>
    }
    struct device *dev = vop_info(node, device);
c01108c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01108c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01108cf:	74 0d                	je     c01108de <dev_open+0x3c>
c01108d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108d4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108d7:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01108dc:	74 24                	je     c0110902 <dev_open+0x60>
c01108de:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c01108e5:	c0 
c01108e6:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c01108ed:	c0 
c01108ee:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
c01108f5:	00 
c01108f6:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c01108fd:	e8 c6 05 ff ff       	call   c0100ec8 <__panic>
c0110902:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110905:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0110908:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011090b:	8b 40 08             	mov    0x8(%eax),%eax
c011090e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110911:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110915:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110918:	89 14 24             	mov    %edx,(%esp)
c011091b:	ff d0                	call   *%eax
}
c011091d:	c9                   	leave  
c011091e:	c3                   	ret    

c011091f <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011091f:	55                   	push   %ebp
c0110920:	89 e5                	mov    %esp,%ebp
c0110922:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_close]\n");
c0110925:	c7 04 24 07 93 11 c0 	movl   $0xc0119307,(%esp)
c011092c:	e8 34 fa fe ff       	call   c0100365 <cprintf>
    struct device *dev = vop_info(node, device);
c0110931:	8b 45 08             	mov    0x8(%ebp),%eax
c0110934:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110937:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011093b:	74 0d                	je     c011094a <dev_close+0x2b>
c011093d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110940:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110943:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110948:	74 24                	je     c011096e <dev_close+0x4f>
c011094a:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110951:	c0 
c0110952:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110959:	c0 
c011095a:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0110961:	00 
c0110962:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110969:	e8 5a 05 ff ff       	call   c0100ec8 <__panic>
c011096e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110971:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c0110974:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110977:	8b 40 0c             	mov    0xc(%eax),%eax
c011097a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011097d:	89 14 24             	mov    %edx,(%esp)
c0110980:	ff d0                	call   *%eax
}
c0110982:	c9                   	leave  
c0110983:	c3                   	ret    

c0110984 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c0110984:	55                   	push   %ebp
c0110985:	89 e5                	mov    %esp,%ebp
c0110987:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_read]\n");
c011098a:	c7 04 24 14 93 11 c0 	movl   $0xc0119314,(%esp)
c0110991:	e8 cf f9 fe ff       	call   c0100365 <cprintf>
    struct device *dev = vop_info(node, device);
c0110996:	8b 45 08             	mov    0x8(%ebp),%eax
c0110999:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011099c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109a0:	74 0d                	je     c01109af <dev_read+0x2b>
c01109a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109a5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01109a8:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01109ad:	74 24                	je     c01109d3 <dev_read+0x4f>
c01109af:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c01109b6:	c0 
c01109b7:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c01109be:	c0 
c01109bf:	c7 44 24 04 26 00 00 	movl   $0x26,0x4(%esp)
c01109c6:	00 
c01109c7:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c01109ce:	e8 f5 04 ff ff       	call   c0100ec8 <__panic>
c01109d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01109d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109dc:	8b 40 10             	mov    0x10(%eax),%eax
c01109df:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01109e6:	00 
c01109e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01109ea:	89 54 24 04          	mov    %edx,0x4(%esp)
c01109ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01109f1:	89 14 24             	mov    %edx,(%esp)
c01109f4:	ff d0                	call   *%eax
}
c01109f6:	c9                   	leave  
c01109f7:	c3                   	ret    

c01109f8 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c01109f8:	55                   	push   %ebp
c01109f9:	89 e5                	mov    %esp,%ebp
c01109fb:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_write]\n");
c01109fe:	c7 04 24 20 93 11 c0 	movl   $0xc0119320,(%esp)
c0110a05:	e8 5b f9 fe ff       	call   c0100365 <cprintf>
    struct device *dev = vop_info(node, device);
c0110a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a14:	74 0d                	je     c0110a23 <dev_write+0x2b>
c0110a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a19:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110a1c:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110a21:	74 24                	je     c0110a47 <dev_write+0x4f>
c0110a23:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110a2a:	c0 
c0110a2b:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110a32:	c0 
c0110a33:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
c0110a3a:	00 
c0110a3b:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110a42:	e8 81 04 ff ff       	call   c0100ec8 <__panic>
c0110a47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0110a4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a50:	8b 40 10             	mov    0x10(%eax),%eax
c0110a53:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110a5a:	00 
c0110a5b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110a5e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110a62:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110a65:	89 14 24             	mov    %edx,(%esp)
c0110a68:	ff d0                	call   *%eax
}
c0110a6a:	c9                   	leave  
c0110a6b:	c3                   	ret    

c0110a6c <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0110a6c:	55                   	push   %ebp
c0110a6d:	89 e5                	mov    %esp,%ebp
c0110a6f:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110a72:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a7c:	74 0d                	je     c0110a8b <dev_ioctl+0x1f>
c0110a7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a81:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110a84:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110a89:	74 24                	je     c0110aaf <dev_ioctl+0x43>
c0110a8b:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110a92:	c0 
c0110a93:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110a9a:	c0 
c0110a9b:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110aa2:	00 
c0110aa3:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110aaa:	e8 19 04 ff ff       	call   c0100ec8 <__panic>
c0110aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ab2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c0110ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ab8:	8b 40 14             	mov    0x14(%eax),%eax
c0110abb:	8b 55 10             	mov    0x10(%ebp),%edx
c0110abe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110ac2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110ac5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110ac9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110acc:	89 14 24             	mov    %edx,(%esp)
c0110acf:	ff d0                	call   *%eax
}
c0110ad1:	c9                   	leave  
c0110ad2:	c3                   	ret    

c0110ad3 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c0110ad3:	55                   	push   %ebp
c0110ad4:	89 e5                	mov    %esp,%ebp
c0110ad6:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110ad9:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0110ae0:	00 
c0110ae1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110ae8:	00 
c0110ae9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110aec:	89 04 24             	mov    %eax,(%esp)
c0110aef:	e8 32 4c 00 00       	call   c0115726 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0110af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0110af7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110afa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110afe:	74 17                	je     c0110b17 <dev_fstat+0x44>
c0110b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b03:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b06:	85 c0                	test   %eax,%eax
c0110b08:	74 0d                	je     c0110b17 <dev_fstat+0x44>
c0110b0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b0d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b10:	8b 40 28             	mov    0x28(%eax),%eax
c0110b13:	85 c0                	test   %eax,%eax
c0110b15:	75 24                	jne    c0110b3b <dev_fstat+0x68>
c0110b17:	c7 44 24 0c 30 93 11 	movl   $0xc0119330,0xc(%esp)
c0110b1e:	c0 
c0110b1f:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110b26:	c0 
c0110b27:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0110b2e:	00 
c0110b2f:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110b36:	e8 8d 03 ff ff       	call   c0100ec8 <__panic>
c0110b3b:	c7 44 24 04 80 93 11 	movl   $0xc0119380,0x4(%esp)
c0110b42:	c0 
c0110b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b46:	89 04 24             	mov    %eax,(%esp)
c0110b49:	e8 a8 e8 ff ff       	call   c010f3f6 <inode_check>
c0110b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b51:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b54:	8b 40 28             	mov    0x28(%eax),%eax
c0110b57:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110b5a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110b5e:	8b 55 08             	mov    0x8(%ebp),%edx
c0110b61:	89 14 24             	mov    %edx,(%esp)
c0110b64:	ff d0                	call   *%eax
c0110b66:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110b69:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110b6d:	74 05                	je     c0110b74 <dev_fstat+0xa1>
        return ret;
c0110b6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b72:	eb 72                	jmp    c0110be6 <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0110b74:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b77:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110b7e:	74 0d                	je     c0110b8d <dev_fstat+0xba>
c0110b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b83:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110b86:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110b8b:	74 24                	je     c0110bb1 <dev_fstat+0xde>
c0110b8d:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110b94:	c0 
c0110b95:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110b9c:	c0 
c0110b9d:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0110ba4:	00 
c0110ba5:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110bac:	e8 17 03 ff ff       	call   c0100ec8 <__panic>
c0110bb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c0110bb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bba:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110bc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110bc4:	8b 10                	mov    (%eax),%edx
c0110bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bc9:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c0110bcc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bcf:	8b 50 08             	mov    0x8(%eax),%edx
c0110bd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110bd5:	8b 40 04             	mov    0x4(%eax),%eax
c0110bd8:	0f af d0             	imul   %eax,%edx
c0110bdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bde:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110be1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110be6:	c9                   	leave  
c0110be7:	c3                   	ret    

c0110be8 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c0110be8:	55                   	push   %ebp
c0110be9:	89 e5                	mov    %esp,%ebp
c0110beb:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110bee:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110bf4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110bf8:	74 0d                	je     c0110c07 <dev_gettype+0x1f>
c0110bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bfd:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110c00:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110c05:	74 24                	je     c0110c2b <dev_gettype+0x43>
c0110c07:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110c0e:	c0 
c0110c0f:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110c16:	c0 
c0110c17:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110c1e:	00 
c0110c1f:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110c26:	e8 9d 02 ff ff       	call   c0100ec8 <__panic>
c0110c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110c31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c34:	8b 00                	mov    (%eax),%eax
c0110c36:	85 c0                	test   %eax,%eax
c0110c38:	74 07                	je     c0110c41 <dev_gettype+0x59>
c0110c3a:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110c3f:	eb 05                	jmp    c0110c46 <dev_gettype+0x5e>
c0110c41:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110c46:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110c49:	89 02                	mov    %eax,(%edx)
    return 0;
c0110c4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110c50:	c9                   	leave  
c0110c51:	c3                   	ret    

c0110c52 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110c52:	55                   	push   %ebp
c0110c53:	89 e5                	mov    %esp,%ebp
c0110c55:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110c58:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110c62:	74 0d                	je     c0110c71 <dev_tryseek+0x1f>
c0110c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c67:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110c6a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110c6f:	74 24                	je     c0110c95 <dev_tryseek+0x43>
c0110c71:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110c78:	c0 
c0110c79:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110c80:	c0 
c0110c81:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0110c88:	00 
c0110c89:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110c90:	e8 33 02 ff ff       	call   c0100ec8 <__panic>
c0110c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c98:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c9e:	8b 00                	mov    (%eax),%eax
c0110ca0:	85 c0                	test   %eax,%eax
c0110ca2:	74 38                	je     c0110cdc <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c0110ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ca7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110caa:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110cad:	ba 00 00 00 00       	mov    $0x0,%edx
c0110cb2:	f7 f1                	div    %ecx
c0110cb4:	89 d0                	mov    %edx,%eax
c0110cb6:	85 c0                	test   %eax,%eax
c0110cb8:	75 22                	jne    c0110cdc <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110cba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110cbe:	78 1c                	js     c0110cdc <dev_tryseek+0x8a>
c0110cc0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cc6:	8b 08                	mov    (%eax),%ecx
c0110cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ccb:	8b 40 04             	mov    0x4(%eax),%eax
c0110cce:	0f af c1             	imul   %ecx,%eax
c0110cd1:	39 c2                	cmp    %eax,%edx
c0110cd3:	73 07                	jae    c0110cdc <dev_tryseek+0x8a>
                return 0;
c0110cd5:	b8 00 00 00 00       	mov    $0x0,%eax
c0110cda:	eb 05                	jmp    c0110ce1 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c0110cdc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110ce1:	c9                   	leave  
c0110ce2:	c3                   	ret    

c0110ce3 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110ce3:	55                   	push   %ebp
c0110ce4:	89 e5                	mov    %esp,%ebp
c0110ce6:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c0110ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cec:	0f b6 00             	movzbl (%eax),%eax
c0110cef:	84 c0                	test   %al,%al
c0110cf1:	74 07                	je     c0110cfa <dev_lookup+0x17>
        return -E_NOENT;
c0110cf3:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110cf8:	eb 18                	jmp    c0110d12 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110cfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0110cfd:	89 04 24             	mov    %eax,(%esp)
c0110d00:	e8 e9 e4 ff ff       	call   c010f1ee <inode_ref_inc>
    *node_store = node;
c0110d05:	8b 45 10             	mov    0x10(%ebp),%eax
c0110d08:	8b 55 08             	mov    0x8(%ebp),%edx
c0110d0b:	89 10                	mov    %edx,(%eax)
    return 0;
c0110d0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d12:	c9                   	leave  
c0110d13:	c3                   	ret    

c0110d14 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110d14:	55                   	push   %ebp
c0110d15:	89 e5                	mov    %esp,%ebp
c0110d17:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110d1a:	e8 a7 07 00 00       	call   c01114c6 <dev_init_stdin>
    init_device(stdout);
c0110d1f:	e8 22 09 00 00       	call   c0111646 <dev_init_stdout>
    init_device(disk0);
c0110d24:	e8 3e 04 00 00       	call   c0111167 <dev_init_disk0>
}
c0110d29:	c9                   	leave  
c0110d2a:	c3                   	ret    

c0110d2b <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110d2b:	55                   	push   %ebp
c0110d2c:	89 e5                	mov    %esp,%ebp
c0110d2e:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110d31:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110d38:	e8 be e3 ff ff       	call   c010f0fb <__alloc_inode>
c0110d3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d44:	74 1b                	je     c0110d61 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110d46:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110d4d:	00 
c0110d4e:	c7 44 24 04 a0 93 11 	movl   $0xc01193a0,0x4(%esp)
c0110d55:	c0 
c0110d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d59:	89 04 24             	mov    %eax,(%esp)
c0110d5c:	e8 c3 e3 ff ff       	call   c010f124 <inode_init>
    }
    return node;
c0110d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110d64:	c9                   	leave  
c0110d65:	c3                   	ret    

c0110d66 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110d66:	55                   	push   %ebp
c0110d67:	89 e5                	mov    %esp,%ebp
c0110d69:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110d6c:	c7 04 24 e4 2f 15 c0 	movl   $0xc0152fe4,(%esp)
c0110d73:	e8 9f 8f ff ff       	call   c0109d17 <down>
}
c0110d78:	c9                   	leave  
c0110d79:	c3                   	ret    

c0110d7a <unlock_disk0>:

static void
unlock_disk0(void) {
c0110d7a:	55                   	push   %ebp
c0110d7b:	89 e5                	mov    %esp,%ebp
c0110d7d:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110d80:	c7 04 24 e4 2f 15 c0 	movl   $0xc0152fe4,(%esp)
c0110d87:	e8 70 8f ff ff       	call   c0109cfc <up>
}
c0110d8c:	c9                   	leave  
c0110d8d:	c3                   	ret    

c0110d8e <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110d8e:	55                   	push   %ebp
c0110d8f:	89 e5                	mov    %esp,%ebp
    return 0;
c0110d91:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d96:	5d                   	pop    %ebp
c0110d97:	c3                   	ret    

c0110d98 <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110d98:	55                   	push   %ebp
c0110d99:	89 e5                	mov    %esp,%ebp
    return 0;
c0110d9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110da0:	5d                   	pop    %ebp
c0110da1:	c3                   	ret    

c0110da2 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110da2:	55                   	push   %ebp
c0110da3:	89 e5                	mov    %esp,%ebp
c0110da5:	83 ec 38             	sub    $0x38,%esp
    cprintf("[disk0_read_blks_nolock]\n");
c0110da8:	c7 04 24 e0 93 11 c0 	movl   $0xc01193e0,(%esp)
c0110daf:	e8 b1 f5 fe ff       	call   c0100365 <cprintf>
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110db4:	8b 45 08             	mov    0x8(%ebp),%eax
c0110db7:	c1 e0 03             	shl    $0x3,%eax
c0110dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110dc0:	c1 e0 03             	shl    $0x3,%eax
c0110dc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110dc6:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c0110dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110dce:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110dd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110dd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110ddd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110de4:	e8 b7 0e ff ff       	call   c0101ca0 <ide_read_secs>
c0110de9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110dec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110df0:	74 3f                	je     c0110e31 <disk0_read_blks_nolock+0x8f>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110df2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110df5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110dfc:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110e00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e03:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e0a:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e11:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110e15:	c7 44 24 08 fc 93 11 	movl   $0xc01193fc,0x8(%esp)
c0110e1c:	c0 
c0110e1d:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%esp)
c0110e24:	00 
c0110e25:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0110e2c:	e8 97 00 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110e31:	c9                   	leave  
c0110e32:	c3                   	ret    

c0110e33 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110e33:	55                   	push   %ebp
c0110e34:	89 e5                	mov    %esp,%ebp
c0110e36:	83 ec 38             	sub    $0x38,%esp
    cprintf("[disk0_write_blks_nolock]\n");
c0110e39:	c7 04 24 5d 94 11 c0 	movl   $0xc011945d,(%esp)
c0110e40:	e8 20 f5 fe ff       	call   c0100365 <cprintf>
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110e45:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e48:	c1 e0 03             	shl    $0x3,%eax
c0110e4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e51:	c1 e0 03             	shl    $0x3,%eax
c0110e54:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110e57:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c0110e5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110e5f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110e63:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e6e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110e75:	e8 74 10 ff ff       	call   c0101eee <ide_write_secs>
c0110e7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110e7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110e81:	74 3f                	je     c0110ec2 <disk0_write_blks_nolock+0x8f>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110e83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e86:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110e8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e8d:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110e91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e94:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e9b:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110e9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ea2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110ea6:	c7 44 24 08 78 94 11 	movl   $0xc0119478,0x8(%esp)
c0110ead:	c0 
c0110eae:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0110eb5:	00 
c0110eb6:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0110ebd:	e8 06 00 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110ec2:	c9                   	leave  
c0110ec3:	c3                   	ret    

c0110ec4 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110ec4:	55                   	push   %ebp
c0110ec5:	89 e5                	mov    %esp,%ebp
c0110ec7:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110eca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ecd:	8b 40 04             	mov    0x4(%eax),%eax
c0110ed0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ed6:	8b 40 0c             	mov    0xc(%eax),%eax
c0110ed9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110edc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110edf:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110ee5:	85 c0                	test   %eax,%eax
c0110ee7:	0f 48 c2             	cmovs  %edx,%eax
c0110eea:	c1 f8 0c             	sar    $0xc,%eax
c0110eed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ef3:	c1 e8 0c             	shr    $0xc,%eax
c0110ef6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110ef9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110efc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f01:	85 c0                	test   %eax,%eax
c0110f03:	75 0c                	jne    c0110f11 <disk0_io+0x4d>
c0110f05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f08:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f0d:	85 c0                	test   %eax,%eax
c0110f0f:	74 0a                	je     c0110f1b <disk0_io+0x57>
        return -E_INVAL;
c0110f11:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110f16:	e9 7a 01 00 00       	jmp    c0111095 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110f1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110f21:	01 c2                	add    %eax,%edx
c0110f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f26:	8b 00                	mov    (%eax),%eax
c0110f28:	39 c2                	cmp    %eax,%edx
c0110f2a:	76 0a                	jbe    c0110f36 <disk0_io+0x72>
        return -E_INVAL;
c0110f2c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110f31:	e9 5f 01 00 00       	jmp    c0111095 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110f36:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110f3a:	75 0a                	jne    c0110f46 <disk0_io+0x82>
        return 0;
c0110f3c:	b8 00 00 00 00       	mov    $0x0,%eax
c0110f41:	e9 4f 01 00 00       	jmp    c0111095 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110f46:	e8 1b fe ff ff       	call   c0110d66 <lock_disk0>
    while (resid != 0) {
c0110f4b:	e9 31 01 00 00       	jmp    c0111081 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110f50:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110f57:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110f5b:	0f 84 89 00 00 00    	je     c0110fea <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110f61:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c0110f66:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110f69:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110f6d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110f74:	00 
c0110f75:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110f78:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110f7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f83:	89 04 24             	mov    %eax,(%esp)
c0110f86:	e8 49 a4 ff ff       	call   c010b3d4 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110f8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f8e:	85 c0                	test   %eax,%eax
c0110f90:	74 14                	je     c0110fa6 <disk0_io+0xe2>
c0110f92:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f95:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110f98:	77 0c                	ja     c0110fa6 <disk0_io+0xe2>
c0110f9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f9d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110fa2:	85 c0                	test   %eax,%eax
c0110fa4:	74 24                	je     c0110fca <disk0_io+0x106>
c0110fa6:	c7 44 24 0c c4 94 11 	movl   $0xc01194c4,0xc(%esp)
c0110fad:	c0 
c0110fae:	c7 44 24 08 02 95 11 	movl   $0xc0119502,0x8(%esp)
c0110fb5:	c0 
c0110fb6:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
c0110fbd:	00 
c0110fbe:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0110fc5:	e8 fe fe fe ff       	call   c0100ec8 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110fca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110fcd:	c1 e8 0c             	shr    $0xc,%eax
c0110fd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110fd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110fd6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110fda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110fdd:	89 04 24             	mov    %eax,(%esp)
c0110fe0:	e8 4e fe ff ff       	call   c0110e33 <disk0_write_blks_nolock>
c0110fe5:	e9 8b 00 00 00       	jmp    c0111075 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110fea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110fed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110ff0:	76 06                	jbe    c0110ff8 <disk0_io+0x134>
                alen = resid;
c0110ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ff5:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110ff8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110ffb:	c1 e8 0c             	shr    $0xc,%eax
c0110ffe:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0111001:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111004:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111008:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011100b:	89 04 24             	mov    %eax,(%esp)
c011100e:	e8 8f fd ff ff       	call   c0110da2 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0111013:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c0111018:	8d 55 e0             	lea    -0x20(%ebp),%edx
c011101b:	89 54 24 10          	mov    %edx,0x10(%esp)
c011101f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0111026:	00 
c0111027:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011102a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011102e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111032:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111035:	89 04 24             	mov    %eax,(%esp)
c0111038:	e8 97 a3 ff ff       	call   c010b3d4 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c011103d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111040:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111043:	75 0c                	jne    c0111051 <disk0_io+0x18d>
c0111045:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111048:	25 ff 0f 00 00       	and    $0xfff,%eax
c011104d:	85 c0                	test   %eax,%eax
c011104f:	74 24                	je     c0111075 <disk0_io+0x1b1>
c0111051:	c7 44 24 0c 18 95 11 	movl   $0xc0119518,0xc(%esp)
c0111058:	c0 
c0111059:	c7 44 24 08 02 95 11 	movl   $0xc0119502,0x8(%esp)
c0111060:	c0 
c0111061:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0111068:	00 
c0111069:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0111070:	e8 53 fe fe ff       	call   c0100ec8 <__panic>
        }
        resid -= copied, blkno += nblks;
c0111075:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111078:	29 45 f4             	sub    %eax,-0xc(%ebp)
c011107b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011107e:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0111081:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111085:	0f 85 c5 fe ff ff    	jne    c0110f50 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c011108b:	e8 ea fc ff ff       	call   c0110d7a <unlock_disk0>
    return 0;
c0111090:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111095:	c9                   	leave  
c0111096:	c3                   	ret    

c0111097 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0111097:	55                   	push   %ebp
c0111098:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011109a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011109f:	5d                   	pop    %ebp
c01110a0:	c3                   	ret    

c01110a1 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c01110a1:	55                   	push   %ebp
c01110a2:	89 e5                	mov    %esp,%ebp
c01110a4:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c01110a7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01110ae:	e8 6f 0b ff ff       	call   c0101c22 <ide_device_valid>
c01110b3:	85 c0                	test   %eax,%eax
c01110b5:	75 1c                	jne    c01110d3 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c01110b7:	c7 44 24 08 48 95 11 	movl   $0xc0119548,0x8(%esp)
c01110be:	c0 
c01110bf:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01110c6:	00 
c01110c7:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c01110ce:	e8 f5 fd fe ff       	call   c0100ec8 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c01110d3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01110da:	e8 82 0b ff ff       	call   c0101c61 <ide_device_size>
c01110df:	c1 e8 03             	shr    $0x3,%eax
c01110e2:	89 c2                	mov    %eax,%edx
c01110e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01110e7:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c01110e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01110ec:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c01110f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01110f6:	c7 40 08 8e 0d 11 c0 	movl   $0xc0110d8e,0x8(%eax)
    dev->d_close = disk0_close;
c01110fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0111100:	c7 40 0c 98 0d 11 c0 	movl   $0xc0110d98,0xc(%eax)
    dev->d_io = disk0_io;
c0111107:	8b 45 08             	mov    0x8(%ebp),%eax
c011110a:	c7 40 10 c4 0e 11 c0 	movl   $0xc0110ec4,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0111111:	8b 45 08             	mov    0x8(%ebp),%eax
c0111114:	c7 40 14 97 10 11 c0 	movl   $0xc0111097,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c011111b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111122:	00 
c0111123:	c7 04 24 e4 2f 15 c0 	movl   $0xc0152fe4,(%esp)
c011112a:	e8 5a 8a ff ff       	call   c0109b89 <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c011112f:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0111136:	e8 bc 3b ff ff       	call   c0104cf7 <kmalloc>
c011113b:	a3 e0 2f 15 c0       	mov    %eax,0xc0152fe0
c0111140:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c0111145:	85 c0                	test   %eax,%eax
c0111147:	75 1c                	jne    c0111165 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0111149:	c7 44 24 08 67 95 11 	movl   $0xc0119567,0x8(%esp)
c0111150:	c0 
c0111151:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
c0111158:	00 
c0111159:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0111160:	e8 63 fd fe ff       	call   c0100ec8 <__panic>
    }
}
c0111165:	c9                   	leave  
c0111166:	c3                   	ret    

c0111167 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0111167:	55                   	push   %ebp
c0111168:	89 e5                	mov    %esp,%ebp
c011116a:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011116d:	e8 b9 fb ff ff       	call   c0110d2b <dev_create_inode>
c0111172:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111175:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111179:	75 1c                	jne    c0111197 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c011117b:	c7 44 24 08 83 95 11 	movl   $0xc0119583,0x8(%esp)
c0111182:	c0 
c0111183:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c011118a:	00 
c011118b:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0111192:	e8 31 fd fe ff       	call   c0100ec8 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0111197:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011119a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011119d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01111a1:	74 0d                	je     c01111b0 <dev_init_disk0+0x49>
c01111a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111a6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01111a9:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01111ae:	74 24                	je     c01111d4 <dev_init_disk0+0x6d>
c01111b0:	c7 44 24 0c 9c 95 11 	movl   $0xc011959c,0xc(%esp)
c01111b7:	c0 
c01111b8:	c7 44 24 08 02 95 11 	movl   $0xc0119502,0x8(%esp)
c01111bf:	c0 
c01111c0:	c7 44 24 04 8b 00 00 	movl   $0x8b,0x4(%esp)
c01111c7:	00 
c01111c8:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c01111cf:	e8 f4 fc fe ff       	call   c0100ec8 <__panic>
c01111d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111d7:	89 04 24             	mov    %eax,(%esp)
c01111da:	e8 c2 fe ff ff       	call   c01110a1 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c01111df:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01111e6:	00 
c01111e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01111ee:	c7 04 24 cf 95 11 c0 	movl   $0xc01195cf,(%esp)
c01111f5:	e8 23 e9 ff ff       	call   c010fb1d <vfs_add_dev>
c01111fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01111fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111201:	74 23                	je     c0111226 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0111203:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111206:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011120a:	c7 44 24 08 d5 95 11 	movl   $0xc01195d5,0x8(%esp)
c0111211:	c0 
c0111212:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c0111219:	00 
c011121a:	c7 04 24 44 94 11 c0 	movl   $0xc0119444,(%esp)
c0111221:	e8 a2 fc fe ff       	call   c0100ec8 <__panic>
    }
}
c0111226:	c9                   	leave  
c0111227:	c3                   	ret    

c0111228 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0111228:	55                   	push   %ebp
c0111229:	89 e5                	mov    %esp,%ebp
c011122b:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c011122e:	9c                   	pushf  
c011122f:	58                   	pop    %eax
c0111230:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0111233:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0111236:	25 00 02 00 00       	and    $0x200,%eax
c011123b:	85 c0                	test   %eax,%eax
c011123d:	74 0c                	je     c011124b <__intr_save+0x23>
        intr_disable();
c011123f:	e8 fe 0e ff ff       	call   c0102142 <intr_disable>
        return 1;
c0111244:	b8 01 00 00 00       	mov    $0x1,%eax
c0111249:	eb 05                	jmp    c0111250 <__intr_save+0x28>
    }
    return 0;
c011124b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111250:	c9                   	leave  
c0111251:	c3                   	ret    

c0111252 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0111252:	55                   	push   %ebp
c0111253:	89 e5                	mov    %esp,%ebp
c0111255:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0111258:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011125c:	74 05                	je     c0111263 <__intr_restore+0x11>
        intr_enable();
c011125e:	e8 d9 0e ff ff       	call   c010213c <intr_enable>
    }
}
c0111263:	c9                   	leave  
c0111264:	c3                   	ret    

c0111265 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c0111265:	55                   	push   %ebp
c0111266:	89 e5                	mov    %esp,%ebp
c0111268:	83 ec 28             	sub    $0x28,%esp
c011126b:	8b 45 08             	mov    0x8(%ebp),%eax
c011126e:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0111271:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0111275:	0f 84 80 00 00 00    	je     c01112fb <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c011127b:	e8 a8 ff ff ff       	call   c0111228 <__intr_save>
c0111280:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c0111283:	a1 04 40 15 c0       	mov    0xc0154004,%eax
c0111288:	99                   	cltd   
c0111289:	c1 ea 14             	shr    $0x14,%edx
c011128c:	01 d0                	add    %edx,%eax
c011128e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0111293:	29 d0                	sub    %edx,%eax
c0111295:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0111299:	88 90 00 30 15 c0    	mov    %dl,-0x3fead000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c011129f:	8b 15 04 40 15 c0    	mov    0xc0154004,%edx
c01112a5:	a1 00 40 15 c0       	mov    0xc0154000,%eax
c01112aa:	29 c2                	sub    %eax,%edx
c01112ac:	89 d0                	mov    %edx,%eax
c01112ae:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01112b3:	7f 0d                	jg     c01112c2 <dev_stdin_write+0x5d>
                p_wpos ++;
c01112b5:	a1 04 40 15 c0       	mov    0xc0154004,%eax
c01112ba:	83 c0 01             	add    $0x1,%eax
c01112bd:	a3 04 40 15 c0       	mov    %eax,0xc0154004
            }
            if (!wait_queue_empty(wait_queue)) {
c01112c2:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01112c7:	89 04 24             	mov    %eax,(%esp)
c01112ca:	e8 b4 8d ff ff       	call   c010a083 <wait_queue_empty>
c01112cf:	85 c0                	test   %eax,%eax
c01112d1:	75 1d                	jne    c01112f0 <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c01112d3:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01112d8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01112df:	00 
c01112e0:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c01112e7:	80 
c01112e8:	89 04 24             	mov    %eax,(%esp)
c01112eb:	e8 4a 8e ff ff       	call   c010a13a <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c01112f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112f3:	89 04 24             	mov    %eax,(%esp)
c01112f6:	e8 57 ff ff ff       	call   c0111252 <__intr_restore>
    }
}
c01112fb:	c9                   	leave  
c01112fc:	c3                   	ret    

c01112fd <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c01112fd:	55                   	push   %ebp
c01112fe:	89 e5                	mov    %esp,%ebp
c0111300:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0111303:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c011130a:	e8 19 ff ff ff       	call   c0111228 <__intr_save>
c011130f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111312:	e9 bb 00 00 00       	jmp    c01113d2 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0111317:	8b 15 00 40 15 c0    	mov    0xc0154000,%edx
c011131d:	a1 04 40 15 c0       	mov    0xc0154004,%eax
c0111322:	39 c2                	cmp    %eax,%edx
c0111324:	7d 3d                	jge    c0111363 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0111326:	8b 45 08             	mov    0x8(%ebp),%eax
c0111329:	8d 50 01             	lea    0x1(%eax),%edx
c011132c:	89 55 08             	mov    %edx,0x8(%ebp)
c011132f:	8b 15 00 40 15 c0    	mov    0xc0154000,%edx
c0111335:	89 d1                	mov    %edx,%ecx
c0111337:	c1 f9 1f             	sar    $0x1f,%ecx
c011133a:	c1 e9 14             	shr    $0x14,%ecx
c011133d:	01 ca                	add    %ecx,%edx
c011133f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0111345:	29 ca                	sub    %ecx,%edx
c0111347:	0f b6 92 00 30 15 c0 	movzbl -0x3fead000(%edx),%edx
c011134e:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111350:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111354:	a1 00 40 15 c0       	mov    0xc0154000,%eax
c0111359:	83 c0 01             	add    $0x1,%eax
c011135c:	a3 00 40 15 c0       	mov    %eax,0xc0154000
c0111361:	eb 6f                	jmp    c01113d2 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c0111363:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0111366:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c0111369:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c011136e:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c0111375:	80 
c0111376:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111379:	89 54 24 04          	mov    %edx,0x4(%esp)
c011137d:	89 04 24             	mov    %eax,(%esp)
c0111380:	e8 4a 8e ff ff       	call   c010a1cf <wait_current_set>
                local_intr_restore(intr_flag);
c0111385:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111388:	89 04 24             	mov    %eax,(%esp)
c011138b:	e8 c2 fe ff ff       	call   c0111252 <__intr_restore>

                schedule();
c0111390:	e8 7c d3 ff ff       	call   c010e711 <schedule>

                local_intr_save(intr_flag);
c0111395:	e8 8e fe ff ff       	call   c0111228 <__intr_save>
c011139a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c011139d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113a0:	89 04 24             	mov    %eax,(%esp)
c01113a3:	e8 f8 8c ff ff       	call   c010a0a0 <wait_in_queue>
c01113a8:	85 c0                	test   %eax,%eax
c01113aa:	74 14                	je     c01113c0 <dev_stdin_read+0xc3>
c01113ac:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01113b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01113b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01113b8:	89 04 24             	mov    %eax,(%esp)
c01113bb:	e8 db 8a ff ff       	call   c0109e9b <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c01113c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113c3:	8b 40 04             	mov    0x4(%eax),%eax
c01113c6:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c01113cb:	75 11                	jne    c01113de <dev_stdin_read+0xe1>
c01113cd:	e9 45 ff ff ff       	jmp    c0111317 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c01113d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113d5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01113d8:	0f 82 39 ff ff ff    	jb     c0111317 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c01113de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113e1:	89 04 24             	mov    %eax,(%esp)
c01113e4:	e8 69 fe ff ff       	call   c0111252 <__intr_restore>
    return ret;
c01113e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01113ec:	c9                   	leave  
c01113ed:	c3                   	ret    

c01113ee <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c01113ee:	55                   	push   %ebp
c01113ef:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c01113f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01113f5:	74 07                	je     c01113fe <stdin_open+0x10>
        return -E_INVAL;
c01113f7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01113fc:	eb 05                	jmp    c0111403 <stdin_open+0x15>
    }
    return 0;
c01113fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111403:	5d                   	pop    %ebp
c0111404:	c3                   	ret    

c0111405 <stdin_close>:

static int
stdin_close(struct device *dev) {
c0111405:	55                   	push   %ebp
c0111406:	89 e5                	mov    %esp,%ebp
    return 0;
c0111408:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011140d:	5d                   	pop    %ebp
c011140e:	c3                   	ret    

c011140f <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c011140f:	55                   	push   %ebp
c0111410:	89 e5                	mov    %esp,%ebp
c0111412:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0111415:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111419:	75 36                	jne    c0111451 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c011141b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011141e:	8b 50 0c             	mov    0xc(%eax),%edx
c0111421:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111424:	8b 00                	mov    (%eax),%eax
c0111426:	89 54 24 04          	mov    %edx,0x4(%esp)
c011142a:	89 04 24             	mov    %eax,(%esp)
c011142d:	e8 cb fe ff ff       	call   c01112fd <dev_stdin_read>
c0111432:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111435:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111439:	7e 11                	jle    c011144c <stdin_io+0x3d>
            iob->io_resid -= ret;
c011143b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011143e:	8b 50 0c             	mov    0xc(%eax),%edx
c0111441:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111444:	29 c2                	sub    %eax,%edx
c0111446:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111449:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011144c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011144f:	eb 05                	jmp    c0111456 <stdin_io+0x47>
    }
    return -E_INVAL;
c0111451:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111456:	c9                   	leave  
c0111457:	c3                   	ret    

c0111458 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111458:	55                   	push   %ebp
c0111459:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011145b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111460:	5d                   	pop    %ebp
c0111461:	c3                   	ret    

c0111462 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c0111462:	55                   	push   %ebp
c0111463:	89 e5                	mov    %esp,%ebp
c0111465:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0111468:	8b 45 08             	mov    0x8(%ebp),%eax
c011146b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111471:	8b 45 08             	mov    0x8(%ebp),%eax
c0111474:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c011147b:	8b 45 08             	mov    0x8(%ebp),%eax
c011147e:	c7 40 08 ee 13 11 c0 	movl   $0xc01113ee,0x8(%eax)
    dev->d_close = stdin_close;
c0111485:	8b 45 08             	mov    0x8(%ebp),%eax
c0111488:	c7 40 0c 05 14 11 c0 	movl   $0xc0111405,0xc(%eax)
    dev->d_io = stdin_io;
c011148f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111492:	c7 40 10 0f 14 11 c0 	movl   $0xc011140f,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c0111499:	8b 45 08             	mov    0x8(%ebp),%eax
c011149c:	c7 40 14 58 14 11 c0 	movl   $0xc0111458,0x14(%eax)

    p_rpos = p_wpos = 0;
c01114a3:	c7 05 04 40 15 c0 00 	movl   $0x0,0xc0154004
c01114aa:	00 00 00 
c01114ad:	a1 04 40 15 c0       	mov    0xc0154004,%eax
c01114b2:	a3 00 40 15 c0       	mov    %eax,0xc0154000
    wait_queue_init(wait_queue);
c01114b7:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01114bc:	89 04 24             	mov    %eax,(%esp)
c01114bf:	e8 14 89 ff ff       	call   c0109dd8 <wait_queue_init>
}
c01114c4:	c9                   	leave  
c01114c5:	c3                   	ret    

c01114c6 <dev_init_stdin>:

void
dev_init_stdin(void) {
c01114c6:	55                   	push   %ebp
c01114c7:	89 e5                	mov    %esp,%ebp
c01114c9:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c01114cc:	e8 5a f8 ff ff       	call   c0110d2b <dev_create_inode>
c01114d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01114d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01114d8:	75 1c                	jne    c01114f6 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c01114da:	c7 44 24 08 f0 95 11 	movl   $0xc01195f0,0x8(%esp)
c01114e1:	c0 
c01114e2:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01114e9:	00 
c01114ea:	c7 04 24 09 96 11 c0 	movl   $0xc0119609,(%esp)
c01114f1:	e8 d2 f9 fe ff       	call   c0100ec8 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c01114f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01114fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111500:	74 0d                	je     c011150f <dev_init_stdin+0x49>
c0111502:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111505:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111508:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011150d:	74 24                	je     c0111533 <dev_init_stdin+0x6d>
c011150f:	c7 44 24 0c 24 96 11 	movl   $0xc0119624,0xc(%esp)
c0111516:	c0 
c0111517:	c7 44 24 08 57 96 11 	movl   $0xc0119657,0x8(%esp)
c011151e:	c0 
c011151f:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111526:	00 
c0111527:	c7 04 24 09 96 11 c0 	movl   $0xc0119609,(%esp)
c011152e:	e8 95 f9 fe ff       	call   c0100ec8 <__panic>
c0111533:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111536:	89 04 24             	mov    %eax,(%esp)
c0111539:	e8 24 ff ff ff       	call   c0111462 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c011153e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111545:	00 
c0111546:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111549:	89 44 24 04          	mov    %eax,0x4(%esp)
c011154d:	c7 04 24 6c 96 11 c0 	movl   $0xc011966c,(%esp)
c0111554:	e8 c4 e5 ff ff       	call   c010fb1d <vfs_add_dev>
c0111559:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011155c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111560:	74 23                	je     c0111585 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c0111562:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111565:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111569:	c7 44 24 08 72 96 11 	movl   $0xc0119672,0x8(%esp)
c0111570:	c0 
c0111571:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c0111578:	00 
c0111579:	c7 04 24 09 96 11 c0 	movl   $0xc0119609,(%esp)
c0111580:	e8 43 f9 fe ff       	call   c0100ec8 <__panic>
    }
}
c0111585:	c9                   	leave  
c0111586:	c3                   	ret    

c0111587 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c0111587:	55                   	push   %ebp
c0111588:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c011158a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011158e:	74 07                	je     c0111597 <stdout_open+0x10>
        return -E_INVAL;
c0111590:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111595:	eb 05                	jmp    c011159c <stdout_open+0x15>
    }
    return 0;
c0111597:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011159c:	5d                   	pop    %ebp
c011159d:	c3                   	ret    

c011159e <stdout_close>:

static int
stdout_close(struct device *dev) {
c011159e:	55                   	push   %ebp
c011159f:	89 e5                	mov    %esp,%ebp
    return 0;
c01115a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01115a6:	5d                   	pop    %ebp
c01115a7:	c3                   	ret    

c01115a8 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01115a8:	55                   	push   %ebp
c01115a9:	89 e5                	mov    %esp,%ebp
c01115ab:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c01115ae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01115b2:	74 41                	je     c01115f5 <stdout_io+0x4d>
        char *data = iob->io_base;
c01115b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115b7:	8b 00                	mov    (%eax),%eax
c01115b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01115bc:	eb 26                	jmp    c01115e4 <stdout_io+0x3c>
            cputchar(*data ++);
c01115be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115c1:	8d 50 01             	lea    0x1(%eax),%edx
c01115c4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01115c7:	0f b6 00             	movzbl (%eax),%eax
c01115ca:	0f be c0             	movsbl %al,%eax
c01115cd:	89 04 24             	mov    %eax,(%esp)
c01115d0:	e8 b6 ed fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c01115d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115d8:	8b 40 0c             	mov    0xc(%eax),%eax
c01115db:	8d 50 ff             	lea    -0x1(%eax),%edx
c01115de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115e1:	89 50 0c             	mov    %edx,0xc(%eax)
c01115e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115e7:	8b 40 0c             	mov    0xc(%eax),%eax
c01115ea:	85 c0                	test   %eax,%eax
c01115ec:	75 d0                	jne    c01115be <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c01115ee:	b8 00 00 00 00       	mov    $0x0,%eax
c01115f3:	eb 05                	jmp    c01115fa <stdout_io+0x52>
    }
    return -E_INVAL;
c01115f5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01115fa:	c9                   	leave  
c01115fb:	c3                   	ret    

c01115fc <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c01115fc:	55                   	push   %ebp
c01115fd:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c01115ff:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111604:	5d                   	pop    %ebp
c0111605:	c3                   	ret    

c0111606 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0111606:	55                   	push   %ebp
c0111607:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0111609:	8b 45 08             	mov    0x8(%ebp),%eax
c011160c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111612:	8b 45 08             	mov    0x8(%ebp),%eax
c0111615:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c011161c:	8b 45 08             	mov    0x8(%ebp),%eax
c011161f:	c7 40 08 87 15 11 c0 	movl   $0xc0111587,0x8(%eax)
    dev->d_close = stdout_close;
c0111626:	8b 45 08             	mov    0x8(%ebp),%eax
c0111629:	c7 40 0c 9e 15 11 c0 	movl   $0xc011159e,0xc(%eax)
    dev->d_io = stdout_io;
c0111630:	8b 45 08             	mov    0x8(%ebp),%eax
c0111633:	c7 40 10 a8 15 11 c0 	movl   $0xc01115a8,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c011163a:	8b 45 08             	mov    0x8(%ebp),%eax
c011163d:	c7 40 14 fc 15 11 c0 	movl   $0xc01115fc,0x14(%eax)
}
c0111644:	5d                   	pop    %ebp
c0111645:	c3                   	ret    

c0111646 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111646:	55                   	push   %ebp
c0111647:	89 e5                	mov    %esp,%ebp
c0111649:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011164c:	e8 da f6 ff ff       	call   c0110d2b <dev_create_inode>
c0111651:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111654:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111658:	75 1c                	jne    c0111676 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c011165a:	c7 44 24 08 8c 96 11 	movl   $0xc011968c,0x8(%esp)
c0111661:	c0 
c0111662:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111669:	00 
c011166a:	c7 04 24 a6 96 11 c0 	movl   $0xc01196a6,(%esp)
c0111671:	e8 52 f8 fe ff       	call   c0100ec8 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c0111676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111679:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011167c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111680:	74 0d                	je     c011168f <dev_init_stdout+0x49>
c0111682:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111685:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111688:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011168d:	74 24                	je     c01116b3 <dev_init_stdout+0x6d>
c011168f:	c7 44 24 0c c0 96 11 	movl   $0xc01196c0,0xc(%esp)
c0111696:	c0 
c0111697:	c7 44 24 08 f3 96 11 	movl   $0xc01196f3,0x8(%esp)
c011169e:	c0 
c011169f:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01116a6:	00 
c01116a7:	c7 04 24 a6 96 11 c0 	movl   $0xc01196a6,(%esp)
c01116ae:	e8 15 f8 fe ff       	call   c0100ec8 <__panic>
c01116b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116b6:	89 04 24             	mov    %eax,(%esp)
c01116b9:	e8 48 ff ff ff       	call   c0111606 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01116be:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01116c5:	00 
c01116c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01116cd:	c7 04 24 08 97 11 c0 	movl   $0xc0119708,(%esp)
c01116d4:	e8 44 e4 ff ff       	call   c010fb1d <vfs_add_dev>
c01116d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01116dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01116e0:	74 23                	je     c0111705 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c01116e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116e5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01116e9:	c7 44 24 08 0f 97 11 	movl   $0xc011970f,0x8(%esp)
c01116f0:	c0 
c01116f1:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c01116f8:	00 
c01116f9:	c7 04 24 a6 96 11 c0 	movl   $0xc01196a6,(%esp)
c0111700:	e8 c3 f7 fe ff       	call   c0100ec8 <__panic>
    }
}
c0111705:	c9                   	leave  
c0111706:	c3                   	ret    

c0111707 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0111707:	55                   	push   %ebp
c0111708:	89 e5                	mov    %esp,%ebp
c011170a:	56                   	push   %esi
c011170b:	53                   	push   %ebx
c011170c:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c011170f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111713:	74 0b                	je     c0111720 <bitmap_create+0x19>
c0111715:	8b 45 08             	mov    0x8(%ebp),%eax
c0111718:	83 c0 20             	add    $0x20,%eax
c011171b:	3b 45 08             	cmp    0x8(%ebp),%eax
c011171e:	77 24                	ja     c0111744 <bitmap_create+0x3d>
c0111720:	c7 44 24 0c 2c 97 11 	movl   $0xc011972c,0xc(%esp)
c0111727:	c0 
c0111728:	c7 44 24 08 54 97 11 	movl   $0xc0119754,0x8(%esp)
c011172f:	c0 
c0111730:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111737:	00 
c0111738:	c7 04 24 69 97 11 c0 	movl   $0xc0119769,(%esp)
c011173f:	e8 84 f7 fe ff       	call   c0100ec8 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111744:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011174b:	e8 a7 35 ff ff       	call   c0104cf7 <kmalloc>
c0111750:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111753:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111757:	75 0a                	jne    c0111763 <bitmap_create+0x5c>
        return NULL;
c0111759:	b8 00 00 00 00       	mov    $0x0,%eax
c011175e:	e9 43 01 00 00       	jmp    c01118a6 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c0111763:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c011176a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011176d:	8b 55 08             	mov    0x8(%ebp),%edx
c0111770:	01 d0                	add    %edx,%eax
c0111772:	83 e8 01             	sub    $0x1,%eax
c0111775:	ba 00 00 00 00       	mov    $0x0,%edx
c011177a:	f7 75 ec             	divl   -0x14(%ebp)
c011177d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c0111780:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111783:	c1 e0 02             	shl    $0x2,%eax
c0111786:	89 04 24             	mov    %eax,(%esp)
c0111789:	e8 69 35 ff ff       	call   c0104cf7 <kmalloc>
c011178e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111791:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111795:	75 15                	jne    c01117ac <bitmap_create+0xa5>
        kfree(bitmap);
c0111797:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011179a:	89 04 24             	mov    %eax,(%esp)
c011179d:	e8 70 35 ff ff       	call   c0104d12 <kfree>
        return NULL;
c01117a2:	b8 00 00 00 00       	mov    $0x0,%eax
c01117a7:	e9 fa 00 00 00       	jmp    c01118a6 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01117ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117af:	8b 55 08             	mov    0x8(%ebp),%edx
c01117b2:	89 10                	mov    %edx,(%eax)
c01117b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01117ba:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01117bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01117c0:	c1 e0 02             	shl    $0x2,%eax
c01117c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01117c7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c01117ce:	ff 
c01117cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01117d2:	89 04 24             	mov    %eax,(%esp)
c01117d5:	e8 4c 3f 00 00       	call   c0115726 <memset>
c01117da:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01117dd:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c01117e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01117e3:	c1 e0 05             	shl    $0x5,%eax
c01117e6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01117e9:	0f 84 b4 00 00 00    	je     c01118a3 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c01117ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01117f2:	83 e8 01             	sub    $0x1,%eax
c01117f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01117f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01117fb:	c1 e0 05             	shl    $0x5,%eax
c01117fe:	89 c2                	mov    %eax,%edx
c0111800:	8b 45 08             	mov    0x8(%ebp),%eax
c0111803:	29 d0                	sub    %edx,%eax
c0111805:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111808:	8b 45 08             	mov    0x8(%ebp),%eax
c011180b:	c1 e8 05             	shr    $0x5,%eax
c011180e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111811:	74 24                	je     c0111837 <bitmap_create+0x130>
c0111813:	c7 44 24 0c 7e 97 11 	movl   $0xc011977e,0xc(%esp)
c011181a:	c0 
c011181b:	c7 44 24 08 54 97 11 	movl   $0xc0119754,0x8(%esp)
c0111822:	c0 
c0111823:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c011182a:	00 
c011182b:	c7 04 24 69 97 11 c0 	movl   $0xc0119769,(%esp)
c0111832:	e8 91 f6 fe ff       	call   c0100ec8 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111837:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011183b:	74 06                	je     c0111843 <bitmap_create+0x13c>
c011183d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111841:	76 24                	jbe    c0111867 <bitmap_create+0x160>
c0111843:	c7 44 24 0c 98 97 11 	movl   $0xc0119798,0xc(%esp)
c011184a:	c0 
c011184b:	c7 44 24 08 54 97 11 	movl   $0xc0119754,0x8(%esp)
c0111852:	c0 
c0111853:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c011185a:	00 
c011185b:	c7 04 24 69 97 11 c0 	movl   $0xc0119769,(%esp)
c0111862:	e8 61 f6 fe ff       	call   c0100ec8 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c0111867:	eb 34                	jmp    c011189d <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c0111869:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011186c:	8b 40 08             	mov    0x8(%eax),%eax
c011186f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111872:	c1 e2 02             	shl    $0x2,%edx
c0111875:	01 c2                	add    %eax,%edx
c0111877:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011187a:	8b 40 08             	mov    0x8(%eax),%eax
c011187d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0111880:	c1 e1 02             	shl    $0x2,%ecx
c0111883:	01 c8                	add    %ecx,%eax
c0111885:	8b 18                	mov    (%eax),%ebx
c0111887:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011188a:	be 01 00 00 00       	mov    $0x1,%esi
c011188f:	89 c1                	mov    %eax,%ecx
c0111891:	d3 e6                	shl    %cl,%esi
c0111893:	89 f0                	mov    %esi,%eax
c0111895:	31 d8                	xor    %ebx,%eax
c0111897:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c0111899:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011189d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01118a1:	76 c6                	jbe    c0111869 <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c01118a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01118a6:	83 c4 30             	add    $0x30,%esp
c01118a9:	5b                   	pop    %ebx
c01118aa:	5e                   	pop    %esi
c01118ab:	5d                   	pop    %ebp
c01118ac:	c3                   	ret    

c01118ad <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01118ad:	55                   	push   %ebp
c01118ae:	89 e5                	mov    %esp,%ebp
c01118b0:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01118b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01118b6:	8b 40 08             	mov    0x8(%eax),%eax
c01118b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01118bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01118bf:	8b 40 04             	mov    0x4(%eax),%eax
c01118c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c01118c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01118cc:	e9 bb 00 00 00       	jmp    c011198c <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c01118d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118d4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01118db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01118de:	01 d0                	add    %edx,%eax
c01118e0:	8b 00                	mov    (%eax),%eax
c01118e2:	85 c0                	test   %eax,%eax
c01118e4:	0f 84 9e 00 00 00    	je     c0111988 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01118ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01118f1:	eb 6b                	jmp    c011195e <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c01118f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01118f6:	ba 01 00 00 00       	mov    $0x1,%edx
c01118fb:	89 c1                	mov    %eax,%ecx
c01118fd:	d3 e2                	shl    %cl,%edx
c01118ff:	89 d0                	mov    %edx,%eax
c0111901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0111904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111907:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011190e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111911:	01 d0                	add    %edx,%eax
c0111913:	8b 00                	mov    (%eax),%eax
c0111915:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111918:	85 c0                	test   %eax,%eax
c011191a:	74 3e                	je     c011195a <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c011191c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011191f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111926:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111929:	01 c2                	add    %eax,%edx
c011192b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011192e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111935:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111938:	01 c8                	add    %ecx,%eax
c011193a:	8b 00                	mov    (%eax),%eax
c011193c:	33 45 e4             	xor    -0x1c(%ebp),%eax
c011193f:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0111941:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111944:	c1 e0 05             	shl    $0x5,%eax
c0111947:	89 c2                	mov    %eax,%edx
c0111949:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011194c:	01 c2                	add    %eax,%edx
c011194e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111951:	89 10                	mov    %edx,(%eax)
                    return 0;
c0111953:	b8 00 00 00 00       	mov    $0x0,%eax
c0111958:	eb 43                	jmp    c011199d <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011195a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011195e:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0111962:	76 8f                	jbe    c01118f3 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0111964:	c7 44 24 0c bd 97 11 	movl   $0xc01197bd,0xc(%esp)
c011196b:	c0 
c011196c:	c7 44 24 08 54 97 11 	movl   $0xc0119754,0x8(%esp)
c0111973:	c0 
c0111974:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011197b:	00 
c011197c:	c7 04 24 69 97 11 c0 	movl   $0xc0119769,(%esp)
c0111983:	e8 40 f5 fe ff       	call   c0100ec8 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c0111988:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011198c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011198f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111992:	0f 82 39 ff ff ff    	jb     c01118d1 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c0111998:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011199d:	c9                   	leave  
c011199e:	c3                   	ret    

c011199f <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c011199f:	55                   	push   %ebp
c01119a0:	89 e5                	mov    %esp,%ebp
c01119a2:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01119a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01119a8:	8b 00                	mov    (%eax),%eax
c01119aa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01119ad:	77 24                	ja     c01119d3 <bitmap_translate+0x34>
c01119af:	c7 44 24 0c bf 97 11 	movl   $0xc01197bf,0xc(%esp)
c01119b6:	c0 
c01119b7:	c7 44 24 08 54 97 11 	movl   $0xc0119754,0x8(%esp)
c01119be:	c0 
c01119bf:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c01119c6:	00 
c01119c7:	c7 04 24 69 97 11 c0 	movl   $0xc0119769,(%esp)
c01119ce:	e8 f5 f4 fe ff       	call   c0100ec8 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c01119d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01119d6:	c1 e8 05             	shr    $0x5,%eax
c01119d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01119dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01119df:	83 e0 1f             	and    $0x1f,%eax
c01119e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c01119e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01119e8:	8b 40 08             	mov    0x8(%eax),%eax
c01119eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01119ee:	c1 e2 02             	shl    $0x2,%edx
c01119f1:	01 c2                	add    %eax,%edx
c01119f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01119f6:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c01119f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01119fb:	ba 01 00 00 00       	mov    $0x1,%edx
c0111a00:	89 c1                	mov    %eax,%ecx
c0111a02:	d3 e2                	shl    %cl,%edx
c0111a04:	89 d0                	mov    %edx,%eax
c0111a06:	89 c2                	mov    %eax,%edx
c0111a08:	8b 45 14             	mov    0x14(%ebp),%eax
c0111a0b:	89 10                	mov    %edx,(%eax)
}
c0111a0d:	c9                   	leave  
c0111a0e:	c3                   	ret    

c0111a0f <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c0111a0f:	55                   	push   %ebp
c0111a10:	89 e5                	mov    %esp,%ebp
c0111a12:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111a15:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111a18:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a1c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111a1f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111a23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a2d:	89 04 24             	mov    %eax,(%esp)
c0111a30:	e8 6a ff ff ff       	call   c011199f <bitmap_translate>
    return (*word & mask);
c0111a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a38:	8b 10                	mov    (%eax),%edx
c0111a3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a3d:	21 d0                	and    %edx,%eax
}
c0111a3f:	c9                   	leave  
c0111a40:	c3                   	ret    

c0111a41 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111a41:	55                   	push   %ebp
c0111a42:	89 e5                	mov    %esp,%ebp
c0111a44:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111a47:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111a4a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a4e:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111a51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111a55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a5f:	89 04 24             	mov    %eax,(%esp)
c0111a62:	e8 38 ff ff ff       	call   c011199f <bitmap_translate>
    assert(!(*word & mask));
c0111a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a6a:	8b 10                	mov    (%eax),%edx
c0111a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a6f:	21 d0                	and    %edx,%eax
c0111a71:	85 c0                	test   %eax,%eax
c0111a73:	74 24                	je     c0111a99 <bitmap_free+0x58>
c0111a75:	c7 44 24 0c d5 97 11 	movl   $0xc01197d5,0xc(%esp)
c0111a7c:	c0 
c0111a7d:	c7 44 24 08 54 97 11 	movl   $0xc0119754,0x8(%esp)
c0111a84:	c0 
c0111a85:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111a8c:	00 
c0111a8d:	c7 04 24 69 97 11 c0 	movl   $0xc0119769,(%esp)
c0111a94:	e8 2f f4 fe ff       	call   c0100ec8 <__panic>
    *word |= mask;
c0111a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111a9f:	8b 0a                	mov    (%edx),%ecx
c0111aa1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111aa4:	09 ca                	or     %ecx,%edx
c0111aa6:	89 10                	mov    %edx,(%eax)
}
c0111aa8:	c9                   	leave  
c0111aa9:	c3                   	ret    

c0111aaa <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c0111aaa:	55                   	push   %ebp
c0111aab:	89 e5                	mov    %esp,%ebp
c0111aad:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c0111ab0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ab3:	8b 40 08             	mov    0x8(%eax),%eax
c0111ab6:	89 04 24             	mov    %eax,(%esp)
c0111ab9:	e8 54 32 ff ff       	call   c0104d12 <kfree>
    kfree(bitmap);
c0111abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ac1:	89 04 24             	mov    %eax,(%esp)
c0111ac4:	e8 49 32 ff ff       	call   c0104d12 <kfree>
}
c0111ac9:	c9                   	leave  
c0111aca:	c3                   	ret    

c0111acb <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0111acb:	55                   	push   %ebp
c0111acc:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0111ace:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111ad2:	74 12                	je     c0111ae6 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0111ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ad7:	8b 40 04             	mov    0x4(%eax),%eax
c0111ada:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111ae1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111ae4:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111ae6:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ae9:	8b 40 08             	mov    0x8(%eax),%eax
}
c0111aec:	5d                   	pop    %ebp
c0111aed:	c3                   	ret    

c0111aee <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c0111aee:	55                   	push   %ebp
c0111aef:	89 e5                	mov    %esp,%ebp
c0111af1:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111af4:	c7 04 24 e5 97 11 c0 	movl   $0xc01197e5,(%esp)
c0111afb:	e8 d6 08 00 00       	call   c01123d6 <sfs_mount>
c0111b00:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111b03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111b07:	74 23                	je     c0111b2c <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b0c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111b10:	c7 44 24 08 eb 97 11 	movl   $0xc01197eb,0x8(%esp)
c0111b17:	c0 
c0111b18:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0111b1f:	00 
c0111b20:	c7 04 24 08 98 11 c0 	movl   $0xc0119808,(%esp)
c0111b27:	e8 9c f3 fe ff       	call   c0100ec8 <__panic>
    }
}
c0111b2c:	c9                   	leave  
c0111b2d:	c3                   	ret    

c0111b2e <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0111b2e:	55                   	push   %ebp
c0111b2f:	89 e5                	mov    %esp,%ebp
c0111b31:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111b34:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b37:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b3e:	74 0a                	je     c0111b4a <sfs_sync+0x1c>
c0111b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b43:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111b46:	85 c0                	test   %eax,%eax
c0111b48:	74 24                	je     c0111b6e <sfs_sync+0x40>
c0111b4a:	c7 44 24 0c 1c 98 11 	movl   $0xc011981c,0xc(%esp)
c0111b51:	c0 
c0111b52:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111b59:	c0 
c0111b5a:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111b61:	00 
c0111b62:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111b69:	e8 5a f3 fe ff       	call   c0100ec8 <__panic>
c0111b6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b71:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111b74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b77:	89 04 24             	mov    %eax,(%esp)
c0111b7a:	e8 f5 2f 00 00       	call   c0114b74 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0111b7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b82:	83 c0 60             	add    $0x60,%eax
c0111b85:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111b88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0111b8e:	eb 74                	jmp    c0111c04 <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0111b90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b93:	83 e8 1c             	sub    $0x1c,%eax
c0111b96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0111b99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b9c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111b9f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111ba3:	74 17                	je     c0111bbc <sfs_sync+0x8e>
c0111ba5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ba8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111bab:	85 c0                	test   %eax,%eax
c0111bad:	74 0d                	je     c0111bbc <sfs_sync+0x8e>
c0111baf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bb2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111bb5:	8b 40 18             	mov    0x18(%eax),%eax
c0111bb8:	85 c0                	test   %eax,%eax
c0111bba:	75 24                	jne    c0111be0 <sfs_sync+0xb2>
c0111bbc:	c7 44 24 0c 70 98 11 	movl   $0xc0119870,0xc(%esp)
c0111bc3:	c0 
c0111bc4:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111bcb:	c0 
c0111bcc:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c0111bd3:	00 
c0111bd4:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111bdb:	e8 e8 f2 fe ff       	call   c0100ec8 <__panic>
c0111be0:	c7 44 24 04 be 98 11 	movl   $0xc01198be,0x4(%esp)
c0111be7:	c0 
c0111be8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111beb:	89 04 24             	mov    %eax,(%esp)
c0111bee:	e8 03 d8 ff ff       	call   c010f3f6 <inode_check>
c0111bf3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bf6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111bf9:	8b 40 18             	mov    0x18(%eax),%eax
c0111bfc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111bff:	89 14 24             	mov    %edx,(%esp)
c0111c02:	ff d0                	call   *%eax
c0111c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c07:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111c0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111c0d:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0111c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c16:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111c19:	0f 85 71 ff ff ff    	jne    c0111b90 <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c0111c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c22:	89 04 24             	mov    %eax,(%esp)
c0111c25:	e8 76 2f 00 00       	call   c0114ba0 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111c2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c2d:	8b 40 34             	mov    0x34(%eax),%eax
c0111c30:	85 c0                	test   %eax,%eax
c0111c32:	74 50                	je     c0111c84 <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111c34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c37:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c41:	89 04 24             	mov    %eax,(%esp)
c0111c44:	e8 bd 2d 00 00       	call   c0114a06 <sfs_sync_super>
c0111c49:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111c4c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111c50:	74 0f                	je     c0111c61 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c55:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111c5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c5f:	eb 28                	jmp    c0111c89 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111c61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c64:	89 04 24             	mov    %eax,(%esp)
c0111c67:	e8 26 2e 00 00       	call   c0114a92 <sfs_sync_freemap>
c0111c6c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111c6f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111c73:	74 0f                	je     c0111c84 <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111c75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c78:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111c7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c82:	eb 05                	jmp    c0111c89 <sfs_sync+0x15b>
        }
    }
    return 0;
c0111c84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111c89:	c9                   	leave  
c0111c8a:	c3                   	ret    

c0111c8b <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111c8b:	55                   	push   %ebp
c0111c8c:	89 e5                	mov    %esp,%ebp
c0111c8e:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111c97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111c9b:	74 0a                	je     c0111ca7 <sfs_get_root+0x1c>
c0111c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ca0:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111ca3:	85 c0                	test   %eax,%eax
c0111ca5:	74 24                	je     c0111ccb <sfs_get_root+0x40>
c0111ca7:	c7 44 24 0c 1c 98 11 	movl   $0xc011981c,0xc(%esp)
c0111cae:	c0 
c0111caf:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111cb6:	c0 
c0111cb7:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111cbe:	00 
c0111cbf:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111cc6:	e8 fd f1 fe ff       	call   c0100ec8 <__panic>
c0111ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111cce:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111cd5:	00 
c0111cd6:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111cd9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111cdd:	89 04 24             	mov    %eax,(%esp)
c0111ce0:	e8 e1 0b 00 00       	call   c01128c6 <sfs_load_inode>
c0111ce5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111ce8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111cec:	74 23                	je     c0111d11 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0111cee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111cf1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111cf5:	c7 44 24 08 c4 98 11 	movl   $0xc01198c4,0x8(%esp)
c0111cfc:	c0 
c0111cfd:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111d04:	00 
c0111d05:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111d0c:	e8 b7 f1 fe ff       	call   c0100ec8 <__panic>
    }
    return node;
c0111d11:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111d14:	c9                   	leave  
c0111d15:	c3                   	ret    

c0111d16 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111d16:	55                   	push   %ebp
c0111d17:	89 e5                	mov    %esp,%ebp
c0111d19:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111d1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111d22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111d26:	74 0a                	je     c0111d32 <sfs_unmount+0x1c>
c0111d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d2b:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111d2e:	85 c0                	test   %eax,%eax
c0111d30:	74 24                	je     c0111d56 <sfs_unmount+0x40>
c0111d32:	c7 44 24 0c 1c 98 11 	movl   $0xc011981c,0xc(%esp)
c0111d39:	c0 
c0111d3a:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111d41:	c0 
c0111d42:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111d49:	00 
c0111d4a:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111d51:	e8 72 f1 fe ff       	call   c0100ec8 <__panic>
c0111d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d5f:	83 c0 60             	add    $0x60,%eax
c0111d62:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111d65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d68:	8b 40 04             	mov    0x4(%eax),%eax
c0111d6b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111d6e:	0f 94 c0             	sete   %al
c0111d71:	0f b6 c0             	movzbl %al,%eax
c0111d74:	85 c0                	test   %eax,%eax
c0111d76:	75 07                	jne    c0111d7f <sfs_unmount+0x69>
        return -E_BUSY;
c0111d78:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111d7d:	eb 68                	jmp    c0111de7 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111d7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d82:	8b 40 34             	mov    0x34(%eax),%eax
c0111d85:	85 c0                	test   %eax,%eax
c0111d87:	74 24                	je     c0111dad <sfs_unmount+0x97>
c0111d89:	c7 44 24 0c dd 98 11 	movl   $0xc01198dd,0xc(%esp)
c0111d90:	c0 
c0111d91:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111d98:	c0 
c0111d99:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111da0:	00 
c0111da1:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111da8:	e8 1b f1 fe ff       	call   c0100ec8 <__panic>
    bitmap_destroy(sfs->freemap);
c0111dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111db0:	8b 40 30             	mov    0x30(%eax),%eax
c0111db3:	89 04 24             	mov    %eax,(%esp)
c0111db6:	e8 ef fc ff ff       	call   c0111aaa <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111dbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dbe:	8b 40 38             	mov    0x38(%eax),%eax
c0111dc1:	89 04 24             	mov    %eax,(%esp)
c0111dc4:	e8 49 2f ff ff       	call   c0104d12 <kfree>
    kfree(sfs->hash_list);
c0111dc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dcc:	8b 40 68             	mov    0x68(%eax),%eax
c0111dcf:	89 04 24             	mov    %eax,(%esp)
c0111dd2:	e8 3b 2f ff ff       	call   c0104d12 <kfree>
    kfree(sfs);
c0111dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dda:	89 04 24             	mov    %eax,(%esp)
c0111ddd:	e8 30 2f ff ff       	call   c0104d12 <kfree>
    return 0;
c0111de2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111de7:	c9                   	leave  
c0111de8:	c3                   	ret    

c0111de9 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111de9:	55                   	push   %ebp
c0111dea:	89 e5                	mov    %esp,%ebp
c0111dec:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111def:	8b 45 08             	mov    0x8(%ebp),%eax
c0111df2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111df5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111df9:	74 0a                	je     c0111e05 <sfs_cleanup+0x1c>
c0111dfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111dfe:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111e01:	85 c0                	test   %eax,%eax
c0111e03:	74 24                	je     c0111e29 <sfs_cleanup+0x40>
c0111e05:	c7 44 24 0c 1c 98 11 	movl   $0xc011981c,0xc(%esp)
c0111e0c:	c0 
c0111e0d:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111e14:	c0 
c0111e15:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111e1c:	00 
c0111e1d:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111e24:	e8 9f f0 fe ff       	call   c0100ec8 <__panic>
c0111e29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111e2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111e2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e32:	8b 40 04             	mov    0x4(%eax),%eax
c0111e35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e3b:	8b 40 08             	mov    0x8(%eax),%eax
c0111e3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111e41:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111e47:	89 d1                	mov    %edx,%ecx
c0111e49:	29 c1                	sub    %eax,%ecx
c0111e4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e4e:	8d 50 0c             	lea    0xc(%eax),%edx
c0111e51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e54:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111e58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e5b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111e5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111e63:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111e67:	c7 04 24 f0 98 11 c0 	movl   $0xc01198f0,(%esp)
c0111e6e:	e8 f2 e4 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111e73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111e7a:	eb 1d                	jmp    c0111e99 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111e7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e7f:	8b 40 70             	mov    0x70(%eax),%eax
c0111e82:	8b 55 08             	mov    0x8(%ebp),%edx
c0111e85:	89 14 24             	mov    %edx,(%esp)
c0111e88:	ff d0                	call   *%eax
c0111e8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111e8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111e91:	75 02                	jne    c0111e95 <sfs_cleanup+0xac>
            break;
c0111e93:	eb 0a                	jmp    c0111e9f <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111e95:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111e99:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111e9d:	7e dd                	jle    c0111e7c <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111e9f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111ea3:	74 2d                	je     c0111ed2 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111ea5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ea8:	8d 50 0c             	lea    0xc(%eax),%edx
c0111eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111eae:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111eb2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111eb6:	c7 44 24 08 0f 99 11 	movl   $0xc011990f,0x8(%esp)
c0111ebd:	c0 
c0111ebe:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111ec5:	00 
c0111ec6:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111ecd:	e8 62 f0 fe ff       	call   c0100f34 <__warn>
    }
}
c0111ed2:	c9                   	leave  
c0111ed3:	c3                   	ret    

c0111ed4 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111ed4:	55                   	push   %ebp
c0111ed5:	89 e5                	mov    %esp,%ebp
c0111ed7:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111eda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111edd:	c1 e0 0c             	shl    $0xc,%eax
c0111ee0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111ee4:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111eeb:	00 
c0111eec:	8b 45 10             	mov    0x10(%ebp),%eax
c0111eef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ef3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111ef6:	89 04 24             	mov    %eax,(%esp)
c0111ef9:	e8 a8 94 ff ff       	call   c010b3a6 <iobuf_init>
c0111efe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111f01:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f04:	8b 40 10             	mov    0x10(%eax),%eax
c0111f07:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111f0e:	00 
c0111f0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111f12:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111f16:	8b 55 08             	mov    0x8(%ebp),%edx
c0111f19:	89 14 24             	mov    %edx,(%esp)
c0111f1c:	ff d0                	call   *%eax
}
c0111f1e:	c9                   	leave  
c0111f1f:	c3                   	ret    

c0111f20 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111f20:	55                   	push   %ebp
c0111f21:	89 e5                	mov    %esp,%ebp
c0111f23:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111f26:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f30:	89 04 24             	mov    %eax,(%esp)
c0111f33:	e8 93 fb ff ff       	call   c0111acb <bitmap_getdata>
c0111f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111f3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f3f:	74 0f                	je     c0111f50 <sfs_init_freemap+0x30>
c0111f41:	8b 45 14             	mov    0x14(%ebp),%eax
c0111f44:	c1 e0 0c             	shl    $0xc,%eax
c0111f47:	89 c2                	mov    %eax,%edx
c0111f49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f4c:	39 c2                	cmp    %eax,%edx
c0111f4e:	74 24                	je     c0111f74 <sfs_init_freemap+0x54>
c0111f50:	c7 44 24 0c 2c 99 11 	movl   $0xc011992c,0xc(%esp)
c0111f57:	c0 
c0111f58:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c0111f5f:	c0 
c0111f60:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111f67:	00 
c0111f68:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c0111f6f:	e8 54 ef fe ff       	call   c0100ec8 <__panic>
    while (nblks != 0) {
c0111f74:	eb 36                	jmp    c0111fac <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f79:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111f7d:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f87:	89 04 24             	mov    %eax,(%esp)
c0111f8a:	e8 45 ff ff ff       	call   c0111ed4 <sfs_init_read>
c0111f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111f92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111f96:	74 05                	je     c0111f9d <sfs_init_freemap+0x7d>
            return ret;
c0111f98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111f9b:	eb 1a                	jmp    c0111fb7 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111f9d:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111fa1:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111fa5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111fac:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111fb0:	75 c4                	jne    c0111f76 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111fb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111fb7:	c9                   	leave  
c0111fb8:	c3                   	ret    

c0111fb9 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111fb9:	55                   	push   %ebp
c0111fba:	89 e5                	mov    %esp,%ebp
c0111fbc:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111fbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fc2:	8b 40 04             	mov    0x4(%eax),%eax
c0111fc5:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111fca:	74 0a                	je     c0111fd6 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111fcc:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111fd1:	e9 fe 03 00 00       	jmp    c01123d4 <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111fd6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111fdd:	e8 07 d5 ff ff       	call   c010f4e9 <__alloc_fs>
c0111fe2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111fe5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111fe9:	75 0a                	jne    c0111ff5 <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111feb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111ff0:	e9 df 03 00 00       	jmp    c01123d4 <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111ff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ff8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111ffb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111fff:	74 0a                	je     c011200b <sfs_do_mount+0x52>
c0112001:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112004:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112007:	85 c0                	test   %eax,%eax
c0112009:	74 24                	je     c011202f <sfs_do_mount+0x76>
c011200b:	c7 44 24 0c 1c 98 11 	movl   $0xc011981c,0xc(%esp)
c0112012:	c0 
c0112013:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c011201a:	c0 
c011201b:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0112022:	00 
c0112023:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c011202a:	e8 99 ee fe ff       	call   c0100ec8 <__panic>
c011202f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112032:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0112035:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112038:	8b 55 08             	mov    0x8(%ebp),%edx
c011203b:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c011203e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0112045:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c011204c:	e8 a6 2c ff ff       	call   c0104cf7 <kmalloc>
c0112051:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0112054:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112057:	8b 55 dc             	mov    -0x24(%ebp),%edx
c011205a:	89 50 38             	mov    %edx,0x38(%eax)
c011205d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112060:	8b 40 38             	mov    0x38(%eax),%eax
c0112063:	85 c0                	test   %eax,%eax
c0112065:	75 05                	jne    c011206c <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0112067:	e9 5a 03 00 00       	jmp    c01123c6 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c011206c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011206f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112073:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011207a:	00 
c011207b:	8b 45 08             	mov    0x8(%ebp),%eax
c011207e:	89 04 24             	mov    %eax,(%esp)
c0112081:	e8 4e fe ff ff       	call   c0111ed4 <sfs_init_read>
c0112086:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112089:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011208d:	74 05                	je     c0112094 <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c011208f:	e9 27 03 00 00       	jmp    c01123bb <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c0112094:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c011209b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011209e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c01120a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120a4:	8b 00                	mov    (%eax),%eax
c01120a6:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c01120ab:	74 22                	je     c01120cf <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c01120ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120b0:	8b 00                	mov    (%eax),%eax
c01120b2:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c01120b9:	2f 
c01120ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120be:	c7 04 24 58 99 11 c0 	movl   $0xc0119958,(%esp)
c01120c5:	e8 9b e2 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c01120ca:	e9 ec 02 00 00       	jmp    c01123bb <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c01120cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120d2:	8b 50 04             	mov    0x4(%eax),%edx
c01120d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01120d8:	8b 00                	mov    (%eax),%eax
c01120da:	39 c2                	cmp    %eax,%edx
c01120dc:	76 24                	jbe    c0112102 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c01120de:	8b 45 08             	mov    0x8(%ebp),%eax
c01120e1:	8b 10                	mov    (%eax),%edx
c01120e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120e6:	8b 40 04             	mov    0x4(%eax),%eax
c01120e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01120ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120f1:	c7 04 24 90 99 11 c0 	movl   $0xc0119990,(%esp)
c01120f8:	e8 68 e2 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c01120fd:	e9 b9 02 00 00       	jmp    c01123bb <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0112102:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112105:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0112109:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011210c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011210f:	8b 0a                	mov    (%edx),%ecx
c0112111:	89 08                	mov    %ecx,(%eax)
c0112113:	8b 4a 04             	mov    0x4(%edx),%ecx
c0112116:	89 48 04             	mov    %ecx,0x4(%eax)
c0112119:	8b 4a 08             	mov    0x8(%edx),%ecx
c011211c:	89 48 08             	mov    %ecx,0x8(%eax)
c011211f:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0112122:	89 48 0c             	mov    %ecx,0xc(%eax)
c0112125:	8b 4a 10             	mov    0x10(%edx),%ecx
c0112128:	89 48 10             	mov    %ecx,0x10(%eax)
c011212b:	8b 4a 14             	mov    0x14(%edx),%ecx
c011212e:	89 48 14             	mov    %ecx,0x14(%eax)
c0112131:	8b 4a 18             	mov    0x18(%edx),%ecx
c0112134:	89 48 18             	mov    %ecx,0x18(%eax)
c0112137:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c011213a:	89 48 1c             	mov    %ecx,0x1c(%eax)
c011213d:	8b 4a 20             	mov    0x20(%edx),%ecx
c0112140:	89 48 20             	mov    %ecx,0x20(%eax)
c0112143:	8b 4a 24             	mov    0x24(%edx),%ecx
c0112146:	89 48 24             	mov    %ecx,0x24(%eax)
c0112149:	8b 52 28             	mov    0x28(%edx),%edx
c011214c:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c011214f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0112156:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c011215d:	e8 95 2b ff ff       	call   c0104cf7 <kmalloc>
c0112162:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0112165:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112168:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011216b:	89 50 68             	mov    %edx,0x68(%eax)
c011216e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112171:	8b 40 68             	mov    0x68(%eax),%eax
c0112174:	85 c0                	test   %eax,%eax
c0112176:	75 05                	jne    c011217d <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c0112178:	e9 3e 02 00 00       	jmp    c01123bb <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c011217d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112184:	eb 2a                	jmp    c01121b0 <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c0112186:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112189:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0112190:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112193:	01 d0                	add    %edx,%eax
c0112195:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0112198:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011219b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c011219e:	89 50 04             	mov    %edx,0x4(%eax)
c01121a1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01121a4:	8b 50 04             	mov    0x4(%eax),%edx
c01121a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01121aa:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c01121ac:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01121b0:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c01121b7:	76 cd                	jbe    c0112186 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c01121b9:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c01121c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01121c3:	8b 50 04             	mov    0x4(%eax),%edx
c01121c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01121c9:	01 d0                	add    %edx,%eax
c01121cb:	83 e8 01             	sub    $0x1,%eax
c01121ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01121d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01121d4:	ba 00 00 00 00       	mov    $0x0,%edx
c01121d9:	f7 75 d0             	divl   -0x30(%ebp)
c01121dc:	89 d0                	mov    %edx,%eax
c01121de:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01121e1:	29 c2                	sub    %eax,%edx
c01121e3:	89 d0                	mov    %edx,%eax
c01121e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c01121e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01121eb:	89 04 24             	mov    %eax,(%esp)
c01121ee:	e8 14 f5 ff ff       	call   c0111707 <bitmap_create>
c01121f3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01121f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01121f9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01121fc:	89 50 30             	mov    %edx,0x30(%eax)
c01121ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112202:	8b 40 30             	mov    0x30(%eax),%eax
c0112205:	85 c0                	test   %eax,%eax
c0112207:	75 05                	jne    c011220e <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0112209:	e9 a2 01 00 00       	jmp    c01123b0 <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c011220e:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0112215:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112218:	8b 50 04             	mov    0x4(%eax),%edx
c011221b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011221e:	01 d0                	add    %edx,%eax
c0112220:	83 e8 01             	sub    $0x1,%eax
c0112223:	ba 00 00 00 00       	mov    $0x0,%edx
c0112228:	f7 75 c0             	divl   -0x40(%ebp)
c011222b:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c011222e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112231:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112235:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0112238:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011223c:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0112243:	00 
c0112244:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112247:	89 44 24 04          	mov    %eax,0x4(%esp)
c011224b:	8b 45 08             	mov    0x8(%ebp),%eax
c011224e:	89 04 24             	mov    %eax,(%esp)
c0112251:	e8 ca fc ff ff       	call   c0111f20 <sfs_init_freemap>
c0112256:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112259:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011225d:	74 11                	je     c0112270 <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c011225f:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0112260:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112263:	89 04 24             	mov    %eax,(%esp)
c0112266:	e8 3f f8 ff ff       	call   c0111aaa <bitmap_destroy>
c011226b:	e9 40 01 00 00       	jmp    c01123b0 <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0112270:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112273:	8b 40 04             	mov    0x4(%eax),%eax
c0112276:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0112279:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0112280:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112287:	eb 1e                	jmp    c01122a7 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c0112289:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011228c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112290:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112293:	89 04 24             	mov    %eax,(%esp)
c0112296:	e8 74 f7 ff ff       	call   c0111a0f <bitmap_test>
c011229b:	85 c0                	test   %eax,%eax
c011229d:	74 04                	je     c01122a3 <sfs_do_mount+0x2ea>
            unused_blocks ++;
c011229f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c01122a3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01122a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122aa:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01122ad:	72 da                	jb     c0112289 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c01122af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122b2:	8b 40 08             	mov    0x8(%eax),%eax
c01122b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01122b8:	74 24                	je     c01122de <sfs_do_mount+0x325>
c01122ba:	c7 44 24 0c c0 99 11 	movl   $0xc01199c0,0xc(%esp)
c01122c1:	c0 
c01122c2:	c7 44 24 08 45 98 11 	movl   $0xc0119845,0x8(%esp)
c01122c9:	c0 
c01122ca:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01122d1:	00 
c01122d2:	c7 04 24 5a 98 11 c0 	movl   $0xc011985a,(%esp)
c01122d9:	e8 ea eb fe ff       	call   c0100ec8 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c01122de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122e1:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c01122e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122eb:	83 c0 3c             	add    $0x3c,%eax
c01122ee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01122f5:	00 
c01122f6:	89 04 24             	mov    %eax,(%esp)
c01122f9:	e8 8b 78 ff ff       	call   c0109b89 <sem_init>
    sem_init(&(sfs->io_sem), 1);
c01122fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112301:	83 c0 48             	add    $0x48,%eax
c0112304:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011230b:	00 
c011230c:	89 04 24             	mov    %eax,(%esp)
c011230f:	e8 75 78 ff ff       	call   c0109b89 <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0112314:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112317:	83 c0 54             	add    $0x54,%eax
c011231a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112321:	00 
c0112322:	89 04 24             	mov    %eax,(%esp)
c0112325:	e8 5f 78 ff ff       	call   c0109b89 <sem_init>
    list_init(&(sfs->inode_list));
c011232a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011232d:	83 c0 60             	add    $0x60,%eax
c0112330:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0112333:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112336:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0112339:	89 50 04             	mov    %edx,0x4(%eax)
c011233c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011233f:	8b 50 04             	mov    0x4(%eax),%edx
c0112342:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112345:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112347:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011234a:	8b 55 b8             	mov    -0x48(%ebp),%edx
c011234d:	89 d1                	mov    %edx,%ecx
c011234f:	29 c1                	sub    %eax,%ecx
c0112351:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112354:	8d 50 0c             	lea    0xc(%eax),%edx
c0112357:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011235a:	89 44 24 10          	mov    %eax,0x10(%esp)
c011235e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112361:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112365:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0112369:	89 54 24 04          	mov    %edx,0x4(%esp)
c011236d:	c7 04 24 ea 99 11 c0 	movl   $0xc01199ea,(%esp)
c0112374:	e8 ec df fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0112379:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011237c:	c7 40 70 2e 1b 11 c0 	movl   $0xc0111b2e,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c0112383:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112386:	c7 40 74 8b 1c 11 c0 	movl   $0xc0111c8b,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c011238d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112390:	c7 40 78 16 1d 11 c0 	movl   $0xc0111d16,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0112397:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011239a:	c7 40 7c e9 1d 11 c0 	movl   $0xc0111de9,0x7c(%eax)
    *fs_store = fs;
c01123a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01123a7:	89 10                	mov    %edx,(%eax)
    return 0;
c01123a9:	b8 00 00 00 00       	mov    $0x0,%eax
c01123ae:	eb 24                	jmp    c01123d4 <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c01123b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01123b3:	89 04 24             	mov    %eax,(%esp)
c01123b6:	e8 57 29 ff ff       	call   c0104d12 <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c01123bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01123be:	89 04 24             	mov    %eax,(%esp)
c01123c1:	e8 4c 29 ff ff       	call   c0104d12 <kfree>
failed_cleanup_fs:
    kfree(fs);
c01123c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123c9:	89 04 24             	mov    %eax,(%esp)
c01123cc:	e8 41 29 ff ff       	call   c0104d12 <kfree>
    return ret;
c01123d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01123d4:	c9                   	leave  
c01123d5:	c3                   	ret    

c01123d6 <sfs_mount>:

int
sfs_mount(const char *devname) {
c01123d6:	55                   	push   %ebp
c01123d7:	89 e5                	mov    %esp,%ebp
c01123d9:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c01123dc:	c7 44 24 04 b9 1f 11 	movl   $0xc0111fb9,0x4(%esp)
c01123e3:	c0 
c01123e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01123e7:	89 04 24             	mov    %eax,(%esp)
c01123ea:	e8 fa d7 ff ff       	call   c010fbe9 <vfs_mount>
}
c01123ef:	c9                   	leave  
c01123f0:	c3                   	ret    

c01123f1 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c01123f1:	55                   	push   %ebp
c01123f2:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01123f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01123f7:	8b 40 30             	mov    0x30(%eax),%eax
}
c01123fa:	5d                   	pop    %ebp
c01123fb:	c3                   	ret    

c01123fc <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c01123fc:	55                   	push   %ebp
c01123fd:	89 e5                	mov    %esp,%ebp
c01123ff:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c0112402:	8b 45 08             	mov    0x8(%ebp),%eax
c0112405:	83 c0 10             	add    $0x10,%eax
c0112408:	89 04 24             	mov    %eax,(%esp)
c011240b:	e8 07 79 ff ff       	call   c0109d17 <down>
}
c0112410:	c9                   	leave  
c0112411:	c3                   	ret    

c0112412 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c0112412:	55                   	push   %ebp
c0112413:	89 e5                	mov    %esp,%ebp
c0112415:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0112418:	8b 45 08             	mov    0x8(%ebp),%eax
c011241b:	83 c0 10             	add    $0x10,%eax
c011241e:	89 04 24             	mov    %eax,(%esp)
c0112421:	e8 d6 78 ff ff       	call   c0109cfc <up>
}
c0112426:	c9                   	leave  
c0112427:	c3                   	ret    

c0112428 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0112428:	55                   	push   %ebp
c0112429:	89 e5                	mov    %esp,%ebp
c011242b:	83 ec 28             	sub    $0x28,%esp
c011242e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112431:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0112435:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112439:	83 f8 01             	cmp    $0x1,%eax
c011243c:	74 0c                	je     c011244a <sfs_get_ops+0x22>
c011243e:	83 f8 02             	cmp    $0x2,%eax
c0112441:	75 0e                	jne    c0112451 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0112443:	b8 20 9a 11 c0       	mov    $0xc0119a20,%eax
c0112448:	eb 2b                	jmp    c0112475 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c011244a:	b8 60 9a 11 c0       	mov    $0xc0119a60,%eax
c011244f:	eb 24                	jmp    c0112475 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0112451:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112455:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112459:	c7 44 24 08 a0 9a 11 	movl   $0xc0119aa0,0x8(%esp)
c0112460:	c0 
c0112461:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0112468:	00 
c0112469:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112470:	e8 53 ea fe ff       	call   c0100ec8 <__panic>
}
c0112475:	c9                   	leave  
c0112476:	c3                   	ret    

c0112477 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0112477:	55                   	push   %ebp
c0112478:	89 e5                	mov    %esp,%ebp
c011247a:	53                   	push   %ebx
c011247b:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c011247e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112481:	8b 58 68             	mov    0x68(%eax),%ebx
c0112484:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c011248b:	00 
c011248c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011248f:	89 04 24             	mov    %eax,(%esp)
c0112492:	e8 35 27 00 00       	call   c0114bcc <hash32>
c0112497:	c1 e0 03             	shl    $0x3,%eax
c011249a:	01 d8                	add    %ebx,%eax
}
c011249c:	83 c4 14             	add    $0x14,%esp
c011249f:	5b                   	pop    %ebx
c01124a0:	5d                   	pop    %ebp
c01124a1:	c3                   	ret    

c01124a2 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c01124a2:	55                   	push   %ebp
c01124a3:	89 e5                	mov    %esp,%ebp
c01124a5:	53                   	push   %ebx
c01124a6:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01124a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124ac:	83 c0 1c             	add    $0x1c,%eax
c01124af:	8b 55 08             	mov    0x8(%ebp),%edx
c01124b2:	83 c2 60             	add    $0x60,%edx
c01124b5:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01124b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01124bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124be:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01124c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01124c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124ca:	8b 40 04             	mov    0x4(%eax),%eax
c01124cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01124d0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01124d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01124d6:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01124d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01124dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01124df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01124e2:	89 10                	mov    %edx,(%eax)
c01124e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01124e7:	8b 10                	mov    (%eax),%edx
c01124e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01124ec:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01124ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01124f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01124f5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01124f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01124fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01124fe:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c0112500:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112503:	8d 58 24             	lea    0x24(%eax),%ebx
c0112506:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112509:	8b 40 04             	mov    0x4(%eax),%eax
c011250c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112510:	8b 45 08             	mov    0x8(%ebp),%eax
c0112513:	89 04 24             	mov    %eax,(%esp)
c0112516:	e8 5c ff ff ff       	call   c0112477 <sfs_hash_list>
c011251b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011251e:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c0112521:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112524:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112527:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011252a:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011252d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112530:	8b 40 04             	mov    0x4(%eax),%eax
c0112533:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112536:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0112539:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011253c:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c011253f:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112542:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112545:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112548:	89 10                	mov    %edx,(%eax)
c011254a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011254d:	8b 10                	mov    (%eax),%edx
c011254f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112552:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112555:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112558:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011255b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011255e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112561:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0112564:	89 10                	mov    %edx,(%eax)
}
c0112566:	83 c4 54             	add    $0x54,%esp
c0112569:	5b                   	pop    %ebx
c011256a:	5d                   	pop    %ebp
c011256b:	c3                   	ret    

c011256c <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c011256c:	55                   	push   %ebp
c011256d:	89 e5                	mov    %esp,%ebp
c011256f:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c0112572:	8b 45 08             	mov    0x8(%ebp),%eax
c0112575:	83 c0 1c             	add    $0x1c,%eax
c0112578:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011257b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011257e:	8b 40 04             	mov    0x4(%eax),%eax
c0112581:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0112584:	8b 12                	mov    (%edx),%edx
c0112586:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0112589:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c011258c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011258f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112592:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112595:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112598:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011259b:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c011259d:	8b 45 08             	mov    0x8(%ebp),%eax
c01125a0:	83 c0 24             	add    $0x24,%eax
c01125a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01125a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125a9:	8b 40 04             	mov    0x4(%eax),%eax
c01125ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01125af:	8b 12                	mov    (%edx),%edx
c01125b1:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01125b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01125b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01125bd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01125c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01125c6:	89 10                	mov    %edx,(%eax)
}
c01125c8:	c9                   	leave  
c01125c9:	c3                   	ret    

c01125ca <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c01125ca:	55                   	push   %ebp
c01125cb:	89 e5                	mov    %esp,%ebp
c01125cd:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c01125d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01125d4:	74 2a                	je     c0112600 <sfs_block_inuse+0x36>
c01125d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01125d9:	8b 40 04             	mov    0x4(%eax),%eax
c01125dc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01125df:	76 1f                	jbe    c0112600 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c01125e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01125e4:	8b 40 30             	mov    0x30(%eax),%eax
c01125e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01125ea:	89 54 24 04          	mov    %edx,0x4(%esp)
c01125ee:	89 04 24             	mov    %eax,(%esp)
c01125f1:	e8 19 f4 ff ff       	call   c0111a0f <bitmap_test>
c01125f6:	85 c0                	test   %eax,%eax
c01125f8:	0f 94 c0             	sete   %al
c01125fb:	0f b6 c0             	movzbl %al,%eax
c01125fe:	eb 2d                	jmp    c011262d <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c0112600:	8b 45 08             	mov    0x8(%ebp),%eax
c0112603:	8b 40 04             	mov    0x4(%eax),%eax
c0112606:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112609:	89 54 24 10          	mov    %edx,0x10(%esp)
c011260d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112611:	c7 44 24 08 d0 9a 11 	movl   $0xc0119ad0,0x8(%esp)
c0112618:	c0 
c0112619:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0112620:	00 
c0112621:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112628:	e8 9b e8 fe ff       	call   c0100ec8 <__panic>
}
c011262d:	c9                   	leave  
c011262e:	c3                   	ret    

c011262f <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c011262f:	55                   	push   %ebp
c0112630:	89 e5                	mov    %esp,%ebp
c0112632:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0112635:	8b 45 08             	mov    0x8(%ebp),%eax
c0112638:	8b 40 30             	mov    0x30(%eax),%eax
c011263b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011263e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112642:	89 04 24             	mov    %eax,(%esp)
c0112645:	e8 63 f2 ff ff       	call   c01118ad <bitmap_alloc>
c011264a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011264d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112651:	74 08                	je     c011265b <sfs_block_alloc+0x2c>
        return ret;
c0112653:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112656:	e9 9f 00 00 00       	jmp    c01126fa <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c011265b:	8b 45 08             	mov    0x8(%ebp),%eax
c011265e:	8b 40 08             	mov    0x8(%eax),%eax
c0112661:	85 c0                	test   %eax,%eax
c0112663:	75 24                	jne    c0112689 <sfs_block_alloc+0x5a>
c0112665:	c7 44 24 0c 02 9b 11 	movl   $0xc0119b02,0xc(%esp)
c011266c:	c0 
c011266d:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112674:	c0 
c0112675:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011267c:	00 
c011267d:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112684:	e8 3f e8 fe ff       	call   c0100ec8 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0112689:	8b 45 08             	mov    0x8(%ebp),%eax
c011268c:	8b 40 08             	mov    0x8(%eax),%eax
c011268f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112692:	8b 45 08             	mov    0x8(%ebp),%eax
c0112695:	89 50 08             	mov    %edx,0x8(%eax)
c0112698:	8b 45 08             	mov    0x8(%ebp),%eax
c011269b:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c01126a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126a5:	8b 00                	mov    (%eax),%eax
c01126a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01126ae:	89 04 24             	mov    %eax,(%esp)
c01126b1:	e8 14 ff ff ff       	call   c01125ca <sfs_block_inuse>
c01126b6:	85 c0                	test   %eax,%eax
c01126b8:	75 24                	jne    c01126de <sfs_block_alloc+0xaf>
c01126ba:	c7 44 24 0c 34 9b 11 	movl   $0xc0119b34,0xc(%esp)
c01126c1:	c0 
c01126c2:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01126c9:	c0 
c01126ca:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01126d1:	00 
c01126d2:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01126d9:	e8 ea e7 fe ff       	call   c0100ec8 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c01126de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126e1:	8b 00                	mov    (%eax),%eax
c01126e3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01126ea:	00 
c01126eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01126f2:	89 04 24             	mov    %eax,(%esp)
c01126f5:	e8 f4 23 00 00       	call   c0114aee <sfs_clear_block>
}
c01126fa:	c9                   	leave  
c01126fb:	c3                   	ret    

c01126fc <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c01126fc:	55                   	push   %ebp
c01126fd:	89 e5                	mov    %esp,%ebp
c01126ff:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c0112702:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112705:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112709:	8b 45 08             	mov    0x8(%ebp),%eax
c011270c:	89 04 24             	mov    %eax,(%esp)
c011270f:	e8 b6 fe ff ff       	call   c01125ca <sfs_block_inuse>
c0112714:	85 c0                	test   %eax,%eax
c0112716:	75 24                	jne    c011273c <sfs_block_free+0x40>
c0112718:	c7 44 24 0c 55 9b 11 	movl   $0xc0119b55,0xc(%esp)
c011271f:	c0 
c0112720:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112727:	c0 
c0112728:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011272f:	00 
c0112730:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112737:	e8 8c e7 fe ff       	call   c0100ec8 <__panic>
    bitmap_free(sfs->freemap, ino);
c011273c:	8b 45 08             	mov    0x8(%ebp),%eax
c011273f:	8b 40 30             	mov    0x30(%eax),%eax
c0112742:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112745:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112749:	89 04 24             	mov    %eax,(%esp)
c011274c:	e8 f0 f2 ff ff       	call   c0111a41 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0112751:	8b 45 08             	mov    0x8(%ebp),%eax
c0112754:	8b 40 08             	mov    0x8(%eax),%eax
c0112757:	8d 50 01             	lea    0x1(%eax),%edx
c011275a:	8b 45 08             	mov    0x8(%ebp),%eax
c011275d:	89 50 08             	mov    %edx,0x8(%eax)
c0112760:	8b 45 08             	mov    0x8(%ebp),%eax
c0112763:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c011276a:	c9                   	leave  
c011276b:	c3                   	ret    

c011276c <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c011276c:	55                   	push   %ebp
c011276d:	89 e5                	mov    %esp,%ebp
c011276f:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c0112772:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c0112779:	e8 7d c9 ff ff       	call   c010f0fb <__alloc_inode>
c011277e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112781:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112785:	0f 84 b5 00 00 00    	je     c0112840 <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c011278b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011278e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112792:	0f b7 c0             	movzwl %ax,%eax
c0112795:	89 04 24             	mov    %eax,(%esp)
c0112798:	e8 8b fc ff ff       	call   c0112428 <sfs_get_ops>
c011279d:	8b 55 08             	mov    0x8(%ebp),%edx
c01127a0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01127a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127ab:	89 04 24             	mov    %eax,(%esp)
c01127ae:	e8 71 c9 ff ff       	call   c010f124 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c01127b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01127b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01127bd:	74 0d                	je     c01127cc <sfs_create_inode+0x60>
c01127bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127c2:	8b 40 2c             	mov    0x2c(%eax),%eax
c01127c5:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01127ca:	74 24                	je     c01127f0 <sfs_create_inode+0x84>
c01127cc:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c01127d3:	c0 
c01127d4:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01127db:	c0 
c01127dc:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c01127e3:	00 
c01127e4:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01127eb:	e8 d8 e6 fe ff       	call   c0100ec8 <__panic>
c01127f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c01127f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01127fc:	89 10                	mov    %edx,(%eax)
c01127fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112801:	8b 55 10             	mov    0x10(%ebp),%edx
c0112804:	89 50 04             	mov    %edx,0x4(%eax)
c0112807:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011280a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0112811:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112814:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c011281b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011281e:	83 c0 10             	add    $0x10,%eax
c0112821:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112828:	00 
c0112829:	89 04 24             	mov    %eax,(%esp)
c011282c:	e8 58 73 ff ff       	call   c0109b89 <sem_init>
        *node_store = node;
c0112831:	8b 45 14             	mov    0x14(%ebp),%eax
c0112834:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112837:	89 10                	mov    %edx,(%eax)
        return 0;
c0112839:	b8 00 00 00 00       	mov    $0x0,%eax
c011283e:	eb 05                	jmp    c0112845 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c0112840:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0112845:	c9                   	leave  
c0112846:	c3                   	ret    

c0112847 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112847:	55                   	push   %ebp
c0112848:	89 e5                	mov    %esp,%ebp
c011284a:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011284d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112850:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112854:	8b 45 08             	mov    0x8(%ebp),%eax
c0112857:	89 04 24             	mov    %eax,(%esp)
c011285a:	e8 18 fc ff ff       	call   c0112477 <sfs_hash_list>
c011285f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112862:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112865:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0112868:	eb 3e                	jmp    c01128a8 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c011286a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011286d:	83 e8 24             	sub    $0x24,%eax
c0112870:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c0112873:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112876:	8b 40 04             	mov    0x4(%eax),%eax
c0112879:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011287c:	75 2a                	jne    c01128a8 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c011287e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112881:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c0112884:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112887:	89 04 24             	mov    %eax,(%esp)
c011288a:	e8 5f c9 ff ff       	call   c010f1ee <inode_ref_inc>
c011288f:	83 f8 01             	cmp    $0x1,%eax
c0112892:	75 0f                	jne    c01128a3 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c0112894:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112897:	8b 40 0c             	mov    0xc(%eax),%eax
c011289a:	8d 50 01             	lea    0x1(%eax),%edx
c011289d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128a0:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c01128a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128a6:	eb 1c                	jmp    c01128c4 <lookup_sfs_nolock+0x7d>
c01128a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01128ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01128b1:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c01128b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01128bd:	75 ab                	jne    c011286a <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c01128bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01128c4:	c9                   	leave  
c01128c5:	c3                   	ret    

c01128c6 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c01128c6:	55                   	push   %ebp
c01128c7:	89 e5                	mov    %esp,%ebp
c01128c9:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c01128cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01128cf:	89 04 24             	mov    %eax,(%esp)
c01128d2:	e8 9d 22 00 00       	call   c0114b74 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c01128d7:	8b 45 10             	mov    0x10(%ebp),%eax
c01128da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128de:	8b 45 08             	mov    0x8(%ebp),%eax
c01128e1:	89 04 24             	mov    %eax,(%esp)
c01128e4:	e8 5e ff ff ff       	call   c0112847 <lookup_sfs_nolock>
c01128e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01128ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128ef:	85 c0                	test   %eax,%eax
c01128f1:	74 05                	je     c01128f8 <sfs_load_inode+0x32>
        goto out_unlock;
c01128f3:	e9 3c 01 00 00       	jmp    c0112a34 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c01128f8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c01128ff:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112906:	e8 ec 23 ff ff       	call   c0104cf7 <kmalloc>
c011290b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011290e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112912:	75 05                	jne    c0112919 <sfs_load_inode+0x53>
        goto failed_unlock;
c0112914:	e9 40 01 00 00       	jmp    c0112a59 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c0112919:	8b 45 10             	mov    0x10(%ebp),%eax
c011291c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112920:	8b 45 08             	mov    0x8(%ebp),%eax
c0112923:	89 04 24             	mov    %eax,(%esp)
c0112926:	e8 9f fc ff ff       	call   c01125ca <sfs_block_inuse>
c011292b:	85 c0                	test   %eax,%eax
c011292d:	75 24                	jne    c0112953 <sfs_load_inode+0x8d>
c011292f:	c7 44 24 0c 55 9b 11 	movl   $0xc0119b55,0xc(%esp)
c0112936:	c0 
c0112937:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011293e:	c0 
c011293f:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112946:	00 
c0112947:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011294e:	e8 75 e5 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0112953:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011295a:	00 
c011295b:	8b 45 10             	mov    0x10(%ebp),%eax
c011295e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112962:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0112969:	00 
c011296a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011296d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112971:	8b 45 08             	mov    0x8(%ebp),%eax
c0112974:	89 04 24             	mov    %eax,(%esp)
c0112977:	e8 e9 1e 00 00       	call   c0114865 <sfs_rbuf>
c011297c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011297f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112983:	74 05                	je     c011298a <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c0112985:	e9 c4 00 00 00       	jmp    c0112a4e <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c011298a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011298d:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112991:	66 85 c0             	test   %ax,%ax
c0112994:	75 24                	jne    c01129ba <sfs_load_inode+0xf4>
c0112996:	c7 44 24 0c a6 9b 11 	movl   $0xc0119ba6,0xc(%esp)
c011299d:	c0 
c011299e:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01129a5:	c0 
c01129a6:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c01129ad:	00 
c01129ae:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01129b5:	e8 0e e5 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c01129ba:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01129bd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01129c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01129c4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01129c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01129d2:	89 04 24             	mov    %eax,(%esp)
c01129d5:	e8 92 fd ff ff       	call   c011276c <sfs_create_inode>
c01129da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01129dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01129e1:	74 02                	je     c01129e5 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c01129e3:	eb 69                	jmp    c0112a4e <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c01129e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01129e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01129eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01129ef:	74 0d                	je     c01129fe <sfs_load_inode+0x138>
c01129f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129f4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01129f7:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01129fc:	74 24                	je     c0112a22 <sfs_load_inode+0x15c>
c01129fe:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0112a05:	c0 
c0112a06:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112a0d:	c0 
c0112a0e:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112a15:	00 
c0112a16:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112a1d:	e8 a6 e4 fe ff       	call   c0100ec8 <__panic>
c0112a22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a29:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a2c:	89 04 24             	mov    %eax,(%esp)
c0112a2f:	e8 6e fa ff ff       	call   c01124a2 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112a34:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a37:	89 04 24             	mov    %eax,(%esp)
c0112a3a:	e8 61 21 00 00       	call   c0114ba0 <unlock_sfs_fs>
    *node_store = node;
c0112a3f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a45:	89 10                	mov    %edx,(%eax)
    return 0;
c0112a47:	b8 00 00 00 00       	mov    $0x0,%eax
c0112a4c:	eb 19                	jmp    c0112a67 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c0112a4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112a51:	89 04 24             	mov    %eax,(%esp)
c0112a54:	e8 b9 22 ff ff       	call   c0104d12 <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c0112a59:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a5c:	89 04 24             	mov    %eax,(%esp)
c0112a5f:	e8 3c 21 00 00       	call   c0114ba0 <unlock_sfs_fs>
    return ret;
c0112a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112a67:	c9                   	leave  
c0112a68:	c3                   	ret    

c0112a69 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0112a69:	55                   	push   %ebp
c0112a6a:	89 e5                	mov    %esp,%ebp
c0112a6c:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c0112a6f:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112a76:	76 24                	jbe    c0112a9c <sfs_bmap_get_sub_nolock+0x33>
c0112a78:	c7 44 24 0c b7 9b 11 	movl   $0xc0119bb7,0xc(%esp)
c0112a7f:	c0 
c0112a80:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112a87:	c0 
c0112a88:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0112a8f:	00 
c0112a90:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112a97:	e8 2c e4 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0112a9c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c0112aa3:	8b 45 10             	mov    0x10(%ebp),%eax
c0112aa6:	c1 e0 02             	shl    $0x2,%eax
c0112aa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c0112aac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112aaf:	8b 00                	mov    (%eax),%eax
c0112ab1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112ab4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ab7:	85 c0                	test   %eax,%eax
c0112ab9:	74 50                	je     c0112b0b <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112abe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112ac1:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112ac5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ac9:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112ad0:	00 
c0112ad1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112ad4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ad8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112adb:	89 04 24             	mov    %eax,(%esp)
c0112ade:	e8 82 1d 00 00       	call   c0114865 <sfs_rbuf>
c0112ae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ae6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112aea:	74 08                	je     c0112af4 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c0112aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112aef:	e9 eb 00 00 00       	jmp    c0112bdf <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c0112af4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112af7:	85 c0                	test   %eax,%eax
c0112af9:	0f 85 9c 00 00 00    	jne    c0112b9b <sfs_bmap_get_sub_nolock+0x132>
c0112aff:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b03:	0f 84 92 00 00 00    	je     c0112b9b <sfs_bmap_get_sub_nolock+0x132>
c0112b09:	eb 2e                	jmp    c0112b39 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c0112b0b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b0f:	75 05                	jne    c0112b16 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c0112b11:	e9 85 00 00 00       	jmp    c0112b9b <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112b16:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112b19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b20:	89 04 24             	mov    %eax,(%esp)
c0112b23:	e8 07 fb ff ff       	call   c011262f <sfs_block_alloc>
c0112b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b2f:	74 08                	je     c0112b39 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c0112b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b34:	e9 a6 00 00 00       	jmp    c0112bdf <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112b39:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b43:	89 04 24             	mov    %eax,(%esp)
c0112b46:	e8 e4 fa ff ff       	call   c011262f <sfs_block_alloc>
c0112b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b52:	74 02                	je     c0112b56 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112b54:	eb 68                	jmp    c0112bbe <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112b56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b59:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112b5c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112b60:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b64:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112b6b:	00 
c0112b6c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b73:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b76:	89 04 24             	mov    %eax,(%esp)
c0112b79:	e8 a0 1d 00 00       	call   c011491e <sfs_wbuf>
c0112b7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b85:	74 14                	je     c0112b9b <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c0112b87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112b8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b91:	89 04 24             	mov    %eax,(%esp)
c0112b94:	e8 63 fb ff ff       	call   c01126fc <sfs_block_free>
        goto failed_cleanup;
c0112b99:	eb 23                	jmp    c0112bbe <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c0112b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b9e:	8b 10                	mov    (%eax),%edx
c0112ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ba3:	39 c2                	cmp    %eax,%edx
c0112ba5:	74 08                	je     c0112baf <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c0112ba7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112baa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bad:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0112baf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112bb2:	8b 45 18             	mov    0x18(%ebp),%eax
c0112bb5:	89 10                	mov    %edx,(%eax)
    return 0;
c0112bb7:	b8 00 00 00 00       	mov    $0x0,%eax
c0112bbc:	eb 21                	jmp    c0112bdf <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c0112bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bc1:	8b 10                	mov    (%eax),%edx
c0112bc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bc6:	39 c2                	cmp    %eax,%edx
c0112bc8:	74 12                	je     c0112bdc <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c0112bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bcd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bd4:	89 04 24             	mov    %eax,(%esp)
c0112bd7:	e8 20 fb ff ff       	call   c01126fc <sfs_block_free>
    }
    return ret;
c0112bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112bdf:	c9                   	leave  
c0112be0:	c3                   	ret    

c0112be1 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112be1:	55                   	push   %ebp
c0112be2:	89 e5                	mov    %esp,%ebp
c0112be4:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112be7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bea:	8b 00                	mov    (%eax),%eax
c0112bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0112bef:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112bf3:	77 5e                	ja     c0112c53 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c0112bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bf8:	8b 55 10             	mov    0x10(%ebp),%edx
c0112bfb:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112bff:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112c02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c05:	85 c0                	test   %eax,%eax
c0112c07:	75 45                	jne    c0112c4e <sfs_bmap_get_nolock+0x6d>
c0112c09:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112c0d:	74 3f                	je     c0112c4e <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112c0f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c19:	89 04 24             	mov    %eax,(%esp)
c0112c1c:	e8 0e fa ff ff       	call   c011262f <sfs_block_alloc>
c0112c21:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c28:	74 08                	je     c0112c32 <sfs_bmap_get_nolock+0x51>
                return ret;
c0112c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c2d:	e9 2f 01 00 00       	jmp    c0112d61 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c0112c32:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c38:	8b 55 10             	mov    0x10(%ebp),%edx
c0112c3b:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0112c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c42:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112c49:	e9 c5 00 00 00       	jmp    c0112d13 <sfs_bmap_get_nolock+0x132>
c0112c4e:	e9 c0 00 00 00       	jmp    c0112d13 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112c53:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112c57:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112c5e:	0f 87 93 00 00 00    	ja     c0112cf7 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c0112c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c67:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112c6d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c70:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c74:	8b 45 14             	mov    0x14(%ebp),%eax
c0112c77:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112c7b:	8b 45 10             	mov    0x10(%ebp),%eax
c0112c7e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c82:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112c85:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c89:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c8c:	89 04 24             	mov    %eax,(%esp)
c0112c8f:	e8 d5 fd ff ff       	call   c0112a69 <sfs_bmap_get_sub_nolock>
c0112c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c9b:	74 08                	je     c0112ca5 <sfs_bmap_get_nolock+0xc4>
            return ret;
c0112c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112ca0:	e9 bc 00 00 00       	jmp    c0112d61 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c0112ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ca8:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112cab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112cae:	39 c2                	cmp    %eax,%edx
c0112cb0:	74 43                	je     c0112cf5 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cb5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112cb8:	85 c0                	test   %eax,%eax
c0112cba:	74 24                	je     c0112ce0 <sfs_bmap_get_nolock+0xff>
c0112cbc:	c7 44 24 0c ce 9b 11 	movl   $0xc0119bce,0xc(%esp)
c0112cc3:	c0 
c0112cc4:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112ccb:	c0 
c0112ccc:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112cd3:	00 
c0112cd4:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112cdb:	e8 e8 e1 fe ff       	call   c0100ec8 <__panic>
            din->indirect = ent;
c0112ce0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ce6:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cec:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112cf3:	eb 1e                	jmp    c0112d13 <sfs_bmap_get_nolock+0x132>
c0112cf5:	eb 1c                	jmp    c0112d13 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112cf7:	c7 44 24 08 e4 9b 11 	movl   $0xc0119be4,0x8(%esp)
c0112cfe:	c0 
c0112cff:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112d06:	00 
c0112d07:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112d0e:	e8 b5 e1 fe ff       	call   c0100ec8 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112d13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d16:	85 c0                	test   %eax,%eax
c0112d18:	74 3a                	je     c0112d54 <sfs_bmap_get_nolock+0x173>
c0112d1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d21:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d24:	89 04 24             	mov    %eax,(%esp)
c0112d27:	e8 9e f8 ff ff       	call   c01125ca <sfs_block_inuse>
c0112d2c:	85 c0                	test   %eax,%eax
c0112d2e:	75 24                	jne    c0112d54 <sfs_bmap_get_nolock+0x173>
c0112d30:	c7 44 24 0c 10 9c 11 	movl   $0xc0119c10,0xc(%esp)
c0112d37:	c0 
c0112d38:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112d3f:	c0 
c0112d40:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112d47:	00 
c0112d48:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112d4f:	e8 74 e1 fe ff       	call   c0100ec8 <__panic>
    *ino_store = ino;
c0112d54:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112d57:	8b 45 18             	mov    0x18(%ebp),%eax
c0112d5a:	89 10                	mov    %edx,(%eax)
    return 0;
c0112d5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d61:	c9                   	leave  
c0112d62:	c3                   	ret    

c0112d63 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112d63:	55                   	push   %ebp
c0112d64:	89 e5                	mov    %esp,%ebp
c0112d66:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112d69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d70:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d73:	89 04 24             	mov    %eax,(%esp)
c0112d76:	e8 4f f8 ff ff       	call   c01125ca <sfs_block_inuse>
c0112d7b:	85 c0                	test   %eax,%eax
c0112d7d:	74 09                	je     c0112d88 <sfs_bmap_free_sub_nolock+0x25>
c0112d7f:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112d86:	76 24                	jbe    c0112dac <sfs_bmap_free_sub_nolock+0x49>
c0112d88:	c7 44 24 0c 38 9c 11 	movl   $0xc0119c38,0xc(%esp)
c0112d8f:	c0 
c0112d90:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112d97:	c0 
c0112d98:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112d9f:	00 
c0112da0:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112da7:	e8 1c e1 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112dac:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112db3:	8b 45 10             	mov    0x10(%ebp),%eax
c0112db6:	c1 e0 02             	shl    $0x2,%eax
c0112db9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112dbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dbf:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112dc3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112dc6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112dca:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112dd1:	00 
c0112dd2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112dd5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ddc:	89 04 24             	mov    %eax,(%esp)
c0112ddf:	e8 81 1a 00 00       	call   c0114865 <sfs_rbuf>
c0112de4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112de7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112deb:	74 05                	je     c0112df2 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112df0:	eb 54                	jmp    c0112e46 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112df2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112df5:	85 c0                	test   %eax,%eax
c0112df7:	74 48                	je     c0112e41 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112dfc:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112e00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e03:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e07:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112e0e:	00 
c0112e0f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112e12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e16:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e19:	89 04 24             	mov    %eax,(%esp)
c0112e1c:	e8 fd 1a 00 00       	call   c011491e <sfs_wbuf>
c0112e21:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e28:	74 05                	je     c0112e2f <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e2d:	eb 17                	jmp    c0112e46 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e39:	89 04 24             	mov    %eax,(%esp)
c0112e3c:	e8 bb f8 ff ff       	call   c01126fc <sfs_block_free>
    }
    return 0;
c0112e41:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e46:	c9                   	leave  
c0112e47:	c3                   	ret    

c0112e48 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112e48:	55                   	push   %ebp
c0112e49:	89 e5                	mov    %esp,%ebp
c0112e4b:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e51:	8b 00                	mov    (%eax),%eax
c0112e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112e56:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112e5a:	77 44                	ja     c0112ea0 <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e5f:	8b 55 10             	mov    0x10(%ebp),%edx
c0112e62:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112e66:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e69:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e6d:	74 2a                	je     c0112e99 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112e6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e72:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e76:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e79:	89 04 24             	mov    %eax,(%esp)
c0112e7c:	e8 7b f8 ff ff       	call   c01126fc <sfs_block_free>
            din->direct[index] = 0;
c0112e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e84:	8b 55 10             	mov    0x10(%ebp),%edx
c0112e87:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112e8e:	00 
            sin->dirty = 1;
c0112e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e92:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112e99:	b8 00 00 00 00       	mov    $0x0,%eax
c0112e9e:	eb 4f                	jmp    c0112eef <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112ea0:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112ea4:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112eab:	77 3d                	ja     c0112eea <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112ead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112eb0:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112eb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112eb6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112eba:	74 27                	je     c0112ee3 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112ebc:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ebf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ec3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ec6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112eca:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ecd:	89 04 24             	mov    %eax,(%esp)
c0112ed0:	e8 8e fe ff ff       	call   c0112d63 <sfs_bmap_free_sub_nolock>
c0112ed5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112ed8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112edc:	74 05                	je     c0112ee3 <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112ee1:	eb 0c                	jmp    c0112eef <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112ee3:	b8 00 00 00 00       	mov    $0x0,%eax
c0112ee8:	eb 05                	jmp    c0112eef <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112eea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112eef:	c9                   	leave  
c0112ef0:	c3                   	ret    

c0112ef1 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112ef1:	55                   	push   %ebp
c0112ef2:	89 e5                	mov    %esp,%ebp
c0112ef4:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112efa:	8b 00                	mov    (%eax),%eax
c0112efc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f02:	8b 40 08             	mov    0x8(%eax),%eax
c0112f05:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112f08:	73 24                	jae    c0112f2e <sfs_bmap_load_nolock+0x3d>
c0112f0a:	c7 44 24 0c 6c 9c 11 	movl   $0xc0119c6c,0xc(%esp)
c0112f11:	c0 
c0112f12:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112f19:	c0 
c0112f1a:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112f21:	00 
c0112f22:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112f29:	e8 9a df fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f31:	8b 40 08             	mov    0x8(%eax),%eax
c0112f34:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112f37:	0f 94 c0             	sete   %al
c0112f3a:	0f b6 c0             	movzbl %al,%eax
c0112f3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112f40:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112f43:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112f47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f4a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112f4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f5f:	89 04 24             	mov    %eax,(%esp)
c0112f62:	e8 7a fc ff ff       	call   c0112be1 <sfs_bmap_get_nolock>
c0112f67:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112f6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f6e:	74 05                	je     c0112f75 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112f70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f73:	eb 62                	jmp    c0112fd7 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112f75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f78:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f7f:	89 04 24             	mov    %eax,(%esp)
c0112f82:	e8 43 f6 ff ff       	call   c01125ca <sfs_block_inuse>
c0112f87:	85 c0                	test   %eax,%eax
c0112f89:	75 24                	jne    c0112faf <sfs_bmap_load_nolock+0xbe>
c0112f8b:	c7 44 24 0c 55 9b 11 	movl   $0xc0119b55,0xc(%esp)
c0112f92:	c0 
c0112f93:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0112f9a:	c0 
c0112f9b:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112fa2:	00 
c0112fa3:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0112faa:	e8 19 df fe ff       	call   c0100ec8 <__panic>
    if (create) {
c0112faf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112fb3:	74 0f                	je     c0112fc4 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fb8:	8b 40 08             	mov    0x8(%eax),%eax
c0112fbb:	8d 50 01             	lea    0x1(%eax),%edx
c0112fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fc1:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112fc4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112fc8:	74 08                	je     c0112fd2 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112fca:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112fcd:	8b 45 14             	mov    0x14(%ebp),%eax
c0112fd0:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112fd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112fd7:	c9                   	leave  
c0112fd8:	c3                   	ret    

c0112fd9 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112fd9:	55                   	push   %ebp
c0112fda:	89 e5                	mov    %esp,%ebp
c0112fdc:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fe2:	8b 00                	mov    (%eax),%eax
c0112fe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fea:	8b 40 08             	mov    0x8(%eax),%eax
c0112fed:	85 c0                	test   %eax,%eax
c0112fef:	75 24                	jne    c0113015 <sfs_bmap_truncate_nolock+0x3c>
c0112ff1:	c7 44 24 0c 81 9c 11 	movl   $0xc0119c81,0xc(%esp)
c0112ff8:	c0 
c0112ff9:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113000:	c0 
c0113001:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0113008:	00 
c0113009:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113010:	e8 b3 de fe ff       	call   c0100ec8 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0113015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113018:	8b 40 08             	mov    0x8(%eax),%eax
c011301b:	83 e8 01             	sub    $0x1,%eax
c011301e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113022:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113025:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113029:	8b 45 08             	mov    0x8(%ebp),%eax
c011302c:	89 04 24             	mov    %eax,(%esp)
c011302f:	e8 14 fe ff ff       	call   c0112e48 <sfs_bmap_free_nolock>
c0113034:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113037:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011303b:	74 05                	je     c0113042 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c011303d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113040:	eb 1e                	jmp    c0113060 <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0113042:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113045:	8b 40 08             	mov    0x8(%eax),%eax
c0113048:	8d 50 ff             	lea    -0x1(%eax),%edx
c011304b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011304e:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0113051:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113054:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c011305b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113060:	c9                   	leave  
c0113061:	c3                   	ret    

c0113062 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113062:	55                   	push   %ebp
c0113063:	89 e5                	mov    %esp,%ebp
c0113065:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0113068:	8b 45 0c             	mov    0xc(%ebp),%eax
c011306b:	8b 00                	mov    (%eax),%eax
c011306d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113071:	66 83 f8 02          	cmp    $0x2,%ax
c0113075:	75 15                	jne    c011308c <sfs_dirent_read_nolock+0x2a>
c0113077:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011307b:	78 0f                	js     c011308c <sfs_dirent_read_nolock+0x2a>
c011307d:	8b 55 10             	mov    0x10(%ebp),%edx
c0113080:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113083:	8b 00                	mov    (%eax),%eax
c0113085:	8b 40 08             	mov    0x8(%eax),%eax
c0113088:	39 c2                	cmp    %eax,%edx
c011308a:	72 24                	jb     c01130b0 <sfs_dirent_read_nolock+0x4e>
c011308c:	c7 44 24 0c 94 9c 11 	movl   $0xc0119c94,0xc(%esp)
c0113093:	c0 
c0113094:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011309b:	c0 
c011309c:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c01130a3:	00 
c01130a4:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01130ab:	e8 18 de fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c01130b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01130b3:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01130b6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01130ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c01130be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01130c8:	89 04 24             	mov    %eax,(%esp)
c01130cb:	e8 21 fe ff ff       	call   c0112ef1 <sfs_bmap_load_nolock>
c01130d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01130d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01130d7:	74 08                	je     c01130e1 <sfs_dirent_read_nolock+0x7f>
        return ret;
c01130d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130dc:	e9 80 00 00 00       	jmp    c0113161 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c01130e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01130e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01130eb:	89 04 24             	mov    %eax,(%esp)
c01130ee:	e8 d7 f4 ff ff       	call   c01125ca <sfs_block_inuse>
c01130f3:	85 c0                	test   %eax,%eax
c01130f5:	75 24                	jne    c011311b <sfs_dirent_read_nolock+0xb9>
c01130f7:	c7 44 24 0c 55 9b 11 	movl   $0xc0119b55,0xc(%esp)
c01130fe:	c0 
c01130ff:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113106:	c0 
c0113107:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c011310e:	00 
c011310f:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113116:	e8 ad dd fe ff       	call   c0100ec8 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c011311b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011311e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113125:	00 
c0113126:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011312a:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c0113131:	00 
c0113132:	8b 45 14             	mov    0x14(%ebp),%eax
c0113135:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113139:	8b 45 08             	mov    0x8(%ebp),%eax
c011313c:	89 04 24             	mov    %eax,(%esp)
c011313f:	e8 21 17 00 00       	call   c0114865 <sfs_rbuf>
c0113144:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113147:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011314b:	74 05                	je     c0113152 <sfs_dirent_read_nolock+0xf0>
        return ret;
c011314d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113150:	eb 0f                	jmp    c0113161 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0113152:	8b 45 14             	mov    0x14(%ebp),%eax
c0113155:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c011315c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113161:	c9                   	leave  
c0113162:	c3                   	ret    

c0113163 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0113163:	55                   	push   %ebp
c0113164:	89 e5                	mov    %esp,%ebp
c0113166:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0113169:	8b 45 10             	mov    0x10(%ebp),%eax
c011316c:	89 04 24             	mov    %eax,(%esp)
c011316f:	e8 5c 22 00 00       	call   c01153d0 <strlen>
c0113174:	3d ff 00 00 00       	cmp    $0xff,%eax
c0113179:	76 24                	jbe    c011319f <sfs_dirent_search_nolock+0x3c>
c011317b:	c7 44 24 0c e0 9c 11 	movl   $0xc0119ce0,0xc(%esp)
c0113182:	c0 
c0113183:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011318a:	c0 
c011318b:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0113192:	00 
c0113193:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011319a:	e8 29 dd fe ff       	call   c0100ec8 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011319f:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01131a6:	e8 4c 1b ff ff       	call   c0104cf7 <kmalloc>
c01131ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01131ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01131b2:	75 0a                	jne    c01131be <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c01131b4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01131b9:	e9 cb 00 00 00       	jmp    c0113289 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c01131be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131c1:	8b 00                	mov    (%eax),%eax
c01131c3:	8b 40 08             	mov    0x8(%eax),%eax
c01131c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c01131c9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131cd:	74 08                	je     c01131d7 <sfs_dirent_search_nolock+0x74>
c01131cf:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01131d2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01131d5:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c01131d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01131de:	e9 85 00 00 00       	jmp    c0113268 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01131e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131e6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01131ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01131ed:	89 44 24 08          	mov    %eax,0x8(%esp)
c01131f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01131f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01131fb:	89 04 24             	mov    %eax,(%esp)
c01131fe:	e8 5f fe ff ff       	call   c0113062 <sfs_dirent_read_nolock>
c0113203:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113206:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011320a:	74 02                	je     c011320e <sfs_dirent_search_nolock+0xab>
            goto out;
c011320c:	eb 6d                	jmp    c011327b <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c011320e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113211:	8b 00                	mov    (%eax),%eax
c0113213:	85 c0                	test   %eax,%eax
c0113215:	75 12                	jne    c0113229 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0113217:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011321b:	74 0a                	je     c0113227 <sfs_dirent_search_nolock+0xc4>
c011321d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113220:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113223:	89 10                	mov    %edx,(%eax)
            continue ;
c0113225:	eb 3d                	jmp    c0113264 <sfs_dirent_search_nolock+0x101>
c0113227:	eb 3b                	jmp    c0113264 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0113229:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011322c:	83 c0 04             	add    $0x4,%eax
c011322f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113233:	8b 45 10             	mov    0x10(%ebp),%eax
c0113236:	89 04 24             	mov    %eax,(%esp)
c0113239:	e8 8a 22 00 00       	call   c01154c8 <strcmp>
c011323e:	85 c0                	test   %eax,%eax
c0113240:	75 22                	jne    c0113264 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0113242:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113246:	74 08                	je     c0113250 <sfs_dirent_search_nolock+0xed>
c0113248:	8b 45 18             	mov    0x18(%ebp),%eax
c011324b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011324e:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0113250:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113254:	74 0c                	je     c0113262 <sfs_dirent_search_nolock+0xff>
c0113256:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113259:	8b 10                	mov    (%eax),%edx
c011325b:	8b 45 14             	mov    0x14(%ebp),%eax
c011325e:	89 10                	mov    %edx,(%eax)
            goto out;
c0113260:	eb 19                	jmp    c011327b <sfs_dirent_search_nolock+0x118>
c0113262:	eb 17                	jmp    c011327b <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0113264:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0113268:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011326b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011326e:	0f 8c 6f ff ff ff    	jl     c01131e3 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0113274:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c011327b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011327e:	89 04 24             	mov    %eax,(%esp)
c0113281:	e8 8c 1a ff ff       	call   c0104d12 <kfree>
    return ret;
c0113286:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113289:	c9                   	leave  
c011328a:	c3                   	ret    

c011328b <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c011328b:	55                   	push   %ebp
c011328c:	89 e5                	mov    %esp,%ebp
c011328e:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113291:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113294:	8b 00                	mov    (%eax),%eax
c0113296:	8b 40 08             	mov    0x8(%eax),%eax
c0113299:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c011329c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01132a3:	eb 43                	jmp    c01132e8 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01132a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01132a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01132ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01132bd:	89 04 24             	mov    %eax,(%esp)
c01132c0:	e8 9d fd ff ff       	call   c0113062 <sfs_dirent_read_nolock>
c01132c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01132c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01132cc:	74 05                	je     c01132d3 <sfs_dirent_findino_nolock+0x48>
            return ret;
c01132ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01132d1:	eb 22                	jmp    c01132f5 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c01132d3:	8b 45 14             	mov    0x14(%ebp),%eax
c01132d6:	8b 00                	mov    (%eax),%eax
c01132d8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01132db:	75 07                	jne    c01132e4 <sfs_dirent_findino_nolock+0x59>
            return 0;
c01132dd:	b8 00 00 00 00       	mov    $0x0,%eax
c01132e2:	eb 11                	jmp    c01132f5 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c01132e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01132e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132eb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01132ee:	7c b5                	jl     c01132a5 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c01132f0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c01132f5:	c9                   	leave  
c01132f6:	c3                   	ret    

c01132f7 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c01132f7:	55                   	push   %ebp
c01132f8:	89 e5                	mov    %esp,%ebp
c01132fa:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c01132fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113300:	89 04 24             	mov    %eax,(%esp)
c0113303:	e8 f4 f0 ff ff       	call   c01123fc <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0113308:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011330f:	00 
c0113310:	8b 45 18             	mov    0x18(%ebp),%eax
c0113313:	89 44 24 10          	mov    %eax,0x10(%esp)
c0113317:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011331a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011331e:	8b 45 10             	mov    0x10(%ebp),%eax
c0113321:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113325:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113328:	89 44 24 04          	mov    %eax,0x4(%esp)
c011332c:	8b 45 08             	mov    0x8(%ebp),%eax
c011332f:	89 04 24             	mov    %eax,(%esp)
c0113332:	e8 2c fe ff ff       	call   c0113163 <sfs_dirent_search_nolock>
c0113337:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c011333a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011333d:	89 04 24             	mov    %eax,(%esp)
c0113340:	e8 cd f0 ff ff       	call   c0112412 <unlock_sin>
    if (ret == 0) {
c0113345:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113349:	75 1c                	jne    c0113367 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011334b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011334e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113352:	8b 45 14             	mov    0x14(%ebp),%eax
c0113355:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113359:	8b 45 08             	mov    0x8(%ebp),%eax
c011335c:	89 04 24             	mov    %eax,(%esp)
c011335f:	e8 62 f5 ff ff       	call   c01128c6 <sfs_load_inode>
c0113364:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0113367:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011336a:	c9                   	leave  
c011336b:	c3                   	ret    

c011336c <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c011336c:	55                   	push   %ebp
c011336d:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c011336f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113372:	83 e0 03             	and    $0x3,%eax
c0113375:	85 c0                	test   %eax,%eax
c0113377:	74 07                	je     c0113380 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0113379:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011337e:	eb 17                	jmp    c0113397 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c0113380:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c0113381:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113384:	83 e0 20             	and    $0x20,%eax
c0113387:	85 c0                	test   %eax,%eax
c0113389:	74 07                	je     c0113392 <sfs_opendir+0x26>
        return -E_ISDIR;
c011338b:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0113390:	eb 05                	jmp    c0113397 <sfs_opendir+0x2b>
    }
    return 0;
c0113392:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113397:	5d                   	pop    %ebp
c0113398:	c3                   	ret    

c0113399 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c0113399:	55                   	push   %ebp
c011339a:	89 e5                	mov    %esp,%ebp
    return 0;
c011339c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01133a1:	5d                   	pop    %ebp
c01133a2:	c3                   	ret    

c01133a3 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c01133a3:	55                   	push   %ebp
c01133a4:	89 e5                	mov    %esp,%ebp
c01133a6:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c01133a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01133ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01133af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01133b3:	74 17                	je     c01133cc <sfs_close+0x29>
c01133b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133b8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01133bb:	85 c0                	test   %eax,%eax
c01133bd:	74 0d                	je     c01133cc <sfs_close+0x29>
c01133bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133c2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01133c5:	8b 40 18             	mov    0x18(%eax),%eax
c01133c8:	85 c0                	test   %eax,%eax
c01133ca:	75 24                	jne    c01133f0 <sfs_close+0x4d>
c01133cc:	c7 44 24 0c 04 9d 11 	movl   $0xc0119d04,0xc(%esp)
c01133d3:	c0 
c01133d4:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01133db:	c0 
c01133dc:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c01133e3:	00 
c01133e4:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01133eb:	e8 d8 da fe ff       	call   c0100ec8 <__panic>
c01133f0:	c7 44 24 04 52 9d 11 	movl   $0xc0119d52,0x4(%esp)
c01133f7:	c0 
c01133f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133fb:	89 04 24             	mov    %eax,(%esp)
c01133fe:	e8 f3 bf ff ff       	call   c010f3f6 <inode_check>
c0113403:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113406:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113409:	8b 40 18             	mov    0x18(%eax),%eax
c011340c:	8b 55 08             	mov    0x8(%ebp),%edx
c011340f:	89 14 24             	mov    %edx,(%esp)
c0113412:	ff d0                	call   *%eax
}
c0113414:	c9                   	leave  
c0113415:	c3                   	ret    

c0113416 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0113416:	55                   	push   %ebp
c0113417:	89 e5                	mov    %esp,%ebp
c0113419:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c011341c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011341f:	8b 00                	mov    (%eax),%eax
c0113421:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0113424:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113427:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011342b:	66 83 f8 02          	cmp    $0x2,%ax
c011342f:	75 24                	jne    c0113455 <sfs_io_nolock+0x3f>
c0113431:	c7 44 24 0c 58 9d 11 	movl   $0xc0119d58,0xc(%esp)
c0113438:	c0 
c0113439:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113440:	c0 
c0113441:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0113448:	00 
c0113449:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113450:	e8 73 da fe ff       	call   c0100ec8 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113455:	8b 45 18             	mov    0x18(%ebp),%eax
c0113458:	8b 10                	mov    (%eax),%edx
c011345a:	8b 45 14             	mov    0x14(%ebp),%eax
c011345d:	01 d0                	add    %edx,%eax
c011345f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0113462:	8b 45 18             	mov    0x18(%ebp),%eax
c0113465:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c011346b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011346f:	78 12                	js     c0113483 <sfs_io_nolock+0x6d>
c0113471:	8b 45 14             	mov    0x14(%ebp),%eax
c0113474:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0113479:	77 08                	ja     c0113483 <sfs_io_nolock+0x6d>
c011347b:	8b 45 14             	mov    0x14(%ebp),%eax
c011347e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0113481:	7e 0a                	jle    c011348d <sfs_io_nolock+0x77>
        return -E_INVAL;
c0113483:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113488:	e9 a0 02 00 00       	jmp    c011372d <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c011348d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113490:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0113493:	75 0a                	jne    c011349f <sfs_io_nolock+0x89>
        return 0;
c0113495:	b8 00 00 00 00       	mov    $0x0,%eax
c011349a:	e9 8e 02 00 00       	jmp    c011372d <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c011349f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134a2:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01134a7:	76 07                	jbe    c01134b0 <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c01134a9:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01134b0:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01134b4:	75 2a                	jne    c01134e0 <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c01134b6:	8b 55 14             	mov    0x14(%ebp),%edx
c01134b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01134bc:	8b 00                	mov    (%eax),%eax
c01134be:	39 c2                	cmp    %eax,%edx
c01134c0:	72 0a                	jb     c01134cc <sfs_io_nolock+0xb6>
            return 0;
c01134c2:	b8 00 00 00 00       	mov    $0x0,%eax
c01134c7:	e9 61 02 00 00       	jmp    c011372d <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c01134cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01134cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01134d2:	8b 00                	mov    (%eax),%eax
c01134d4:	39 c2                	cmp    %eax,%edx
c01134d6:	76 08                	jbe    c01134e0 <sfs_io_nolock+0xca>
            endpos = din->size;
c01134d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01134db:	8b 00                	mov    (%eax),%eax
c01134dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c01134e0:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01134e4:	74 10                	je     c01134f6 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c01134e6:	c7 45 f0 1e 49 11 c0 	movl   $0xc011491e,-0x10(%ebp)
c01134ed:	c7 45 ec 35 48 11 c0 	movl   $0xc0114835,-0x14(%ebp)
c01134f4:	eb 0e                	jmp    c0113504 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c01134f6:	c7 45 f0 65 48 11 c0 	movl   $0xc0114865,-0x10(%ebp)
c01134fd:	c7 45 ec 05 48 11 c0 	movl   $0xc0114805,-0x14(%ebp)
    }

    int ret = 0;
c0113504:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c011350b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0113512:	8b 45 14             	mov    0x14(%ebp),%eax
c0113515:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011351b:	85 c0                	test   %eax,%eax
c011351d:	0f 48 c2             	cmovs  %edx,%eax
c0113520:	c1 f8 0c             	sar    $0xc,%eax
c0113523:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0113526:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113529:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011352f:	85 c0                	test   %eax,%eax
c0113531:	0f 48 c2             	cmovs  %edx,%eax
c0113534:	c1 f8 0c             	sar    $0xc,%eax
c0113537:	2b 45 e0             	sub    -0x20(%ebp),%eax
c011353a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c011353d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113540:	99                   	cltd   
c0113541:	c1 ea 14             	shr    $0x14,%edx
c0113544:	01 d0                	add    %edx,%eax
c0113546:	25 ff 0f 00 00       	and    $0xfff,%eax
c011354b:	29 d0                	sub    %edx,%eax
c011354d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0113550:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0113554:	0f 84 9f 00 00 00    	je     c01135f9 <sfs_io_nolock+0x1e3>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c011355a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011355e:	74 0a                	je     c011356a <sfs_io_nolock+0x154>
c0113560:	b8 00 10 00 00       	mov    $0x1000,%eax
c0113565:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0113568:	eb 0a                	jmp    c0113574 <sfs_io_nolock+0x15e>
c011356a:	8b 45 14             	mov    0x14(%ebp),%eax
c011356d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113570:	29 c2                	sub    %eax,%edx
c0113572:	89 d0                	mov    %edx,%eax
c0113574:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113577:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011357a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011357e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113581:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113588:	89 44 24 04          	mov    %eax,0x4(%esp)
c011358c:	8b 45 08             	mov    0x8(%ebp),%eax
c011358f:	89 04 24             	mov    %eax,(%esp)
c0113592:	e8 5a f9 ff ff       	call   c0112ef1 <sfs_bmap_load_nolock>
c0113597:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011359a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011359e:	74 05                	je     c01135a5 <sfs_io_nolock+0x18f>
            goto out;
c01135a0:	e9 51 01 00 00       	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c01135a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01135a8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01135ab:	89 54 24 10          	mov    %edx,0x10(%esp)
c01135af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01135b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01135b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01135bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01135c4:	89 04 24             	mov    %eax,(%esp)
c01135c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01135ca:	ff d0                	call   *%eax
c01135cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01135cf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01135d3:	74 05                	je     c01135da <sfs_io_nolock+0x1c4>
            goto out;
c01135d5:	e9 1c 01 00 00       	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c01135da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01135dd:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c01135e0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01135e4:	75 05                	jne    c01135eb <sfs_io_nolock+0x1d5>
            goto out;
c01135e6:	e9 0b 01 00 00       	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno ++, nblks --;
c01135eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01135ee:	01 45 10             	add    %eax,0x10(%ebp)
c01135f1:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c01135f5:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c01135f9:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c0113600:	eb 71                	jmp    c0113673 <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113602:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113605:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113609:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011360c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113610:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113613:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113617:	8b 45 08             	mov    0x8(%ebp),%eax
c011361a:	89 04 24             	mov    %eax,(%esp)
c011361d:	e8 cf f8 ff ff       	call   c0112ef1 <sfs_bmap_load_nolock>
c0113622:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113625:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113629:	74 05                	je     c0113630 <sfs_io_nolock+0x21a>
            goto out;
c011362b:	e9 c6 00 00 00       	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c0113630:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113633:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011363a:	00 
c011363b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011363f:	8b 45 10             	mov    0x10(%ebp),%eax
c0113642:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113646:	8b 45 08             	mov    0x8(%ebp),%eax
c0113649:	89 04 24             	mov    %eax,(%esp)
c011364c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011364f:	ff d0                	call   *%eax
c0113651:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113654:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113658:	74 05                	je     c011365f <sfs_io_nolock+0x249>
            goto out;
c011365a:	e9 97 00 00 00       	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno ++, nblks --;
c011365f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113662:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0113665:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113668:	01 45 10             	add    %eax,0x10(%ebp)
c011366b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c011366f:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        }
        buf += size, blkno ++, nblks --;
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
c0113673:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113677:	75 89                	jne    c0113602 <sfs_io_nolock+0x1ec>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c0113679:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011367c:	99                   	cltd   
c011367d:	c1 ea 14             	shr    $0x14,%edx
c0113680:	01 d0                	add    %edx,%eax
c0113682:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113687:	29 d0                	sub    %edx,%eax
c0113689:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011368c:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0113690:	74 64                	je     c01136f6 <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113692:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113695:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113699:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011369c:	89 44 24 08          	mov    %eax,0x8(%esp)
c01136a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01136a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01136aa:	89 04 24             	mov    %eax,(%esp)
c01136ad:	e8 3f f8 ff ff       	call   c0112ef1 <sfs_bmap_load_nolock>
c01136b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01136b5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01136b9:	74 02                	je     c01136bd <sfs_io_nolock+0x2a7>
            goto out;
c01136bb:	eb 39                	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c01136bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01136c0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01136c7:	00 
c01136c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01136cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01136cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01136d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01136d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01136da:	8b 45 08             	mov    0x8(%ebp),%eax
c01136dd:	89 04 24             	mov    %eax,(%esp)
c01136e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136e3:	ff d0                	call   *%eax
c01136e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01136e8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01136ec:	74 02                	je     c01136f0 <sfs_io_nolock+0x2da>
            goto out;
c01136ee:	eb 06                	jmp    c01136f6 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c01136f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01136f3:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c01136f6:	8b 45 18             	mov    0x18(%ebp),%eax
c01136f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01136fc:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c01136fe:	8b 55 14             	mov    0x14(%ebp),%edx
c0113701:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113704:	01 c2                	add    %eax,%edx
c0113706:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113709:	8b 00                	mov    (%eax),%eax
c011370b:	8b 00                	mov    (%eax),%eax
c011370d:	39 c2                	cmp    %eax,%edx
c011370f:	76 19                	jbe    c011372a <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c0113711:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113714:	8b 00                	mov    (%eax),%eax
c0113716:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0113719:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011371c:	01 ca                	add    %ecx,%edx
c011371e:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c0113720:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113723:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c011372a:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c011372d:	c9                   	leave  
c011372e:	c3                   	ret    

c011372f <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c011372f:	55                   	push   %ebp
c0113730:	89 e5                	mov    %esp,%ebp
c0113732:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113735:	8b 45 08             	mov    0x8(%ebp),%eax
c0113738:	8b 40 38             	mov    0x38(%eax),%eax
c011373b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011373e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113742:	74 0a                	je     c011374e <sfs_io+0x1f>
c0113744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113747:	8b 40 6c             	mov    0x6c(%eax),%eax
c011374a:	85 c0                	test   %eax,%eax
c011374c:	74 24                	je     c0113772 <sfs_io+0x43>
c011374e:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c0113755:	c0 
c0113756:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011375d:	c0 
c011375e:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0113765:	00 
c0113766:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011376d:	e8 56 d7 fe ff       	call   c0100ec8 <__panic>
c0113772:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113775:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113778:	8b 45 08             	mov    0x8(%ebp),%eax
c011377b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011377e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113782:	74 0d                	je     c0113791 <sfs_io+0x62>
c0113784:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113787:	8b 40 2c             	mov    0x2c(%eax),%eax
c011378a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011378f:	74 24                	je     c01137b5 <sfs_io+0x86>
c0113791:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0113798:	c0 
c0113799:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01137a0:	c0 
c01137a1:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01137a8:	00 
c01137a9:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01137b0:	e8 13 d7 fe ff       	call   c0100ec8 <__panic>
c01137b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01137b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c01137bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137be:	89 04 24             	mov    %eax,(%esp)
c01137c1:	e8 36 ec ff ff       	call   c01123fc <lock_sin>
    {
        size_t alen = iob->io_resid;
c01137c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137c9:	8b 40 0c             	mov    0xc(%eax),%eax
c01137cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c01137cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137d2:	8b 50 04             	mov    0x4(%eax),%edx
c01137d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137d8:	8b 00                	mov    (%eax),%eax
c01137da:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01137dd:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c01137e1:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c01137e4:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01137e8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01137ec:	89 44 24 08          	mov    %eax,0x8(%esp)
c01137f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01137f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01137fa:	89 04 24             	mov    %eax,(%esp)
c01137fd:	e8 14 fc ff ff       	call   c0113416 <sfs_io_nolock>
c0113802:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0113805:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113808:	85 c0                	test   %eax,%eax
c011380a:	74 12                	je     c011381e <sfs_io+0xef>
            iobuf_skip(iob, alen);
c011380c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011380f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113813:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113816:	89 04 24             	mov    %eax,(%esp)
c0113819:	e8 cb 7c ff ff       	call   c010b4e9 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c011381e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113821:	89 04 24             	mov    %eax,(%esp)
c0113824:	e8 e9 eb ff ff       	call   c0112412 <unlock_sin>
    return ret;
c0113829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c011382c:	c9                   	leave  
c011382d:	c3                   	ret    

c011382e <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c011382e:	55                   	push   %ebp
c011382f:	89 e5                	mov    %esp,%ebp
c0113831:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0113834:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011383b:	00 
c011383c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011383f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113843:	8b 45 08             	mov    0x8(%ebp),%eax
c0113846:	89 04 24             	mov    %eax,(%esp)
c0113849:	e8 e1 fe ff ff       	call   c011372f <sfs_io>
}
c011384e:	c9                   	leave  
c011384f:	c3                   	ret    

c0113850 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c0113850:	55                   	push   %ebp
c0113851:	89 e5                	mov    %esp,%ebp
c0113853:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113856:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011385d:	00 
c011385e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113861:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113865:	8b 45 08             	mov    0x8(%ebp),%eax
c0113868:	89 04 24             	mov    %eax,(%esp)
c011386b:	e8 bf fe ff ff       	call   c011372f <sfs_io>
}
c0113870:	c9                   	leave  
c0113871:	c3                   	ret    

c0113872 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0113872:	55                   	push   %ebp
c0113873:	89 e5                	mov    %esp,%ebp
c0113875:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0113878:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c011387f:	00 
c0113880:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113887:	00 
c0113888:	8b 45 0c             	mov    0xc(%ebp),%eax
c011388b:	89 04 24             	mov    %eax,(%esp)
c011388e:	e8 93 1e 00 00       	call   c0115726 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0113893:	8b 45 08             	mov    0x8(%ebp),%eax
c0113896:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113899:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011389d:	74 17                	je     c01138b6 <sfs_fstat+0x44>
c011389f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138a2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138a5:	85 c0                	test   %eax,%eax
c01138a7:	74 0d                	je     c01138b6 <sfs_fstat+0x44>
c01138a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138ac:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138af:	8b 40 28             	mov    0x28(%eax),%eax
c01138b2:	85 c0                	test   %eax,%eax
c01138b4:	75 24                	jne    c01138da <sfs_fstat+0x68>
c01138b6:	c7 44 24 0c a0 9d 11 	movl   $0xc0119da0,0xc(%esp)
c01138bd:	c0 
c01138be:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01138c5:	c0 
c01138c6:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c01138cd:	00 
c01138ce:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01138d5:	e8 ee d5 fe ff       	call   c0100ec8 <__panic>
c01138da:	c7 44 24 04 f0 9d 11 	movl   $0xc0119df0,0x4(%esp)
c01138e1:	c0 
c01138e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138e5:	89 04 24             	mov    %eax,(%esp)
c01138e8:	e8 09 bb ff ff       	call   c010f3f6 <inode_check>
c01138ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138f0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138f3:	8b 40 28             	mov    0x28(%eax),%eax
c01138f6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01138f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01138fd:	8b 55 08             	mov    0x8(%ebp),%edx
c0113900:	89 14 24             	mov    %edx,(%esp)
c0113903:	ff d0                	call   *%eax
c0113905:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113908:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011390c:	74 05                	je     c0113913 <sfs_fstat+0xa1>
        return ret;
c011390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113911:	eb 71                	jmp    c0113984 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113913:	8b 45 08             	mov    0x8(%ebp),%eax
c0113916:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113919:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011391d:	74 0d                	je     c011392c <sfs_fstat+0xba>
c011391f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113922:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113925:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011392a:	74 24                	je     c0113950 <sfs_fstat+0xde>
c011392c:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0113933:	c0 
c0113934:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011393b:	c0 
c011393c:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c0113943:	00 
c0113944:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011394b:	e8 78 d5 fe ff       	call   c0100ec8 <__panic>
c0113950:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113953:	8b 00                	mov    (%eax),%eax
c0113955:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113958:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011395b:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011395f:	0f b7 d0             	movzwl %ax,%edx
c0113962:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113965:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0113968:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011396b:	8b 50 08             	mov    0x8(%eax),%edx
c011396e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113971:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c0113974:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113977:	8b 10                	mov    (%eax),%edx
c0113979:	8b 45 0c             	mov    0xc(%ebp),%eax
c011397c:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c011397f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113984:	c9                   	leave  
c0113985:	c3                   	ret    

c0113986 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c0113986:	55                   	push   %ebp
c0113987:	89 e5                	mov    %esp,%ebp
c0113989:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011398c:	8b 45 08             	mov    0x8(%ebp),%eax
c011398f:	8b 40 38             	mov    0x38(%eax),%eax
c0113992:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113995:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113999:	74 0a                	je     c01139a5 <sfs_fsync+0x1f>
c011399b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011399e:	8b 40 6c             	mov    0x6c(%eax),%eax
c01139a1:	85 c0                	test   %eax,%eax
c01139a3:	74 24                	je     c01139c9 <sfs_fsync+0x43>
c01139a5:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c01139ac:	c0 
c01139ad:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01139b4:	c0 
c01139b5:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c01139bc:	00 
c01139bd:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01139c4:	e8 ff d4 fe ff       	call   c0100ec8 <__panic>
c01139c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01139cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01139cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01139d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01139d5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01139d9:	74 0d                	je     c01139e8 <sfs_fsync+0x62>
c01139db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01139de:	8b 40 2c             	mov    0x2c(%eax),%eax
c01139e1:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01139e6:	74 24                	je     c0113a0c <sfs_fsync+0x86>
c01139e8:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c01139ef:	c0 
c01139f0:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01139f7:	c0 
c01139f8:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c01139ff:	00 
c0113a00:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113a07:	e8 bc d4 fe ff       	call   c0100ec8 <__panic>
c0113a0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113a0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0113a12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0113a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a1c:	8b 40 08             	mov    0x8(%eax),%eax
c0113a1f:	85 c0                	test   %eax,%eax
c0113a21:	74 6b                	je     c0113a8e <sfs_fsync+0x108>
        lock_sin(sin);
c0113a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a26:	89 04 24             	mov    %eax,(%esp)
c0113a29:	e8 ce e9 ff ff       	call   c01123fc <lock_sin>
        {
            if (sin->dirty) {
c0113a2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a31:	8b 40 08             	mov    0x8(%eax),%eax
c0113a34:	85 c0                	test   %eax,%eax
c0113a36:	74 4b                	je     c0113a83 <sfs_fsync+0xfd>
                sin->dirty = 0;
c0113a38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0113a42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a45:	8b 50 04             	mov    0x4(%eax),%edx
c0113a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a4b:	8b 00                	mov    (%eax),%eax
c0113a4d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113a54:	00 
c0113a55:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113a59:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0113a60:	00 
c0113a61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a68:	89 04 24             	mov    %eax,(%esp)
c0113a6b:	e8 ae 0e 00 00       	call   c011491e <sfs_wbuf>
c0113a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113a73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113a77:	74 0a                	je     c0113a83 <sfs_fsync+0xfd>
                    sin->dirty = 1;
c0113a79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a7c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0113a83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a86:	89 04 24             	mov    %eax,(%esp)
c0113a89:	e8 84 e9 ff ff       	call   c0112412 <unlock_sin>
    }
    return ret;
c0113a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113a91:	c9                   	leave  
c0113a92:	c3                   	ret    

c0113a93 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0113a93:	55                   	push   %ebp
c0113a94:	89 e5                	mov    %esp,%ebp
c0113a96:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113a99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a9c:	8b 40 0c             	mov    0xc(%eax),%eax
c0113a9f:	83 f8 02             	cmp    $0x2,%eax
c0113aa2:	76 15                	jbe    c0113ab9 <sfs_namefile+0x26>
c0113aa4:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113aab:	e8 47 12 ff ff       	call   c0104cf7 <kmalloc>
c0113ab0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113ab3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113ab7:	75 0a                	jne    c0113ac3 <sfs_namefile+0x30>
        return -E_NO_MEM;
c0113ab9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113abe:	e9 bd 02 00 00       	jmp    c0113d80 <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113ac3:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ac6:	8b 40 38             	mov    0x38(%eax),%eax
c0113ac9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113acc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113ad0:	74 0a                	je     c0113adc <sfs_namefile+0x49>
c0113ad2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ad5:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113ad8:	85 c0                	test   %eax,%eax
c0113ada:	74 24                	je     c0113b00 <sfs_namefile+0x6d>
c0113adc:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c0113ae3:	c0 
c0113ae4:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113aeb:	c0 
c0113aec:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c0113af3:	00 
c0113af4:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113afb:	e8 c8 d3 fe ff       	call   c0100ec8 <__panic>
c0113b00:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113b03:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113b06:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b09:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113b0c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113b10:	74 0d                	je     c0113b1f <sfs_namefile+0x8c>
c0113b12:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113b15:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113b18:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113b1d:	74 24                	je     c0113b43 <sfs_namefile+0xb0>
c0113b1f:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0113b26:	c0 
c0113b27:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113b2e:	c0 
c0113b2f:	c7 44 24 04 db 02 00 	movl   $0x2db,0x4(%esp)
c0113b36:	00 
c0113b37:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113b3e:	e8 85 d3 fe ff       	call   c0100ec8 <__panic>
c0113b43:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113b46:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113b49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b4c:	8b 10                	mov    (%eax),%edx
c0113b4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b51:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b54:	01 d0                	add    %edx,%eax
c0113b56:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113b59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b5f:	83 e8 02             	sub    $0x2,%eax
c0113b62:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b68:	89 04 24             	mov    %eax,(%esp)
c0113b6b:	e8 7e b6 ff ff       	call   c010f1ee <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0113b70:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113b77:	00 
c0113b78:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113b7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113b7f:	c7 44 24 08 f8 9d 11 	movl   $0xc0119df8,0x8(%esp)
c0113b86:	c0 
c0113b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113b91:	89 04 24             	mov    %eax,(%esp)
c0113b94:	e8 5e f7 ff ff       	call   c01132f7 <sfs_lookup_once>
c0113b99:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113b9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113ba0:	74 05                	je     c0113ba7 <sfs_namefile+0x114>
            goto failed;
c0113ba2:	e9 c0 01 00 00       	jmp    c0113d67 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c0113ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113baa:	8b 40 04             	mov    0x4(%eax),%eax
c0113bad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0113bb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bb3:	89 04 24             	mov    %eax,(%esp)
c0113bb6:	e8 4d b6 ff ff       	call   c010f208 <inode_ref_dec>
        if (node == parent) {
c0113bbb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113bbe:	39 45 08             	cmp    %eax,0x8(%ebp)
c0113bc1:	75 76                	jne    c0113c39 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113bc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bc6:	89 04 24             	mov    %eax,(%esp)
c0113bc9:	e8 3a b6 ff ff       	call   c010f208 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c0113bce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113bd1:	8b 40 0c             	mov    0xc(%eax),%eax
c0113bd4:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0113bd7:	83 e8 02             	sub    $0x2,%eax
c0113bda:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c0113bdd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113be0:	8b 00                	mov    (%eax),%eax
c0113be2:	8d 50 01             	lea    0x1(%eax),%edx
c0113be5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113be8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113bec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113bef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113bf3:	89 14 24             	mov    %edx,(%esp)
c0113bf6:	e8 6a 1b 00 00       	call   c0115765 <memmove>
c0113bfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113bfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c01:	83 e8 01             	sub    $0x1,%eax
c0113c04:	c6 00 2f             	movb   $0x2f,(%eax)
c0113c07:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c0a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113c0d:	01 d0                	add    %edx,%eax
c0113c0f:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113c12:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c1c:	89 04 24             	mov    %eax,(%esp)
c0113c1f:	e8 c5 78 ff ff       	call   c010b4e9 <iobuf_skip>
    kfree(entry);
c0113c24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c27:	89 04 24             	mov    %eax,(%esp)
c0113c2a:	e8 e3 10 ff ff       	call   c0104d12 <kfree>
    return 0;
c0113c2f:	b8 00 00 00 00       	mov    $0x0,%eax
c0113c34:	e9 47 01 00 00       	jmp    c0113d80 <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113c39:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113c3c:	89 45 08             	mov    %eax,0x8(%ebp)
c0113c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c42:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113c45:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113c49:	74 0d                	je     c0113c58 <sfs_namefile+0x1c5>
c0113c4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113c4e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113c51:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113c56:	74 24                	je     c0113c7c <sfs_namefile+0x1e9>
c0113c58:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0113c5f:	c0 
c0113c60:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113c67:	c0 
c0113c68:	c7 44 24 04 ee 02 00 	movl   $0x2ee,0x4(%esp)
c0113c6f:	00 
c0113c70:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113c77:	e8 4c d2 fe ff       	call   c0100ec8 <__panic>
c0113c7c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113c7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c85:	8b 40 04             	mov    0x4(%eax),%eax
c0113c88:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113c8b:	74 0f                	je     c0113c9c <sfs_namefile+0x209>
c0113c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113c90:	8b 00                	mov    (%eax),%eax
c0113c92:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113c96:	66 83 f8 02          	cmp    $0x2,%ax
c0113c9a:	74 24                	je     c0113cc0 <sfs_namefile+0x22d>
c0113c9c:	c7 44 24 0c fc 9d 11 	movl   $0xc0119dfc,0xc(%esp)
c0113ca3:	c0 
c0113ca4:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113cab:	c0 
c0113cac:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
c0113cb3:	00 
c0113cb4:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113cbb:	e8 08 d2 fe ff       	call   c0100ec8 <__panic>

        lock_sin(sin);
c0113cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113cc3:	89 04 24             	mov    %eax,(%esp)
c0113cc6:	e8 31 e7 ff ff       	call   c01123fc <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113ccb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113cce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113cd2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113cd5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113cdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113ce0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ce3:	89 04 24             	mov    %eax,(%esp)
c0113ce6:	e8 a0 f5 ff ff       	call   c011328b <sfs_dirent_findino_nolock>
c0113ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0113cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113cf1:	89 04 24             	mov    %eax,(%esp)
c0113cf4:	e8 19 e7 ff ff       	call   c0112412 <unlock_sin>

        if (ret != 0) {
c0113cf9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113cfd:	74 03                	je     c0113d02 <sfs_namefile+0x26f>
            goto failed;
c0113cff:	90                   	nop
c0113d00:	eb 65                	jmp    c0113d67 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d05:	83 c0 04             	add    $0x4,%eax
c0113d08:	89 04 24             	mov    %eax,(%esp)
c0113d0b:	e8 c0 16 00 00       	call   c01153d0 <strlen>
c0113d10:	83 c0 01             	add    $0x1,%eax
c0113d13:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113d16:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d19:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113d1c:	76 09                	jbe    c0113d27 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113d1e:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113d25:	eb 40                	jmp    c0113d67 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113d27:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d2a:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113d2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d30:	f7 d8                	neg    %eax
c0113d32:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113d35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d38:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113d3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d3e:	83 c0 04             	add    $0x4,%eax
c0113d41:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113d45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d4c:	89 04 24             	mov    %eax,(%esp)
c0113d4f:	e8 b4 1a 00 00       	call   c0115808 <memcpy>
        ptr[alen - 1] = '/';
c0113d54:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d57:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113d5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d5d:	01 d0                	add    %edx,%eax
c0113d5f:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113d62:	e9 09 fe ff ff       	jmp    c0113b70 <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d6a:	89 04 24             	mov    %eax,(%esp)
c0113d6d:	e8 96 b4 ff ff       	call   c010f208 <inode_ref_dec>
    kfree(entry);
c0113d72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d75:	89 04 24             	mov    %eax,(%esp)
c0113d78:	e8 95 0f ff ff       	call   c0104d12 <kfree>
    return ret;
c0113d7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113d80:	c9                   	leave  
c0113d81:	c3                   	ret    

c0113d82 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113d82:	55                   	push   %ebp
c0113d83:	89 e5                	mov    %esp,%ebp
c0113d85:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113d88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113d8b:	8b 00                	mov    (%eax),%eax
c0113d8d:	8b 40 08             	mov    0x8(%eax),%eax
c0113d90:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113d93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113d9a:	eb 4c                	jmp    c0113de8 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113d9c:	8b 45 14             	mov    0x14(%ebp),%eax
c0113d9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113da6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113daa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113dad:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113db1:	8b 45 08             	mov    0x8(%ebp),%eax
c0113db4:	89 04 24             	mov    %eax,(%esp)
c0113db7:	e8 a6 f2 ff ff       	call   c0113062 <sfs_dirent_read_nolock>
c0113dbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113dbf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113dc3:	74 05                	je     c0113dca <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113dc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113dc8:	eb 2b                	jmp    c0113df5 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113dca:	8b 45 14             	mov    0x14(%ebp),%eax
c0113dcd:	8b 00                	mov    (%eax),%eax
c0113dcf:	85 c0                	test   %eax,%eax
c0113dd1:	74 11                	je     c0113de4 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113dd3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113dd7:	75 07                	jne    c0113de0 <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113dd9:	b8 00 00 00 00       	mov    $0x0,%eax
c0113dde:	eb 15                	jmp    c0113df5 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113de0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113de4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113deb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113dee:	7c ac                	jl     c0113d9c <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113df0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113df5:	c9                   	leave  
c0113df6:	c3                   	ret    

c0113df7 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113df7:	55                   	push   %ebp
c0113df8:	89 e5                	mov    %esp,%ebp
c0113dfa:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113dfd:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113e04:	e8 ee 0e ff ff       	call   c0104cf7 <kmalloc>
c0113e09:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113e0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113e10:	75 0a                	jne    c0113e1c <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113e12:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113e17:	e9 6b 01 00 00       	jmp    c0113f87 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e1f:	8b 40 38             	mov    0x38(%eax),%eax
c0113e22:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113e25:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113e29:	74 0a                	je     c0113e35 <sfs_getdirentry+0x3e>
c0113e2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e2e:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113e31:	85 c0                	test   %eax,%eax
c0113e33:	74 24                	je     c0113e59 <sfs_getdirentry+0x62>
c0113e35:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c0113e3c:	c0 
c0113e3d:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113e44:	c0 
c0113e45:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
c0113e4c:	00 
c0113e4d:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113e54:	e8 6f d0 fe ff       	call   c0100ec8 <__panic>
c0113e59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113e5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113e65:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113e69:	74 0d                	je     c0113e78 <sfs_getdirentry+0x81>
c0113e6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e6e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113e71:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113e76:	74 24                	je     c0113e9c <sfs_getdirentry+0xa5>
c0113e78:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0113e7f:	c0 
c0113e80:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113e87:	c0 
c0113e88:	c7 44 24 04 31 03 00 	movl   $0x331,0x4(%esp)
c0113e8f:	00 
c0113e90:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113e97:	e8 2c d0 fe ff       	call   c0100ec8 <__panic>
c0113e9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e9f:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113ea2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ea5:	8b 40 04             	mov    0x4(%eax),%eax
c0113ea8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113eab:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113eaf:	78 0a                	js     c0113ebb <sfs_getdirentry+0xc4>
c0113eb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113eb4:	0f b6 c0             	movzbl %al,%eax
c0113eb7:	85 c0                	test   %eax,%eax
c0113eb9:	74 15                	je     c0113ed0 <sfs_getdirentry+0xd9>
        kfree(entry);
c0113ebb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ebe:	89 04 24             	mov    %eax,(%esp)
c0113ec1:	e8 4c 0e ff ff       	call   c0104d12 <kfree>
        return -E_INVAL;
c0113ec6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113ecb:	e9 b7 00 00 00       	jmp    c0113f87 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113ed0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ed3:	c1 e8 08             	shr    $0x8,%eax
c0113ed6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113ed9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113edc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113edf:	8b 00                	mov    (%eax),%eax
c0113ee1:	8b 40 08             	mov    0x8(%eax),%eax
c0113ee4:	39 c2                	cmp    %eax,%edx
c0113ee6:	76 15                	jbe    c0113efd <sfs_getdirentry+0x106>
        kfree(entry);
c0113ee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113eeb:	89 04 24             	mov    %eax,(%esp)
c0113eee:	e8 1f 0e ff ff       	call   c0104d12 <kfree>
        return -E_NOENT;
c0113ef3:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113ef8:	e9 8a 00 00 00       	jmp    c0113f87 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113efd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f00:	89 04 24             	mov    %eax,(%esp)
c0113f03:	e8 f4 e4 ff ff       	call   c01123fc <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113f08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f0b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113f0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113f12:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113f16:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f20:	89 04 24             	mov    %eax,(%esp)
c0113f23:	e8 5a fe ff ff       	call   c0113d82 <sfs_getdirentry_sub_nolock>
c0113f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f2f:	74 0d                	je     c0113f3e <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113f31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f34:	89 04 24             	mov    %eax,(%esp)
c0113f37:	e8 d6 e4 ff ff       	call   c0112412 <unlock_sin>
        goto out;
c0113f3c:	eb 3b                	jmp    c0113f79 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113f3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f41:	89 04 24             	mov    %eax,(%esp)
c0113f44:	e8 c9 e4 ff ff       	call   c0112412 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113f49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f4c:	83 c0 04             	add    $0x4,%eax
c0113f4f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113f56:	00 
c0113f57:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113f5e:	00 
c0113f5f:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113f66:	00 
c0113f67:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f6e:	89 04 24             	mov    %eax,(%esp)
c0113f71:	e8 5e 74 ff ff       	call   c010b3d4 <iobuf_move>
c0113f76:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113f79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f7c:	89 04 24             	mov    %eax,(%esp)
c0113f7f:	e8 8e 0d ff ff       	call   c0104d12 <kfree>
    return ret;
c0113f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113f87:	c9                   	leave  
c0113f88:	c3                   	ret    

c0113f89 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113f89:	55                   	push   %ebp
c0113f8a:	89 e5                	mov    %esp,%ebp
c0113f8c:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113f8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f92:	8b 40 38             	mov    0x38(%eax),%eax
c0113f95:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113f98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113f9c:	74 0a                	je     c0113fa8 <sfs_reclaim+0x1f>
c0113f9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fa1:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113fa4:	85 c0                	test   %eax,%eax
c0113fa6:	74 24                	je     c0113fcc <sfs_reclaim+0x43>
c0113fa8:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c0113faf:	c0 
c0113fb0:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113fb7:	c0 
c0113fb8:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c0113fbf:	00 
c0113fc0:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0113fc7:	e8 fc ce fe ff       	call   c0100ec8 <__panic>
c0113fcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113fd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113fd8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113fdc:	74 0d                	je     c0113feb <sfs_reclaim+0x62>
c0113fde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113fe1:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113fe4:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113fe9:	74 24                	je     c011400f <sfs_reclaim+0x86>
c0113feb:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0113ff2:	c0 
c0113ff3:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0113ffa:	c0 
c0113ffb:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c0114002:	00 
c0114003:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011400a:	e8 b9 ce fe ff       	call   c0100ec8 <__panic>
c011400f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114012:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0114015:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c011401c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011401f:	89 04 24             	mov    %eax,(%esp)
c0114022:	e8 4d 0b 00 00       	call   c0114b74 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0114027:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011402a:	8b 40 0c             	mov    0xc(%eax),%eax
c011402d:	85 c0                	test   %eax,%eax
c011402f:	7f 24                	jg     c0114055 <sfs_reclaim+0xcc>
c0114031:	c7 44 24 0c 2e 9e 11 	movl   $0xc0119e2e,0xc(%esp)
c0114038:	c0 
c0114039:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114040:	c0 
c0114041:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
c0114048:	00 
c0114049:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114050:	e8 73 ce fe ff       	call   c0100ec8 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0114055:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114058:	8b 40 0c             	mov    0xc(%eax),%eax
c011405b:	8d 50 ff             	lea    -0x1(%eax),%edx
c011405e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114061:	89 50 0c             	mov    %edx,0xc(%eax)
c0114064:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114067:	8b 40 0c             	mov    0xc(%eax),%eax
c011406a:	85 c0                	test   %eax,%eax
c011406c:	0f 85 a1 01 00 00    	jne    c0114213 <sfs_reclaim+0x28a>
c0114072:	8b 45 08             	mov    0x8(%ebp),%eax
c0114075:	89 04 24             	mov    %eax,(%esp)
c0114078:	e8 74 e3 ff ff       	call   c01123f1 <inode_ref_count>
c011407d:	85 c0                	test   %eax,%eax
c011407f:	0f 85 8e 01 00 00    	jne    c0114213 <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0114085:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114088:	8b 00                	mov    (%eax),%eax
c011408a:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011408e:	66 85 c0             	test   %ax,%ax
c0114091:	0f 85 81 00 00 00    	jne    c0114118 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0114097:	8b 45 08             	mov    0x8(%ebp),%eax
c011409a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011409d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01140a1:	74 17                	je     c01140ba <sfs_reclaim+0x131>
c01140a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140a6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140a9:	85 c0                	test   %eax,%eax
c01140ab:	74 0d                	je     c01140ba <sfs_reclaim+0x131>
c01140ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140b0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140b3:	8b 40 30             	mov    0x30(%eax),%eax
c01140b6:	85 c0                	test   %eax,%eax
c01140b8:	75 24                	jne    c01140de <sfs_reclaim+0x155>
c01140ba:	c7 44 24 0c 48 9e 11 	movl   $0xc0119e48,0xc(%esp)
c01140c1:	c0 
c01140c2:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01140c9:	c0 
c01140ca:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c01140d1:	00 
c01140d2:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01140d9:	e8 ea cd fe ff       	call   c0100ec8 <__panic>
c01140de:	c7 44 24 04 99 9e 11 	movl   $0xc0119e99,0x4(%esp)
c01140e5:	c0 
c01140e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140e9:	89 04 24             	mov    %eax,(%esp)
c01140ec:	e8 05 b3 ff ff       	call   c010f3f6 <inode_check>
c01140f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140f4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140f7:	8b 40 30             	mov    0x30(%eax),%eax
c01140fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114101:	00 
c0114102:	8b 55 08             	mov    0x8(%ebp),%edx
c0114105:	89 14 24             	mov    %edx,(%esp)
c0114108:	ff d0                	call   *%eax
c011410a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011410d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114111:	74 05                	je     c0114118 <sfs_reclaim+0x18f>
            goto failed_unlock;
c0114113:	e9 fb 00 00 00       	jmp    c0114213 <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0114118:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011411b:	8b 40 08             	mov    0x8(%eax),%eax
c011411e:	85 c0                	test   %eax,%eax
c0114120:	74 76                	je     c0114198 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c0114122:	8b 45 08             	mov    0x8(%ebp),%eax
c0114125:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0114128:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011412c:	74 17                	je     c0114145 <sfs_reclaim+0x1bc>
c011412e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114131:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114134:	85 c0                	test   %eax,%eax
c0114136:	74 0d                	je     c0114145 <sfs_reclaim+0x1bc>
c0114138:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011413b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011413e:	8b 40 18             	mov    0x18(%eax),%eax
c0114141:	85 c0                	test   %eax,%eax
c0114143:	75 24                	jne    c0114169 <sfs_reclaim+0x1e0>
c0114145:	c7 44 24 0c 04 9d 11 	movl   $0xc0119d04,0xc(%esp)
c011414c:	c0 
c011414d:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114154:	c0 
c0114155:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c011415c:	00 
c011415d:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114164:	e8 5f cd fe ff       	call   c0100ec8 <__panic>
c0114169:	c7 44 24 04 52 9d 11 	movl   $0xc0119d52,0x4(%esp)
c0114170:	c0 
c0114171:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114174:	89 04 24             	mov    %eax,(%esp)
c0114177:	e8 7a b2 ff ff       	call   c010f3f6 <inode_check>
c011417c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011417f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114182:	8b 40 18             	mov    0x18(%eax),%eax
c0114185:	8b 55 08             	mov    0x8(%ebp),%edx
c0114188:	89 14 24             	mov    %edx,(%esp)
c011418b:	ff d0                	call   *%eax
c011418d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114190:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114194:	74 02                	je     c0114198 <sfs_reclaim+0x20f>
            goto failed_unlock;
c0114196:	eb 7b                	jmp    c0114213 <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c0114198:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011419b:	89 04 24             	mov    %eax,(%esp)
c011419e:	e8 c9 e3 ff ff       	call   c011256c <sfs_remove_links>
    unlock_sfs_fs(sfs);
c01141a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141a6:	89 04 24             	mov    %eax,(%esp)
c01141a9:	e8 f2 09 00 00       	call   c0114ba0 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c01141ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141b1:	8b 00                	mov    (%eax),%eax
c01141b3:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01141b7:	66 85 c0             	test   %ax,%ax
c01141ba:	75 38                	jne    c01141f4 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c01141bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141bf:	8b 40 04             	mov    0x4(%eax),%eax
c01141c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141c9:	89 04 24             	mov    %eax,(%esp)
c01141cc:	e8 2b e5 ff ff       	call   c01126fc <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c01141d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141d4:	8b 00                	mov    (%eax),%eax
c01141d6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01141d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01141dc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01141e0:	74 12                	je     c01141f4 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c01141e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01141e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141ec:	89 04 24             	mov    %eax,(%esp)
c01141ef:	e8 08 e5 ff ff       	call   c01126fc <sfs_block_free>
        }
    }
    kfree(sin->din);
c01141f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141f7:	8b 00                	mov    (%eax),%eax
c01141f9:	89 04 24             	mov    %eax,(%esp)
c01141fc:	e8 11 0b ff ff       	call   c0104d12 <kfree>
    vop_kill(node);
c0114201:	8b 45 08             	mov    0x8(%ebp),%eax
c0114204:	89 04 24             	mov    %eax,(%esp)
c0114207:	e8 5d af ff ff       	call   c010f169 <inode_kill>
    return 0;
c011420c:	b8 00 00 00 00       	mov    $0x0,%eax
c0114211:	eb 0e                	jmp    c0114221 <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0114213:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114216:	89 04 24             	mov    %eax,(%esp)
c0114219:	e8 82 09 00 00       	call   c0114ba0 <unlock_sfs_fs>
    return ret;
c011421e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114221:	c9                   	leave  
c0114222:	c3                   	ret    

c0114223 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0114223:	55                   	push   %ebp
c0114224:	89 e5                	mov    %esp,%ebp
c0114226:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0114229:	8b 45 08             	mov    0x8(%ebp),%eax
c011422c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011422f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114233:	74 0d                	je     c0114242 <sfs_gettype+0x1f>
c0114235:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114238:	8b 40 2c             	mov    0x2c(%eax),%eax
c011423b:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114240:	74 24                	je     c0114266 <sfs_gettype+0x43>
c0114242:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0114249:	c0 
c011424a:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114251:	c0 
c0114252:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
c0114259:	00 
c011425a:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114261:	e8 62 cc fe ff       	call   c0100ec8 <__panic>
c0114266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114269:	8b 00                	mov    (%eax),%eax
c011426b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c011426e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114271:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0114275:	0f b7 c0             	movzwl %ax,%eax
c0114278:	83 f8 02             	cmp    $0x2,%eax
c011427b:	74 0c                	je     c0114289 <sfs_gettype+0x66>
c011427d:	83 f8 03             	cmp    $0x3,%eax
c0114280:	74 27                	je     c01142a9 <sfs_gettype+0x86>
c0114282:	83 f8 01             	cmp    $0x1,%eax
c0114285:	74 12                	je     c0114299 <sfs_gettype+0x76>
c0114287:	eb 30                	jmp    c01142b9 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0114289:	8b 45 0c             	mov    0xc(%ebp),%eax
c011428c:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0114292:	b8 00 00 00 00       	mov    $0x0,%eax
c0114297:	eb 4a                	jmp    c01142e3 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0114299:	8b 45 0c             	mov    0xc(%ebp),%eax
c011429c:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c01142a2:	b8 00 00 00 00       	mov    $0x0,%eax
c01142a7:	eb 3a                	jmp    c01142e3 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c01142a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142ac:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c01142b2:	b8 00 00 00 00       	mov    $0x0,%eax
c01142b7:	eb 2a                	jmp    c01142e3 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c01142b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01142bc:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01142c0:	0f b7 c0             	movzwl %ax,%eax
c01142c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01142c7:	c7 44 24 08 a0 9a 11 	movl   $0xc0119aa0,0x8(%esp)
c01142ce:	c0 
c01142cf:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c01142d6:	00 
c01142d7:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01142de:	e8 e5 cb fe ff       	call   c0100ec8 <__panic>
}
c01142e3:	c9                   	leave  
c01142e4:	c3                   	ret    

c01142e5 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c01142e5:	55                   	push   %ebp
c01142e6:	89 e5                	mov    %esp,%ebp
c01142e8:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c01142eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01142ef:	78 0a                	js     c01142fb <sfs_tryseek+0x16>
c01142f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142f4:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01142f9:	76 0a                	jbe    c0114305 <sfs_tryseek+0x20>
        return -E_INVAL;
c01142fb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114300:	e9 ca 00 00 00       	jmp    c01143cf <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114305:	8b 45 08             	mov    0x8(%ebp),%eax
c0114308:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011430b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011430f:	74 0d                	je     c011431e <sfs_tryseek+0x39>
c0114311:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114314:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114317:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011431c:	74 24                	je     c0114342 <sfs_tryseek+0x5d>
c011431e:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0114325:	c0 
c0114326:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011432d:	c0 
c011432e:	c7 44 24 04 90 03 00 	movl   $0x390,0x4(%esp)
c0114335:	00 
c0114336:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011433d:	e8 86 cb fe ff       	call   c0100ec8 <__panic>
c0114342:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114345:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0114348:	8b 55 0c             	mov    0xc(%ebp),%edx
c011434b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011434e:	8b 00                	mov    (%eax),%eax
c0114350:	8b 00                	mov    (%eax),%eax
c0114352:	39 c2                	cmp    %eax,%edx
c0114354:	76 74                	jbe    c01143ca <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114356:	8b 45 08             	mov    0x8(%ebp),%eax
c0114359:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011435c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114360:	74 17                	je     c0114379 <sfs_tryseek+0x94>
c0114362:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114365:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114368:	85 c0                	test   %eax,%eax
c011436a:	74 0d                	je     c0114379 <sfs_tryseek+0x94>
c011436c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011436f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114372:	8b 40 30             	mov    0x30(%eax),%eax
c0114375:	85 c0                	test   %eax,%eax
c0114377:	75 24                	jne    c011439d <sfs_tryseek+0xb8>
c0114379:	c7 44 24 0c 48 9e 11 	movl   $0xc0119e48,0xc(%esp)
c0114380:	c0 
c0114381:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114388:	c0 
c0114389:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
c0114390:	00 
c0114391:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114398:	e8 2b cb fe ff       	call   c0100ec8 <__panic>
c011439d:	c7 44 24 04 99 9e 11 	movl   $0xc0119e99,0x4(%esp)
c01143a4:	c0 
c01143a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143a8:	89 04 24             	mov    %eax,(%esp)
c01143ab:	e8 46 b0 ff ff       	call   c010f3f6 <inode_check>
c01143b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143b3:	8b 40 3c             	mov    0x3c(%eax),%eax
c01143b6:	8b 40 30             	mov    0x30(%eax),%eax
c01143b9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01143bc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01143c0:	8b 55 08             	mov    0x8(%ebp),%edx
c01143c3:	89 14 24             	mov    %edx,(%esp)
c01143c6:	ff d0                	call   *%eax
c01143c8:	eb 05                	jmp    c01143cf <sfs_tryseek+0xea>
    }
    return 0;
c01143ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01143cf:	c9                   	leave  
c01143d0:	c3                   	ret    

c01143d1 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c01143d1:	55                   	push   %ebp
c01143d2:	89 e5                	mov    %esp,%ebp
c01143d4:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c01143d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01143db:	78 0a                	js     c01143e7 <sfs_truncfile+0x16>
c01143dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01143e0:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01143e5:	76 0a                	jbe    c01143f1 <sfs_truncfile+0x20>
        return -E_INVAL;
c01143e7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01143ec:	e9 d4 01 00 00       	jmp    c01145c5 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01143f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01143f4:	8b 40 38             	mov    0x38(%eax),%eax
c01143f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01143fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01143fe:	74 0a                	je     c011440a <sfs_truncfile+0x39>
c0114400:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114403:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114406:	85 c0                	test   %eax,%eax
c0114408:	74 24                	je     c011442e <sfs_truncfile+0x5d>
c011440a:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c0114411:	c0 
c0114412:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114419:	c0 
c011441a:	c7 44 24 04 9f 03 00 	movl   $0x39f,0x4(%esp)
c0114421:	00 
c0114422:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114429:	e8 9a ca fe ff       	call   c0100ec8 <__panic>
c011442e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114431:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114434:	8b 45 08             	mov    0x8(%ebp),%eax
c0114437:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011443a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011443e:	74 0d                	je     c011444d <sfs_truncfile+0x7c>
c0114440:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114443:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114446:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011444b:	74 24                	je     c0114471 <sfs_truncfile+0xa0>
c011444d:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0114454:	c0 
c0114455:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011445c:	c0 
c011445d:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
c0114464:	00 
c0114465:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011446c:	e8 57 ca fe ff       	call   c0100ec8 <__panic>
c0114471:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114474:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0114477:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011447a:	8b 00                	mov    (%eax),%eax
c011447c:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c011447f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0114486:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c011448d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114490:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114493:	01 d0                	add    %edx,%eax
c0114495:	83 e8 01             	sub    $0x1,%eax
c0114498:	ba 00 00 00 00       	mov    $0x0,%edx
c011449d:	f7 75 d8             	divl   -0x28(%ebp)
c01144a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c01144a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144a6:	8b 10                	mov    (%eax),%edx
c01144a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144ab:	39 c2                	cmp    %eax,%edx
c01144ad:	75 39                	jne    c01144e8 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c01144af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144b2:	8b 40 08             	mov    0x8(%eax),%eax
c01144b5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01144b8:	74 24                	je     c01144de <sfs_truncfile+0x10d>
c01144ba:	c7 44 24 0c a2 9e 11 	movl   $0xc0119ea2,0xc(%esp)
c01144c1:	c0 
c01144c2:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01144c9:	c0 
c01144ca:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c01144d1:	00 
c01144d2:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01144d9:	e8 ea c9 fe ff       	call   c0100ec8 <__panic>
        return 0;
c01144de:	b8 00 00 00 00       	mov    $0x0,%eax
c01144e3:	e9 dd 00 00 00       	jmp    c01145c5 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c01144e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144eb:	89 04 24             	mov    %eax,(%esp)
c01144ee:	e8 09 df ff ff       	call   c01123fc <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c01144f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144f6:	8b 40 08             	mov    0x8(%eax),%eax
c01144f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c01144fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01144ff:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114502:	73 3f                	jae    c0114543 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114504:	eb 33                	jmp    c0114539 <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0114506:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011450d:	00 
c011450e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114511:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114515:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114518:	89 44 24 04          	mov    %eax,0x4(%esp)
c011451c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011451f:	89 04 24             	mov    %eax,(%esp)
c0114522:	e8 ca e9 ff ff       	call   c0112ef1 <sfs_bmap_load_nolock>
c0114527:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011452a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011452e:	74 05                	je     c0114535 <sfs_truncfile+0x164>
                goto out_unlock;
c0114530:	e9 82 00 00 00       	jmp    c01145b7 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0114535:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114539:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011453c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011453f:	75 c5                	jne    c0114506 <sfs_truncfile+0x135>
c0114541:	eb 33                	jmp    c0114576 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0114543:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114546:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114549:	73 2b                	jae    c0114576 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c011454b:	eb 21                	jmp    c011456e <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c011454d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114550:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114554:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114557:	89 04 24             	mov    %eax,(%esp)
c011455a:	e8 7a ea ff ff       	call   c0112fd9 <sfs_bmap_truncate_nolock>
c011455f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114562:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114566:	74 02                	je     c011456a <sfs_truncfile+0x199>
                goto out_unlock;
c0114568:	eb 4d                	jmp    c01145b7 <sfs_truncfile+0x1e6>
            }
            nblks --;
c011456a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c011456e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114571:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114574:	75 d7                	jne    c011454d <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0114576:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114579:	8b 40 08             	mov    0x8(%eax),%eax
c011457c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011457f:	74 24                	je     c01145a5 <sfs_truncfile+0x1d4>
c0114581:	c7 44 24 0c b7 9e 11 	movl   $0xc0119eb7,0xc(%esp)
c0114588:	c0 
c0114589:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114590:	c0 
c0114591:	c7 44 24 04 c0 03 00 	movl   $0x3c0,0x4(%esp)
c0114598:	00 
c0114599:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c01145a0:	e8 23 c9 fe ff       	call   c0100ec8 <__panic>
    din->size = len;
c01145a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01145a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01145ab:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c01145ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01145b0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c01145b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01145ba:	89 04 24             	mov    %eax,(%esp)
c01145bd:	e8 50 de ff ff       	call   c0112412 <unlock_sin>
    return ret;
c01145c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01145c5:	c9                   	leave  
c01145c6:	c3                   	ret    

c01145c7 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c01145c7:	55                   	push   %ebp
c01145c8:	89 e5                	mov    %esp,%ebp
c01145ca:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01145cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01145d0:	8b 40 38             	mov    0x38(%eax),%eax
c01145d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01145d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01145da:	74 0a                	je     c01145e6 <sfs_lookup+0x1f>
c01145dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01145df:	8b 40 6c             	mov    0x6c(%eax),%eax
c01145e2:	85 c0                	test   %eax,%eax
c01145e4:	74 24                	je     c011460a <sfs_lookup+0x43>
c01145e6:	c7 44 24 0c 74 9d 11 	movl   $0xc0119d74,0xc(%esp)
c01145ed:	c0 
c01145ee:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c01145f5:	c0 
c01145f6:	c7 44 24 04 d0 03 00 	movl   $0x3d0,0x4(%esp)
c01145fd:	00 
c01145fe:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114605:	e8 be c8 fe ff       	call   c0100ec8 <__panic>
c011460a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011460d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c0114610:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114613:	0f b6 00             	movzbl (%eax),%eax
c0114616:	84 c0                	test   %al,%al
c0114618:	74 0a                	je     c0114624 <sfs_lookup+0x5d>
c011461a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011461d:	0f b6 00             	movzbl (%eax),%eax
c0114620:	3c 2f                	cmp    $0x2f,%al
c0114622:	75 24                	jne    c0114648 <sfs_lookup+0x81>
c0114624:	c7 44 24 0c cc 9e 11 	movl   $0xc0119ecc,0xc(%esp)
c011462b:	c0 
c011462c:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c0114633:	c0 
c0114634:	c7 44 24 04 d1 03 00 	movl   $0x3d1,0x4(%esp)
c011463b:	00 
c011463c:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c0114643:	e8 80 c8 fe ff       	call   c0100ec8 <__panic>
    vop_ref_inc(node);
c0114648:	8b 45 08             	mov    0x8(%ebp),%eax
c011464b:	89 04 24             	mov    %eax,(%esp)
c011464e:	e8 9b ab ff ff       	call   c010f1ee <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114653:	8b 45 08             	mov    0x8(%ebp),%eax
c0114656:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114659:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011465d:	74 0d                	je     c011466c <sfs_lookup+0xa5>
c011465f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114662:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114665:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011466a:	74 24                	je     c0114690 <sfs_lookup+0xc9>
c011466c:	c7 44 24 0c 70 9b 11 	movl   $0xc0119b70,0xc(%esp)
c0114673:	c0 
c0114674:	c7 44 24 08 1f 9b 11 	movl   $0xc0119b1f,0x8(%esp)
c011467b:	c0 
c011467c:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
c0114683:	00 
c0114684:	c7 04 24 b7 9a 11 c0 	movl   $0xc0119ab7,(%esp)
c011468b:	e8 38 c8 fe ff       	call   c0100ec8 <__panic>
c0114690:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114693:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c0114696:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114699:	8b 00                	mov    (%eax),%eax
c011469b:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011469f:	66 83 f8 02          	cmp    $0x2,%ax
c01146a3:	74 12                	je     c01146b7 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c01146a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01146a8:	89 04 24             	mov    %eax,(%esp)
c01146ab:	e8 58 ab ff ff       	call   c010f208 <inode_ref_dec>
        return -E_NOTDIR;
c01146b0:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c01146b5:	eb 4e                	jmp    c0114705 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c01146b7:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01146be:	00 
c01146bf:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01146c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01146c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01146c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01146cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01146d7:	89 04 24             	mov    %eax,(%esp)
c01146da:	e8 18 ec ff ff       	call   c01132f7 <sfs_lookup_once>
c01146df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c01146e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01146e5:	89 04 24             	mov    %eax,(%esp)
c01146e8:	e8 1b ab ff ff       	call   c010f208 <inode_ref_dec>
    if (ret != 0) {
c01146ed:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01146f1:	74 05                	je     c01146f8 <sfs_lookup+0x131>
        return ret;
c01146f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01146f6:	eb 0d                	jmp    c0114705 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c01146f8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01146fb:	8b 45 10             	mov    0x10(%ebp),%eax
c01146fe:	89 10                	mov    %edx,(%eax)
    return 0;
c0114700:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114705:	c9                   	leave  
c0114706:	c3                   	ret    

c0114707 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0114707:	55                   	push   %ebp
c0114708:	89 e5                	mov    %esp,%ebp
c011470a:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c011470d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114711:	75 06                	jne    c0114719 <sfs_rwblock_nolock+0x12>
c0114713:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114717:	75 0b                	jne    c0114724 <sfs_rwblock_nolock+0x1d>
c0114719:	8b 45 08             	mov    0x8(%ebp),%eax
c011471c:	8b 40 04             	mov    0x4(%eax),%eax
c011471f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114722:	77 24                	ja     c0114748 <sfs_rwblock_nolock+0x41>
c0114724:	c7 44 24 0c ec 9e 11 	movl   $0xc0119eec,0xc(%esp)
c011472b:	c0 
c011472c:	c7 44 24 08 20 9f 11 	movl   $0xc0119f20,0x8(%esp)
c0114733:	c0 
c0114734:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011473b:	00 
c011473c:	c7 04 24 35 9f 11 c0 	movl   $0xc0119f35,(%esp)
c0114743:	e8 80 c7 fe ff       	call   c0100ec8 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114748:	8b 45 10             	mov    0x10(%ebp),%eax
c011474b:	c1 e0 0c             	shl    $0xc,%eax
c011474e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114752:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114759:	00 
c011475a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011475d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114761:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0114764:	89 04 24             	mov    %eax,(%esp)
c0114767:	e8 3a 6c ff ff       	call   c010b3a6 <iobuf_init>
c011476c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c011476f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114772:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114775:	8b 40 10             	mov    0x10(%eax),%eax
c0114778:	8b 55 08             	mov    0x8(%ebp),%edx
c011477b:	8b 52 2c             	mov    0x2c(%edx),%edx
c011477e:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0114781:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0114785:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0114788:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011478c:	89 14 24             	mov    %edx,(%esp)
c011478f:	ff d0                	call   *%eax
}
c0114791:	c9                   	leave  
c0114792:	c3                   	ret    

c0114793 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0114793:	55                   	push   %ebp
c0114794:	89 e5                	mov    %esp,%ebp
c0114796:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0114799:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01147a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01147a3:	89 04 24             	mov    %eax,(%esp)
c01147a6:	e8 df 03 00 00       	call   c0114b8a <lock_sfs_io>
    {
        while (nblks != 0) {
c01147ab:	eb 42                	jmp    c01147ef <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c01147ad:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01147b4:	00 
c01147b5:	8b 45 18             	mov    0x18(%ebp),%eax
c01147b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01147bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01147bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01147c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01147c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01147cd:	89 04 24             	mov    %eax,(%esp)
c01147d0:	e8 32 ff ff ff       	call   c0114707 <sfs_rwblock_nolock>
c01147d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01147d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01147dc:	74 02                	je     c01147e0 <sfs_rwblock+0x4d>
                break;
c01147de:	eb 15                	jmp    c01147f5 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c01147e0:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01147e4:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c01147e8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c01147ef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01147f3:	75 b8                	jne    c01147ad <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c01147f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01147f8:	89 04 24             	mov    %eax,(%esp)
c01147fb:	e8 b6 03 00 00       	call   c0114bb6 <unlock_sfs_io>
    return ret;
c0114800:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114803:	c9                   	leave  
c0114804:	c3                   	ret    

c0114805 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114805:	55                   	push   %ebp
c0114806:	89 e5                	mov    %esp,%ebp
c0114808:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c011480b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114812:	00 
c0114813:	8b 45 14             	mov    0x14(%ebp),%eax
c0114816:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011481a:	8b 45 10             	mov    0x10(%ebp),%eax
c011481d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114821:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114824:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114828:	8b 45 08             	mov    0x8(%ebp),%eax
c011482b:	89 04 24             	mov    %eax,(%esp)
c011482e:	e8 60 ff ff ff       	call   c0114793 <sfs_rwblock>
}
c0114833:	c9                   	leave  
c0114834:	c3                   	ret    

c0114835 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114835:	55                   	push   %ebp
c0114836:	89 e5                	mov    %esp,%ebp
c0114838:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c011483b:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114842:	00 
c0114843:	8b 45 14             	mov    0x14(%ebp),%eax
c0114846:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011484a:	8b 45 10             	mov    0x10(%ebp),%eax
c011484d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114851:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114854:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114858:	8b 45 08             	mov    0x8(%ebp),%eax
c011485b:	89 04 24             	mov    %eax,(%esp)
c011485e:	e8 30 ff ff ff       	call   c0114793 <sfs_rwblock>
}
c0114863:	c9                   	leave  
c0114864:	c3                   	ret    

c0114865 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114865:	55                   	push   %ebp
c0114866:	89 e5                	mov    %esp,%ebp
c0114868:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011486b:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011486f:	78 18                	js     c0114889 <sfs_rbuf+0x24>
c0114871:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114878:	7f 0f                	jg     c0114889 <sfs_rbuf+0x24>
c011487a:	8b 55 18             	mov    0x18(%ebp),%edx
c011487d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114880:	01 d0                	add    %edx,%eax
c0114882:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114887:	76 24                	jbe    c01148ad <sfs_rbuf+0x48>
c0114889:	c7 44 24 0c 4c 9f 11 	movl   $0xc0119f4c,0xc(%esp)
c0114890:	c0 
c0114891:	c7 44 24 08 20 9f 11 	movl   $0xc0119f20,0x8(%esp)
c0114898:	c0 
c0114899:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01148a0:	00 
c01148a1:	c7 04 24 35 9f 11 c0 	movl   $0xc0119f35,(%esp)
c01148a8:	e8 1b c6 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01148ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01148b0:	89 04 24             	mov    %eax,(%esp)
c01148b3:	e8 d2 02 00 00       	call   c0114b8a <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01148b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01148bb:	8b 40 38             	mov    0x38(%eax),%eax
c01148be:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01148c5:	00 
c01148c6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01148cd:	00 
c01148ce:	8b 55 14             	mov    0x14(%ebp),%edx
c01148d1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01148d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01148d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01148dc:	89 04 24             	mov    %eax,(%esp)
c01148df:	e8 23 fe ff ff       	call   c0114707 <sfs_rwblock_nolock>
c01148e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01148e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01148eb:	75 21                	jne    c011490e <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01148ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01148f0:	8b 50 38             	mov    0x38(%eax),%edx
c01148f3:	8b 45 18             	mov    0x18(%ebp),%eax
c01148f6:	01 c2                	add    %eax,%edx
c01148f8:	8b 45 10             	mov    0x10(%ebp),%eax
c01148fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01148ff:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114903:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114906:	89 04 24             	mov    %eax,(%esp)
c0114909:	e8 fa 0e 00 00       	call   c0115808 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c011490e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114911:	89 04 24             	mov    %eax,(%esp)
c0114914:	e8 9d 02 00 00       	call   c0114bb6 <unlock_sfs_io>
    return ret;
c0114919:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011491c:	c9                   	leave  
c011491d:	c3                   	ret    

c011491e <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c011491e:	55                   	push   %ebp
c011491f:	89 e5                	mov    %esp,%ebp
c0114921:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114924:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114928:	78 18                	js     c0114942 <sfs_wbuf+0x24>
c011492a:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114931:	7f 0f                	jg     c0114942 <sfs_wbuf+0x24>
c0114933:	8b 55 18             	mov    0x18(%ebp),%edx
c0114936:	8b 45 10             	mov    0x10(%ebp),%eax
c0114939:	01 d0                	add    %edx,%eax
c011493b:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114940:	76 24                	jbe    c0114966 <sfs_wbuf+0x48>
c0114942:	c7 44 24 0c 4c 9f 11 	movl   $0xc0119f4c,0xc(%esp)
c0114949:	c0 
c011494a:	c7 44 24 08 20 9f 11 	movl   $0xc0119f20,0x8(%esp)
c0114951:	c0 
c0114952:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114959:	00 
c011495a:	c7 04 24 35 9f 11 c0 	movl   $0xc0119f35,(%esp)
c0114961:	e8 62 c5 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114966:	8b 45 08             	mov    0x8(%ebp),%eax
c0114969:	89 04 24             	mov    %eax,(%esp)
c011496c:	e8 19 02 00 00       	call   c0114b8a <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0114971:	8b 45 08             	mov    0x8(%ebp),%eax
c0114974:	8b 40 38             	mov    0x38(%eax),%eax
c0114977:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011497e:	00 
c011497f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114986:	00 
c0114987:	8b 55 14             	mov    0x14(%ebp),%edx
c011498a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011498e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114992:	8b 45 08             	mov    0x8(%ebp),%eax
c0114995:	89 04 24             	mov    %eax,(%esp)
c0114998:	e8 6a fd ff ff       	call   c0114707 <sfs_rwblock_nolock>
c011499d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01149a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01149a4:	75 50                	jne    c01149f6 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01149a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149a9:	8b 50 38             	mov    0x38(%eax),%edx
c01149ac:	8b 45 18             	mov    0x18(%ebp),%eax
c01149af:	01 c2                	add    %eax,%edx
c01149b1:	8b 45 10             	mov    0x10(%ebp),%eax
c01149b4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149bf:	89 14 24             	mov    %edx,(%esp)
c01149c2:	e8 41 0e 00 00       	call   c0115808 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c01149c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01149ca:	8b 40 38             	mov    0x38(%eax),%eax
c01149cd:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01149d4:	00 
c01149d5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01149dc:	00 
c01149dd:	8b 55 14             	mov    0x14(%ebp),%edx
c01149e0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01149e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01149eb:	89 04 24             	mov    %eax,(%esp)
c01149ee:	e8 14 fd ff ff       	call   c0114707 <sfs_rwblock_nolock>
c01149f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c01149f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01149f9:	89 04 24             	mov    %eax,(%esp)
c01149fc:	e8 b5 01 00 00       	call   c0114bb6 <unlock_sfs_io>
    return ret;
c0114a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114a04:	c9                   	leave  
c0114a05:	c3                   	ret    

c0114a06 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0114a06:	55                   	push   %ebp
c0114a07:	89 e5                	mov    %esp,%ebp
c0114a09:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a0f:	89 04 24             	mov    %eax,(%esp)
c0114a12:	e8 73 01 00 00       	call   c0114b8a <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a1a:	8b 40 38             	mov    0x38(%eax),%eax
c0114a1d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114a24:	00 
c0114a25:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114a2c:	00 
c0114a2d:	89 04 24             	mov    %eax,(%esp)
c0114a30:	e8 f1 0c 00 00       	call   c0115726 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114a35:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a3b:	8b 40 38             	mov    0x38(%eax),%eax
c0114a3e:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114a45:	00 
c0114a46:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114a4a:	89 04 24             	mov    %eax,(%esp)
c0114a4d:	e8 b6 0d 00 00       	call   c0115808 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0114a52:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a55:	8b 40 38             	mov    0x38(%eax),%eax
c0114a58:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114a5f:	00 
c0114a60:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114a67:	00 
c0114a68:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114a6f:	00 
c0114a70:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a74:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a77:	89 04 24             	mov    %eax,(%esp)
c0114a7a:	e8 88 fc ff ff       	call   c0114707 <sfs_rwblock_nolock>
c0114a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0114a82:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a85:	89 04 24             	mov    %eax,(%esp)
c0114a88:	e8 29 01 00 00       	call   c0114bb6 <unlock_sfs_io>
    return ret;
c0114a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114a90:	c9                   	leave  
c0114a91:	c3                   	ret    

c0114a92 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0114a92:	55                   	push   %ebp
c0114a93:	89 e5                	mov    %esp,%ebp
c0114a95:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0114a98:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0114a9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aa2:	8b 50 04             	mov    0x4(%eax),%edx
c0114aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114aa8:	01 d0                	add    %edx,%eax
c0114aaa:	83 e8 01             	sub    $0x1,%eax
c0114aad:	ba 00 00 00 00       	mov    $0x0,%edx
c0114ab2:	f7 75 f4             	divl   -0xc(%ebp)
c0114ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0114ab8:	8b 45 08             	mov    0x8(%ebp),%eax
c0114abb:	8b 40 30             	mov    0x30(%eax),%eax
c0114abe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114ac5:	00 
c0114ac6:	89 04 24             	mov    %eax,(%esp)
c0114ac9:	e8 fd cf ff ff       	call   c0111acb <bitmap_getdata>
c0114ace:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114ad1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0114ad5:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0114adc:	00 
c0114add:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ae4:	89 04 24             	mov    %eax,(%esp)
c0114ae7:	e8 49 fd ff ff       	call   c0114835 <sfs_wblock>
}
c0114aec:	c9                   	leave  
c0114aed:	c3                   	ret    

c0114aee <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0114aee:	55                   	push   %ebp
c0114aef:	89 e5                	mov    %esp,%ebp
c0114af1:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114af7:	89 04 24             	mov    %eax,(%esp)
c0114afa:	e8 8b 00 00 00       	call   c0114b8a <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b02:	8b 40 38             	mov    0x38(%eax),%eax
c0114b05:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114b0c:	00 
c0114b0d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114b14:	00 
c0114b15:	89 04 24             	mov    %eax,(%esp)
c0114b18:	e8 09 0c 00 00       	call   c0115726 <memset>
        while (nblks != 0) {
c0114b1d:	eb 3f                	jmp    c0114b5e <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0114b1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b22:	8b 40 38             	mov    0x38(%eax),%eax
c0114b25:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114b2c:	00 
c0114b2d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114b34:	00 
c0114b35:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114b38:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b43:	89 04 24             	mov    %eax,(%esp)
c0114b46:	e8 bc fb ff ff       	call   c0114707 <sfs_rwblock_nolock>
c0114b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114b4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114b52:	74 02                	je     c0114b56 <sfs_clear_block+0x68>
                break;
c0114b54:	eb 0e                	jmp    c0114b64 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0114b56:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114b5a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0114b5e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114b62:	75 bb                	jne    c0114b1f <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114b64:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b67:	89 04 24             	mov    %eax,(%esp)
c0114b6a:	e8 47 00 00 00       	call   c0114bb6 <unlock_sfs_io>
    return ret;
c0114b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114b72:	c9                   	leave  
c0114b73:	c3                   	ret    

c0114b74 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114b74:	55                   	push   %ebp
c0114b75:	89 e5                	mov    %esp,%ebp
c0114b77:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b7d:	83 c0 3c             	add    $0x3c,%eax
c0114b80:	89 04 24             	mov    %eax,(%esp)
c0114b83:	e8 8f 51 ff ff       	call   c0109d17 <down>
}
c0114b88:	c9                   	leave  
c0114b89:	c3                   	ret    

c0114b8a <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0114b8a:	55                   	push   %ebp
c0114b8b:	89 e5                	mov    %esp,%ebp
c0114b8d:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0114b90:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b93:	83 c0 48             	add    $0x48,%eax
c0114b96:	89 04 24             	mov    %eax,(%esp)
c0114b99:	e8 79 51 ff ff       	call   c0109d17 <down>
}
c0114b9e:	c9                   	leave  
c0114b9f:	c3                   	ret    

c0114ba0 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0114ba0:	55                   	push   %ebp
c0114ba1:	89 e5                	mov    %esp,%ebp
c0114ba3:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c0114ba6:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ba9:	83 c0 3c             	add    $0x3c,%eax
c0114bac:	89 04 24             	mov    %eax,(%esp)
c0114baf:	e8 48 51 ff ff       	call   c0109cfc <up>
}
c0114bb4:	c9                   	leave  
c0114bb5:	c3                   	ret    

c0114bb6 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0114bb6:	55                   	push   %ebp
c0114bb7:	89 e5                	mov    %esp,%ebp
c0114bb9:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c0114bbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bbf:	83 c0 48             	add    $0x48,%eax
c0114bc2:	89 04 24             	mov    %eax,(%esp)
c0114bc5:	e8 32 51 ff ff       	call   c0109cfc <up>
}
c0114bca:	c9                   	leave  
c0114bcb:	c3                   	ret    

c0114bcc <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c0114bcc:	55                   	push   %ebp
c0114bcd:	89 e5                	mov    %esp,%ebp
c0114bcf:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0114bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bd5:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c0114bdb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c0114bde:	b8 20 00 00 00       	mov    $0x20,%eax
c0114be3:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114be6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0114be9:	89 c1                	mov    %eax,%ecx
c0114beb:	d3 ea                	shr    %cl,%edx
c0114bed:	89 d0                	mov    %edx,%eax
}
c0114bef:	c9                   	leave  
c0114bf0:	c3                   	ret    

c0114bf1 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0114bf1:	55                   	push   %ebp
c0114bf2:	89 e5                	mov    %esp,%ebp
c0114bf4:	83 ec 58             	sub    $0x58,%esp
c0114bf7:	8b 45 14             	mov    0x14(%ebp),%eax
c0114bfa:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114bfd:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c00:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0114c03:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114c06:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114c09:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114c0c:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114c0f:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114c15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114c18:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114c1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114c1e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0114c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114c27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114c2b:	74 1c                	je     c0114c49 <printnum+0x58>
c0114c2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c30:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c35:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c38:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114c3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c3e:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c43:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114c49:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114c4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114c4f:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c52:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114c55:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0114c58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114c5b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114c5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114c61:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114c64:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114c67:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114c6a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c6d:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c72:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114c75:	77 64                	ja     c0114cdb <printnum+0xea>
c0114c77:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114c7a:	72 05                	jb     c0114c81 <printnum+0x90>
c0114c7c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114c7f:	77 5a                	ja     c0114cdb <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0114c81:	8b 45 20             	mov    0x20(%ebp),%eax
c0114c84:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114c87:	8b 45 24             	mov    0x24(%ebp),%eax
c0114c8a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114c8e:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114c92:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c95:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114c99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114c9c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114c9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114ca3:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114ca7:	8b 45 10             	mov    0x10(%ebp),%eax
c0114caa:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cb8:	89 04 24             	mov    %eax,(%esp)
c0114cbb:	e8 31 ff ff ff       	call   c0114bf1 <printnum>
c0114cc0:	eb 23                	jmp    c0114ce5 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cc5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cc9:	8b 45 10             	mov    0x10(%ebp),%eax
c0114ccc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cd0:	8b 45 24             	mov    0x24(%ebp),%eax
c0114cd3:	89 04 24             	mov    %eax,(%esp)
c0114cd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cd9:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0114cdb:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0114cdf:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0114ce3:	7f dd                	jg     c0114cc2 <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0114ce5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114ce8:	05 a4 a1 11 c0       	add    $0xc011a1a4,%eax
c0114ced:	0f b6 00             	movzbl (%eax),%eax
c0114cf0:	0f be c0             	movsbl %al,%eax
c0114cf3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114cf6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114cfa:	8b 55 10             	mov    0x10(%ebp),%edx
c0114cfd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114d01:	89 04 24             	mov    %eax,(%esp)
c0114d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d07:	ff d0                	call   *%eax
}
c0114d09:	c9                   	leave  
c0114d0a:	c3                   	ret    

c0114d0b <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114d0b:	55                   	push   %ebp
c0114d0c:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114d0e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114d12:	7e 14                	jle    c0114d28 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114d14:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d17:	8b 00                	mov    (%eax),%eax
c0114d19:	8d 48 08             	lea    0x8(%eax),%ecx
c0114d1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d1f:	89 0a                	mov    %ecx,(%edx)
c0114d21:	8b 50 04             	mov    0x4(%eax),%edx
c0114d24:	8b 00                	mov    (%eax),%eax
c0114d26:	eb 30                	jmp    c0114d58 <getuint+0x4d>
    }
    else if (lflag) {
c0114d28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114d2c:	74 16                	je     c0114d44 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114d2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d31:	8b 00                	mov    (%eax),%eax
c0114d33:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d36:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d39:	89 0a                	mov    %ecx,(%edx)
c0114d3b:	8b 00                	mov    (%eax),%eax
c0114d3d:	ba 00 00 00 00       	mov    $0x0,%edx
c0114d42:	eb 14                	jmp    c0114d58 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114d44:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d47:	8b 00                	mov    (%eax),%eax
c0114d49:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d4c:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d4f:	89 0a                	mov    %ecx,(%edx)
c0114d51:	8b 00                	mov    (%eax),%eax
c0114d53:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114d58:	5d                   	pop    %ebp
c0114d59:	c3                   	ret    

c0114d5a <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114d5a:	55                   	push   %ebp
c0114d5b:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114d5d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114d61:	7e 14                	jle    c0114d77 <getint+0x1d>
        return va_arg(*ap, long long);
c0114d63:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d66:	8b 00                	mov    (%eax),%eax
c0114d68:	8d 48 08             	lea    0x8(%eax),%ecx
c0114d6b:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d6e:	89 0a                	mov    %ecx,(%edx)
c0114d70:	8b 50 04             	mov    0x4(%eax),%edx
c0114d73:	8b 00                	mov    (%eax),%eax
c0114d75:	eb 28                	jmp    c0114d9f <getint+0x45>
    }
    else if (lflag) {
c0114d77:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114d7b:	74 12                	je     c0114d8f <getint+0x35>
        return va_arg(*ap, long);
c0114d7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d80:	8b 00                	mov    (%eax),%eax
c0114d82:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d85:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d88:	89 0a                	mov    %ecx,(%edx)
c0114d8a:	8b 00                	mov    (%eax),%eax
c0114d8c:	99                   	cltd   
c0114d8d:	eb 10                	jmp    c0114d9f <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d92:	8b 00                	mov    (%eax),%eax
c0114d94:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d97:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d9a:	89 0a                	mov    %ecx,(%edx)
c0114d9c:	8b 00                	mov    (%eax),%eax
c0114d9e:	99                   	cltd   
    }
}
c0114d9f:	5d                   	pop    %ebp
c0114da0:	c3                   	ret    

c0114da1 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114da1:	55                   	push   %ebp
c0114da2:	89 e5                	mov    %esp,%ebp
c0114da4:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114da7:	8d 45 18             	lea    0x18(%ebp),%eax
c0114daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114dad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114db0:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114db4:	8b 45 14             	mov    0x14(%ebp),%eax
c0114db7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114dbb:	8b 45 10             	mov    0x10(%ebp),%eax
c0114dbe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114dc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114dc5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dcc:	89 04 24             	mov    %eax,(%esp)
c0114dcf:	e8 02 00 00 00       	call   c0114dd6 <vprintfmt>
    va_end(ap);
}
c0114dd4:	c9                   	leave  
c0114dd5:	c3                   	ret    

c0114dd6 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114dd6:	55                   	push   %ebp
c0114dd7:	89 e5                	mov    %esp,%ebp
c0114dd9:	56                   	push   %esi
c0114dda:	53                   	push   %ebx
c0114ddb:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114dde:	eb 1f                	jmp    c0114dff <vprintfmt+0x29>
            if (ch == '\0') {
c0114de0:	85 db                	test   %ebx,%ebx
c0114de2:	75 05                	jne    c0114de9 <vprintfmt+0x13>
                return;
c0114de4:	e9 33 04 00 00       	jmp    c011521c <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114de9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114dec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114df0:	8b 45 10             	mov    0x10(%ebp),%eax
c0114df3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114df7:	89 1c 24             	mov    %ebx,(%esp)
c0114dfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dfd:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114dff:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e02:	8d 50 01             	lea    0x1(%eax),%edx
c0114e05:	89 55 14             	mov    %edx,0x14(%ebp)
c0114e08:	0f b6 00             	movzbl (%eax),%eax
c0114e0b:	0f b6 d8             	movzbl %al,%ebx
c0114e0e:	83 fb 25             	cmp    $0x25,%ebx
c0114e11:	75 cd                	jne    c0114de0 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114e13:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114e17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114e1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114e21:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114e24:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114e2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114e2e:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114e31:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e34:	8d 50 01             	lea    0x1(%eax),%edx
c0114e37:	89 55 14             	mov    %edx,0x14(%ebp)
c0114e3a:	0f b6 00             	movzbl (%eax),%eax
c0114e3d:	0f b6 d8             	movzbl %al,%ebx
c0114e40:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114e43:	83 f8 55             	cmp    $0x55,%eax
c0114e46:	0f 87 98 03 00 00    	ja     c01151e4 <vprintfmt+0x40e>
c0114e4c:	8b 04 85 c8 a1 11 c0 	mov    -0x3fee5e38(,%eax,4),%eax
c0114e53:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114e55:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114e59:	eb d6                	jmp    c0114e31 <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114e5b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114e5f:	eb d0                	jmp    c0114e31 <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114e61:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114e68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114e6b:	89 d0                	mov    %edx,%eax
c0114e6d:	c1 e0 02             	shl    $0x2,%eax
c0114e70:	01 d0                	add    %edx,%eax
c0114e72:	01 c0                	add    %eax,%eax
c0114e74:	01 d8                	add    %ebx,%eax
c0114e76:	83 e8 30             	sub    $0x30,%eax
c0114e79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114e7c:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e7f:	0f b6 00             	movzbl (%eax),%eax
c0114e82:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114e85:	83 fb 2f             	cmp    $0x2f,%ebx
c0114e88:	7e 0b                	jle    c0114e95 <vprintfmt+0xbf>
c0114e8a:	83 fb 39             	cmp    $0x39,%ebx
c0114e8d:	7f 06                	jg     c0114e95 <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114e8f:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114e93:	eb d3                	jmp    c0114e68 <vprintfmt+0x92>
            goto process_precision;
c0114e95:	eb 33                	jmp    c0114eca <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114e97:	8b 45 18             	mov    0x18(%ebp),%eax
c0114e9a:	8d 50 04             	lea    0x4(%eax),%edx
c0114e9d:	89 55 18             	mov    %edx,0x18(%ebp)
c0114ea0:	8b 00                	mov    (%eax),%eax
c0114ea2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114ea5:	eb 23                	jmp    c0114eca <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114ea7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114eab:	79 0c                	jns    c0114eb9 <vprintfmt+0xe3>
                width = 0;
c0114ead:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114eb4:	e9 78 ff ff ff       	jmp    c0114e31 <vprintfmt+0x5b>
c0114eb9:	e9 73 ff ff ff       	jmp    c0114e31 <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114ebe:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114ec5:	e9 67 ff ff ff       	jmp    c0114e31 <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ece:	79 12                	jns    c0114ee2 <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114ed0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114ed3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114ed6:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114edd:	e9 4f ff ff ff       	jmp    c0114e31 <vprintfmt+0x5b>
c0114ee2:	e9 4a ff ff ff       	jmp    c0114e31 <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114ee7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114eeb:	e9 41 ff ff ff       	jmp    c0114e31 <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114ef0:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ef3:	8d 50 04             	lea    0x4(%eax),%edx
c0114ef6:	89 55 18             	mov    %edx,0x18(%ebp)
c0114ef9:	8b 00                	mov    (%eax),%eax
c0114efb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114efe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114f02:	8b 55 10             	mov    0x10(%ebp),%edx
c0114f05:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114f09:	89 04 24             	mov    %eax,(%esp)
c0114f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f0f:	ff d0                	call   *%eax
            break;
c0114f11:	e9 00 03 00 00       	jmp    c0115216 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114f16:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f19:	8d 50 04             	lea    0x4(%eax),%edx
c0114f1c:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f1f:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114f21:	85 db                	test   %ebx,%ebx
c0114f23:	79 02                	jns    c0114f27 <vprintfmt+0x151>
                err = -err;
c0114f25:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114f27:	83 fb 18             	cmp    $0x18,%ebx
c0114f2a:	7f 0b                	jg     c0114f37 <vprintfmt+0x161>
c0114f2c:	8b 34 9d 40 a1 11 c0 	mov    -0x3fee5ec0(,%ebx,4),%esi
c0114f33:	85 f6                	test   %esi,%esi
c0114f35:	75 2a                	jne    c0114f61 <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114f37:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114f3b:	c7 44 24 0c b5 a1 11 	movl   $0xc011a1b5,0xc(%esp)
c0114f42:	c0 
c0114f43:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f46:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f54:	89 04 24             	mov    %eax,(%esp)
c0114f57:	e8 45 fe ff ff       	call   c0114da1 <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114f5c:	e9 b5 02 00 00       	jmp    c0115216 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114f61:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114f65:	c7 44 24 0c be a1 11 	movl   $0xc011a1be,0xc(%esp)
c0114f6c:	c0 
c0114f6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f7e:	89 04 24             	mov    %eax,(%esp)
c0114f81:	e8 1b fe ff ff       	call   c0114da1 <printfmt>
            }
            break;
c0114f86:	e9 8b 02 00 00       	jmp    c0115216 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114f8b:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f8e:	8d 50 04             	lea    0x4(%eax),%edx
c0114f91:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f94:	8b 30                	mov    (%eax),%esi
c0114f96:	85 f6                	test   %esi,%esi
c0114f98:	75 05                	jne    c0114f9f <vprintfmt+0x1c9>
                p = "(null)";
c0114f9a:	be c1 a1 11 c0       	mov    $0xc011a1c1,%esi
            }
            if (width > 0 && padc != '-') {
c0114f9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114fa3:	7e 45                	jle    c0114fea <vprintfmt+0x214>
c0114fa5:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114fa9:	74 3f                	je     c0114fea <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114fab:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114fae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114fb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fb5:	89 34 24             	mov    %esi,(%esp)
c0114fb8:	e8 3b 04 00 00       	call   c01153f8 <strnlen>
c0114fbd:	29 c3                	sub    %eax,%ebx
c0114fbf:	89 d8                	mov    %ebx,%eax
c0114fc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114fc4:	eb 1e                	jmp    c0114fe4 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114fc6:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114fca:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114fcd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114fd1:	8b 55 10             	mov    0x10(%ebp),%edx
c0114fd4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114fd8:	89 04 24             	mov    %eax,(%esp)
c0114fdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fde:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114fe0:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114fe4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114fe8:	7f dc                	jg     c0114fc6 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114fea:	eb 46                	jmp    c0115032 <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114fec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114ff0:	74 26                	je     c0115018 <vprintfmt+0x242>
c0114ff2:	83 fb 1f             	cmp    $0x1f,%ebx
c0114ff5:	7e 05                	jle    c0114ffc <vprintfmt+0x226>
c0114ff7:	83 fb 7e             	cmp    $0x7e,%ebx
c0114ffa:	7e 1c                	jle    c0115018 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115003:	8b 45 10             	mov    0x10(%ebp),%eax
c0115006:	89 44 24 04          	mov    %eax,0x4(%esp)
c011500a:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0115011:	8b 45 08             	mov    0x8(%ebp),%eax
c0115014:	ff d0                	call   *%eax
c0115016:	eb 16                	jmp    c011502e <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0115018:	8b 45 0c             	mov    0xc(%ebp),%eax
c011501b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011501f:	8b 45 10             	mov    0x10(%ebp),%eax
c0115022:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115026:	89 1c 24             	mov    %ebx,(%esp)
c0115029:	8b 45 08             	mov    0x8(%ebp),%eax
c011502c:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c011502e:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0115032:	89 f0                	mov    %esi,%eax
c0115034:	8d 70 01             	lea    0x1(%eax),%esi
c0115037:	0f b6 00             	movzbl (%eax),%eax
c011503a:	0f be d8             	movsbl %al,%ebx
c011503d:	85 db                	test   %ebx,%ebx
c011503f:	74 10                	je     c0115051 <vprintfmt+0x27b>
c0115041:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0115045:	78 a5                	js     c0114fec <vprintfmt+0x216>
c0115047:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c011504b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011504f:	79 9b                	jns    c0114fec <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0115051:	eb 1e                	jmp    c0115071 <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0115053:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115056:	89 44 24 08          	mov    %eax,0x8(%esp)
c011505a:	8b 45 10             	mov    0x10(%ebp),%eax
c011505d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115061:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0115068:	8b 45 08             	mov    0x8(%ebp),%eax
c011506b:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c011506d:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0115071:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115075:	7f dc                	jg     c0115053 <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0115077:	e9 9a 01 00 00       	jmp    c0115216 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c011507c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011507f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115083:	8d 45 18             	lea    0x18(%ebp),%eax
c0115086:	89 04 24             	mov    %eax,(%esp)
c0115089:	e8 cc fc ff ff       	call   c0114d5a <getint>
c011508e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115091:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0115094:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115097:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011509a:	85 d2                	test   %edx,%edx
c011509c:	79 2d                	jns    c01150cb <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c011509e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01150a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150ac:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c01150b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01150b6:	ff d0                	call   *%eax
                num = -(long long)num;
c01150b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01150be:	f7 d8                	neg    %eax
c01150c0:	83 d2 00             	adc    $0x0,%edx
c01150c3:	f7 da                	neg    %edx
c01150c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c01150cb:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01150d2:	e9 b6 00 00 00       	jmp    c011518d <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c01150d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01150da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150de:	8d 45 18             	lea    0x18(%ebp),%eax
c01150e1:	89 04 24             	mov    %eax,(%esp)
c01150e4:	e8 22 fc ff ff       	call   c0114d0b <getuint>
c01150e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150ec:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c01150ef:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01150f6:	e9 92 00 00 00       	jmp    c011518d <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c01150fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01150fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115102:	8d 45 18             	lea    0x18(%ebp),%eax
c0115105:	89 04 24             	mov    %eax,(%esp)
c0115108:	e8 fe fb ff ff       	call   c0114d0b <getuint>
c011510d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115110:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0115113:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c011511a:	eb 71                	jmp    c011518d <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c011511c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011511f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115123:	8b 45 10             	mov    0x10(%ebp),%eax
c0115126:	89 44 24 04          	mov    %eax,0x4(%esp)
c011512a:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0115131:	8b 45 08             	mov    0x8(%ebp),%eax
c0115134:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0115136:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115139:	89 44 24 08          	mov    %eax,0x8(%esp)
c011513d:	8b 45 10             	mov    0x10(%ebp),%eax
c0115140:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115144:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c011514b:	8b 45 08             	mov    0x8(%ebp),%eax
c011514e:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0115150:	8b 45 18             	mov    0x18(%ebp),%eax
c0115153:	8d 50 04             	lea    0x4(%eax),%edx
c0115156:	89 55 18             	mov    %edx,0x18(%ebp)
c0115159:	8b 00                	mov    (%eax),%eax
c011515b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011515e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0115165:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c011516c:	eb 1f                	jmp    c011518d <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c011516e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115171:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115175:	8d 45 18             	lea    0x18(%ebp),%eax
c0115178:	89 04 24             	mov    %eax,(%esp)
c011517b:	e8 8b fb ff ff       	call   c0114d0b <getuint>
c0115180:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115183:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0115186:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c011518d:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0115191:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115194:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0115198:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011519b:	89 54 24 18          	mov    %edx,0x18(%esp)
c011519f:	89 44 24 14          	mov    %eax,0x14(%esp)
c01151a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01151a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01151ad:	89 54 24 10          	mov    %edx,0x10(%esp)
c01151b1:	8b 45 10             	mov    0x10(%ebp),%eax
c01151b4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01151c2:	89 04 24             	mov    %eax,(%esp)
c01151c5:	e8 27 fa ff ff       	call   c0114bf1 <printnum>
            break;
c01151ca:	eb 4a                	jmp    c0115216 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c01151cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01151d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151da:	89 1c 24             	mov    %ebx,(%esp)
c01151dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01151e0:	ff d0                	call   *%eax
            break;
c01151e2:	eb 32                	jmp    c0115216 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c01151e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151e7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151eb:	8b 45 10             	mov    0x10(%ebp),%eax
c01151ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151f2:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c01151f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01151fc:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c01151fe:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115202:	eb 04                	jmp    c0115208 <vprintfmt+0x432>
c0115204:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115208:	8b 45 14             	mov    0x14(%ebp),%eax
c011520b:	83 e8 01             	sub    $0x1,%eax
c011520e:	0f b6 00             	movzbl (%eax),%eax
c0115211:	3c 25                	cmp    $0x25,%al
c0115213:	75 ef                	jne    c0115204 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0115215:	90                   	nop
        }
    }
c0115216:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0115217:	e9 e3 fb ff ff       	jmp    c0114dff <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c011521c:	83 c4 40             	add    $0x40,%esp
c011521f:	5b                   	pop    %ebx
c0115220:	5e                   	pop    %esi
c0115221:	5d                   	pop    %ebp
c0115222:	c3                   	ret    

c0115223 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0115223:	55                   	push   %ebp
c0115224:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0115226:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115229:	8b 40 08             	mov    0x8(%eax),%eax
c011522c:	8d 50 01             	lea    0x1(%eax),%edx
c011522f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115232:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0115235:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115238:	8b 10                	mov    (%eax),%edx
c011523a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011523d:	8b 40 04             	mov    0x4(%eax),%eax
c0115240:	39 c2                	cmp    %eax,%edx
c0115242:	73 12                	jae    c0115256 <sprintputch+0x33>
        *b->buf ++ = ch;
c0115244:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115247:	8b 00                	mov    (%eax),%eax
c0115249:	8d 48 01             	lea    0x1(%eax),%ecx
c011524c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011524f:	89 0a                	mov    %ecx,(%edx)
c0115251:	8b 55 08             	mov    0x8(%ebp),%edx
c0115254:	88 10                	mov    %dl,(%eax)
    }
}
c0115256:	5d                   	pop    %ebp
c0115257:	c3                   	ret    

c0115258 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0115258:	55                   	push   %ebp
c0115259:	89 e5                	mov    %esp,%ebp
c011525b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c011525e:	8d 45 14             	lea    0x14(%ebp),%eax
c0115261:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0115264:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115267:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011526b:	8b 45 10             	mov    0x10(%ebp),%eax
c011526e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115272:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115275:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115279:	8b 45 08             	mov    0x8(%ebp),%eax
c011527c:	89 04 24             	mov    %eax,(%esp)
c011527f:	e8 08 00 00 00       	call   c011528c <vsnprintf>
c0115284:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0115287:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011528a:	c9                   	leave  
c011528b:	c3                   	ret    

c011528c <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c011528c:	55                   	push   %ebp
c011528d:	89 e5                	mov    %esp,%ebp
c011528f:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0115292:	8b 45 08             	mov    0x8(%ebp),%eax
c0115295:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115298:	8b 45 0c             	mov    0xc(%ebp),%eax
c011529b:	8d 50 ff             	lea    -0x1(%eax),%edx
c011529e:	8b 45 08             	mov    0x8(%ebp),%eax
c01152a1:	01 d0                	add    %edx,%eax
c01152a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01152a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01152ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01152b1:	74 0a                	je     c01152bd <vsnprintf+0x31>
c01152b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01152b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01152b9:	39 c2                	cmp    %eax,%edx
c01152bb:	76 07                	jbe    c01152c4 <vsnprintf+0x38>
        return -E_INVAL;
c01152bd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01152c2:	eb 32                	jmp    c01152f6 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c01152c4:	8b 45 14             	mov    0x14(%ebp),%eax
c01152c7:	89 44 24 10          	mov    %eax,0x10(%esp)
c01152cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01152ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01152d2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01152d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01152d9:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c01152e0:	ff 
c01152e1:	c7 04 24 23 52 11 c0 	movl   $0xc0115223,(%esp)
c01152e8:	e8 e9 fa ff ff       	call   c0114dd6 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c01152ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01152f0:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c01152f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01152f6:	c9                   	leave  
c01152f7:	c3                   	ret    

c01152f8 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c01152f8:	55                   	push   %ebp
c01152f9:	89 e5                	mov    %esp,%ebp
c01152fb:	57                   	push   %edi
c01152fc:	56                   	push   %esi
c01152fd:	53                   	push   %ebx
c01152fe:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0115301:	a1 c8 fe 14 c0       	mov    0xc014fec8,%eax
c0115306:	8b 15 cc fe 14 c0    	mov    0xc014fecc,%edx
c011530c:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0115312:	6b f0 05             	imul   $0x5,%eax,%esi
c0115315:	01 f7                	add    %esi,%edi
c0115317:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c011531c:	f7 e6                	mul    %esi
c011531e:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0115321:	89 f2                	mov    %esi,%edx
c0115323:	83 c0 0b             	add    $0xb,%eax
c0115326:	83 d2 00             	adc    $0x0,%edx
c0115329:	89 c7                	mov    %eax,%edi
c011532b:	83 e7 ff             	and    $0xffffffff,%edi
c011532e:	89 f9                	mov    %edi,%ecx
c0115330:	0f b7 da             	movzwl %dx,%ebx
c0115333:	89 0d c8 fe 14 c0    	mov    %ecx,0xc014fec8
c0115339:	89 1d cc fe 14 c0    	mov    %ebx,0xc014fecc
    unsigned long long result = (next >> 12);
c011533f:	a1 c8 fe 14 c0       	mov    0xc014fec8,%eax
c0115344:	8b 15 cc fe 14 c0    	mov    0xc014fecc,%edx
c011534a:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c011534e:	c1 ea 0c             	shr    $0xc,%edx
c0115351:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115354:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115357:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c011535e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115361:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115364:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0115367:	89 55 e8             	mov    %edx,-0x18(%ebp)
c011536a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011536d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115370:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115374:	74 1c                	je     c0115392 <rand+0x9a>
c0115376:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115379:	ba 00 00 00 00       	mov    $0x0,%edx
c011537e:	f7 75 dc             	divl   -0x24(%ebp)
c0115381:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0115384:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115387:	ba 00 00 00 00       	mov    $0x0,%edx
c011538c:	f7 75 dc             	divl   -0x24(%ebp)
c011538f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0115392:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0115395:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115398:	f7 75 dc             	divl   -0x24(%ebp)
c011539b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011539e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01153a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01153a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01153a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01153aa:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01153ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01153b0:	83 c4 24             	add    $0x24,%esp
c01153b3:	5b                   	pop    %ebx
c01153b4:	5e                   	pop    %esi
c01153b5:	5f                   	pop    %edi
c01153b6:	5d                   	pop    %ebp
c01153b7:	c3                   	ret    

c01153b8 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01153b8:	55                   	push   %ebp
c01153b9:	89 e5                	mov    %esp,%ebp
    next = seed;
c01153bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01153be:	ba 00 00 00 00       	mov    $0x0,%edx
c01153c3:	a3 c8 fe 14 c0       	mov    %eax,0xc014fec8
c01153c8:	89 15 cc fe 14 c0    	mov    %edx,0xc014fecc
}
c01153ce:	5d                   	pop    %ebp
c01153cf:	c3                   	ret    

c01153d0 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01153d0:	55                   	push   %ebp
c01153d1:	89 e5                	mov    %esp,%ebp
c01153d3:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01153d6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c01153dd:	eb 04                	jmp    c01153e3 <strlen+0x13>
        cnt ++;
c01153df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c01153e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01153e6:	8d 50 01             	lea    0x1(%eax),%edx
c01153e9:	89 55 08             	mov    %edx,0x8(%ebp)
c01153ec:	0f b6 00             	movzbl (%eax),%eax
c01153ef:	84 c0                	test   %al,%al
c01153f1:	75 ec                	jne    c01153df <strlen+0xf>
        cnt ++;
    }
    return cnt;
c01153f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01153f6:	c9                   	leave  
c01153f7:	c3                   	ret    

c01153f8 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c01153f8:	55                   	push   %ebp
c01153f9:	89 e5                	mov    %esp,%ebp
c01153fb:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01153fe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0115405:	eb 04                	jmp    c011540b <strnlen+0x13>
        cnt ++;
c0115407:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c011540b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011540e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0115411:	73 10                	jae    c0115423 <strnlen+0x2b>
c0115413:	8b 45 08             	mov    0x8(%ebp),%eax
c0115416:	8d 50 01             	lea    0x1(%eax),%edx
c0115419:	89 55 08             	mov    %edx,0x8(%ebp)
c011541c:	0f b6 00             	movzbl (%eax),%eax
c011541f:	84 c0                	test   %al,%al
c0115421:	75 e4                	jne    c0115407 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0115423:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115426:	c9                   	leave  
c0115427:	c3                   	ret    

c0115428 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0115428:	55                   	push   %ebp
c0115429:	89 e5                	mov    %esp,%ebp
c011542b:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c011542e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115431:	89 04 24             	mov    %eax,(%esp)
c0115434:	e8 97 ff ff ff       	call   c01153d0 <strlen>
c0115439:	8b 55 08             	mov    0x8(%ebp),%edx
c011543c:	01 c2                	add    %eax,%edx
c011543e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115441:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115445:	89 14 24             	mov    %edx,(%esp)
c0115448:	e8 02 00 00 00       	call   c011544f <strcpy>
}
c011544d:	c9                   	leave  
c011544e:	c3                   	ret    

c011544f <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c011544f:	55                   	push   %ebp
c0115450:	89 e5                	mov    %esp,%ebp
c0115452:	57                   	push   %edi
c0115453:	56                   	push   %esi
c0115454:	83 ec 20             	sub    $0x20,%esp
c0115457:	8b 45 08             	mov    0x8(%ebp),%eax
c011545a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011545d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115460:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0115463:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115466:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115469:	89 d1                	mov    %edx,%ecx
c011546b:	89 c2                	mov    %eax,%edx
c011546d:	89 ce                	mov    %ecx,%esi
c011546f:	89 d7                	mov    %edx,%edi
c0115471:	ac                   	lods   %ds:(%esi),%al
c0115472:	aa                   	stos   %al,%es:(%edi)
c0115473:	84 c0                	test   %al,%al
c0115475:	75 fa                	jne    c0115471 <strcpy+0x22>
c0115477:	89 fa                	mov    %edi,%edx
c0115479:	89 f1                	mov    %esi,%ecx
c011547b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c011547e:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0115481:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0115484:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0115487:	83 c4 20             	add    $0x20,%esp
c011548a:	5e                   	pop    %esi
c011548b:	5f                   	pop    %edi
c011548c:	5d                   	pop    %ebp
c011548d:	c3                   	ret    

c011548e <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c011548e:	55                   	push   %ebp
c011548f:	89 e5                	mov    %esp,%ebp
c0115491:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c0115494:	8b 45 08             	mov    0x8(%ebp),%eax
c0115497:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c011549a:	eb 21                	jmp    c01154bd <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c011549c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011549f:	0f b6 10             	movzbl (%eax),%edx
c01154a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154a5:	88 10                	mov    %dl,(%eax)
c01154a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154aa:	0f b6 00             	movzbl (%eax),%eax
c01154ad:	84 c0                	test   %al,%al
c01154af:	74 04                	je     c01154b5 <strncpy+0x27>
            src ++;
c01154b1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c01154b5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01154b9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01154bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01154c1:	75 d9                	jne    c011549c <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01154c3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01154c6:	c9                   	leave  
c01154c7:	c3                   	ret    

c01154c8 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c01154c8:	55                   	push   %ebp
c01154c9:	89 e5                	mov    %esp,%ebp
c01154cb:	57                   	push   %edi
c01154cc:	56                   	push   %esi
c01154cd:	83 ec 20             	sub    $0x20,%esp
c01154d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01154d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01154d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c01154dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01154df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154e2:	89 d1                	mov    %edx,%ecx
c01154e4:	89 c2                	mov    %eax,%edx
c01154e6:	89 ce                	mov    %ecx,%esi
c01154e8:	89 d7                	mov    %edx,%edi
c01154ea:	ac                   	lods   %ds:(%esi),%al
c01154eb:	ae                   	scas   %es:(%edi),%al
c01154ec:	75 08                	jne    c01154f6 <strcmp+0x2e>
c01154ee:	84 c0                	test   %al,%al
c01154f0:	75 f8                	jne    c01154ea <strcmp+0x22>
c01154f2:	31 c0                	xor    %eax,%eax
c01154f4:	eb 04                	jmp    c01154fa <strcmp+0x32>
c01154f6:	19 c0                	sbb    %eax,%eax
c01154f8:	0c 01                	or     $0x1,%al
c01154fa:	89 fa                	mov    %edi,%edx
c01154fc:	89 f1                	mov    %esi,%ecx
c01154fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115501:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115504:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0115507:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c011550a:	83 c4 20             	add    $0x20,%esp
c011550d:	5e                   	pop    %esi
c011550e:	5f                   	pop    %edi
c011550f:	5d                   	pop    %ebp
c0115510:	c3                   	ret    

c0115511 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0115511:	55                   	push   %ebp
c0115512:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115514:	eb 0c                	jmp    c0115522 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115516:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c011551a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011551e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115522:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115526:	74 1a                	je     c0115542 <strncmp+0x31>
c0115528:	8b 45 08             	mov    0x8(%ebp),%eax
c011552b:	0f b6 00             	movzbl (%eax),%eax
c011552e:	84 c0                	test   %al,%al
c0115530:	74 10                	je     c0115542 <strncmp+0x31>
c0115532:	8b 45 08             	mov    0x8(%ebp),%eax
c0115535:	0f b6 10             	movzbl (%eax),%edx
c0115538:	8b 45 0c             	mov    0xc(%ebp),%eax
c011553b:	0f b6 00             	movzbl (%eax),%eax
c011553e:	38 c2                	cmp    %al,%dl
c0115540:	74 d4                	je     c0115516 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115542:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115546:	74 18                	je     c0115560 <strncmp+0x4f>
c0115548:	8b 45 08             	mov    0x8(%ebp),%eax
c011554b:	0f b6 00             	movzbl (%eax),%eax
c011554e:	0f b6 d0             	movzbl %al,%edx
c0115551:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115554:	0f b6 00             	movzbl (%eax),%eax
c0115557:	0f b6 c0             	movzbl %al,%eax
c011555a:	29 c2                	sub    %eax,%edx
c011555c:	89 d0                	mov    %edx,%eax
c011555e:	eb 05                	jmp    c0115565 <strncmp+0x54>
c0115560:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115565:	5d                   	pop    %ebp
c0115566:	c3                   	ret    

c0115567 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0115567:	55                   	push   %ebp
c0115568:	89 e5                	mov    %esp,%ebp
c011556a:	83 ec 04             	sub    $0x4,%esp
c011556d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115570:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0115573:	eb 14                	jmp    c0115589 <strchr+0x22>
        if (*s == c) {
c0115575:	8b 45 08             	mov    0x8(%ebp),%eax
c0115578:	0f b6 00             	movzbl (%eax),%eax
c011557b:	3a 45 fc             	cmp    -0x4(%ebp),%al
c011557e:	75 05                	jne    c0115585 <strchr+0x1e>
            return (char *)s;
c0115580:	8b 45 08             	mov    0x8(%ebp),%eax
c0115583:	eb 13                	jmp    c0115598 <strchr+0x31>
        }
        s ++;
c0115585:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0115589:	8b 45 08             	mov    0x8(%ebp),%eax
c011558c:	0f b6 00             	movzbl (%eax),%eax
c011558f:	84 c0                	test   %al,%al
c0115591:	75 e2                	jne    c0115575 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c0115593:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115598:	c9                   	leave  
c0115599:	c3                   	ret    

c011559a <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c011559a:	55                   	push   %ebp
c011559b:	89 e5                	mov    %esp,%ebp
c011559d:	83 ec 04             	sub    $0x4,%esp
c01155a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155a3:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01155a6:	eb 11                	jmp    c01155b9 <strfind+0x1f>
        if (*s == c) {
c01155a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01155ab:	0f b6 00             	movzbl (%eax),%eax
c01155ae:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01155b1:	75 02                	jne    c01155b5 <strfind+0x1b>
            break;
c01155b3:	eb 0e                	jmp    c01155c3 <strfind+0x29>
        }
        s ++;
c01155b5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01155b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01155bc:	0f b6 00             	movzbl (%eax),%eax
c01155bf:	84 c0                	test   %al,%al
c01155c1:	75 e5                	jne    c01155a8 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c01155c3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01155c6:	c9                   	leave  
c01155c7:	c3                   	ret    

c01155c8 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c01155c8:	55                   	push   %ebp
c01155c9:	89 e5                	mov    %esp,%ebp
c01155cb:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01155ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01155d5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01155dc:	eb 04                	jmp    c01155e2 <strtol+0x1a>
        s ++;
c01155de:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01155e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01155e5:	0f b6 00             	movzbl (%eax),%eax
c01155e8:	3c 20                	cmp    $0x20,%al
c01155ea:	74 f2                	je     c01155de <strtol+0x16>
c01155ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01155ef:	0f b6 00             	movzbl (%eax),%eax
c01155f2:	3c 09                	cmp    $0x9,%al
c01155f4:	74 e8                	je     c01155de <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c01155f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01155f9:	0f b6 00             	movzbl (%eax),%eax
c01155fc:	3c 2b                	cmp    $0x2b,%al
c01155fe:	75 06                	jne    c0115606 <strtol+0x3e>
        s ++;
c0115600:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115604:	eb 15                	jmp    c011561b <strtol+0x53>
    }
    else if (*s == '-') {
c0115606:	8b 45 08             	mov    0x8(%ebp),%eax
c0115609:	0f b6 00             	movzbl (%eax),%eax
c011560c:	3c 2d                	cmp    $0x2d,%al
c011560e:	75 0b                	jne    c011561b <strtol+0x53>
        s ++, neg = 1;
c0115610:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115614:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c011561b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011561f:	74 06                	je     c0115627 <strtol+0x5f>
c0115621:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0115625:	75 24                	jne    c011564b <strtol+0x83>
c0115627:	8b 45 08             	mov    0x8(%ebp),%eax
c011562a:	0f b6 00             	movzbl (%eax),%eax
c011562d:	3c 30                	cmp    $0x30,%al
c011562f:	75 1a                	jne    c011564b <strtol+0x83>
c0115631:	8b 45 08             	mov    0x8(%ebp),%eax
c0115634:	83 c0 01             	add    $0x1,%eax
c0115637:	0f b6 00             	movzbl (%eax),%eax
c011563a:	3c 78                	cmp    $0x78,%al
c011563c:	75 0d                	jne    c011564b <strtol+0x83>
        s += 2, base = 16;
c011563e:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0115642:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0115649:	eb 2a                	jmp    c0115675 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011564b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011564f:	75 17                	jne    c0115668 <strtol+0xa0>
c0115651:	8b 45 08             	mov    0x8(%ebp),%eax
c0115654:	0f b6 00             	movzbl (%eax),%eax
c0115657:	3c 30                	cmp    $0x30,%al
c0115659:	75 0d                	jne    c0115668 <strtol+0xa0>
        s ++, base = 8;
c011565b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011565f:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0115666:	eb 0d                	jmp    c0115675 <strtol+0xad>
    }
    else if (base == 0) {
c0115668:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011566c:	75 07                	jne    c0115675 <strtol+0xad>
        base = 10;
c011566e:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0115675:	8b 45 08             	mov    0x8(%ebp),%eax
c0115678:	0f b6 00             	movzbl (%eax),%eax
c011567b:	3c 2f                	cmp    $0x2f,%al
c011567d:	7e 1b                	jle    c011569a <strtol+0xd2>
c011567f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115682:	0f b6 00             	movzbl (%eax),%eax
c0115685:	3c 39                	cmp    $0x39,%al
c0115687:	7f 11                	jg     c011569a <strtol+0xd2>
            dig = *s - '0';
c0115689:	8b 45 08             	mov    0x8(%ebp),%eax
c011568c:	0f b6 00             	movzbl (%eax),%eax
c011568f:	0f be c0             	movsbl %al,%eax
c0115692:	83 e8 30             	sub    $0x30,%eax
c0115695:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115698:	eb 48                	jmp    c01156e2 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c011569a:	8b 45 08             	mov    0x8(%ebp),%eax
c011569d:	0f b6 00             	movzbl (%eax),%eax
c01156a0:	3c 60                	cmp    $0x60,%al
c01156a2:	7e 1b                	jle    c01156bf <strtol+0xf7>
c01156a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01156a7:	0f b6 00             	movzbl (%eax),%eax
c01156aa:	3c 7a                	cmp    $0x7a,%al
c01156ac:	7f 11                	jg     c01156bf <strtol+0xf7>
            dig = *s - 'a' + 10;
c01156ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01156b1:	0f b6 00             	movzbl (%eax),%eax
c01156b4:	0f be c0             	movsbl %al,%eax
c01156b7:	83 e8 57             	sub    $0x57,%eax
c01156ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01156bd:	eb 23                	jmp    c01156e2 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c01156bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01156c2:	0f b6 00             	movzbl (%eax),%eax
c01156c5:	3c 40                	cmp    $0x40,%al
c01156c7:	7e 3d                	jle    c0115706 <strtol+0x13e>
c01156c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01156cc:	0f b6 00             	movzbl (%eax),%eax
c01156cf:	3c 5a                	cmp    $0x5a,%al
c01156d1:	7f 33                	jg     c0115706 <strtol+0x13e>
            dig = *s - 'A' + 10;
c01156d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01156d6:	0f b6 00             	movzbl (%eax),%eax
c01156d9:	0f be c0             	movsbl %al,%eax
c01156dc:	83 e8 37             	sub    $0x37,%eax
c01156df:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c01156e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01156e5:	3b 45 10             	cmp    0x10(%ebp),%eax
c01156e8:	7c 02                	jl     c01156ec <strtol+0x124>
            break;
c01156ea:	eb 1a                	jmp    c0115706 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c01156ec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01156f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01156f3:	0f af 45 10          	imul   0x10(%ebp),%eax
c01156f7:	89 c2                	mov    %eax,%edx
c01156f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01156fc:	01 d0                	add    %edx,%eax
c01156fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0115701:	e9 6f ff ff ff       	jmp    c0115675 <strtol+0xad>

    if (endptr) {
c0115706:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011570a:	74 08                	je     c0115714 <strtol+0x14c>
        *endptr = (char *) s;
c011570c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011570f:	8b 55 08             	mov    0x8(%ebp),%edx
c0115712:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0115714:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0115718:	74 07                	je     c0115721 <strtol+0x159>
c011571a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011571d:	f7 d8                	neg    %eax
c011571f:	eb 03                	jmp    c0115724 <strtol+0x15c>
c0115721:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0115724:	c9                   	leave  
c0115725:	c3                   	ret    

c0115726 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115726:	55                   	push   %ebp
c0115727:	89 e5                	mov    %esp,%ebp
c0115729:	57                   	push   %edi
c011572a:	83 ec 24             	sub    $0x24,%esp
c011572d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115730:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0115733:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0115737:	8b 55 08             	mov    0x8(%ebp),%edx
c011573a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011573d:	88 45 f7             	mov    %al,-0x9(%ebp)
c0115740:	8b 45 10             	mov    0x10(%ebp),%eax
c0115743:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115746:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0115749:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c011574d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0115750:	89 d7                	mov    %edx,%edi
c0115752:	f3 aa                	rep stos %al,%es:(%edi)
c0115754:	89 fa                	mov    %edi,%edx
c0115756:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0115759:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c011575c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c011575f:	83 c4 24             	add    $0x24,%esp
c0115762:	5f                   	pop    %edi
c0115763:	5d                   	pop    %ebp
c0115764:	c3                   	ret    

c0115765 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0115765:	55                   	push   %ebp
c0115766:	89 e5                	mov    %esp,%ebp
c0115768:	57                   	push   %edi
c0115769:	56                   	push   %esi
c011576a:	53                   	push   %ebx
c011576b:	83 ec 30             	sub    $0x30,%esp
c011576e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115771:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115774:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115777:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011577a:	8b 45 10             	mov    0x10(%ebp),%eax
c011577d:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0115780:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115783:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0115786:	73 42                	jae    c01157ca <memmove+0x65>
c0115788:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011578b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011578e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115791:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0115794:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115797:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011579a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011579d:	c1 e8 02             	shr    $0x2,%eax
c01157a0:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01157a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01157a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01157a8:	89 d7                	mov    %edx,%edi
c01157aa:	89 c6                	mov    %eax,%esi
c01157ac:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01157ae:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01157b1:	83 e1 03             	and    $0x3,%ecx
c01157b4:	74 02                	je     c01157b8 <memmove+0x53>
c01157b6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01157b8:	89 f0                	mov    %esi,%eax
c01157ba:	89 fa                	mov    %edi,%edx
c01157bc:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c01157bf:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01157c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01157c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01157c8:	eb 36                	jmp    c0115800 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c01157ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157cd:	8d 50 ff             	lea    -0x1(%eax),%edx
c01157d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01157d3:	01 c2                	add    %eax,%edx
c01157d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157d8:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01157db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157de:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c01157e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157e4:	89 c1                	mov    %eax,%ecx
c01157e6:	89 d8                	mov    %ebx,%eax
c01157e8:	89 d6                	mov    %edx,%esi
c01157ea:	89 c7                	mov    %eax,%edi
c01157ec:	fd                   	std    
c01157ed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01157ef:	fc                   	cld    
c01157f0:	89 f8                	mov    %edi,%eax
c01157f2:	89 f2                	mov    %esi,%edx
c01157f4:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c01157f7:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01157fa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c01157fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0115800:	83 c4 30             	add    $0x30,%esp
c0115803:	5b                   	pop    %ebx
c0115804:	5e                   	pop    %esi
c0115805:	5f                   	pop    %edi
c0115806:	5d                   	pop    %ebp
c0115807:	c3                   	ret    

c0115808 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115808:	55                   	push   %ebp
c0115809:	89 e5                	mov    %esp,%ebp
c011580b:	57                   	push   %edi
c011580c:	56                   	push   %esi
c011580d:	83 ec 20             	sub    $0x20,%esp
c0115810:	8b 45 08             	mov    0x8(%ebp),%eax
c0115813:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115816:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115819:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011581c:	8b 45 10             	mov    0x10(%ebp),%eax
c011581f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0115822:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115825:	c1 e8 02             	shr    $0x2,%eax
c0115828:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c011582a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011582d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115830:	89 d7                	mov    %edx,%edi
c0115832:	89 c6                	mov    %eax,%esi
c0115834:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115836:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0115839:	83 e1 03             	and    $0x3,%ecx
c011583c:	74 02                	je     c0115840 <memcpy+0x38>
c011583e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115840:	89 f0                	mov    %esi,%eax
c0115842:	89 fa                	mov    %edi,%edx
c0115844:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115847:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011584a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c011584d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0115850:	83 c4 20             	add    $0x20,%esp
c0115853:	5e                   	pop    %esi
c0115854:	5f                   	pop    %edi
c0115855:	5d                   	pop    %ebp
c0115856:	c3                   	ret    

c0115857 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115857:	55                   	push   %ebp
c0115858:	89 e5                	mov    %esp,%ebp
c011585a:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c011585d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115860:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0115863:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115866:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0115869:	eb 30                	jmp    c011589b <memcmp+0x44>
        if (*s1 != *s2) {
c011586b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011586e:	0f b6 10             	movzbl (%eax),%edx
c0115871:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115874:	0f b6 00             	movzbl (%eax),%eax
c0115877:	38 c2                	cmp    %al,%dl
c0115879:	74 18                	je     c0115893 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c011587b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011587e:	0f b6 00             	movzbl (%eax),%eax
c0115881:	0f b6 d0             	movzbl %al,%edx
c0115884:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115887:	0f b6 00             	movzbl (%eax),%eax
c011588a:	0f b6 c0             	movzbl %al,%eax
c011588d:	29 c2                	sub    %eax,%edx
c011588f:	89 d0                	mov    %edx,%eax
c0115891:	eb 1a                	jmp    c01158ad <memcmp+0x56>
        }
        s1 ++, s2 ++;
c0115893:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0115897:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c011589b:	8b 45 10             	mov    0x10(%ebp),%eax
c011589e:	8d 50 ff             	lea    -0x1(%eax),%edx
c01158a1:	89 55 10             	mov    %edx,0x10(%ebp)
c01158a4:	85 c0                	test   %eax,%eax
c01158a6:	75 c3                	jne    c011586b <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01158a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01158ad:	c9                   	leave  
c01158ae:	c3                   	ret    
