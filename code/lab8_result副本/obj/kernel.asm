
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 f0 14 00 	lgdtl  0x14f018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 f0 14 c0       	mov    $0xc014f000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 43 15 c0       	mov    $0xc0154304,%edx
c0100035:	b8 d0 fe 14 c0       	mov    $0xc014fed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 fe 14 c0 	movl   $0xc014fed0,(%esp)
c0100051:	e8 fa 56 01 00       	call   c0115750 <memset>

    cons_init();                // init the console
c0100056:	e8 7d 17 00 00       	call   c01017d8 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 e0 58 11 c0 	movl   $0xc01158e0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 fc 58 11 c0 	movl   $0xc01158fc,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 41 57 00 00       	call   c01057c5 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 4b 21 00 00       	call   c01021d4 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 9d 22 00 00       	call   c010232b <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 7b 86 00 00       	call   c010870e <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 9a e5 00 00       	call   c010e632 <sched_init>
    proc_init();                // init process table
c0100098:	e8 3b de 00 00       	call   c010ded8 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 67 18 00 00       	call   c0101909 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 e9 6d 00 00       	call   c0106e90 <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 f4 af 00 00       	call   c010b0a0 <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 dd 0e 00 00       	call   c0100f8e <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 8c 20 00 00       	call   c0102142 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 2b e0 00 00       	call   c010e0e6 <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 d9 0d 00 00       	call   c0100eb6 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e4 fe 14 c0       	mov    0xc014fee4,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 01 59 11 c0 	movl   $0xc0115901,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e4 fe 14 c0       	mov    0xc014fee4,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 0f 59 11 c0 	movl   $0xc011590f,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e4 fe 14 c0       	mov    0xc014fee4,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 1d 59 11 c0 	movl   $0xc011591d,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e4 fe 14 c0       	mov    0xc014fee4,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 2b 59 11 c0 	movl   $0xc011592b,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e4 fe 14 c0       	mov    0xc014fee4,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 39 59 11 c0 	movl   $0xc0115939,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e4 fe 14 c0       	mov    0xc014fee4,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e4 fe 14 c0       	mov    %eax,0xc014fee4
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 48 59 11 c0 	movl   $0xc0115948,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 68 59 11 c0 	movl   $0xc0115968,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 87 59 11 c0 	movl   $0xc0115987,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 20 ff 14 c0    	mov    %dl,-0x3feb00e0(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 20 ff 14 c0       	add    $0xc014ff20,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 20 ff 14 c0       	mov    $0xc014ff20,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 e9 14 00 00       	call   c0101804 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 a0 4a 01 00       	call   c0114e00 <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 68 14 00 00       	call   c0101804 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 48 14 00 00       	call   c0101840 <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 e3 4f 01 00       	call   c01153fa <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 d5 48 00 00       	call   c0104cfd <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 e8 53 01 00       	call   c0115832 <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 8f 4f 01 00       	call   c01153fa <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 81 4f 01 00       	call   c01153fa <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 6e 48 00 00       	call   c0104cfd <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 7b 53 01 00       	call   c0115832 <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 5c 53 01 00       	call   c0115832 <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 8c 59 11 c0    	movl   $0xc011598c,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 8c 59 11 c0 	movl   $0xc011598c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 00 a3 11 c0 	movl   $0xc011a300,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 ec ff 13 c0 	movl   $0xc013ffec,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec ed ff 13 c0 	movl   $0xc013ffed,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 62 c9 14 c0 	movl   $0xc014c962,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 79 89 00 00       	call   c010906d <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 22 89 00 00       	call   c010906d <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 ea 88 00 00       	call   c010906d <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 d6 4c 01 00       	call   c01155c4 <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 96 59 11 c0 	movl   $0xc0115996,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 af 59 11 c0 	movl   $0xc01159af,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 d9 58 11 	movl   $0xc01158d9,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 c7 59 11 c0 	movl   $0xc01159c7,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 fe 14 	movl   $0xc014fed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 df 59 11 c0 	movl   $0xc01159df,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 43 15 	movl   $0xc0154304,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 f7 59 11 c0 	movl   $0xc01159f7,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 43 15 c0       	mov    $0xc0154304,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 10 5a 11 c0 	movl   $0xc0115a10,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 3a 5a 11 c0 	movl   $0xc0115a3a,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 56 5a 11 c0 	movl   $0xc0115a56,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bc2:	89 e8                	mov    %ebp,%eax
c0100bc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bcd:	e8 d9 ff ff ff       	call   c0100bab <read_eip>
c0100bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100bd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bdc:	e9 88 00 00 00       	jmp    c0100c69 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bef:	c7 04 24 68 5a 11 c0 	movl   $0xc0115a68,(%esp)
c0100bf6:	e8 6a f7 ff ff       	call   c0100365 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfe:	83 c0 08             	add    $0x8,%eax
c0100c01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100c04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c0b:	eb 25                	jmp    c0100c32 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c1a:	01 d0                	add    %edx,%eax
c0100c1c:	8b 00                	mov    (%eax),%eax
c0100c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c22:	c7 04 24 84 5a 11 c0 	movl   $0xc0115a84,(%esp)
c0100c29:	e8 37 f7 ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100c2e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c32:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c36:	7e d5                	jle    c0100c0d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100c38:	c7 04 24 8c 5a 11 c0 	movl   $0xc0115a8c,(%esp)
c0100c3f:	e8 21 f7 ff ff       	call   c0100365 <cprintf>
        print_debuginfo(eip - 1);
c0100c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c47:	83 e8 01             	sub    $0x1,%eax
c0100c4a:	89 04 24             	mov    %eax,(%esp)
c0100c4d:	e8 b6 fe ff ff       	call   c0100b08 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c55:	83 c0 04             	add    $0x4,%eax
c0100c58:	8b 00                	mov    (%eax),%eax
c0100c5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c60:	8b 00                	mov    (%eax),%eax
c0100c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c65:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c6d:	74 0a                	je     c0100c79 <print_stackframe+0xbd>
c0100c6f:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c73:	0f 8e 68 ff ff ff    	jle    c0100be1 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100c79:	c9                   	leave  
c0100c7a:	c3                   	ret    

c0100c7b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c7b:	55                   	push   %ebp
c0100c7c:	89 e5                	mov    %esp,%ebp
c0100c7e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c88:	eb 0c                	jmp    c0100c96 <parse+0x1b>
            *buf ++ = '\0';
c0100c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0100c90:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c93:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c99:	0f b6 00             	movzbl (%eax),%eax
c0100c9c:	84 c0                	test   %al,%al
c0100c9e:	74 1d                	je     c0100cbd <parse+0x42>
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	0f b6 00             	movzbl (%eax),%eax
c0100ca6:	0f be c0             	movsbl %al,%eax
c0100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cad:	c7 04 24 10 5b 11 c0 	movl   $0xc0115b10,(%esp)
c0100cb4:	e8 d8 48 01 00       	call   c0115591 <strchr>
c0100cb9:	85 c0                	test   %eax,%eax
c0100cbb:	75 cd                	jne    c0100c8a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc0:	0f b6 00             	movzbl (%eax),%eax
c0100cc3:	84 c0                	test   %al,%al
c0100cc5:	75 02                	jne    c0100cc9 <parse+0x4e>
            break;
c0100cc7:	eb 67                	jmp    c0100d30 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cc9:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ccd:	75 14                	jne    c0100ce3 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ccf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cd6:	00 
c0100cd7:	c7 04 24 15 5b 11 c0 	movl   $0xc0115b15,(%esp)
c0100cde:	e8 82 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	8d 50 01             	lea    0x1(%eax),%edx
c0100ce9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cf6:	01 c2                	add    %eax,%edx
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cfd:	eb 04                	jmp    c0100d03 <parse+0x88>
            buf ++;
c0100cff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d06:	0f b6 00             	movzbl (%eax),%eax
c0100d09:	84 c0                	test   %al,%al
c0100d0b:	74 1d                	je     c0100d2a <parse+0xaf>
c0100d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d10:	0f b6 00             	movzbl (%eax),%eax
c0100d13:	0f be c0             	movsbl %al,%eax
c0100d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d1a:	c7 04 24 10 5b 11 c0 	movl   $0xc0115b10,(%esp)
c0100d21:	e8 6b 48 01 00       	call   c0115591 <strchr>
c0100d26:	85 c0                	test   %eax,%eax
c0100d28:	74 d5                	je     c0100cff <parse+0x84>
            buf ++;
        }
    }
c0100d2a:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2b:	e9 66 ff ff ff       	jmp    c0100c96 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d33:	c9                   	leave  
c0100d34:	c3                   	ret    

c0100d35 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d35:	55                   	push   %ebp
c0100d36:	89 e5                	mov    %esp,%ebp
c0100d38:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d45:	89 04 24             	mov    %eax,(%esp)
c0100d48:	e8 2e ff ff ff       	call   c0100c7b <parse>
c0100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d54:	75 0a                	jne    c0100d60 <runcmd+0x2b>
        return 0;
c0100d56:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d5b:	e9 85 00 00 00       	jmp    c0100de5 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d67:	eb 5c                	jmp    c0100dc5 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d69:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6f:	89 d0                	mov    %edx,%eax
c0100d71:	01 c0                	add    %eax,%eax
c0100d73:	01 d0                	add    %edx,%eax
c0100d75:	c1 e0 02             	shl    $0x2,%eax
c0100d78:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100d7d:	8b 00                	mov    (%eax),%eax
c0100d7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d83:	89 04 24             	mov    %eax,(%esp)
c0100d86:	e8 67 47 01 00       	call   c01154f2 <strcmp>
c0100d8b:	85 c0                	test   %eax,%eax
c0100d8d:	75 32                	jne    c0100dc1 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d92:	89 d0                	mov    %edx,%eax
c0100d94:	01 c0                	add    %eax,%eax
c0100d96:	01 d0                	add    %edx,%eax
c0100d98:	c1 e0 02             	shl    $0x2,%eax
c0100d9b:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100da0:	8b 40 08             	mov    0x8(%eax),%eax
c0100da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100da6:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100da9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100db0:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100db3:	83 c2 04             	add    $0x4,%edx
c0100db6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dba:	89 0c 24             	mov    %ecx,(%esp)
c0100dbd:	ff d0                	call   *%eax
c0100dbf:	eb 24                	jmp    c0100de5 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc8:	83 f8 02             	cmp    $0x2,%eax
c0100dcb:	76 9c                	jbe    c0100d69 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dd4:	c7 04 24 33 5b 11 c0 	movl   $0xc0115b33,(%esp)
c0100ddb:	e8 85 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de5:	c9                   	leave  
c0100de6:	c3                   	ret    

c0100de7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100de7:	55                   	push   %ebp
c0100de8:	89 e5                	mov    %esp,%ebp
c0100dea:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ded:	c7 04 24 4c 5b 11 c0 	movl   $0xc0115b4c,(%esp)
c0100df4:	e8 6c f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100df9:	c7 04 24 74 5b 11 c0 	movl   $0xc0115b74,(%esp)
c0100e00:	e8 60 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e09:	74 0b                	je     c0100e16 <kmonitor+0x2f>
        print_trapframe(tf);
c0100e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0e:	89 04 24             	mov    %eax,(%esp)
c0100e11:	e8 ca 16 00 00       	call   c01024e0 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e16:	c7 04 24 99 5b 11 c0 	movl   $0xc0115b99,(%esp)
c0100e1d:	e8 32 f4 ff ff       	call   c0100254 <readline>
c0100e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e29:	74 18                	je     c0100e43 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f8 fe ff ff       	call   c0100d35 <runcmd>
c0100e3d:	85 c0                	test   %eax,%eax
c0100e3f:	79 02                	jns    c0100e43 <kmonitor+0x5c>
                break;
c0100e41:	eb 02                	jmp    c0100e45 <kmonitor+0x5e>
            }
        }
    }
c0100e43:	eb d1                	jmp    c0100e16 <kmonitor+0x2f>
}
c0100e45:	c9                   	leave  
c0100e46:	c3                   	ret    

c0100e47 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e47:	55                   	push   %ebp
c0100e48:	89 e5                	mov    %esp,%ebp
c0100e4a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e54:	eb 3f                	jmp    c0100e95 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100e67:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6d:	89 d0                	mov    %edx,%eax
c0100e6f:	01 c0                	add    %eax,%eax
c0100e71:	01 d0                	add    %edx,%eax
c0100e73:	c1 e0 02             	shl    $0x2,%eax
c0100e76:	05 20 f0 14 c0       	add    $0xc014f020,%eax
c0100e7b:	8b 00                	mov    (%eax),%eax
c0100e7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e85:	c7 04 24 9d 5b 11 c0 	movl   $0xc0115b9d,(%esp)
c0100e8c:	e8 d4 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e98:	83 f8 02             	cmp    $0x2,%eax
c0100e9b:	76 b9                	jbe    c0100e56 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea2:	c9                   	leave  
c0100ea3:	c3                   	ret    

c0100ea4 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100eaa:	e8 c3 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb4:	c9                   	leave  
c0100eb5:	c3                   	ret    

c0100eb6 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eb6:	55                   	push   %ebp
c0100eb7:	89 e5                	mov    %esp,%ebp
c0100eb9:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ebc:	e8 fb fc ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ec6:	c9                   	leave  
c0100ec7:	c3                   	ret    

c0100ec8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ec8:	55                   	push   %ebp
c0100ec9:	89 e5                	mov    %esp,%ebp
c0100ecb:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ece:	a1 34 03 15 c0       	mov    0xc0150334,%eax
c0100ed3:	85 c0                	test   %eax,%eax
c0100ed5:	74 02                	je     c0100ed9 <__panic+0x11>
        goto panic_dead;
c0100ed7:	eb 48                	jmp    c0100f21 <__panic+0x59>
    }
    is_panic = 1;
c0100ed9:	c7 05 34 03 15 c0 01 	movl   $0x1,0xc0150334
c0100ee0:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ee3:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef7:	c7 04 24 a6 5b 11 c0 	movl   $0xc0115ba6,(%esp)
c0100efe:	e8 62 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f0d:	89 04 24             	mov    %eax,(%esp)
c0100f10:	e8 15 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f15:	c7 04 24 c2 5b 11 c0 	movl   $0xc0115bc2,(%esp)
c0100f1c:	e8 44 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f21:	e8 22 12 00 00       	call   c0102148 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f2d:	e8 b5 fe ff ff       	call   c0100de7 <kmonitor>
    }
c0100f32:	eb f2                	jmp    c0100f26 <__panic+0x5e>

c0100f34 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f34:	55                   	push   %ebp
c0100f35:	89 e5                	mov    %esp,%ebp
c0100f37:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f3a:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4e:	c7 04 24 c4 5b 11 c0 	movl   $0xc0115bc4,(%esp)
c0100f55:	e8 0b f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f61:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f64:	89 04 24             	mov    %eax,(%esp)
c0100f67:	e8 be f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f6c:	c7 04 24 c2 5b 11 c0 	movl   $0xc0115bc2,(%esp)
c0100f73:	e8 ed f3 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f78:	c9                   	leave  
c0100f79:	c3                   	ret    

c0100f7a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f7d:	a1 34 03 15 c0       	mov    0xc0150334,%eax
}
c0100f82:	5d                   	pop    %ebp
c0100f83:	c3                   	ret    

c0100f84 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f84:	55                   	push   %ebp
c0100f85:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f87:	a1 1c 41 15 c0       	mov    0xc015411c,%eax
}
c0100f8c:	5d                   	pop    %ebp
c0100f8d:	c3                   	ret    

c0100f8e <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f8e:	55                   	push   %ebp
c0100f8f:	89 e5                	mov    %esp,%ebp
c0100f91:	83 ec 28             	sub    $0x28,%esp
c0100f94:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f9a:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f9e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fa2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fa6:	ee                   	out    %al,(%dx)
c0100fa7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fad:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fb1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fb5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fb9:	ee                   	out    %al,(%dx)
c0100fba:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fc0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fc4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fc8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fcc:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fcd:	c7 05 1c 41 15 c0 00 	movl   $0x0,0xc015411c
c0100fd4:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fd7:	c7 04 24 e2 5b 11 c0 	movl   $0xc0115be2,(%esp)
c0100fde:	e8 82 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fe3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fea:	e8 b7 11 00 00       	call   c01021a6 <pic_enable>
}
c0100fef:	c9                   	leave  
c0100ff0:	c3                   	ret    

c0100ff1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ff1:	55                   	push   %ebp
c0100ff2:	89 e5                	mov    %esp,%ebp
c0100ff4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ff7:	9c                   	pushf  
c0100ff8:	58                   	pop    %eax
c0100ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fff:	25 00 02 00 00       	and    $0x200,%eax
c0101004:	85 c0                	test   %eax,%eax
c0101006:	74 0c                	je     c0101014 <__intr_save+0x23>
        intr_disable();
c0101008:	e8 3b 11 00 00       	call   c0102148 <intr_disable>
        return 1;
c010100d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101012:	eb 05                	jmp    c0101019 <__intr_save+0x28>
    }
    return 0;
c0101014:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101019:	c9                   	leave  
c010101a:	c3                   	ret    

c010101b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010101b:	55                   	push   %ebp
c010101c:	89 e5                	mov    %esp,%ebp
c010101e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101025:	74 05                	je     c010102c <__intr_restore+0x11>
        intr_enable();
c0101027:	e8 16 11 00 00       	call   c0102142 <intr_enable>
    }
}
c010102c:	c9                   	leave  
c010102d:	c3                   	ret    

c010102e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010102e:	55                   	push   %ebp
c010102f:	89 e5                	mov    %esp,%ebp
c0101031:	83 ec 10             	sub    $0x10,%esp
c0101034:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010103e:	89 c2                	mov    %eax,%edx
c0101040:	ec                   	in     (%dx),%al
c0101041:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101044:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010104a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010104e:	89 c2                	mov    %eax,%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101054:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010105a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010105e:	89 c2                	mov    %eax,%edx
c0101060:	ec                   	in     (%dx),%al
c0101061:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101064:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010106a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010106e:	89 c2                	mov    %eax,%edx
c0101070:	ec                   	in     (%dx),%al
c0101071:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101074:	c9                   	leave  
c0101075:	c3                   	ret    

c0101076 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101076:	55                   	push   %ebp
c0101077:	89 e5                	mov    %esp,%ebp
c0101079:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010107c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101083:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101086:	0f b7 00             	movzwl (%eax),%eax
c0101089:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010108d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101090:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101098:	0f b7 00             	movzwl (%eax),%eax
c010109b:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010109f:	74 12                	je     c01010b3 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010a1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010a8:	66 c7 05 4a 03 15 c0 	movw   $0x3b4,0xc015034a
c01010af:	b4 03 
c01010b1:	eb 13                	jmp    c01010c6 <cga_init+0x50>
    } else {
        *cp = was;
c01010b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010ba:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010bd:	66 c7 05 4a 03 15 c0 	movw   $0x3d4,0xc015034a
c01010c4:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010c6:	0f b7 05 4a 03 15 c0 	movzwl 0xc015034a,%eax
c01010cd:	0f b7 c0             	movzwl %ax,%eax
c01010d0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010d4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010e1:	0f b7 05 4a 03 15 c0 	movzwl 0xc015034a,%eax
c01010e8:	83 c0 01             	add    $0x1,%eax
c01010eb:	0f b7 c0             	movzwl %ax,%eax
c01010ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f2:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010f6:	89 c2                	mov    %eax,%edx
c01010f8:	ec                   	in     (%dx),%al
c01010f9:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010fc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101100:	0f b6 c0             	movzbl %al,%eax
c0101103:	c1 e0 08             	shl    $0x8,%eax
c0101106:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101109:	0f b7 05 4a 03 15 c0 	movzwl 0xc015034a,%eax
c0101110:	0f b7 c0             	movzwl %ax,%eax
c0101113:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101117:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010111b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010111f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101123:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101124:	0f b7 05 4a 03 15 c0 	movzwl 0xc015034a,%eax
c010112b:	83 c0 01             	add    $0x1,%eax
c010112e:	0f b7 c0             	movzwl %ax,%eax
c0101131:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101135:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101139:	89 c2                	mov    %eax,%edx
c010113b:	ec                   	in     (%dx),%al
c010113c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010113f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101143:	0f b6 c0             	movzbl %al,%eax
c0101146:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101149:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010114c:	a3 44 03 15 c0       	mov    %eax,0xc0150344
    crt_pos = pos;
c0101151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101154:	66 a3 48 03 15 c0    	mov    %ax,0xc0150348
}
c010115a:	c9                   	leave  
c010115b:	c3                   	ret    

c010115c <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010115c:	55                   	push   %ebp
c010115d:	89 e5                	mov    %esp,%ebp
c010115f:	83 ec 48             	sub    $0x48,%esp
c0101162:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101168:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010116c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101170:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101174:	ee                   	out    %al,(%dx)
c0101175:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010117b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010117f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101183:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101187:	ee                   	out    %al,(%dx)
c0101188:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010118e:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101192:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101196:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010119a:	ee                   	out    %al,(%dx)
c010119b:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011a1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011a5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011a9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011ad:	ee                   	out    %al,(%dx)
c01011ae:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011b4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011c0:	ee                   	out    %al,(%dx)
c01011c1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011c7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011cb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011cf:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011d3:	ee                   	out    %al,(%dx)
c01011d4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011da:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011de:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011e2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011e6:	ee                   	out    %al,(%dx)
c01011e7:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011ed:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011f1:	89 c2                	mov    %eax,%edx
c01011f3:	ec                   	in     (%dx),%al
c01011f4:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011fb:	3c ff                	cmp    $0xff,%al
c01011fd:	0f 95 c0             	setne  %al
c0101200:	0f b6 c0             	movzbl %al,%eax
c0101203:	a3 4c 03 15 c0       	mov    %eax,0xc015034c
c0101208:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010120e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101212:	89 c2                	mov    %eax,%edx
c0101214:	ec                   	in     (%dx),%al
c0101215:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101218:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010121e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101222:	89 c2                	mov    %eax,%edx
c0101224:	ec                   	in     (%dx),%al
c0101225:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101228:	a1 4c 03 15 c0       	mov    0xc015034c,%eax
c010122d:	85 c0                	test   %eax,%eax
c010122f:	74 0c                	je     c010123d <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101231:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101238:	e8 69 0f 00 00       	call   c01021a6 <pic_enable>
    }
}
c010123d:	c9                   	leave  
c010123e:	c3                   	ret    

c010123f <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010123f:	55                   	push   %ebp
c0101240:	89 e5                	mov    %esp,%ebp
c0101242:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010124c:	eb 09                	jmp    c0101257 <lpt_putc_sub+0x18>
        delay();
c010124e:	e8 db fd ff ff       	call   c010102e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101253:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101257:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010125d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101261:	89 c2                	mov    %eax,%edx
c0101263:	ec                   	in     (%dx),%al
c0101264:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101267:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010126b:	84 c0                	test   %al,%al
c010126d:	78 09                	js     c0101278 <lpt_putc_sub+0x39>
c010126f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101276:	7e d6                	jle    c010124e <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101278:	8b 45 08             	mov    0x8(%ebp),%eax
c010127b:	0f b6 c0             	movzbl %al,%eax
c010127e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101284:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101287:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010128b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010128f:	ee                   	out    %al,(%dx)
c0101290:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101296:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010129a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010129e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012a2:	ee                   	out    %al,(%dx)
c01012a3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012a9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012ad:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012b1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012b5:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012b6:	c9                   	leave  
c01012b7:	c3                   	ret    

c01012b8 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012b8:	55                   	push   %ebp
c01012b9:	89 e5                	mov    %esp,%ebp
c01012bb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012be:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012c2:	74 0d                	je     c01012d1 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c7:	89 04 24             	mov    %eax,(%esp)
c01012ca:	e8 70 ff ff ff       	call   c010123f <lpt_putc_sub>
c01012cf:	eb 24                	jmp    c01012f5 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012d8:	e8 62 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012dd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012e4:	e8 56 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012e9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012f0:	e8 4a ff ff ff       	call   c010123f <lpt_putc_sub>
    }
}
c01012f5:	c9                   	leave  
c01012f6:	c3                   	ret    

c01012f7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012f7:	55                   	push   %ebp
c01012f8:	89 e5                	mov    %esp,%ebp
c01012fa:	53                   	push   %ebx
c01012fb:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101301:	b0 00                	mov    $0x0,%al
c0101303:	85 c0                	test   %eax,%eax
c0101305:	75 07                	jne    c010130e <cga_putc+0x17>
        c |= 0x0700;
c0101307:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101311:	0f b6 c0             	movzbl %al,%eax
c0101314:	83 f8 0a             	cmp    $0xa,%eax
c0101317:	74 4c                	je     c0101365 <cga_putc+0x6e>
c0101319:	83 f8 0d             	cmp    $0xd,%eax
c010131c:	74 57                	je     c0101375 <cga_putc+0x7e>
c010131e:	83 f8 08             	cmp    $0x8,%eax
c0101321:	0f 85 88 00 00 00    	jne    c01013af <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101327:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c010132e:	66 85 c0             	test   %ax,%ax
c0101331:	74 30                	je     c0101363 <cga_putc+0x6c>
            crt_pos --;
c0101333:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c010133a:	83 e8 01             	sub    $0x1,%eax
c010133d:	66 a3 48 03 15 c0    	mov    %ax,0xc0150348
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101343:	a1 44 03 15 c0       	mov    0xc0150344,%eax
c0101348:	0f b7 15 48 03 15 c0 	movzwl 0xc0150348,%edx
c010134f:	0f b7 d2             	movzwl %dx,%edx
c0101352:	01 d2                	add    %edx,%edx
c0101354:	01 c2                	add    %eax,%edx
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	83 c8 20             	or     $0x20,%eax
c010135e:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101361:	eb 72                	jmp    c01013d5 <cga_putc+0xde>
c0101363:	eb 70                	jmp    c01013d5 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101365:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c010136c:	83 c0 50             	add    $0x50,%eax
c010136f:	66 a3 48 03 15 c0    	mov    %ax,0xc0150348
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101375:	0f b7 1d 48 03 15 c0 	movzwl 0xc0150348,%ebx
c010137c:	0f b7 0d 48 03 15 c0 	movzwl 0xc0150348,%ecx
c0101383:	0f b7 c1             	movzwl %cx,%eax
c0101386:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010138c:	c1 e8 10             	shr    $0x10,%eax
c010138f:	89 c2                	mov    %eax,%edx
c0101391:	66 c1 ea 06          	shr    $0x6,%dx
c0101395:	89 d0                	mov    %edx,%eax
c0101397:	c1 e0 02             	shl    $0x2,%eax
c010139a:	01 d0                	add    %edx,%eax
c010139c:	c1 e0 04             	shl    $0x4,%eax
c010139f:	29 c1                	sub    %eax,%ecx
c01013a1:	89 ca                	mov    %ecx,%edx
c01013a3:	89 d8                	mov    %ebx,%eax
c01013a5:	29 d0                	sub    %edx,%eax
c01013a7:	66 a3 48 03 15 c0    	mov    %ax,0xc0150348
        break;
c01013ad:	eb 26                	jmp    c01013d5 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013af:	8b 0d 44 03 15 c0    	mov    0xc0150344,%ecx
c01013b5:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c01013bc:	8d 50 01             	lea    0x1(%eax),%edx
c01013bf:	66 89 15 48 03 15 c0 	mov    %dx,0xc0150348
c01013c6:	0f b7 c0             	movzwl %ax,%eax
c01013c9:	01 c0                	add    %eax,%eax
c01013cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01013d1:	66 89 02             	mov    %ax,(%edx)
        break;
c01013d4:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013d5:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c01013dc:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013e0:	76 5b                	jbe    c010143d <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013e2:	a1 44 03 15 c0       	mov    0xc0150344,%eax
c01013e7:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013ed:	a1 44 03 15 c0       	mov    0xc0150344,%eax
c01013f2:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013f9:	00 
c01013fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013fe:	89 04 24             	mov    %eax,(%esp)
c0101401:	e8 89 43 01 00       	call   c011578f <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101406:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010140d:	eb 15                	jmp    c0101424 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010140f:	a1 44 03 15 c0       	mov    0xc0150344,%eax
c0101414:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101417:	01 d2                	add    %edx,%edx
c0101419:	01 d0                	add    %edx,%eax
c010141b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101420:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101424:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010142b:	7e e2                	jle    c010140f <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010142d:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c0101434:	83 e8 50             	sub    $0x50,%eax
c0101437:	66 a3 48 03 15 c0    	mov    %ax,0xc0150348
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010143d:	0f b7 05 4a 03 15 c0 	movzwl 0xc015034a,%eax
c0101444:	0f b7 c0             	movzwl %ax,%eax
c0101447:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010144b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010144f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101453:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101457:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101458:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c010145f:	66 c1 e8 08          	shr    $0x8,%ax
c0101463:	0f b6 c0             	movzbl %al,%eax
c0101466:	0f b7 15 4a 03 15 c0 	movzwl 0xc015034a,%edx
c010146d:	83 c2 01             	add    $0x1,%edx
c0101470:	0f b7 d2             	movzwl %dx,%edx
c0101473:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101477:	88 45 ed             	mov    %al,-0x13(%ebp)
c010147a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010147e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101482:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101483:	0f b7 05 4a 03 15 c0 	movzwl 0xc015034a,%eax
c010148a:	0f b7 c0             	movzwl %ax,%eax
c010148d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101491:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101495:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101499:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010149d:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010149e:	0f b7 05 48 03 15 c0 	movzwl 0xc0150348,%eax
c01014a5:	0f b6 c0             	movzbl %al,%eax
c01014a8:	0f b7 15 4a 03 15 c0 	movzwl 0xc015034a,%edx
c01014af:	83 c2 01             	add    $0x1,%edx
c01014b2:	0f b7 d2             	movzwl %dx,%edx
c01014b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014b9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014bc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
}
c01014c5:	83 c4 34             	add    $0x34,%esp
c01014c8:	5b                   	pop    %ebx
c01014c9:	5d                   	pop    %ebp
c01014ca:	c3                   	ret    

c01014cb <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014cb:	55                   	push   %ebp
c01014cc:	89 e5                	mov    %esp,%ebp
c01014ce:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014d8:	eb 09                	jmp    c01014e3 <serial_putc_sub+0x18>
        delay();
c01014da:	e8 4f fb ff ff       	call   c010102e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 20             	and    $0x20,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 09                	jne    c010150a <serial_putc_sub+0x3f>
c0101501:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101508:	7e d0                	jle    c01014da <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010150a:	8b 45 08             	mov    0x8(%ebp),%eax
c010150d:	0f b6 c0             	movzbl %al,%eax
c0101510:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101516:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101519:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010151d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101521:	ee                   	out    %al,(%dx)
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010152a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010152e:	74 0d                	je     c010153d <serial_putc+0x19>
        serial_putc_sub(c);
c0101530:	8b 45 08             	mov    0x8(%ebp),%eax
c0101533:	89 04 24             	mov    %eax,(%esp)
c0101536:	e8 90 ff ff ff       	call   c01014cb <serial_putc_sub>
c010153b:	eb 24                	jmp    c0101561 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010153d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101544:	e8 82 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub(' ');
c0101549:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101550:	e8 76 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub('\b');
c0101555:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010155c:	e8 6a ff ff ff       	call   c01014cb <serial_putc_sub>
    }
}
c0101561:	c9                   	leave  
c0101562:	c3                   	ret    

c0101563 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101563:	55                   	push   %ebp
c0101564:	89 e5                	mov    %esp,%ebp
c0101566:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101569:	eb 33                	jmp    c010159e <cons_intr+0x3b>
        if (c != 0) {
c010156b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010156f:	74 2d                	je     c010159e <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101571:	a1 64 05 15 c0       	mov    0xc0150564,%eax
c0101576:	8d 50 01             	lea    0x1(%eax),%edx
c0101579:	89 15 64 05 15 c0    	mov    %edx,0xc0150564
c010157f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101582:	88 90 60 03 15 c0    	mov    %dl,-0x3feafca0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101588:	a1 64 05 15 c0       	mov    0xc0150564,%eax
c010158d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101592:	75 0a                	jne    c010159e <cons_intr+0x3b>
                cons.wpos = 0;
c0101594:	c7 05 64 05 15 c0 00 	movl   $0x0,0xc0150564
c010159b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010159e:	8b 45 08             	mov    0x8(%ebp),%eax
c01015a1:	ff d0                	call   *%eax
c01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015aa:	75 bf                	jne    c010156b <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015ac:	c9                   	leave  
c01015ad:	c3                   	ret    

c01015ae <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015ae:	55                   	push   %ebp
c01015af:	89 e5                	mov    %esp,%ebp
c01015b1:	83 ec 10             	sub    $0x10,%esp
c01015b4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015be:	89 c2                	mov    %eax,%edx
c01015c0:	ec                   	in     (%dx),%al
c01015c1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 07                	jne    c01015d9 <serial_proc_data+0x2b>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	eb 2a                	jmp    c0101603 <serial_proc_data+0x55>
c01015d9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015df:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015e3:	89 c2                	mov    %eax,%edx
c01015e5:	ec                   	in     (%dx),%al
c01015e6:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015e9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015ed:	0f b6 c0             	movzbl %al,%eax
c01015f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015f3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x52>
        c = '\b';
c01015f9:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101600:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101603:	c9                   	leave  
c0101604:	c3                   	ret    

c0101605 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101605:	55                   	push   %ebp
c0101606:	89 e5                	mov    %esp,%ebp
c0101608:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010160b:	a1 4c 03 15 c0       	mov    0xc015034c,%eax
c0101610:	85 c0                	test   %eax,%eax
c0101612:	74 0c                	je     c0101620 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101614:	c7 04 24 ae 15 10 c0 	movl   $0xc01015ae,(%esp)
c010161b:	e8 43 ff ff ff       	call   c0101563 <cons_intr>
    }
}
c0101620:	c9                   	leave  
c0101621:	c3                   	ret    

c0101622 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101622:	55                   	push   %ebp
c0101623:	89 e5                	mov    %esp,%ebp
c0101625:	83 ec 38             	sub    $0x38,%esp
c0101628:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010162e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101632:	89 c2                	mov    %eax,%edx
c0101634:	ec                   	in     (%dx),%al
c0101635:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101638:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010163c:	0f b6 c0             	movzbl %al,%eax
c010163f:	83 e0 01             	and    $0x1,%eax
c0101642:	85 c0                	test   %eax,%eax
c0101644:	75 0a                	jne    c0101650 <kbd_proc_data+0x2e>
        return -1;
c0101646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164b:	e9 59 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
c0101650:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101656:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010165a:	89 c2                	mov    %eax,%edx
c010165c:	ec                   	in     (%dx),%al
c010165d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101660:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101664:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101667:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010166b:	75 17                	jne    c0101684 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010166d:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c0101672:	83 c8 40             	or     $0x40,%eax
c0101675:	a3 68 05 15 c0       	mov    %eax,0xc0150568
        return 0;
c010167a:	b8 00 00 00 00       	mov    $0x0,%eax
c010167f:	e9 25 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	84 c0                	test   %al,%al
c010168a:	79 47                	jns    c01016d3 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010168c:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c0101691:	83 e0 40             	and    $0x40,%eax
c0101694:	85 c0                	test   %eax,%eax
c0101696:	75 09                	jne    c01016a1 <kbd_proc_data+0x7f>
c0101698:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010169c:	83 e0 7f             	and    $0x7f,%eax
c010169f:	eb 04                	jmp    c01016a5 <kbd_proc_data+0x83>
c01016a1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016a8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ac:	0f b6 80 60 f0 14 c0 	movzbl -0x3feb0fa0(%eax),%eax
c01016b3:	83 c8 40             	or     $0x40,%eax
c01016b6:	0f b6 c0             	movzbl %al,%eax
c01016b9:	f7 d0                	not    %eax
c01016bb:	89 c2                	mov    %eax,%edx
c01016bd:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c01016c2:	21 d0                	and    %edx,%eax
c01016c4:	a3 68 05 15 c0       	mov    %eax,0xc0150568
        return 0;
c01016c9:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ce:	e9 d6 00 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016d3:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c01016d8:	83 e0 40             	and    $0x40,%eax
c01016db:	85 c0                	test   %eax,%eax
c01016dd:	74 11                	je     c01016f0 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016df:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016e3:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c01016e8:	83 e0 bf             	and    $0xffffffbf,%eax
c01016eb:	a3 68 05 15 c0       	mov    %eax,0xc0150568
    }

    shift |= shiftcode[data];
c01016f0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016f4:	0f b6 80 60 f0 14 c0 	movzbl -0x3feb0fa0(%eax),%eax
c01016fb:	0f b6 d0             	movzbl %al,%edx
c01016fe:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c0101703:	09 d0                	or     %edx,%eax
c0101705:	a3 68 05 15 c0       	mov    %eax,0xc0150568
    shift ^= togglecode[data];
c010170a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010170e:	0f b6 80 60 f1 14 c0 	movzbl -0x3feb0ea0(%eax),%eax
c0101715:	0f b6 d0             	movzbl %al,%edx
c0101718:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c010171d:	31 d0                	xor    %edx,%eax
c010171f:	a3 68 05 15 c0       	mov    %eax,0xc0150568

    c = charcode[shift & (CTL | SHIFT)][data];
c0101724:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c0101729:	83 e0 03             	and    $0x3,%eax
c010172c:	8b 14 85 60 f5 14 c0 	mov    -0x3feb0aa0(,%eax,4),%edx
c0101733:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101737:	01 d0                	add    %edx,%eax
c0101739:	0f b6 00             	movzbl (%eax),%eax
c010173c:	0f b6 c0             	movzbl %al,%eax
c010173f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101742:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c0101747:	83 e0 08             	and    $0x8,%eax
c010174a:	85 c0                	test   %eax,%eax
c010174c:	74 22                	je     c0101770 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010174e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101752:	7e 0c                	jle    c0101760 <kbd_proc_data+0x13e>
c0101754:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101758:	7f 06                	jg     c0101760 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010175a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010175e:	eb 10                	jmp    c0101770 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101760:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101764:	7e 0a                	jle    c0101770 <kbd_proc_data+0x14e>
c0101766:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010176a:	7f 04                	jg     c0101770 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010176c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101770:	a1 68 05 15 c0       	mov    0xc0150568,%eax
c0101775:	f7 d0                	not    %eax
c0101777:	83 e0 06             	and    $0x6,%eax
c010177a:	85 c0                	test   %eax,%eax
c010177c:	75 28                	jne    c01017a6 <kbd_proc_data+0x184>
c010177e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101785:	75 1f                	jne    c01017a6 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101787:	c7 04 24 fd 5b 11 c0 	movl   $0xc0115bfd,(%esp)
c010178e:	e8 d2 eb ff ff       	call   c0100365 <cprintf>
c0101793:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101799:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010179d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017a1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017a5:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017b1:	c7 04 24 22 16 10 c0 	movl   $0xc0101622,(%esp)
c01017b8:	e8 a6 fd ff ff       	call   c0101563 <cons_intr>
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <kbd_init>:

static void
kbd_init(void) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017c5:	e8 e1 ff ff ff       	call   c01017ab <kbd_intr>
    pic_enable(IRQ_KBD);
c01017ca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017d1:	e8 d0 09 00 00       	call   c01021a6 <pic_enable>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017de:	e8 93 f8 ff ff       	call   c0101076 <cga_init>
    serial_init();
c01017e3:	e8 74 f9 ff ff       	call   c010115c <serial_init>
    kbd_init();
c01017e8:	e8 d2 ff ff ff       	call   c01017bf <kbd_init>
    if (!serial_exists) {
c01017ed:	a1 4c 03 15 c0       	mov    0xc015034c,%eax
c01017f2:	85 c0                	test   %eax,%eax
c01017f4:	75 0c                	jne    c0101802 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017f6:	c7 04 24 09 5c 11 c0 	movl   $0xc0115c09,(%esp)
c01017fd:	e8 63 eb ff ff       	call   c0100365 <cprintf>
    }
}
c0101802:	c9                   	leave  
c0101803:	c3                   	ret    

c0101804 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101804:	55                   	push   %ebp
c0101805:	89 e5                	mov    %esp,%ebp
c0101807:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010180a:	e8 e2 f7 ff ff       	call   c0100ff1 <__intr_save>
c010180f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101812:	8b 45 08             	mov    0x8(%ebp),%eax
c0101815:	89 04 24             	mov    %eax,(%esp)
c0101818:	e8 9b fa ff ff       	call   c01012b8 <lpt_putc>
        cga_putc(c);
c010181d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101820:	89 04 24             	mov    %eax,(%esp)
c0101823:	e8 cf fa ff ff       	call   c01012f7 <cga_putc>
        serial_putc(c);
c0101828:	8b 45 08             	mov    0x8(%ebp),%eax
c010182b:	89 04 24             	mov    %eax,(%esp)
c010182e:	e8 f1 fc ff ff       	call   c0101524 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101836:	89 04 24             	mov    %eax,(%esp)
c0101839:	e8 dd f7 ff ff       	call   c010101b <__intr_restore>
}
c010183e:	c9                   	leave  
c010183f:	c3                   	ret    

c0101840 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101840:	55                   	push   %ebp
c0101841:	89 e5                	mov    %esp,%ebp
c0101843:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010184d:	e8 9f f7 ff ff       	call   c0100ff1 <__intr_save>
c0101852:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101855:	e8 ab fd ff ff       	call   c0101605 <serial_intr>
        kbd_intr();
c010185a:	e8 4c ff ff ff       	call   c01017ab <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010185f:	8b 15 60 05 15 c0    	mov    0xc0150560,%edx
c0101865:	a1 64 05 15 c0       	mov    0xc0150564,%eax
c010186a:	39 c2                	cmp    %eax,%edx
c010186c:	74 31                	je     c010189f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010186e:	a1 60 05 15 c0       	mov    0xc0150560,%eax
c0101873:	8d 50 01             	lea    0x1(%eax),%edx
c0101876:	89 15 60 05 15 c0    	mov    %edx,0xc0150560
c010187c:	0f b6 80 60 03 15 c0 	movzbl -0x3feafca0(%eax),%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101889:	a1 60 05 15 c0       	mov    0xc0150560,%eax
c010188e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101893:	75 0a                	jne    c010189f <cons_getc+0x5f>
                cons.rpos = 0;
c0101895:	c7 05 60 05 15 c0 00 	movl   $0x0,0xc0150560
c010189c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010189f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018a2:	89 04 24             	mov    %eax,(%esp)
c01018a5:	e8 71 f7 ff ff       	call   c010101b <__intr_restore>
    return c;
c01018aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018ad:	c9                   	leave  
c01018ae:	c3                   	ret    

c01018af <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	83 ec 14             	sub    $0x14,%esp
c01018b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018bc:	90                   	nop
c01018bd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018c1:	83 c0 07             	add    $0x7,%eax
c01018c4:	0f b7 c0             	movzwl %ax,%eax
c01018c7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018cf:	89 c2                	mov    %eax,%edx
c01018d1:	ec                   	in     (%dx),%al
c01018d2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018d5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018d9:	0f b6 c0             	movzbl %al,%eax
c01018dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e2:	25 80 00 00 00       	and    $0x80,%eax
c01018e7:	85 c0                	test   %eax,%eax
c01018e9:	75 d2                	jne    c01018bd <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018ef:	74 11                	je     c0101902 <ide_wait_ready+0x53>
c01018f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f4:	83 e0 21             	and    $0x21,%eax
c01018f7:	85 c0                	test   %eax,%eax
c01018f9:	74 07                	je     c0101902 <ide_wait_ready+0x53>
        return -1;
c01018fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101900:	eb 05                	jmp    c0101907 <ide_wait_ready+0x58>
    }
    return 0;
c0101902:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101907:	c9                   	leave  
c0101908:	c3                   	ret    

c0101909 <ide_init>:

void
ide_init(void) {
c0101909:	55                   	push   %ebp
c010190a:	89 e5                	mov    %esp,%ebp
c010190c:	57                   	push   %edi
c010190d:	53                   	push   %ebx
c010190e:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101914:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010191a:	e9 d6 02 00 00       	jmp    c0101bf5 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010191f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101923:	c1 e0 03             	shl    $0x3,%eax
c0101926:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010192d:	29 c2                	sub    %eax,%edx
c010192f:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101935:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101938:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010193c:	66 d1 e8             	shr    %ax
c010193f:	0f b7 c0             	movzwl %ax,%eax
c0101942:	0f b7 04 85 28 5c 11 	movzwl -0x3feea3d8(,%eax,4),%eax
c0101949:	c0 
c010194a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010194e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101952:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101959:	00 
c010195a:	89 04 24             	mov    %eax,(%esp)
c010195d:	e8 4d ff ff ff       	call   c01018af <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101962:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101966:	83 e0 01             	and    $0x1,%eax
c0101969:	c1 e0 04             	shl    $0x4,%eax
c010196c:	83 c8 e0             	or     $0xffffffe0,%eax
c010196f:	0f b6 c0             	movzbl %al,%eax
c0101972:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101976:	83 c2 06             	add    $0x6,%edx
c0101979:	0f b7 d2             	movzwl %dx,%edx
c010197c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101980:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101983:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101987:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010198b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101997:	00 
c0101998:	89 04 24             	mov    %eax,(%esp)
c010199b:	e8 0f ff ff ff       	call   c01018af <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019a4:	83 c0 07             	add    $0x7,%eax
c01019a7:	0f b7 c0             	movzwl %ax,%eax
c01019aa:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019ae:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019b2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019b6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019c6:	00 
c01019c7:	89 04 24             	mov    %eax,(%esp)
c01019ca:	e8 e0 fe ff ff       	call   c01018af <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019d3:	83 c0 07             	add    $0x7,%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019dd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019e1:	89 c2                	mov    %eax,%edx
c01019e3:	ec                   	in     (%dx),%al
c01019e4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019eb:	84 c0                	test   %al,%al
c01019ed:	0f 84 f7 01 00 00    	je     c0101bea <ide_init+0x2e1>
c01019f3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019f7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019fe:	00 
c01019ff:	89 04 24             	mov    %eax,(%esp)
c0101a02:	e8 a8 fe ff ff       	call   c01018af <ide_wait_ready>
c0101a07:	85 c0                	test   %eax,%eax
c0101a09:	0f 85 db 01 00 00    	jne    c0101bea <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a0f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a13:	c1 e0 03             	shl    $0x3,%eax
c0101a16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1d:	29 c2                	sub    %eax,%edx
c0101a1f:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101a25:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a28:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a2f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a35:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a38:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a42:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a48:	89 cb                	mov    %ecx,%ebx
c0101a4a:	89 df                	mov    %ebx,%edi
c0101a4c:	89 c1                	mov    %eax,%ecx
c0101a4e:	fc                   	cld    
c0101a4f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a51:	89 c8                	mov    %ecx,%eax
c0101a53:	89 fb                	mov    %edi,%ebx
c0101a55:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a58:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a5b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a67:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a73:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a78:	85 c0                	test   %eax,%eax
c0101a7a:	74 0e                	je     c0101a8a <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a7f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a88:	eb 09                	jmp    c0101a93 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8d:	8b 40 78             	mov    0x78(%eax),%eax
c0101a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a93:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a97:	c1 e0 03             	shl    $0x3,%eax
c0101a9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa1:	29 c2                	sub    %eax,%edx
c0101aa3:	81 c2 a0 05 15 c0    	add    $0xc01505a0,%edx
c0101aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101aac:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101aaf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab3:	c1 e0 03             	shl    $0x3,%eax
c0101ab6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abd:	29 c2                	sub    %eax,%edx
c0101abf:	81 c2 a0 05 15 c0    	add    $0xc01505a0,%edx
c0101ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ac8:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ace:	83 c0 62             	add    $0x62,%eax
c0101ad1:	0f b7 00             	movzwl (%eax),%eax
c0101ad4:	0f b7 c0             	movzwl %ax,%eax
c0101ad7:	25 00 02 00 00       	and    $0x200,%eax
c0101adc:	85 c0                	test   %eax,%eax
c0101ade:	75 24                	jne    c0101b04 <ide_init+0x1fb>
c0101ae0:	c7 44 24 0c 30 5c 11 	movl   $0xc0115c30,0xc(%esp)
c0101ae7:	c0 
c0101ae8:	c7 44 24 08 73 5c 11 	movl   $0xc0115c73,0x8(%esp)
c0101aef:	c0 
c0101af0:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101af7:	00 
c0101af8:	c7 04 24 88 5c 11 c0 	movl   $0xc0115c88,(%esp)
c0101aff:	e8 c4 f3 ff ff       	call   c0100ec8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b08:	c1 e0 03             	shl    $0x3,%eax
c0101b0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b12:	29 c2                	sub    %eax,%edx
c0101b14:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101b1a:	83 c0 0c             	add    $0xc,%eax
c0101b1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b23:	83 c0 36             	add    $0x36,%eax
c0101b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b29:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b37:	eb 34                	jmp    c0101b6d <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b3f:	01 c2                	add    %eax,%edx
c0101b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b44:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b4a:	01 c8                	add    %ecx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	88 02                	mov    %al,(%edx)
c0101b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b54:	8d 50 01             	lea    0x1(%eax),%edx
c0101b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b5a:	01 c2                	add    %eax,%edx
c0101b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b62:	01 c8                	add    %ecx,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b69:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b70:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b73:	72 c4                	jb     c0101b39 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7b:	01 d0                	add    %edx,%eax
c0101b7d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b86:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b89:	85 c0                	test   %eax,%eax
c0101b8b:	74 0f                	je     c0101b9c <ide_init+0x293>
c0101b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b93:	01 d0                	add    %edx,%eax
c0101b95:	0f b6 00             	movzbl (%eax),%eax
c0101b98:	3c 20                	cmp    $0x20,%al
c0101b9a:	74 d9                	je     c0101b75 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba0:	c1 e0 03             	shl    $0x3,%eax
c0101ba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baa:	29 c2                	sub    %eax,%edx
c0101bac:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101bb2:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bb5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bb9:	c1 e0 03             	shl    $0x3,%eax
c0101bbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc3:	29 c2                	sub    %eax,%edx
c0101bc5:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101bcb:	8b 50 08             	mov    0x8(%eax),%edx
c0101bce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bde:	c7 04 24 9a 5c 11 c0 	movl   $0xc0115c9a,(%esp)
c0101be5:	e8 7b e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bee:	83 c0 01             	add    $0x1,%eax
c0101bf1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101bf5:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101bfa:	0f 86 1f fd ff ff    	jbe    c010191f <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c00:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c07:	e8 9a 05 00 00       	call   c01021a6 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c13:	e8 8e 05 00 00       	call   c01021a6 <pic_enable>
}
c0101c18:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c1e:	5b                   	pop    %ebx
c0101c1f:	5f                   	pop    %edi
c0101c20:	5d                   	pop    %ebp
c0101c21:	c3                   	ret    

c0101c22 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c22:	55                   	push   %ebp
c0101c23:	89 e5                	mov    %esp,%ebp
c0101c25:	83 ec 04             	sub    $0x4,%esp
c0101c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c2f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c34:	77 24                	ja     c0101c5a <ide_device_valid+0x38>
c0101c36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c3a:	c1 e0 03             	shl    $0x3,%eax
c0101c3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c44:	29 c2                	sub    %eax,%edx
c0101c46:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101c4c:	0f b6 00             	movzbl (%eax),%eax
c0101c4f:	84 c0                	test   %al,%al
c0101c51:	74 07                	je     c0101c5a <ide_device_valid+0x38>
c0101c53:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c58:	eb 05                	jmp    c0101c5f <ide_device_valid+0x3d>
c0101c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5f:	c9                   	leave  
c0101c60:	c3                   	ret    

c0101c61 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c61:	55                   	push   %ebp
c0101c62:	89 e5                	mov    %esp,%ebp
c0101c64:	83 ec 08             	sub    $0x8,%esp
c0101c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c6a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c6e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c72:	89 04 24             	mov    %eax,(%esp)
c0101c75:	e8 a8 ff ff ff       	call   c0101c22 <ide_device_valid>
c0101c7a:	85 c0                	test   %eax,%eax
c0101c7c:	74 1b                	je     c0101c99 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c7e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c82:	c1 e0 03             	shl    $0x3,%eax
c0101c85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c8c:	29 c2                	sub    %eax,%edx
c0101c8e:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101c94:	8b 40 08             	mov    0x8(%eax),%eax
c0101c97:	eb 05                	jmp    c0101c9e <ide_device_size+0x3d>
    }
    return 0;
c0101c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c9e:	c9                   	leave  
c0101c9f:	c3                   	ret    

c0101ca0 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ca0:	55                   	push   %ebp
c0101ca1:	89 e5                	mov    %esp,%ebp
c0101ca3:	57                   	push   %edi
c0101ca4:	53                   	push   %ebx
c0101ca5:	83 ec 50             	sub    $0x50,%esp
c0101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cab:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    cprintf("%d [ide_read_secs]\n", openstep++);
c0101caf:	a1 80 05 15 c0       	mov    0xc0150580,%eax
c0101cb4:	8d 50 01             	lea    0x1(%eax),%edx
c0101cb7:	89 15 80 05 15 c0    	mov    %edx,0xc0150580
c0101cbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101cc1:	c7 04 24 b8 5c 11 c0 	movl   $0xc0115cb8,(%esp)
c0101cc8:	e8 98 e6 ff ff       	call   c0100365 <cprintf>
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ccd:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cd4:	77 24                	ja     c0101cfa <ide_read_secs+0x5a>
c0101cd6:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101cdb:	77 1d                	ja     c0101cfa <ide_read_secs+0x5a>
c0101cdd:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ce1:	c1 e0 03             	shl    $0x3,%eax
c0101ce4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ceb:	29 c2                	sub    %eax,%edx
c0101ced:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101cf3:	0f b6 00             	movzbl (%eax),%eax
c0101cf6:	84 c0                	test   %al,%al
c0101cf8:	75 24                	jne    c0101d1e <ide_read_secs+0x7e>
c0101cfa:	c7 44 24 0c cc 5c 11 	movl   $0xc0115ccc,0xc(%esp)
c0101d01:	c0 
c0101d02:	c7 44 24 08 73 5c 11 	movl   $0xc0115c73,0x8(%esp)
c0101d09:	c0 
c0101d0a:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d11:	00 
c0101d12:	c7 04 24 88 5c 11 c0 	movl   $0xc0115c88,(%esp)
c0101d19:	e8 aa f1 ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d1e:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d25:	77 0f                	ja     c0101d36 <ide_read_secs+0x96>
c0101d27:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d2a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d2d:	01 d0                	add    %edx,%eax
c0101d2f:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d34:	76 24                	jbe    c0101d5a <ide_read_secs+0xba>
c0101d36:	c7 44 24 0c f4 5c 11 	movl   $0xc0115cf4,0xc(%esp)
c0101d3d:	c0 
c0101d3e:	c7 44 24 08 73 5c 11 	movl   $0xc0115c73,0x8(%esp)
c0101d45:	c0 
c0101d46:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
c0101d4d:	00 
c0101d4e:	c7 04 24 88 5c 11 c0 	movl   $0xc0115c88,(%esp)
c0101d55:	e8 6e f1 ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d5a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d5e:	66 d1 e8             	shr    %ax
c0101d61:	0f b7 c0             	movzwl %ax,%eax
c0101d64:	0f b7 04 85 28 5c 11 	movzwl -0x3feea3d8(,%eax,4),%eax
c0101d6b:	c0 
c0101d6c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d70:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d74:	66 d1 e8             	shr    %ax
c0101d77:	0f b7 c0             	movzwl %ax,%eax
c0101d7a:	0f b7 04 85 2a 5c 11 	movzwl -0x3feea3d6(,%eax,4),%eax
c0101d81:	c0 
c0101d82:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d86:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d8a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d91:	00 
c0101d92:	89 04 24             	mov    %eax,(%esp)
c0101d95:	e8 15 fb ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d9a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d9e:	83 c0 02             	add    $0x2,%eax
c0101da1:	0f b7 c0             	movzwl %ax,%eax
c0101da4:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101da8:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101dac:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101db0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101db4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101db5:	8b 45 14             	mov    0x14(%ebp),%eax
c0101db8:	0f b6 c0             	movzbl %al,%eax
c0101dbb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dbf:	83 c2 02             	add    $0x2,%edx
c0101dc2:	0f b7 d2             	movzwl %dx,%edx
c0101dc5:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dc9:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dcc:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101dd0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101dd4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dd8:	0f b6 c0             	movzbl %al,%eax
c0101ddb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ddf:	83 c2 03             	add    $0x3,%edx
c0101de2:	0f b7 d2             	movzwl %dx,%edx
c0101de5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101de9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dec:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101df0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101df4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101df5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101df8:	c1 e8 08             	shr    $0x8,%eax
c0101dfb:	0f b6 c0             	movzbl %al,%eax
c0101dfe:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e02:	83 c2 04             	add    $0x4,%edx
c0101e05:	0f b7 d2             	movzwl %dx,%edx
c0101e08:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101e0c:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101e0f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101e13:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101e17:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101e18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e1b:	c1 e8 10             	shr    $0x10,%eax
c0101e1e:	0f b6 c0             	movzbl %al,%eax
c0101e21:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e25:	83 c2 05             	add    $0x5,%edx
c0101e28:	0f b7 d2             	movzwl %dx,%edx
c0101e2b:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e2f:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e32:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e36:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e3a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e3b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e3f:	83 e0 01             	and    $0x1,%eax
c0101e42:	c1 e0 04             	shl    $0x4,%eax
c0101e45:	89 c2                	mov    %eax,%edx
c0101e47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e4a:	c1 e8 18             	shr    $0x18,%eax
c0101e4d:	83 e0 0f             	and    $0xf,%eax
c0101e50:	09 d0                	or     %edx,%eax
c0101e52:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e55:	0f b6 c0             	movzbl %al,%eax
c0101e58:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e5c:	83 c2 06             	add    $0x6,%edx
c0101e5f:	0f b7 d2             	movzwl %dx,%edx
c0101e62:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e66:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e69:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e6d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e71:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e72:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e76:	83 c0 07             	add    $0x7,%eax
c0101e79:	0f b7 c0             	movzwl %ax,%eax
c0101e7c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e80:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e84:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e88:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e8c:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e94:	eb 5a                	jmp    c0101ef0 <ide_read_secs+0x250>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e96:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e9a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101ea1:	00 
c0101ea2:	89 04 24             	mov    %eax,(%esp)
c0101ea5:	e8 05 fa ff ff       	call   c01018af <ide_wait_ready>
c0101eaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101ead:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101eb1:	74 02                	je     c0101eb5 <ide_read_secs+0x215>
            goto out;
c0101eb3:	eb 41                	jmp    c0101ef6 <ide_read_secs+0x256>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101eb5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101ebc:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ebf:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ec2:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101ec9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ecc:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ecf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ed2:	89 cb                	mov    %ecx,%ebx
c0101ed4:	89 df                	mov    %ebx,%edi
c0101ed6:	89 c1                	mov    %eax,%ecx
c0101ed8:	fc                   	cld    
c0101ed9:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101edb:	89 c8                	mov    %ecx,%eax
c0101edd:	89 fb                	mov    %edi,%ebx
c0101edf:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101ee2:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ee5:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ee9:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ef0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ef4:	75 a0                	jne    c0101e96 <ide_read_secs+0x1f6>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ef9:	83 c4 50             	add    $0x50,%esp
c0101efc:	5b                   	pop    %ebx
c0101efd:	5f                   	pop    %edi
c0101efe:	5d                   	pop    %ebp
c0101eff:	c3                   	ret    

c0101f00 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101f00:	55                   	push   %ebp
c0101f01:	89 e5                	mov    %esp,%ebp
c0101f03:	56                   	push   %esi
c0101f04:	53                   	push   %ebx
c0101f05:	83 ec 50             	sub    $0x50,%esp
c0101f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0101f0b:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    // cprintf("[ide_read_secs]\n");
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101f0f:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101f16:	77 24                	ja     c0101f3c <ide_write_secs+0x3c>
c0101f18:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101f1d:	77 1d                	ja     c0101f3c <ide_write_secs+0x3c>
c0101f1f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f23:	c1 e0 03             	shl    $0x3,%eax
c0101f26:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f2d:	29 c2                	sub    %eax,%edx
c0101f2f:	8d 82 a0 05 15 c0    	lea    -0x3feafa60(%edx),%eax
c0101f35:	0f b6 00             	movzbl (%eax),%eax
c0101f38:	84 c0                	test   %al,%al
c0101f3a:	75 24                	jne    c0101f60 <ide_write_secs+0x60>
c0101f3c:	c7 44 24 0c cc 5c 11 	movl   $0xc0115ccc,0xc(%esp)
c0101f43:	c0 
c0101f44:	c7 44 24 08 73 5c 11 	movl   $0xc0115c73,0x8(%esp)
c0101f4b:	c0 
c0101f4c:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0101f53:	00 
c0101f54:	c7 04 24 88 5c 11 c0 	movl   $0xc0115c88,(%esp)
c0101f5b:	e8 68 ef ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f60:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f67:	77 0f                	ja     c0101f78 <ide_write_secs+0x78>
c0101f69:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f6c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f6f:	01 d0                	add    %edx,%eax
c0101f71:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f76:	76 24                	jbe    c0101f9c <ide_write_secs+0x9c>
c0101f78:	c7 44 24 0c f4 5c 11 	movl   $0xc0115cf4,0xc(%esp)
c0101f7f:	c0 
c0101f80:	c7 44 24 08 73 5c 11 	movl   $0xc0115c73,0x8(%esp)
c0101f87:	c0 
c0101f88:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0101f8f:	00 
c0101f90:	c7 04 24 88 5c 11 c0 	movl   $0xc0115c88,(%esp)
c0101f97:	e8 2c ef ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f9c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101fa0:	66 d1 e8             	shr    %ax
c0101fa3:	0f b7 c0             	movzwl %ax,%eax
c0101fa6:	0f b7 04 85 28 5c 11 	movzwl -0x3feea3d8(,%eax,4),%eax
c0101fad:	c0 
c0101fae:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101fb2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101fb6:	66 d1 e8             	shr    %ax
c0101fb9:	0f b7 c0             	movzwl %ax,%eax
c0101fbc:	0f b7 04 85 2a 5c 11 	movzwl -0x3feea3d6(,%eax,4),%eax
c0101fc3:	c0 
c0101fc4:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101fc8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fcc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fd3:	00 
c0101fd4:	89 04 24             	mov    %eax,(%esp)
c0101fd7:	e8 d3 f8 ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fdc:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fe0:	83 c0 02             	add    $0x2,%eax
c0101fe3:	0f b7 c0             	movzwl %ax,%eax
c0101fe6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fea:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fee:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101ff2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ff6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101ff7:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ffa:	0f b6 c0             	movzbl %al,%eax
c0101ffd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102001:	83 c2 02             	add    $0x2,%edx
c0102004:	0f b7 d2             	movzwl %dx,%edx
c0102007:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010200b:	88 45 e9             	mov    %al,-0x17(%ebp)
c010200e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102012:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102016:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0102017:	8b 45 0c             	mov    0xc(%ebp),%eax
c010201a:	0f b6 c0             	movzbl %al,%eax
c010201d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102021:	83 c2 03             	add    $0x3,%edx
c0102024:	0f b7 d2             	movzwl %dx,%edx
c0102027:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010202b:	88 45 e5             	mov    %al,-0x1b(%ebp)
c010202e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102032:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102036:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102037:	8b 45 0c             	mov    0xc(%ebp),%eax
c010203a:	c1 e8 08             	shr    $0x8,%eax
c010203d:	0f b6 c0             	movzbl %al,%eax
c0102040:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102044:	83 c2 04             	add    $0x4,%edx
c0102047:	0f b7 d2             	movzwl %dx,%edx
c010204a:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c010204e:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102051:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102055:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102059:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010205a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010205d:	c1 e8 10             	shr    $0x10,%eax
c0102060:	0f b6 c0             	movzbl %al,%eax
c0102063:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102067:	83 c2 05             	add    $0x5,%edx
c010206a:	0f b7 d2             	movzwl %dx,%edx
c010206d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102071:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102074:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102078:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010207c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010207d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102081:	83 e0 01             	and    $0x1,%eax
c0102084:	c1 e0 04             	shl    $0x4,%eax
c0102087:	89 c2                	mov    %eax,%edx
c0102089:	8b 45 0c             	mov    0xc(%ebp),%eax
c010208c:	c1 e8 18             	shr    $0x18,%eax
c010208f:	83 e0 0f             	and    $0xf,%eax
c0102092:	09 d0                	or     %edx,%eax
c0102094:	83 c8 e0             	or     $0xffffffe0,%eax
c0102097:	0f b6 c0             	movzbl %al,%eax
c010209a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010209e:	83 c2 06             	add    $0x6,%edx
c01020a1:	0f b7 d2             	movzwl %dx,%edx
c01020a4:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01020a8:	88 45 d9             	mov    %al,-0x27(%ebp)
c01020ab:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020af:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01020b3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c01020b4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020b8:	83 c0 07             	add    $0x7,%eax
c01020bb:	0f b7 c0             	movzwl %ax,%eax
c01020be:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020c2:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020c6:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020ca:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020ce:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020d6:	eb 5a                	jmp    c0102132 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020d8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020dc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020e3:	00 
c01020e4:	89 04 24             	mov    %eax,(%esp)
c01020e7:	e8 c3 f7 ff ff       	call   c01018af <ide_wait_ready>
c01020ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020f3:	74 02                	je     c01020f7 <ide_write_secs+0x1f7>
            goto out;
c01020f5:	eb 41                	jmp    c0102138 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020f7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020fe:	8b 45 10             	mov    0x10(%ebp),%eax
c0102101:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0102104:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c010210b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010210e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0102111:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0102114:	89 cb                	mov    %ecx,%ebx
c0102116:	89 de                	mov    %ebx,%esi
c0102118:	89 c1                	mov    %eax,%ecx
c010211a:	fc                   	cld    
c010211b:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c010211d:	89 c8                	mov    %ecx,%eax
c010211f:	89 f3                	mov    %esi,%ebx
c0102121:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102124:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102127:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010212b:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102132:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102136:	75 a0                	jne    c01020d8 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102138:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010213b:	83 c4 50             	add    $0x50,%esp
c010213e:	5b                   	pop    %ebx
c010213f:	5e                   	pop    %esi
c0102140:	5d                   	pop    %ebp
c0102141:	c3                   	ret    

c0102142 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102142:	55                   	push   %ebp
c0102143:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102145:	fb                   	sti    
    sti();
}
c0102146:	5d                   	pop    %ebp
c0102147:	c3                   	ret    

c0102148 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102148:	55                   	push   %ebp
c0102149:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010214b:	fa                   	cli    
    cli();
}
c010214c:	5d                   	pop    %ebp
c010214d:	c3                   	ret    

c010214e <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c010214e:	55                   	push   %ebp
c010214f:	89 e5                	mov    %esp,%ebp
c0102151:	83 ec 14             	sub    $0x14,%esp
c0102154:	8b 45 08             	mov    0x8(%ebp),%eax
c0102157:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010215b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010215f:	66 a3 70 f5 14 c0    	mov    %ax,0xc014f570
    if (did_init) {
c0102165:	a1 88 06 15 c0       	mov    0xc0150688,%eax
c010216a:	85 c0                	test   %eax,%eax
c010216c:	74 36                	je     c01021a4 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010216e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102172:	0f b6 c0             	movzbl %al,%eax
c0102175:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010217b:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010217e:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102182:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102186:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102187:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010218b:	66 c1 e8 08          	shr    $0x8,%ax
c010218f:	0f b6 c0             	movzbl %al,%eax
c0102192:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102198:	88 45 f9             	mov    %al,-0x7(%ebp)
c010219b:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010219f:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021a3:	ee                   	out    %al,(%dx)
    }
}
c01021a4:	c9                   	leave  
c01021a5:	c3                   	ret    

c01021a6 <pic_enable>:

void
pic_enable(unsigned int irq) {
c01021a6:	55                   	push   %ebp
c01021a7:	89 e5                	mov    %esp,%ebp
c01021a9:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c01021ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01021af:	ba 01 00 00 00       	mov    $0x1,%edx
c01021b4:	89 c1                	mov    %eax,%ecx
c01021b6:	d3 e2                	shl    %cl,%edx
c01021b8:	89 d0                	mov    %edx,%eax
c01021ba:	f7 d0                	not    %eax
c01021bc:	89 c2                	mov    %eax,%edx
c01021be:	0f b7 05 70 f5 14 c0 	movzwl 0xc014f570,%eax
c01021c5:	21 d0                	and    %edx,%eax
c01021c7:	0f b7 c0             	movzwl %ax,%eax
c01021ca:	89 04 24             	mov    %eax,(%esp)
c01021cd:	e8 7c ff ff ff       	call   c010214e <pic_setmask>
}
c01021d2:	c9                   	leave  
c01021d3:	c3                   	ret    

c01021d4 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021d4:	55                   	push   %ebp
c01021d5:	89 e5                	mov    %esp,%ebp
c01021d7:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021da:	c7 05 88 06 15 c0 01 	movl   $0x1,0xc0150688
c01021e1:	00 00 00 
c01021e4:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021ea:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021ee:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021f2:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021f6:	ee                   	out    %al,(%dx)
c01021f7:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021fd:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c0102201:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102205:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102209:	ee                   	out    %al,(%dx)
c010220a:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102210:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c0102214:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102218:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010221c:	ee                   	out    %al,(%dx)
c010221d:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102223:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102227:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010222b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010222f:	ee                   	out    %al,(%dx)
c0102230:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102236:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010223a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010223e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102242:	ee                   	out    %al,(%dx)
c0102243:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102249:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010224d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102251:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102255:	ee                   	out    %al,(%dx)
c0102256:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010225c:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102260:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102264:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102268:	ee                   	out    %al,(%dx)
c0102269:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c010226f:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102273:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102277:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010227b:	ee                   	out    %al,(%dx)
c010227c:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102282:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102286:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010228a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010228e:	ee                   	out    %al,(%dx)
c010228f:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102295:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102299:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010229d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01022a1:	ee                   	out    %al,(%dx)
c01022a2:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c01022a8:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c01022ac:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01022b0:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01022b4:	ee                   	out    %al,(%dx)
c01022b5:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01022bb:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022bf:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022c3:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022c7:	ee                   	out    %al,(%dx)
c01022c8:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022ce:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022d2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022d6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022da:	ee                   	out    %al,(%dx)
c01022db:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022e1:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022e5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022e9:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022ed:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022ee:	0f b7 05 70 f5 14 c0 	movzwl 0xc014f570,%eax
c01022f5:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022f9:	74 12                	je     c010230d <pic_init+0x139>
        pic_setmask(irq_mask);
c01022fb:	0f b7 05 70 f5 14 c0 	movzwl 0xc014f570,%eax
c0102302:	0f b7 c0             	movzwl %ax,%eax
c0102305:	89 04 24             	mov    %eax,(%esp)
c0102308:	e8 41 fe ff ff       	call   c010214e <pic_setmask>
    }
}
c010230d:	c9                   	leave  
c010230e:	c3                   	ret    

c010230f <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c010230f:	55                   	push   %ebp
c0102310:	89 e5                	mov    %esp,%ebp
c0102312:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0102315:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010231c:	00 
c010231d:	c7 04 24 40 5d 11 c0 	movl   $0xc0115d40,(%esp)
c0102324:	e8 3c e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102329:	c9                   	leave  
c010232a:	c3                   	ret    

c010232b <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010232b:	55                   	push   %ebp
c010232c:	89 e5                	mov    %esp,%ebp
c010232e:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102331:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102338:	e9 c3 00 00 00       	jmp    c0102400 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010233d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102340:	8b 04 85 00 f6 14 c0 	mov    -0x3feb0a00(,%eax,4),%eax
c0102347:	89 c2                	mov    %eax,%edx
c0102349:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010234c:	66 89 14 c5 c0 06 15 	mov    %dx,-0x3feaf940(,%eax,8)
c0102353:	c0 
c0102354:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102357:	66 c7 04 c5 c2 06 15 	movw   $0x8,-0x3feaf93e(,%eax,8)
c010235e:	c0 08 00 
c0102361:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102364:	0f b6 14 c5 c4 06 15 	movzbl -0x3feaf93c(,%eax,8),%edx
c010236b:	c0 
c010236c:	83 e2 e0             	and    $0xffffffe0,%edx
c010236f:	88 14 c5 c4 06 15 c0 	mov    %dl,-0x3feaf93c(,%eax,8)
c0102376:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102379:	0f b6 14 c5 c4 06 15 	movzbl -0x3feaf93c(,%eax,8),%edx
c0102380:	c0 
c0102381:	83 e2 1f             	and    $0x1f,%edx
c0102384:	88 14 c5 c4 06 15 c0 	mov    %dl,-0x3feaf93c(,%eax,8)
c010238b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010238e:	0f b6 14 c5 c5 06 15 	movzbl -0x3feaf93b(,%eax,8),%edx
c0102395:	c0 
c0102396:	83 e2 f0             	and    $0xfffffff0,%edx
c0102399:	83 ca 0e             	or     $0xe,%edx
c010239c:	88 14 c5 c5 06 15 c0 	mov    %dl,-0x3feaf93b(,%eax,8)
c01023a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023a6:	0f b6 14 c5 c5 06 15 	movzbl -0x3feaf93b(,%eax,8),%edx
c01023ad:	c0 
c01023ae:	83 e2 ef             	and    $0xffffffef,%edx
c01023b1:	88 14 c5 c5 06 15 c0 	mov    %dl,-0x3feaf93b(,%eax,8)
c01023b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023bb:	0f b6 14 c5 c5 06 15 	movzbl -0x3feaf93b(,%eax,8),%edx
c01023c2:	c0 
c01023c3:	83 e2 9f             	and    $0xffffff9f,%edx
c01023c6:	88 14 c5 c5 06 15 c0 	mov    %dl,-0x3feaf93b(,%eax,8)
c01023cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d0:	0f b6 14 c5 c5 06 15 	movzbl -0x3feaf93b(,%eax,8),%edx
c01023d7:	c0 
c01023d8:	83 ca 80             	or     $0xffffff80,%edx
c01023db:	88 14 c5 c5 06 15 c0 	mov    %dl,-0x3feaf93b(,%eax,8)
c01023e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023e5:	8b 04 85 00 f6 14 c0 	mov    -0x3feb0a00(,%eax,4),%eax
c01023ec:	c1 e8 10             	shr    $0x10,%eax
c01023ef:	89 c2                	mov    %eax,%edx
c01023f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023f4:	66 89 14 c5 c6 06 15 	mov    %dx,-0x3feaf93a(,%eax,8)
c01023fb:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01023fc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102400:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102403:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102408:	0f 86 2f ff ff ff    	jbe    c010233d <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010240e:	a1 00 f8 14 c0       	mov    0xc014f800,%eax
c0102413:	66 a3 c0 0a 15 c0    	mov    %ax,0xc0150ac0
c0102419:	66 c7 05 c2 0a 15 c0 	movw   $0x8,0xc0150ac2
c0102420:	08 00 
c0102422:	0f b6 05 c4 0a 15 c0 	movzbl 0xc0150ac4,%eax
c0102429:	83 e0 e0             	and    $0xffffffe0,%eax
c010242c:	a2 c4 0a 15 c0       	mov    %al,0xc0150ac4
c0102431:	0f b6 05 c4 0a 15 c0 	movzbl 0xc0150ac4,%eax
c0102438:	83 e0 1f             	and    $0x1f,%eax
c010243b:	a2 c4 0a 15 c0       	mov    %al,0xc0150ac4
c0102440:	0f b6 05 c5 0a 15 c0 	movzbl 0xc0150ac5,%eax
c0102447:	83 c8 0f             	or     $0xf,%eax
c010244a:	a2 c5 0a 15 c0       	mov    %al,0xc0150ac5
c010244f:	0f b6 05 c5 0a 15 c0 	movzbl 0xc0150ac5,%eax
c0102456:	83 e0 ef             	and    $0xffffffef,%eax
c0102459:	a2 c5 0a 15 c0       	mov    %al,0xc0150ac5
c010245e:	0f b6 05 c5 0a 15 c0 	movzbl 0xc0150ac5,%eax
c0102465:	83 c8 60             	or     $0x60,%eax
c0102468:	a2 c5 0a 15 c0       	mov    %al,0xc0150ac5
c010246d:	0f b6 05 c5 0a 15 c0 	movzbl 0xc0150ac5,%eax
c0102474:	83 c8 80             	or     $0xffffff80,%eax
c0102477:	a2 c5 0a 15 c0       	mov    %al,0xc0150ac5
c010247c:	a1 00 f8 14 c0       	mov    0xc014f800,%eax
c0102481:	c1 e8 10             	shr    $0x10,%eax
c0102484:	66 a3 c6 0a 15 c0    	mov    %ax,0xc0150ac6
c010248a:	c7 45 f8 80 f5 14 c0 	movl   $0xc014f580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102491:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102494:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102497:	c9                   	leave  
c0102498:	c3                   	ret    

c0102499 <trapname>:

static const char *
trapname(int trapno) {
c0102499:	55                   	push   %ebp
c010249a:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010249c:	8b 45 08             	mov    0x8(%ebp),%eax
c010249f:	83 f8 13             	cmp    $0x13,%eax
c01024a2:	77 0c                	ja     c01024b0 <trapname+0x17>
        return excnames[trapno];
c01024a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a7:	8b 04 85 c0 61 11 c0 	mov    -0x3fee9e40(,%eax,4),%eax
c01024ae:	eb 18                	jmp    c01024c8 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024b0:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024b4:	7e 0d                	jle    c01024c3 <trapname+0x2a>
c01024b6:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024ba:	7f 07                	jg     c01024c3 <trapname+0x2a>
        return "Hardware Interrupt";
c01024bc:	b8 4a 5d 11 c0       	mov    $0xc0115d4a,%eax
c01024c1:	eb 05                	jmp    c01024c8 <trapname+0x2f>
    }
    return "(unknown trap)";
c01024c3:	b8 5d 5d 11 c0       	mov    $0xc0115d5d,%eax
}
c01024c8:	5d                   	pop    %ebp
c01024c9:	c3                   	ret    

c01024ca <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024ca:	55                   	push   %ebp
c01024cb:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d0:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024d4:	66 83 f8 08          	cmp    $0x8,%ax
c01024d8:	0f 94 c0             	sete   %al
c01024db:	0f b6 c0             	movzbl %al,%eax
}
c01024de:	5d                   	pop    %ebp
c01024df:	c3                   	ret    

c01024e0 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024e0:	55                   	push   %ebp
c01024e1:	89 e5                	mov    %esp,%ebp
c01024e3:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024ed:	c7 04 24 9e 5d 11 c0 	movl   $0xc0115d9e,(%esp)
c01024f4:	e8 6c de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c01024f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fc:	89 04 24             	mov    %eax,(%esp)
c01024ff:	e8 a1 01 00 00       	call   c01026a5 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102504:	8b 45 08             	mov    0x8(%ebp),%eax
c0102507:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010250b:	0f b7 c0             	movzwl %ax,%eax
c010250e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102512:	c7 04 24 af 5d 11 c0 	movl   $0xc0115daf,(%esp)
c0102519:	e8 47 de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010251e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102521:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102525:	0f b7 c0             	movzwl %ax,%eax
c0102528:	89 44 24 04          	mov    %eax,0x4(%esp)
c010252c:	c7 04 24 c2 5d 11 c0 	movl   $0xc0115dc2,(%esp)
c0102533:	e8 2d de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102538:	8b 45 08             	mov    0x8(%ebp),%eax
c010253b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c010253f:	0f b7 c0             	movzwl %ax,%eax
c0102542:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102546:	c7 04 24 d5 5d 11 c0 	movl   $0xc0115dd5,(%esp)
c010254d:	e8 13 de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102552:	8b 45 08             	mov    0x8(%ebp),%eax
c0102555:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102559:	0f b7 c0             	movzwl %ax,%eax
c010255c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102560:	c7 04 24 e8 5d 11 c0 	movl   $0xc0115de8,(%esp)
c0102567:	e8 f9 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010256c:	8b 45 08             	mov    0x8(%ebp),%eax
c010256f:	8b 40 30             	mov    0x30(%eax),%eax
c0102572:	89 04 24             	mov    %eax,(%esp)
c0102575:	e8 1f ff ff ff       	call   c0102499 <trapname>
c010257a:	8b 55 08             	mov    0x8(%ebp),%edx
c010257d:	8b 52 30             	mov    0x30(%edx),%edx
c0102580:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102584:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102588:	c7 04 24 fb 5d 11 c0 	movl   $0xc0115dfb,(%esp)
c010258f:	e8 d1 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102594:	8b 45 08             	mov    0x8(%ebp),%eax
c0102597:	8b 40 34             	mov    0x34(%eax),%eax
c010259a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010259e:	c7 04 24 0d 5e 11 c0 	movl   $0xc0115e0d,(%esp)
c01025a5:	e8 bb dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 38             	mov    0x38(%eax),%eax
c01025b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b4:	c7 04 24 1c 5e 11 c0 	movl   $0xc0115e1c,(%esp)
c01025bb:	e8 a5 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c3:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025c7:	0f b7 c0             	movzwl %ax,%eax
c01025ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ce:	c7 04 24 2b 5e 11 c0 	movl   $0xc0115e2b,(%esp)
c01025d5:	e8 8b dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025da:	8b 45 08             	mov    0x8(%ebp),%eax
c01025dd:	8b 40 40             	mov    0x40(%eax),%eax
c01025e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025e4:	c7 04 24 3e 5e 11 c0 	movl   $0xc0115e3e,(%esp)
c01025eb:	e8 75 dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025f7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025fe:	eb 3e                	jmp    c010263e <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102600:	8b 45 08             	mov    0x8(%ebp),%eax
c0102603:	8b 50 40             	mov    0x40(%eax),%edx
c0102606:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102609:	21 d0                	and    %edx,%eax
c010260b:	85 c0                	test   %eax,%eax
c010260d:	74 28                	je     c0102637 <print_trapframe+0x157>
c010260f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102612:	8b 04 85 a0 f5 14 c0 	mov    -0x3feb0a60(,%eax,4),%eax
c0102619:	85 c0                	test   %eax,%eax
c010261b:	74 1a                	je     c0102637 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c010261d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102620:	8b 04 85 a0 f5 14 c0 	mov    -0x3feb0a60(,%eax,4),%eax
c0102627:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262b:	c7 04 24 4d 5e 11 c0 	movl   $0xc0115e4d,(%esp)
c0102632:	e8 2e dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102637:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010263b:	d1 65 f0             	shll   -0x10(%ebp)
c010263e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102641:	83 f8 17             	cmp    $0x17,%eax
c0102644:	76 ba                	jbe    c0102600 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102646:	8b 45 08             	mov    0x8(%ebp),%eax
c0102649:	8b 40 40             	mov    0x40(%eax),%eax
c010264c:	25 00 30 00 00       	and    $0x3000,%eax
c0102651:	c1 e8 0c             	shr    $0xc,%eax
c0102654:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102658:	c7 04 24 51 5e 11 c0 	movl   $0xc0115e51,(%esp)
c010265f:	e8 01 dd ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102664:	8b 45 08             	mov    0x8(%ebp),%eax
c0102667:	89 04 24             	mov    %eax,(%esp)
c010266a:	e8 5b fe ff ff       	call   c01024ca <trap_in_kernel>
c010266f:	85 c0                	test   %eax,%eax
c0102671:	75 30                	jne    c01026a3 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102673:	8b 45 08             	mov    0x8(%ebp),%eax
c0102676:	8b 40 44             	mov    0x44(%eax),%eax
c0102679:	89 44 24 04          	mov    %eax,0x4(%esp)
c010267d:	c7 04 24 5a 5e 11 c0 	movl   $0xc0115e5a,(%esp)
c0102684:	e8 dc dc ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102689:	8b 45 08             	mov    0x8(%ebp),%eax
c010268c:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102690:	0f b7 c0             	movzwl %ax,%eax
c0102693:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102697:	c7 04 24 69 5e 11 c0 	movl   $0xc0115e69,(%esp)
c010269e:	e8 c2 dc ff ff       	call   c0100365 <cprintf>
    }
}
c01026a3:	c9                   	leave  
c01026a4:	c3                   	ret    

c01026a5 <print_regs>:

void
print_regs(struct pushregs *regs) {
c01026a5:	55                   	push   %ebp
c01026a6:	89 e5                	mov    %esp,%ebp
c01026a8:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01026ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ae:	8b 00                	mov    (%eax),%eax
c01026b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026b4:	c7 04 24 7c 5e 11 c0 	movl   $0xc0115e7c,(%esp)
c01026bb:	e8 a5 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026c3:	8b 40 04             	mov    0x4(%eax),%eax
c01026c6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ca:	c7 04 24 8b 5e 11 c0 	movl   $0xc0115e8b,(%esp)
c01026d1:	e8 8f dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d9:	8b 40 08             	mov    0x8(%eax),%eax
c01026dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e0:	c7 04 24 9a 5e 11 c0 	movl   $0xc0115e9a,(%esp)
c01026e7:	e8 79 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ef:	8b 40 0c             	mov    0xc(%eax),%eax
c01026f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f6:	c7 04 24 a9 5e 11 c0 	movl   $0xc0115ea9,(%esp)
c01026fd:	e8 63 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102702:	8b 45 08             	mov    0x8(%ebp),%eax
c0102705:	8b 40 10             	mov    0x10(%eax),%eax
c0102708:	89 44 24 04          	mov    %eax,0x4(%esp)
c010270c:	c7 04 24 b8 5e 11 c0 	movl   $0xc0115eb8,(%esp)
c0102713:	e8 4d dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102718:	8b 45 08             	mov    0x8(%ebp),%eax
c010271b:	8b 40 14             	mov    0x14(%eax),%eax
c010271e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102722:	c7 04 24 c7 5e 11 c0 	movl   $0xc0115ec7,(%esp)
c0102729:	e8 37 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010272e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102731:	8b 40 18             	mov    0x18(%eax),%eax
c0102734:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102738:	c7 04 24 d6 5e 11 c0 	movl   $0xc0115ed6,(%esp)
c010273f:	e8 21 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102744:	8b 45 08             	mov    0x8(%ebp),%eax
c0102747:	8b 40 1c             	mov    0x1c(%eax),%eax
c010274a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010274e:	c7 04 24 e5 5e 11 c0 	movl   $0xc0115ee5,(%esp)
c0102755:	e8 0b dc ff ff       	call   c0100365 <cprintf>
}
c010275a:	c9                   	leave  
c010275b:	c3                   	ret    

c010275c <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010275c:	55                   	push   %ebp
c010275d:	89 e5                	mov    %esp,%ebp
c010275f:	53                   	push   %ebx
c0102760:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102763:	8b 45 08             	mov    0x8(%ebp),%eax
c0102766:	8b 40 34             	mov    0x34(%eax),%eax
c0102769:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010276c:	85 c0                	test   %eax,%eax
c010276e:	74 07                	je     c0102777 <print_pgfault+0x1b>
c0102770:	b9 f4 5e 11 c0       	mov    $0xc0115ef4,%ecx
c0102775:	eb 05                	jmp    c010277c <print_pgfault+0x20>
c0102777:	b9 05 5f 11 c0       	mov    $0xc0115f05,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010277c:	8b 45 08             	mov    0x8(%ebp),%eax
c010277f:	8b 40 34             	mov    0x34(%eax),%eax
c0102782:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102785:	85 c0                	test   %eax,%eax
c0102787:	74 07                	je     c0102790 <print_pgfault+0x34>
c0102789:	ba 57 00 00 00       	mov    $0x57,%edx
c010278e:	eb 05                	jmp    c0102795 <print_pgfault+0x39>
c0102790:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102795:	8b 45 08             	mov    0x8(%ebp),%eax
c0102798:	8b 40 34             	mov    0x34(%eax),%eax
c010279b:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010279e:	85 c0                	test   %eax,%eax
c01027a0:	74 07                	je     c01027a9 <print_pgfault+0x4d>
c01027a2:	b8 55 00 00 00       	mov    $0x55,%eax
c01027a7:	eb 05                	jmp    c01027ae <print_pgfault+0x52>
c01027a9:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027ae:	0f 20 d3             	mov    %cr2,%ebx
c01027b1:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01027b4:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01027b7:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01027bb:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027c3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027c7:	c7 04 24 14 5f 11 c0 	movl   $0xc0115f14,(%esp)
c01027ce:	e8 92 db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027d3:	83 c4 34             	add    $0x34,%esp
c01027d6:	5b                   	pop    %ebx
c01027d7:	5d                   	pop    %ebp
c01027d8:	c3                   	ret    

c01027d9 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027d9:	55                   	push   %ebp
c01027da:	89 e5                	mov    %esp,%ebp
c01027dc:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027df:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c01027e4:	85 c0                	test   %eax,%eax
c01027e6:	74 0b                	je     c01027f3 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01027eb:	89 04 24             	mov    %eax,(%esp)
c01027ee:	e8 69 ff ff ff       	call   c010275c <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027f3:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c01027f8:	85 c0                	test   %eax,%eax
c01027fa:	74 3d                	je     c0102839 <pgfault_handler+0x60>
        assert(current == idleproc);
c01027fc:	8b 15 c8 0f 15 c0    	mov    0xc0150fc8,%edx
c0102802:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c0102807:	39 c2                	cmp    %eax,%edx
c0102809:	74 24                	je     c010282f <pgfault_handler+0x56>
c010280b:	c7 44 24 0c 37 5f 11 	movl   $0xc0115f37,0xc(%esp)
c0102812:	c0 
c0102813:	c7 44 24 08 4b 5f 11 	movl   $0xc0115f4b,0x8(%esp)
c010281a:	c0 
c010281b:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102822:	00 
c0102823:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c010282a:	e8 99 e6 ff ff       	call   c0100ec8 <__panic>
        mm = check_mm_struct;
c010282f:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c0102834:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102837:	eb 46                	jmp    c010287f <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102839:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010283e:	85 c0                	test   %eax,%eax
c0102840:	75 32                	jne    c0102874 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102842:	8b 45 08             	mov    0x8(%ebp),%eax
c0102845:	89 04 24             	mov    %eax,(%esp)
c0102848:	e8 93 fc ff ff       	call   c01024e0 <print_trapframe>
            print_pgfault(tf);
c010284d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102850:	89 04 24             	mov    %eax,(%esp)
c0102853:	e8 04 ff ff ff       	call   c010275c <print_pgfault>
            panic("unhandled page fault.\n");
c0102858:	c7 44 24 08 71 5f 11 	movl   $0xc0115f71,0x8(%esp)
c010285f:	c0 
c0102860:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102867:	00 
c0102868:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c010286f:	e8 54 e6 ff ff       	call   c0100ec8 <__panic>
        }
        mm = current->mm;
c0102874:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102879:	8b 40 18             	mov    0x18(%eax),%eax
c010287c:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010287f:	0f 20 d0             	mov    %cr2,%eax
c0102882:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102885:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102888:	89 c2                	mov    %eax,%edx
c010288a:	8b 45 08             	mov    0x8(%ebp),%eax
c010288d:	8b 40 34             	mov    0x34(%eax),%eax
c0102890:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102894:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102898:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010289b:	89 04 24             	mov    %eax,(%esp)
c010289e:	e8 7c 65 00 00       	call   c0108e1f <do_pgfault>
}
c01028a3:	c9                   	leave  
c01028a4:	c3                   	ret    

c01028a5 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01028a5:	55                   	push   %ebp
c01028a6:	89 e5                	mov    %esp,%ebp
c01028a8:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01028ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01028b5:	8b 40 30             	mov    0x30(%eax),%eax
c01028b8:	83 f8 2f             	cmp    $0x2f,%eax
c01028bb:	77 38                	ja     c01028f5 <trap_dispatch+0x50>
c01028bd:	83 f8 2e             	cmp    $0x2e,%eax
c01028c0:	0f 83 cb 01 00 00    	jae    c0102a91 <trap_dispatch+0x1ec>
c01028c6:	83 f8 20             	cmp    $0x20,%eax
c01028c9:	0f 84 07 01 00 00    	je     c01029d6 <trap_dispatch+0x131>
c01028cf:	83 f8 20             	cmp    $0x20,%eax
c01028d2:	77 0a                	ja     c01028de <trap_dispatch+0x39>
c01028d4:	83 f8 0e             	cmp    $0xe,%eax
c01028d7:	74 3e                	je     c0102917 <trap_dispatch+0x72>
c01028d9:	e9 6b 01 00 00       	jmp    c0102a49 <trap_dispatch+0x1a4>
c01028de:	83 f8 21             	cmp    $0x21,%eax
c01028e1:	0f 84 30 01 00 00    	je     c0102a17 <trap_dispatch+0x172>
c01028e7:	83 f8 24             	cmp    $0x24,%eax
c01028ea:	0f 84 27 01 00 00    	je     c0102a17 <trap_dispatch+0x172>
c01028f0:	e9 54 01 00 00       	jmp    c0102a49 <trap_dispatch+0x1a4>
c01028f5:	83 f8 78             	cmp    $0x78,%eax
c01028f8:	0f 82 4b 01 00 00    	jb     c0102a49 <trap_dispatch+0x1a4>
c01028fe:	83 f8 79             	cmp    $0x79,%eax
c0102901:	0f 86 26 01 00 00    	jbe    c0102a2d <trap_dispatch+0x188>
c0102907:	3d 80 00 00 00       	cmp    $0x80,%eax
c010290c:	0f 84 ba 00 00 00    	je     c01029cc <trap_dispatch+0x127>
c0102912:	e9 32 01 00 00       	jmp    c0102a49 <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102917:	8b 45 08             	mov    0x8(%ebp),%eax
c010291a:	89 04 24             	mov    %eax,(%esp)
c010291d:	e8 b7 fe ff ff       	call   c01027d9 <pgfault_handler>
c0102922:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102925:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102929:	0f 84 98 00 00 00    	je     c01029c7 <trap_dispatch+0x122>
            print_trapframe(tf);
c010292f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102932:	89 04 24             	mov    %eax,(%esp)
c0102935:	e8 a6 fb ff ff       	call   c01024e0 <print_trapframe>
            if (current == NULL) {
c010293a:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010293f:	85 c0                	test   %eax,%eax
c0102941:	75 23                	jne    c0102966 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102943:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102946:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010294a:	c7 44 24 08 88 5f 11 	movl   $0xc0115f88,0x8(%esp)
c0102951:	c0 
c0102952:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102959:	00 
c010295a:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c0102961:	e8 62 e5 ff ff       	call   c0100ec8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102966:	8b 45 08             	mov    0x8(%ebp),%eax
c0102969:	89 04 24             	mov    %eax,(%esp)
c010296c:	e8 59 fb ff ff       	call   c01024ca <trap_in_kernel>
c0102971:	85 c0                	test   %eax,%eax
c0102973:	74 23                	je     c0102998 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102975:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102978:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010297c:	c7 44 24 08 a8 5f 11 	movl   $0xc0115fa8,0x8(%esp)
c0102983:	c0 
c0102984:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010298b:	00 
c010298c:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c0102993:	e8 30 e5 ff ff       	call   c0100ec8 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102998:	c7 04 24 d6 5f 11 c0 	movl   $0xc0115fd6,(%esp)
c010299f:	e8 c1 d9 ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01029a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029ab:	c7 44 24 08 ec 5f 11 	movl   $0xc0115fec,0x8(%esp)
c01029b2:	c0 
c01029b3:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01029ba:	00 
c01029bb:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c01029c2:	e8 01 e5 ff ff       	call   c0100ec8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029c7:	e9 c6 00 00 00       	jmp    c0102a92 <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029cc:	e8 8a c4 00 00       	call   c010ee5b <syscall>
        break;
c01029d1:	e9 bc 00 00 00       	jmp    c0102a92 <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c01029d6:	a1 1c 41 15 c0       	mov    0xc015411c,%eax
c01029db:	83 c0 01             	add    $0x1,%eax
c01029de:	a3 1c 41 15 c0       	mov    %eax,0xc015411c
        assert(current != NULL);
c01029e3:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01029e8:	85 c0                	test   %eax,%eax
c01029ea:	75 24                	jne    c0102a10 <trap_dispatch+0x16b>
c01029ec:	c7 44 24 0c 15 60 11 	movl   $0xc0116015,0xc(%esp)
c01029f3:	c0 
c01029f4:	c7 44 24 08 4b 5f 11 	movl   $0xc0115f4b,0x8(%esp)
c01029fb:	c0 
c01029fc:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c0102a03:	00 
c0102a04:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c0102a0b:	e8 b8 e4 ff ff       	call   c0100ec8 <__panic>
        run_timer_list();
c0102a10:	e8 b3 bf 00 00       	call   c010e9c8 <run_timer_list>
        break;
c0102a15:	eb 7b                	jmp    c0102a92 <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102a17:	e8 24 ee ff ff       	call   c0101840 <cons_getc>
c0102a1c:	88 45 f3             	mov    %al,-0xd(%ebp)
        //cprintf("kbd [%03d] %c\n", c, c);
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a1f:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a23:	89 04 24             	mov    %eax,(%esp)
c0102a26:	e8 64 e8 00 00       	call   c011128f <dev_stdin_write>
        }
        break;
c0102a2b:	eb 65                	jmp    c0102a92 <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a2d:	c7 44 24 08 25 60 11 	movl   $0xc0116025,0x8(%esp)
c0102a34:	c0 
c0102a35:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0102a3c:	00 
c0102a3d:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c0102a44:	e8 7f e4 ff ff       	call   c0100ec8 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a49:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a4c:	89 04 24             	mov    %eax,(%esp)
c0102a4f:	e8 8c fa ff ff       	call   c01024e0 <print_trapframe>
        if (current != NULL) {
c0102a54:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102a59:	85 c0                	test   %eax,%eax
c0102a5b:	74 18                	je     c0102a75 <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a5d:	c7 04 24 35 60 11 c0 	movl   $0xc0116035,(%esp)
c0102a64:	e8 fc d8 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c0102a69:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a70:	e8 80 a1 00 00       	call   c010cbf5 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a75:	c7 44 24 08 46 60 11 	movl   $0xc0116046,0x8(%esp)
c0102a7c:	c0 
c0102a7d:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0102a84:	00 
c0102a85:	c7 04 24 60 5f 11 c0 	movl   $0xc0115f60,(%esp)
c0102a8c:	e8 37 e4 ff ff       	call   c0100ec8 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a91:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a92:	c9                   	leave  
c0102a93:	c3                   	ret    

c0102a94 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a94:	55                   	push   %ebp
c0102a95:	89 e5                	mov    %esp,%ebp
c0102a97:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a9a:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102a9f:	85 c0                	test   %eax,%eax
c0102aa1:	75 0d                	jne    c0102ab0 <trap+0x1c>
        trap_dispatch(tf);
c0102aa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aa6:	89 04 24             	mov    %eax,(%esp)
c0102aa9:	e8 f7 fd ff ff       	call   c01028a5 <trap_dispatch>
c0102aae:	eb 6c                	jmp    c0102b1c <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102ab0:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102ab5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102abb:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102ac0:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ac3:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ac6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ac9:	89 04 24             	mov    %eax,(%esp)
c0102acc:	e8 f9 f9 ff ff       	call   c01024ca <trap_in_kernel>
c0102ad1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ad7:	89 04 24             	mov    %eax,(%esp)
c0102ada:	e8 c6 fd ff ff       	call   c01028a5 <trap_dispatch>
    
        current->tf = otf;
c0102adf:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102ae4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ae7:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102aea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102aee:	75 2c                	jne    c0102b1c <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102af0:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102af5:	8b 40 44             	mov    0x44(%eax),%eax
c0102af8:	83 e0 01             	and    $0x1,%eax
c0102afb:	85 c0                	test   %eax,%eax
c0102afd:	74 0c                	je     c0102b0b <trap+0x77>
                do_exit(-E_KILLED);
c0102aff:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b06:	e8 ea a0 00 00       	call   c010cbf5 <do_exit>
            }
            if (current->need_resched) {
c0102b0b:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c0102b10:	8b 40 10             	mov    0x10(%eax),%eax
c0102b13:	85 c0                	test   %eax,%eax
c0102b15:	74 05                	je     c0102b1c <trap+0x88>
                schedule();
c0102b17:	e8 1f bc 00 00       	call   c010e73b <schedule>
            }
        }
    }
}
c0102b1c:	c9                   	leave  
c0102b1d:	c3                   	ret    

c0102b1e <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b1e:	1e                   	push   %ds
    pushl %es
c0102b1f:	06                   	push   %es
    pushl %fs
c0102b20:	0f a0                	push   %fs
    pushl %gs
c0102b22:	0f a8                	push   %gs
    pushal
c0102b24:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b25:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b2a:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b2c:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b2e:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b2f:	e8 60 ff ff ff       	call   c0102a94 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b34:	5c                   	pop    %esp

c0102b35 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b35:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b36:	0f a9                	pop    %gs
    popl %fs
c0102b38:	0f a1                	pop    %fs
    popl %es
c0102b3a:	07                   	pop    %es
    popl %ds
c0102b3b:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b3c:	83 c4 08             	add    $0x8,%esp
    iret
c0102b3f:	cf                   	iret   

c0102b40 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b40:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b44:	e9 ec ff ff ff       	jmp    c0102b35 <__trapret>

c0102b49 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $0
c0102b4b:	6a 00                	push   $0x0
  jmp __alltraps
c0102b4d:	e9 cc ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b52 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $1
c0102b54:	6a 01                	push   $0x1
  jmp __alltraps
c0102b56:	e9 c3 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b5b <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $2
c0102b5d:	6a 02                	push   $0x2
  jmp __alltraps
c0102b5f:	e9 ba ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b64 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $3
c0102b66:	6a 03                	push   $0x3
  jmp __alltraps
c0102b68:	e9 b1 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b6d <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $4
c0102b6f:	6a 04                	push   $0x4
  jmp __alltraps
c0102b71:	e9 a8 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b76 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $5
c0102b78:	6a 05                	push   $0x5
  jmp __alltraps
c0102b7a:	e9 9f ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b7f <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $6
c0102b81:	6a 06                	push   $0x6
  jmp __alltraps
c0102b83:	e9 96 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b88 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $7
c0102b8a:	6a 07                	push   $0x7
  jmp __alltraps
c0102b8c:	e9 8d ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b91 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b91:	6a 08                	push   $0x8
  jmp __alltraps
c0102b93:	e9 86 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b98 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b98:	6a 09                	push   $0x9
  jmp __alltraps
c0102b9a:	e9 7f ff ff ff       	jmp    c0102b1e <__alltraps>

c0102b9f <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b9f:	6a 0a                	push   $0xa
  jmp __alltraps
c0102ba1:	e9 78 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102ba6 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ba6:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ba8:	e9 71 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bad <vector12>:
.globl vector12
vector12:
  pushl $12
c0102bad:	6a 0c                	push   $0xc
  jmp __alltraps
c0102baf:	e9 6a ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bb4 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bb4:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bb6:	e9 63 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bbb <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bbb:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bbd:	e9 5c ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bc2 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bc2:	6a 00                	push   $0x0
  pushl $15
c0102bc4:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bc6:	e9 53 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bcb <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bcb:	6a 00                	push   $0x0
  pushl $16
c0102bcd:	6a 10                	push   $0x10
  jmp __alltraps
c0102bcf:	e9 4a ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bd4 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bd4:	6a 11                	push   $0x11
  jmp __alltraps
c0102bd6:	e9 43 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bdb <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bdb:	6a 00                	push   $0x0
  pushl $18
c0102bdd:	6a 12                	push   $0x12
  jmp __alltraps
c0102bdf:	e9 3a ff ff ff       	jmp    c0102b1e <__alltraps>

c0102be4 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102be4:	6a 00                	push   $0x0
  pushl $19
c0102be6:	6a 13                	push   $0x13
  jmp __alltraps
c0102be8:	e9 31 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bed <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bed:	6a 00                	push   $0x0
  pushl $20
c0102bef:	6a 14                	push   $0x14
  jmp __alltraps
c0102bf1:	e9 28 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bf6 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bf6:	6a 00                	push   $0x0
  pushl $21
c0102bf8:	6a 15                	push   $0x15
  jmp __alltraps
c0102bfa:	e9 1f ff ff ff       	jmp    c0102b1e <__alltraps>

c0102bff <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bff:	6a 00                	push   $0x0
  pushl $22
c0102c01:	6a 16                	push   $0x16
  jmp __alltraps
c0102c03:	e9 16 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102c08 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c08:	6a 00                	push   $0x0
  pushl $23
c0102c0a:	6a 17                	push   $0x17
  jmp __alltraps
c0102c0c:	e9 0d ff ff ff       	jmp    c0102b1e <__alltraps>

c0102c11 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c11:	6a 00                	push   $0x0
  pushl $24
c0102c13:	6a 18                	push   $0x18
  jmp __alltraps
c0102c15:	e9 04 ff ff ff       	jmp    c0102b1e <__alltraps>

c0102c1a <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c1a:	6a 00                	push   $0x0
  pushl $25
c0102c1c:	6a 19                	push   $0x19
  jmp __alltraps
c0102c1e:	e9 fb fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c23 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c23:	6a 00                	push   $0x0
  pushl $26
c0102c25:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c27:	e9 f2 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c2c <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c2c:	6a 00                	push   $0x0
  pushl $27
c0102c2e:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c30:	e9 e9 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c35 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c35:	6a 00                	push   $0x0
  pushl $28
c0102c37:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c39:	e9 e0 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c3e <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c3e:	6a 00                	push   $0x0
  pushl $29
c0102c40:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c42:	e9 d7 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c47 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c47:	6a 00                	push   $0x0
  pushl $30
c0102c49:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c4b:	e9 ce fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c50 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c50:	6a 00                	push   $0x0
  pushl $31
c0102c52:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c54:	e9 c5 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c59 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c59:	6a 00                	push   $0x0
  pushl $32
c0102c5b:	6a 20                	push   $0x20
  jmp __alltraps
c0102c5d:	e9 bc fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c62 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c62:	6a 00                	push   $0x0
  pushl $33
c0102c64:	6a 21                	push   $0x21
  jmp __alltraps
c0102c66:	e9 b3 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c6b <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c6b:	6a 00                	push   $0x0
  pushl $34
c0102c6d:	6a 22                	push   $0x22
  jmp __alltraps
c0102c6f:	e9 aa fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c74 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c74:	6a 00                	push   $0x0
  pushl $35
c0102c76:	6a 23                	push   $0x23
  jmp __alltraps
c0102c78:	e9 a1 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c7d <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c7d:	6a 00                	push   $0x0
  pushl $36
c0102c7f:	6a 24                	push   $0x24
  jmp __alltraps
c0102c81:	e9 98 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c86 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c86:	6a 00                	push   $0x0
  pushl $37
c0102c88:	6a 25                	push   $0x25
  jmp __alltraps
c0102c8a:	e9 8f fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c8f <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c8f:	6a 00                	push   $0x0
  pushl $38
c0102c91:	6a 26                	push   $0x26
  jmp __alltraps
c0102c93:	e9 86 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102c98 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c98:	6a 00                	push   $0x0
  pushl $39
c0102c9a:	6a 27                	push   $0x27
  jmp __alltraps
c0102c9c:	e9 7d fe ff ff       	jmp    c0102b1e <__alltraps>

c0102ca1 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102ca1:	6a 00                	push   $0x0
  pushl $40
c0102ca3:	6a 28                	push   $0x28
  jmp __alltraps
c0102ca5:	e9 74 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102caa <vector41>:
.globl vector41
vector41:
  pushl $0
c0102caa:	6a 00                	push   $0x0
  pushl $41
c0102cac:	6a 29                	push   $0x29
  jmp __alltraps
c0102cae:	e9 6b fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cb3 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cb3:	6a 00                	push   $0x0
  pushl $42
c0102cb5:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cb7:	e9 62 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cbc <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cbc:	6a 00                	push   $0x0
  pushl $43
c0102cbe:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cc0:	e9 59 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cc5 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cc5:	6a 00                	push   $0x0
  pushl $44
c0102cc7:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cc9:	e9 50 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cce <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cce:	6a 00                	push   $0x0
  pushl $45
c0102cd0:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cd2:	e9 47 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cd7 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cd7:	6a 00                	push   $0x0
  pushl $46
c0102cd9:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cdb:	e9 3e fe ff ff       	jmp    c0102b1e <__alltraps>

c0102ce0 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ce0:	6a 00                	push   $0x0
  pushl $47
c0102ce2:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102ce4:	e9 35 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102ce9 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ce9:	6a 00                	push   $0x0
  pushl $48
c0102ceb:	6a 30                	push   $0x30
  jmp __alltraps
c0102ced:	e9 2c fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cf2 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cf2:	6a 00                	push   $0x0
  pushl $49
c0102cf4:	6a 31                	push   $0x31
  jmp __alltraps
c0102cf6:	e9 23 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102cfb <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cfb:	6a 00                	push   $0x0
  pushl $50
c0102cfd:	6a 32                	push   $0x32
  jmp __alltraps
c0102cff:	e9 1a fe ff ff       	jmp    c0102b1e <__alltraps>

c0102d04 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102d04:	6a 00                	push   $0x0
  pushl $51
c0102d06:	6a 33                	push   $0x33
  jmp __alltraps
c0102d08:	e9 11 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102d0d <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d0d:	6a 00                	push   $0x0
  pushl $52
c0102d0f:	6a 34                	push   $0x34
  jmp __alltraps
c0102d11:	e9 08 fe ff ff       	jmp    c0102b1e <__alltraps>

c0102d16 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d16:	6a 00                	push   $0x0
  pushl $53
c0102d18:	6a 35                	push   $0x35
  jmp __alltraps
c0102d1a:	e9 ff fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d1f <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d1f:	6a 00                	push   $0x0
  pushl $54
c0102d21:	6a 36                	push   $0x36
  jmp __alltraps
c0102d23:	e9 f6 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d28 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d28:	6a 00                	push   $0x0
  pushl $55
c0102d2a:	6a 37                	push   $0x37
  jmp __alltraps
c0102d2c:	e9 ed fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d31 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d31:	6a 00                	push   $0x0
  pushl $56
c0102d33:	6a 38                	push   $0x38
  jmp __alltraps
c0102d35:	e9 e4 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d3a <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d3a:	6a 00                	push   $0x0
  pushl $57
c0102d3c:	6a 39                	push   $0x39
  jmp __alltraps
c0102d3e:	e9 db fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d43 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d43:	6a 00                	push   $0x0
  pushl $58
c0102d45:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d47:	e9 d2 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d4c <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d4c:	6a 00                	push   $0x0
  pushl $59
c0102d4e:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d50:	e9 c9 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d55 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d55:	6a 00                	push   $0x0
  pushl $60
c0102d57:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d59:	e9 c0 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d5e <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d5e:	6a 00                	push   $0x0
  pushl $61
c0102d60:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d62:	e9 b7 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d67 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d67:	6a 00                	push   $0x0
  pushl $62
c0102d69:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d6b:	e9 ae fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d70 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d70:	6a 00                	push   $0x0
  pushl $63
c0102d72:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d74:	e9 a5 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d79 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d79:	6a 00                	push   $0x0
  pushl $64
c0102d7b:	6a 40                	push   $0x40
  jmp __alltraps
c0102d7d:	e9 9c fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d82 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d82:	6a 00                	push   $0x0
  pushl $65
c0102d84:	6a 41                	push   $0x41
  jmp __alltraps
c0102d86:	e9 93 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d8b <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d8b:	6a 00                	push   $0x0
  pushl $66
c0102d8d:	6a 42                	push   $0x42
  jmp __alltraps
c0102d8f:	e9 8a fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d94 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d94:	6a 00                	push   $0x0
  pushl $67
c0102d96:	6a 43                	push   $0x43
  jmp __alltraps
c0102d98:	e9 81 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102d9d <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d9d:	6a 00                	push   $0x0
  pushl $68
c0102d9f:	6a 44                	push   $0x44
  jmp __alltraps
c0102da1:	e9 78 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102da6 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102da6:	6a 00                	push   $0x0
  pushl $69
c0102da8:	6a 45                	push   $0x45
  jmp __alltraps
c0102daa:	e9 6f fd ff ff       	jmp    c0102b1e <__alltraps>

c0102daf <vector70>:
.globl vector70
vector70:
  pushl $0
c0102daf:	6a 00                	push   $0x0
  pushl $70
c0102db1:	6a 46                	push   $0x46
  jmp __alltraps
c0102db3:	e9 66 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102db8 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102db8:	6a 00                	push   $0x0
  pushl $71
c0102dba:	6a 47                	push   $0x47
  jmp __alltraps
c0102dbc:	e9 5d fd ff ff       	jmp    c0102b1e <__alltraps>

c0102dc1 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dc1:	6a 00                	push   $0x0
  pushl $72
c0102dc3:	6a 48                	push   $0x48
  jmp __alltraps
c0102dc5:	e9 54 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102dca <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dca:	6a 00                	push   $0x0
  pushl $73
c0102dcc:	6a 49                	push   $0x49
  jmp __alltraps
c0102dce:	e9 4b fd ff ff       	jmp    c0102b1e <__alltraps>

c0102dd3 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dd3:	6a 00                	push   $0x0
  pushl $74
c0102dd5:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dd7:	e9 42 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102ddc <vector75>:
.globl vector75
vector75:
  pushl $0
c0102ddc:	6a 00                	push   $0x0
  pushl $75
c0102dde:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102de0:	e9 39 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102de5 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102de5:	6a 00                	push   $0x0
  pushl $76
c0102de7:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102de9:	e9 30 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102dee <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dee:	6a 00                	push   $0x0
  pushl $77
c0102df0:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102df2:	e9 27 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102df7 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102df7:	6a 00                	push   $0x0
  pushl $78
c0102df9:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102dfb:	e9 1e fd ff ff       	jmp    c0102b1e <__alltraps>

c0102e00 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102e00:	6a 00                	push   $0x0
  pushl $79
c0102e02:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102e04:	e9 15 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102e09 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e09:	6a 00                	push   $0x0
  pushl $80
c0102e0b:	6a 50                	push   $0x50
  jmp __alltraps
c0102e0d:	e9 0c fd ff ff       	jmp    c0102b1e <__alltraps>

c0102e12 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e12:	6a 00                	push   $0x0
  pushl $81
c0102e14:	6a 51                	push   $0x51
  jmp __alltraps
c0102e16:	e9 03 fd ff ff       	jmp    c0102b1e <__alltraps>

c0102e1b <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e1b:	6a 00                	push   $0x0
  pushl $82
c0102e1d:	6a 52                	push   $0x52
  jmp __alltraps
c0102e1f:	e9 fa fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e24 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e24:	6a 00                	push   $0x0
  pushl $83
c0102e26:	6a 53                	push   $0x53
  jmp __alltraps
c0102e28:	e9 f1 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e2d <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e2d:	6a 00                	push   $0x0
  pushl $84
c0102e2f:	6a 54                	push   $0x54
  jmp __alltraps
c0102e31:	e9 e8 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e36 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e36:	6a 00                	push   $0x0
  pushl $85
c0102e38:	6a 55                	push   $0x55
  jmp __alltraps
c0102e3a:	e9 df fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e3f <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e3f:	6a 00                	push   $0x0
  pushl $86
c0102e41:	6a 56                	push   $0x56
  jmp __alltraps
c0102e43:	e9 d6 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e48 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e48:	6a 00                	push   $0x0
  pushl $87
c0102e4a:	6a 57                	push   $0x57
  jmp __alltraps
c0102e4c:	e9 cd fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e51 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e51:	6a 00                	push   $0x0
  pushl $88
c0102e53:	6a 58                	push   $0x58
  jmp __alltraps
c0102e55:	e9 c4 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e5a <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e5a:	6a 00                	push   $0x0
  pushl $89
c0102e5c:	6a 59                	push   $0x59
  jmp __alltraps
c0102e5e:	e9 bb fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e63 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e63:	6a 00                	push   $0x0
  pushl $90
c0102e65:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e67:	e9 b2 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e6c <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e6c:	6a 00                	push   $0x0
  pushl $91
c0102e6e:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e70:	e9 a9 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e75 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e75:	6a 00                	push   $0x0
  pushl $92
c0102e77:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e79:	e9 a0 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e7e <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e7e:	6a 00                	push   $0x0
  pushl $93
c0102e80:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e82:	e9 97 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e87 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e87:	6a 00                	push   $0x0
  pushl $94
c0102e89:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e8b:	e9 8e fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e90 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e90:	6a 00                	push   $0x0
  pushl $95
c0102e92:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e94:	e9 85 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102e99 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e99:	6a 00                	push   $0x0
  pushl $96
c0102e9b:	6a 60                	push   $0x60
  jmp __alltraps
c0102e9d:	e9 7c fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ea2 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102ea2:	6a 00                	push   $0x0
  pushl $97
c0102ea4:	6a 61                	push   $0x61
  jmp __alltraps
c0102ea6:	e9 73 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102eab <vector98>:
.globl vector98
vector98:
  pushl $0
c0102eab:	6a 00                	push   $0x0
  pushl $98
c0102ead:	6a 62                	push   $0x62
  jmp __alltraps
c0102eaf:	e9 6a fc ff ff       	jmp    c0102b1e <__alltraps>

c0102eb4 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102eb4:	6a 00                	push   $0x0
  pushl $99
c0102eb6:	6a 63                	push   $0x63
  jmp __alltraps
c0102eb8:	e9 61 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ebd <vector100>:
.globl vector100
vector100:
  pushl $0
c0102ebd:	6a 00                	push   $0x0
  pushl $100
c0102ebf:	6a 64                	push   $0x64
  jmp __alltraps
c0102ec1:	e9 58 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ec6 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ec6:	6a 00                	push   $0x0
  pushl $101
c0102ec8:	6a 65                	push   $0x65
  jmp __alltraps
c0102eca:	e9 4f fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ecf <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ecf:	6a 00                	push   $0x0
  pushl $102
c0102ed1:	6a 66                	push   $0x66
  jmp __alltraps
c0102ed3:	e9 46 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ed8 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ed8:	6a 00                	push   $0x0
  pushl $103
c0102eda:	6a 67                	push   $0x67
  jmp __alltraps
c0102edc:	e9 3d fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ee1 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ee1:	6a 00                	push   $0x0
  pushl $104
c0102ee3:	6a 68                	push   $0x68
  jmp __alltraps
c0102ee5:	e9 34 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102eea <vector105>:
.globl vector105
vector105:
  pushl $0
c0102eea:	6a 00                	push   $0x0
  pushl $105
c0102eec:	6a 69                	push   $0x69
  jmp __alltraps
c0102eee:	e9 2b fc ff ff       	jmp    c0102b1e <__alltraps>

c0102ef3 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ef3:	6a 00                	push   $0x0
  pushl $106
c0102ef5:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ef7:	e9 22 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102efc <vector107>:
.globl vector107
vector107:
  pushl $0
c0102efc:	6a 00                	push   $0x0
  pushl $107
c0102efe:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102f00:	e9 19 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102f05 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102f05:	6a 00                	push   $0x0
  pushl $108
c0102f07:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f09:	e9 10 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102f0e <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f0e:	6a 00                	push   $0x0
  pushl $109
c0102f10:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f12:	e9 07 fc ff ff       	jmp    c0102b1e <__alltraps>

c0102f17 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f17:	6a 00                	push   $0x0
  pushl $110
c0102f19:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f1b:	e9 fe fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f20 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f20:	6a 00                	push   $0x0
  pushl $111
c0102f22:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f24:	e9 f5 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f29 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f29:	6a 00                	push   $0x0
  pushl $112
c0102f2b:	6a 70                	push   $0x70
  jmp __alltraps
c0102f2d:	e9 ec fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f32 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f32:	6a 00                	push   $0x0
  pushl $113
c0102f34:	6a 71                	push   $0x71
  jmp __alltraps
c0102f36:	e9 e3 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f3b <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f3b:	6a 00                	push   $0x0
  pushl $114
c0102f3d:	6a 72                	push   $0x72
  jmp __alltraps
c0102f3f:	e9 da fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f44 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f44:	6a 00                	push   $0x0
  pushl $115
c0102f46:	6a 73                	push   $0x73
  jmp __alltraps
c0102f48:	e9 d1 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f4d <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f4d:	6a 00                	push   $0x0
  pushl $116
c0102f4f:	6a 74                	push   $0x74
  jmp __alltraps
c0102f51:	e9 c8 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f56 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f56:	6a 00                	push   $0x0
  pushl $117
c0102f58:	6a 75                	push   $0x75
  jmp __alltraps
c0102f5a:	e9 bf fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f5f <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f5f:	6a 00                	push   $0x0
  pushl $118
c0102f61:	6a 76                	push   $0x76
  jmp __alltraps
c0102f63:	e9 b6 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f68 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f68:	6a 00                	push   $0x0
  pushl $119
c0102f6a:	6a 77                	push   $0x77
  jmp __alltraps
c0102f6c:	e9 ad fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f71 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f71:	6a 00                	push   $0x0
  pushl $120
c0102f73:	6a 78                	push   $0x78
  jmp __alltraps
c0102f75:	e9 a4 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f7a <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f7a:	6a 00                	push   $0x0
  pushl $121
c0102f7c:	6a 79                	push   $0x79
  jmp __alltraps
c0102f7e:	e9 9b fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f83 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f83:	6a 00                	push   $0x0
  pushl $122
c0102f85:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f87:	e9 92 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f8c <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f8c:	6a 00                	push   $0x0
  pushl $123
c0102f8e:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f90:	e9 89 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f95 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f95:	6a 00                	push   $0x0
  pushl $124
c0102f97:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f99:	e9 80 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102f9e <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f9e:	6a 00                	push   $0x0
  pushl $125
c0102fa0:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102fa2:	e9 77 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fa7 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fa7:	6a 00                	push   $0x0
  pushl $126
c0102fa9:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fab:	e9 6e fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fb0 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fb0:	6a 00                	push   $0x0
  pushl $127
c0102fb2:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fb4:	e9 65 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fb9 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fb9:	6a 00                	push   $0x0
  pushl $128
c0102fbb:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fc0:	e9 59 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fc5 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fc5:	6a 00                	push   $0x0
  pushl $129
c0102fc7:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fcc:	e9 4d fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fd1 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fd1:	6a 00                	push   $0x0
  pushl $130
c0102fd3:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fd8:	e9 41 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fdd <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fdd:	6a 00                	push   $0x0
  pushl $131
c0102fdf:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fe4:	e9 35 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102fe9 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fe9:	6a 00                	push   $0x0
  pushl $132
c0102feb:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102ff0:	e9 29 fb ff ff       	jmp    c0102b1e <__alltraps>

c0102ff5 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102ff5:	6a 00                	push   $0x0
  pushl $133
c0102ff7:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ffc:	e9 1d fb ff ff       	jmp    c0102b1e <__alltraps>

c0103001 <vector134>:
.globl vector134
vector134:
  pushl $0
c0103001:	6a 00                	push   $0x0
  pushl $134
c0103003:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103008:	e9 11 fb ff ff       	jmp    c0102b1e <__alltraps>

c010300d <vector135>:
.globl vector135
vector135:
  pushl $0
c010300d:	6a 00                	push   $0x0
  pushl $135
c010300f:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0103014:	e9 05 fb ff ff       	jmp    c0102b1e <__alltraps>

c0103019 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103019:	6a 00                	push   $0x0
  pushl $136
c010301b:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103020:	e9 f9 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103025 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103025:	6a 00                	push   $0x0
  pushl $137
c0103027:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010302c:	e9 ed fa ff ff       	jmp    c0102b1e <__alltraps>

c0103031 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103031:	6a 00                	push   $0x0
  pushl $138
c0103033:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103038:	e9 e1 fa ff ff       	jmp    c0102b1e <__alltraps>

c010303d <vector139>:
.globl vector139
vector139:
  pushl $0
c010303d:	6a 00                	push   $0x0
  pushl $139
c010303f:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103044:	e9 d5 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103049 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103049:	6a 00                	push   $0x0
  pushl $140
c010304b:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103050:	e9 c9 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103055 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103055:	6a 00                	push   $0x0
  pushl $141
c0103057:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010305c:	e9 bd fa ff ff       	jmp    c0102b1e <__alltraps>

c0103061 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103061:	6a 00                	push   $0x0
  pushl $142
c0103063:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103068:	e9 b1 fa ff ff       	jmp    c0102b1e <__alltraps>

c010306d <vector143>:
.globl vector143
vector143:
  pushl $0
c010306d:	6a 00                	push   $0x0
  pushl $143
c010306f:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103074:	e9 a5 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103079 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103079:	6a 00                	push   $0x0
  pushl $144
c010307b:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103080:	e9 99 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103085 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103085:	6a 00                	push   $0x0
  pushl $145
c0103087:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010308c:	e9 8d fa ff ff       	jmp    c0102b1e <__alltraps>

c0103091 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103091:	6a 00                	push   $0x0
  pushl $146
c0103093:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103098:	e9 81 fa ff ff       	jmp    c0102b1e <__alltraps>

c010309d <vector147>:
.globl vector147
vector147:
  pushl $0
c010309d:	6a 00                	push   $0x0
  pushl $147
c010309f:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01030a4:	e9 75 fa ff ff       	jmp    c0102b1e <__alltraps>

c01030a9 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030a9:	6a 00                	push   $0x0
  pushl $148
c01030ab:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030b0:	e9 69 fa ff ff       	jmp    c0102b1e <__alltraps>

c01030b5 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030b5:	6a 00                	push   $0x0
  pushl $149
c01030b7:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030bc:	e9 5d fa ff ff       	jmp    c0102b1e <__alltraps>

c01030c1 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030c1:	6a 00                	push   $0x0
  pushl $150
c01030c3:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030c8:	e9 51 fa ff ff       	jmp    c0102b1e <__alltraps>

c01030cd <vector151>:
.globl vector151
vector151:
  pushl $0
c01030cd:	6a 00                	push   $0x0
  pushl $151
c01030cf:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030d4:	e9 45 fa ff ff       	jmp    c0102b1e <__alltraps>

c01030d9 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030d9:	6a 00                	push   $0x0
  pushl $152
c01030db:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030e0:	e9 39 fa ff ff       	jmp    c0102b1e <__alltraps>

c01030e5 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030e5:	6a 00                	push   $0x0
  pushl $153
c01030e7:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030ec:	e9 2d fa ff ff       	jmp    c0102b1e <__alltraps>

c01030f1 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030f1:	6a 00                	push   $0x0
  pushl $154
c01030f3:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030f8:	e9 21 fa ff ff       	jmp    c0102b1e <__alltraps>

c01030fd <vector155>:
.globl vector155
vector155:
  pushl $0
c01030fd:	6a 00                	push   $0x0
  pushl $155
c01030ff:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103104:	e9 15 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103109 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103109:	6a 00                	push   $0x0
  pushl $156
c010310b:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103110:	e9 09 fa ff ff       	jmp    c0102b1e <__alltraps>

c0103115 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103115:	6a 00                	push   $0x0
  pushl $157
c0103117:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010311c:	e9 fd f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103121 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103121:	6a 00                	push   $0x0
  pushl $158
c0103123:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103128:	e9 f1 f9 ff ff       	jmp    c0102b1e <__alltraps>

c010312d <vector159>:
.globl vector159
vector159:
  pushl $0
c010312d:	6a 00                	push   $0x0
  pushl $159
c010312f:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103134:	e9 e5 f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103139 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103139:	6a 00                	push   $0x0
  pushl $160
c010313b:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103140:	e9 d9 f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103145 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103145:	6a 00                	push   $0x0
  pushl $161
c0103147:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010314c:	e9 cd f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103151 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103151:	6a 00                	push   $0x0
  pushl $162
c0103153:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103158:	e9 c1 f9 ff ff       	jmp    c0102b1e <__alltraps>

c010315d <vector163>:
.globl vector163
vector163:
  pushl $0
c010315d:	6a 00                	push   $0x0
  pushl $163
c010315f:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103164:	e9 b5 f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103169 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103169:	6a 00                	push   $0x0
  pushl $164
c010316b:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103170:	e9 a9 f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103175 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103175:	6a 00                	push   $0x0
  pushl $165
c0103177:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010317c:	e9 9d f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103181 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103181:	6a 00                	push   $0x0
  pushl $166
c0103183:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103188:	e9 91 f9 ff ff       	jmp    c0102b1e <__alltraps>

c010318d <vector167>:
.globl vector167
vector167:
  pushl $0
c010318d:	6a 00                	push   $0x0
  pushl $167
c010318f:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103194:	e9 85 f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103199 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103199:	6a 00                	push   $0x0
  pushl $168
c010319b:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01031a0:	e9 79 f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031a5 <vector169>:
.globl vector169
vector169:
  pushl $0
c01031a5:	6a 00                	push   $0x0
  pushl $169
c01031a7:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031ac:	e9 6d f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031b1 <vector170>:
.globl vector170
vector170:
  pushl $0
c01031b1:	6a 00                	push   $0x0
  pushl $170
c01031b3:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031b8:	e9 61 f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031bd <vector171>:
.globl vector171
vector171:
  pushl $0
c01031bd:	6a 00                	push   $0x0
  pushl $171
c01031bf:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031c4:	e9 55 f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031c9 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031c9:	6a 00                	push   $0x0
  pushl $172
c01031cb:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031d0:	e9 49 f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031d5 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031d5:	6a 00                	push   $0x0
  pushl $173
c01031d7:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031dc:	e9 3d f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031e1 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031e1:	6a 00                	push   $0x0
  pushl $174
c01031e3:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031e8:	e9 31 f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031ed <vector175>:
.globl vector175
vector175:
  pushl $0
c01031ed:	6a 00                	push   $0x0
  pushl $175
c01031ef:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031f4:	e9 25 f9 ff ff       	jmp    c0102b1e <__alltraps>

c01031f9 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031f9:	6a 00                	push   $0x0
  pushl $176
c01031fb:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103200:	e9 19 f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103205 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103205:	6a 00                	push   $0x0
  pushl $177
c0103207:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c010320c:	e9 0d f9 ff ff       	jmp    c0102b1e <__alltraps>

c0103211 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103211:	6a 00                	push   $0x0
  pushl $178
c0103213:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103218:	e9 01 f9 ff ff       	jmp    c0102b1e <__alltraps>

c010321d <vector179>:
.globl vector179
vector179:
  pushl $0
c010321d:	6a 00                	push   $0x0
  pushl $179
c010321f:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103224:	e9 f5 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103229 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103229:	6a 00                	push   $0x0
  pushl $180
c010322b:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103230:	e9 e9 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103235 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103235:	6a 00                	push   $0x0
  pushl $181
c0103237:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010323c:	e9 dd f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103241 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103241:	6a 00                	push   $0x0
  pushl $182
c0103243:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103248:	e9 d1 f8 ff ff       	jmp    c0102b1e <__alltraps>

c010324d <vector183>:
.globl vector183
vector183:
  pushl $0
c010324d:	6a 00                	push   $0x0
  pushl $183
c010324f:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103254:	e9 c5 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103259 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103259:	6a 00                	push   $0x0
  pushl $184
c010325b:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103260:	e9 b9 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103265 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103265:	6a 00                	push   $0x0
  pushl $185
c0103267:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010326c:	e9 ad f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103271 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103271:	6a 00                	push   $0x0
  pushl $186
c0103273:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103278:	e9 a1 f8 ff ff       	jmp    c0102b1e <__alltraps>

c010327d <vector187>:
.globl vector187
vector187:
  pushl $0
c010327d:	6a 00                	push   $0x0
  pushl $187
c010327f:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103284:	e9 95 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103289 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103289:	6a 00                	push   $0x0
  pushl $188
c010328b:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103290:	e9 89 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103295 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103295:	6a 00                	push   $0x0
  pushl $189
c0103297:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010329c:	e9 7d f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032a1 <vector190>:
.globl vector190
vector190:
  pushl $0
c01032a1:	6a 00                	push   $0x0
  pushl $190
c01032a3:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032a8:	e9 71 f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032ad <vector191>:
.globl vector191
vector191:
  pushl $0
c01032ad:	6a 00                	push   $0x0
  pushl $191
c01032af:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032b4:	e9 65 f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032b9 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032b9:	6a 00                	push   $0x0
  pushl $192
c01032bb:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032c0:	e9 59 f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032c5 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032c5:	6a 00                	push   $0x0
  pushl $193
c01032c7:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032cc:	e9 4d f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032d1 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032d1:	6a 00                	push   $0x0
  pushl $194
c01032d3:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032d8:	e9 41 f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032dd <vector195>:
.globl vector195
vector195:
  pushl $0
c01032dd:	6a 00                	push   $0x0
  pushl $195
c01032df:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032e4:	e9 35 f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032e9 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032e9:	6a 00                	push   $0x0
  pushl $196
c01032eb:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032f0:	e9 29 f8 ff ff       	jmp    c0102b1e <__alltraps>

c01032f5 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032f5:	6a 00                	push   $0x0
  pushl $197
c01032f7:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032fc:	e9 1d f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103301 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103301:	6a 00                	push   $0x0
  pushl $198
c0103303:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103308:	e9 11 f8 ff ff       	jmp    c0102b1e <__alltraps>

c010330d <vector199>:
.globl vector199
vector199:
  pushl $0
c010330d:	6a 00                	push   $0x0
  pushl $199
c010330f:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103314:	e9 05 f8 ff ff       	jmp    c0102b1e <__alltraps>

c0103319 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103319:	6a 00                	push   $0x0
  pushl $200
c010331b:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103320:	e9 f9 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103325 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103325:	6a 00                	push   $0x0
  pushl $201
c0103327:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010332c:	e9 ed f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103331 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103331:	6a 00                	push   $0x0
  pushl $202
c0103333:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103338:	e9 e1 f7 ff ff       	jmp    c0102b1e <__alltraps>

c010333d <vector203>:
.globl vector203
vector203:
  pushl $0
c010333d:	6a 00                	push   $0x0
  pushl $203
c010333f:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103344:	e9 d5 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103349 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103349:	6a 00                	push   $0x0
  pushl $204
c010334b:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103350:	e9 c9 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103355 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103355:	6a 00                	push   $0x0
  pushl $205
c0103357:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010335c:	e9 bd f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103361 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103361:	6a 00                	push   $0x0
  pushl $206
c0103363:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103368:	e9 b1 f7 ff ff       	jmp    c0102b1e <__alltraps>

c010336d <vector207>:
.globl vector207
vector207:
  pushl $0
c010336d:	6a 00                	push   $0x0
  pushl $207
c010336f:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103374:	e9 a5 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103379 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103379:	6a 00                	push   $0x0
  pushl $208
c010337b:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103380:	e9 99 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103385 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103385:	6a 00                	push   $0x0
  pushl $209
c0103387:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010338c:	e9 8d f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103391 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103391:	6a 00                	push   $0x0
  pushl $210
c0103393:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103398:	e9 81 f7 ff ff       	jmp    c0102b1e <__alltraps>

c010339d <vector211>:
.globl vector211
vector211:
  pushl $0
c010339d:	6a 00                	push   $0x0
  pushl $211
c010339f:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01033a4:	e9 75 f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033a9 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033a9:	6a 00                	push   $0x0
  pushl $212
c01033ab:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033b0:	e9 69 f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033b5 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033b5:	6a 00                	push   $0x0
  pushl $213
c01033b7:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033bc:	e9 5d f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033c1 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033c1:	6a 00                	push   $0x0
  pushl $214
c01033c3:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033c8:	e9 51 f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033cd <vector215>:
.globl vector215
vector215:
  pushl $0
c01033cd:	6a 00                	push   $0x0
  pushl $215
c01033cf:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033d4:	e9 45 f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033d9 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033d9:	6a 00                	push   $0x0
  pushl $216
c01033db:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033e0:	e9 39 f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033e5 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033e5:	6a 00                	push   $0x0
  pushl $217
c01033e7:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033ec:	e9 2d f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033f1 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033f1:	6a 00                	push   $0x0
  pushl $218
c01033f3:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033f8:	e9 21 f7 ff ff       	jmp    c0102b1e <__alltraps>

c01033fd <vector219>:
.globl vector219
vector219:
  pushl $0
c01033fd:	6a 00                	push   $0x0
  pushl $219
c01033ff:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103404:	e9 15 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103409 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103409:	6a 00                	push   $0x0
  pushl $220
c010340b:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103410:	e9 09 f7 ff ff       	jmp    c0102b1e <__alltraps>

c0103415 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103415:	6a 00                	push   $0x0
  pushl $221
c0103417:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010341c:	e9 fd f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103421 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103421:	6a 00                	push   $0x0
  pushl $222
c0103423:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103428:	e9 f1 f6 ff ff       	jmp    c0102b1e <__alltraps>

c010342d <vector223>:
.globl vector223
vector223:
  pushl $0
c010342d:	6a 00                	push   $0x0
  pushl $223
c010342f:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103434:	e9 e5 f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103439 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103439:	6a 00                	push   $0x0
  pushl $224
c010343b:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103440:	e9 d9 f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103445 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103445:	6a 00                	push   $0x0
  pushl $225
c0103447:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010344c:	e9 cd f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103451 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103451:	6a 00                	push   $0x0
  pushl $226
c0103453:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103458:	e9 c1 f6 ff ff       	jmp    c0102b1e <__alltraps>

c010345d <vector227>:
.globl vector227
vector227:
  pushl $0
c010345d:	6a 00                	push   $0x0
  pushl $227
c010345f:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103464:	e9 b5 f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103469 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103469:	6a 00                	push   $0x0
  pushl $228
c010346b:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103470:	e9 a9 f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103475 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103475:	6a 00                	push   $0x0
  pushl $229
c0103477:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010347c:	e9 9d f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103481 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103481:	6a 00                	push   $0x0
  pushl $230
c0103483:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103488:	e9 91 f6 ff ff       	jmp    c0102b1e <__alltraps>

c010348d <vector231>:
.globl vector231
vector231:
  pushl $0
c010348d:	6a 00                	push   $0x0
  pushl $231
c010348f:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103494:	e9 85 f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103499 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103499:	6a 00                	push   $0x0
  pushl $232
c010349b:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01034a0:	e9 79 f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034a5 <vector233>:
.globl vector233
vector233:
  pushl $0
c01034a5:	6a 00                	push   $0x0
  pushl $233
c01034a7:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034ac:	e9 6d f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034b1 <vector234>:
.globl vector234
vector234:
  pushl $0
c01034b1:	6a 00                	push   $0x0
  pushl $234
c01034b3:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034b8:	e9 61 f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034bd <vector235>:
.globl vector235
vector235:
  pushl $0
c01034bd:	6a 00                	push   $0x0
  pushl $235
c01034bf:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034c4:	e9 55 f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034c9 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034c9:	6a 00                	push   $0x0
  pushl $236
c01034cb:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034d0:	e9 49 f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034d5 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034d5:	6a 00                	push   $0x0
  pushl $237
c01034d7:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034dc:	e9 3d f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034e1 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034e1:	6a 00                	push   $0x0
  pushl $238
c01034e3:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034e8:	e9 31 f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034ed <vector239>:
.globl vector239
vector239:
  pushl $0
c01034ed:	6a 00                	push   $0x0
  pushl $239
c01034ef:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034f4:	e9 25 f6 ff ff       	jmp    c0102b1e <__alltraps>

c01034f9 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034f9:	6a 00                	push   $0x0
  pushl $240
c01034fb:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103500:	e9 19 f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103505 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103505:	6a 00                	push   $0x0
  pushl $241
c0103507:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010350c:	e9 0d f6 ff ff       	jmp    c0102b1e <__alltraps>

c0103511 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103511:	6a 00                	push   $0x0
  pushl $242
c0103513:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103518:	e9 01 f6 ff ff       	jmp    c0102b1e <__alltraps>

c010351d <vector243>:
.globl vector243
vector243:
  pushl $0
c010351d:	6a 00                	push   $0x0
  pushl $243
c010351f:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103524:	e9 f5 f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103529 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103529:	6a 00                	push   $0x0
  pushl $244
c010352b:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103530:	e9 e9 f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103535 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103535:	6a 00                	push   $0x0
  pushl $245
c0103537:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010353c:	e9 dd f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103541 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103541:	6a 00                	push   $0x0
  pushl $246
c0103543:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103548:	e9 d1 f5 ff ff       	jmp    c0102b1e <__alltraps>

c010354d <vector247>:
.globl vector247
vector247:
  pushl $0
c010354d:	6a 00                	push   $0x0
  pushl $247
c010354f:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103554:	e9 c5 f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103559 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103559:	6a 00                	push   $0x0
  pushl $248
c010355b:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103560:	e9 b9 f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103565 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103565:	6a 00                	push   $0x0
  pushl $249
c0103567:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010356c:	e9 ad f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103571 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103571:	6a 00                	push   $0x0
  pushl $250
c0103573:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103578:	e9 a1 f5 ff ff       	jmp    c0102b1e <__alltraps>

c010357d <vector251>:
.globl vector251
vector251:
  pushl $0
c010357d:	6a 00                	push   $0x0
  pushl $251
c010357f:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103584:	e9 95 f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103589 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103589:	6a 00                	push   $0x0
  pushl $252
c010358b:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103590:	e9 89 f5 ff ff       	jmp    c0102b1e <__alltraps>

c0103595 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103595:	6a 00                	push   $0x0
  pushl $253
c0103597:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010359c:	e9 7d f5 ff ff       	jmp    c0102b1e <__alltraps>

c01035a1 <vector254>:
.globl vector254
vector254:
  pushl $0
c01035a1:	6a 00                	push   $0x0
  pushl $254
c01035a3:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035a8:	e9 71 f5 ff ff       	jmp    c0102b1e <__alltraps>

c01035ad <vector255>:
.globl vector255
vector255:
  pushl $0
c01035ad:	6a 00                	push   $0x0
  pushl $255
c01035af:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035b4:	e9 65 f5 ff ff       	jmp    c0102b1e <__alltraps>

c01035b9 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035b9:	55                   	push   %ebp
c01035ba:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035bc:	8b 55 08             	mov    0x8(%ebp),%edx
c01035bf:	a1 34 41 15 c0       	mov    0xc0154134,%eax
c01035c4:	29 c2                	sub    %eax,%edx
c01035c6:	89 d0                	mov    %edx,%eax
c01035c8:	c1 f8 02             	sar    $0x2,%eax
c01035cb:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01035d1:	5d                   	pop    %ebp
c01035d2:	c3                   	ret    

c01035d3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035d3:	55                   	push   %ebp
c01035d4:	89 e5                	mov    %esp,%ebp
c01035d6:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01035dc:	89 04 24             	mov    %eax,(%esp)
c01035df:	e8 d5 ff ff ff       	call   c01035b9 <page2ppn>
c01035e4:	c1 e0 0c             	shl    $0xc,%eax
}
c01035e7:	c9                   	leave  
c01035e8:	c3                   	ret    

c01035e9 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035e9:	55                   	push   %ebp
c01035ea:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01035ef:	8b 00                	mov    (%eax),%eax
}
c01035f1:	5d                   	pop    %ebp
c01035f2:	c3                   	ret    

c01035f3 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035f3:	55                   	push   %ebp
c01035f4:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01035f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035fc:	89 10                	mov    %edx,(%eax)
}
c01035fe:	5d                   	pop    %ebp
c01035ff:	c3                   	ret    

c0103600 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103600:	55                   	push   %ebp
c0103601:	89 e5                	mov    %esp,%ebp
c0103603:	83 ec 10             	sub    $0x10,%esp
c0103606:	c7 45 fc 20 41 15 c0 	movl   $0xc0154120,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010360d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103610:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103613:	89 50 04             	mov    %edx,0x4(%eax)
c0103616:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103619:	8b 50 04             	mov    0x4(%eax),%edx
c010361c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010361f:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103621:	c7 05 28 41 15 c0 00 	movl   $0x0,0xc0154128
c0103628:	00 00 00 
}
c010362b:	c9                   	leave  
c010362c:	c3                   	ret    

c010362d <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010362d:	55                   	push   %ebp
c010362e:	89 e5                	mov    %esp,%ebp
c0103630:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103633:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103637:	75 24                	jne    c010365d <default_init_memmap+0x30>
c0103639:	c7 44 24 0c 10 62 11 	movl   $0xc0116210,0xc(%esp)
c0103640:	c0 
c0103641:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103648:	c0 
c0103649:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103650:	00 
c0103651:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103658:	e8 6b d8 ff ff       	call   c0100ec8 <__panic>
    struct Page *p = base;
c010365d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103660:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103663:	e9 dc 00 00 00       	jmp    c0103744 <default_init_memmap+0x117>
        assert(PageReserved(p));
c0103668:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010366b:	83 c0 04             	add    $0x4,%eax
c010366e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103675:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103678:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010367b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010367e:	0f a3 10             	bt     %edx,(%eax)
c0103681:	19 c0                	sbb    %eax,%eax
c0103683:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103686:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010368a:	0f 95 c0             	setne  %al
c010368d:	0f b6 c0             	movzbl %al,%eax
c0103690:	85 c0                	test   %eax,%eax
c0103692:	75 24                	jne    c01036b8 <default_init_memmap+0x8b>
c0103694:	c7 44 24 0c 41 62 11 	movl   $0xc0116241,0xc(%esp)
c010369b:	c0 
c010369c:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01036a3:	c0 
c01036a4:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01036ab:	00 
c01036ac:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01036b3:	e8 10 d8 ff ff       	call   c0100ec8 <__panic>
        p->flags = 0;
c01036b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036bb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01036c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c5:	83 c0 04             	add    $0x4,%eax
c01036c8:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036d8:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036de:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036ec:	00 
c01036ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f0:	89 04 24             	mov    %eax,(%esp)
c01036f3:	e8 fb fe ff ff       	call   c01035f3 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01036f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036fb:	83 c0 10             	add    $0x10,%eax
c01036fe:	c7 45 dc 20 41 15 c0 	movl   $0xc0154120,-0x24(%ebp)
c0103705:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103708:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010370b:	8b 00                	mov    (%eax),%eax
c010370d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103710:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103713:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103716:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103719:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010371c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010371f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103722:	89 10                	mov    %edx,(%eax)
c0103724:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103727:	8b 10                	mov    (%eax),%edx
c0103729:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010372c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010372f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103732:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103735:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103738:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010373b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010373e:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103740:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0103744:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103747:	89 d0                	mov    %edx,%eax
c0103749:	c1 e0 03             	shl    $0x3,%eax
c010374c:	01 d0                	add    %edx,%eax
c010374e:	c1 e0 02             	shl    $0x2,%eax
c0103751:	89 c2                	mov    %eax,%edx
c0103753:	8b 45 08             	mov    0x8(%ebp),%eax
c0103756:	01 d0                	add    %edx,%eax
c0103758:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010375b:	0f 85 07 ff ff ff    	jne    c0103668 <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c0103761:	8b 15 28 41 15 c0    	mov    0xc0154128,%edx
c0103767:	8b 45 0c             	mov    0xc(%ebp),%eax
c010376a:	01 d0                	add    %edx,%eax
c010376c:	a3 28 41 15 c0       	mov    %eax,0xc0154128
    //first block
    base->property = n;
c0103771:	8b 45 08             	mov    0x8(%ebp),%eax
c0103774:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103777:	89 50 08             	mov    %edx,0x8(%eax)
}
c010377a:	c9                   	leave  
c010377b:	c3                   	ret    

c010377c <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010377c:	55                   	push   %ebp
c010377d:	89 e5                	mov    %esp,%ebp
c010377f:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103782:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103786:	75 24                	jne    c01037ac <default_alloc_pages+0x30>
c0103788:	c7 44 24 0c 10 62 11 	movl   $0xc0116210,0xc(%esp)
c010378f:	c0 
c0103790:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103797:	c0 
c0103798:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c010379f:	00 
c01037a0:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01037a7:	e8 1c d7 ff ff       	call   c0100ec8 <__panic>
    if (n > nr_free) {
c01037ac:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c01037b1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037b4:	73 0a                	jae    c01037c0 <default_alloc_pages+0x44>
        return NULL;
c01037b6:	b8 00 00 00 00       	mov    $0x0,%eax
c01037bb:	e9 37 01 00 00       	jmp    c01038f7 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c01037c0:	c7 45 f4 20 41 15 c0 	movl   $0xc0154120,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01037c7:	e9 0a 01 00 00       	jmp    c01038d6 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037cf:	83 e8 10             	sub    $0x10,%eax
c01037d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d8:	8b 40 08             	mov    0x8(%eax),%eax
c01037db:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037de:	0f 82 f2 00 00 00    	jb     c01038d6 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c01037e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037eb:	eb 7c                	jmp    c0103869 <default_alloc_pages+0xed>
c01037ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037f6:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ff:	83 e8 10             	sub    $0x10,%eax
c0103802:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c0103805:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103808:	83 c0 04             	add    $0x4,%eax
c010380b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103812:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103815:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103818:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010381b:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c010381e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103821:	83 c0 04             	add    $0x4,%eax
c0103824:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010382b:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010382e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103831:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103834:	0f b3 10             	btr    %edx,(%eax)
c0103837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010383a:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010383d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103840:	8b 40 04             	mov    0x4(%eax),%eax
c0103843:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103846:	8b 12                	mov    (%edx),%edx
c0103848:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010384b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010384e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103851:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103854:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103857:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010385a:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010385d:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c010385f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103862:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0103865:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103869:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010386c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010386f:	0f 82 78 ff ff ff    	jb     c01037ed <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0103875:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103878:	8b 40 08             	mov    0x8(%eax),%eax
c010387b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010387e:	76 12                	jbe    c0103892 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0103880:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103883:	8d 50 f0             	lea    -0x10(%eax),%edx
c0103886:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103889:	8b 40 08             	mov    0x8(%eax),%eax
c010388c:	2b 45 08             	sub    0x8(%ebp),%eax
c010388f:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0103892:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103895:	83 c0 04             	add    $0x4,%eax
c0103898:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010389f:	89 45 bc             	mov    %eax,-0x44(%ebp)
c01038a2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01038a5:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01038a8:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c01038ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038ae:	83 c0 04             	add    $0x4,%eax
c01038b1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c01038b8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038be:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038c1:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c01038c4:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c01038c9:	2b 45 08             	sub    0x8(%ebp),%eax
c01038cc:	a3 28 41 15 c0       	mov    %eax,0xc0154128
        return p;
c01038d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038d4:	eb 21                	jmp    c01038f7 <default_alloc_pages+0x17b>
c01038d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038d9:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038df:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038e5:	81 7d f4 20 41 15 c0 	cmpl   $0xc0154120,-0xc(%ebp)
c01038ec:	0f 85 da fe ff ff    	jne    c01037cc <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c01038f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038f7:	c9                   	leave  
c01038f8:	c3                   	ret    

c01038f9 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038f9:	55                   	push   %ebp
c01038fa:	89 e5                	mov    %esp,%ebp
c01038fc:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01038ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103903:	75 24                	jne    c0103929 <default_free_pages+0x30>
c0103905:	c7 44 24 0c 10 62 11 	movl   $0xc0116210,0xc(%esp)
c010390c:	c0 
c010390d:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103914:	c0 
c0103915:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c010391c:	00 
c010391d:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103924:	e8 9f d5 ff ff       	call   c0100ec8 <__panic>
    assert(PageReserved(base));
c0103929:	8b 45 08             	mov    0x8(%ebp),%eax
c010392c:	83 c0 04             	add    $0x4,%eax
c010392f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103936:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103939:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010393c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010393f:	0f a3 10             	bt     %edx,(%eax)
c0103942:	19 c0                	sbb    %eax,%eax
c0103944:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103947:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010394b:	0f 95 c0             	setne  %al
c010394e:	0f b6 c0             	movzbl %al,%eax
c0103951:	85 c0                	test   %eax,%eax
c0103953:	75 24                	jne    c0103979 <default_free_pages+0x80>
c0103955:	c7 44 24 0c 51 62 11 	movl   $0xc0116251,0xc(%esp)
c010395c:	c0 
c010395d:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103964:	c0 
c0103965:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010396c:	00 
c010396d:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103974:	e8 4f d5 ff ff       	call   c0100ec8 <__panic>

    list_entry_t *le = &free_list;
c0103979:	c7 45 f4 20 41 15 c0 	movl   $0xc0154120,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0103980:	eb 13                	jmp    c0103995 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c0103982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103985:	83 e8 10             	sub    $0x10,%eax
c0103988:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c010398b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010398e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103991:	76 02                	jbe    c0103995 <default_free_pages+0x9c>
        break;
c0103993:	eb 18                	jmp    c01039ad <default_free_pages+0xb4>
c0103995:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103998:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010399b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010399e:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c01039a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01039a4:	81 7d f4 20 41 15 c0 	cmpl   $0xc0154120,-0xc(%ebp)
c01039ab:	75 d5                	jne    c0103982 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039b3:	eb 4b                	jmp    c0103a00 <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c01039b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b8:	8d 50 10             	lea    0x10(%eax),%edx
c01039bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039be:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01039c1:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039c7:	8b 00                	mov    (%eax),%eax
c01039c9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039cc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039d8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039de:	89 10                	mov    %edx,(%eax)
c01039e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039e3:	8b 10                	mov    (%eax),%edx
c01039e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039e8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039ee:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039f1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039f4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039fa:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039fc:	83 45 f0 24          	addl   $0x24,-0x10(%ebp)
c0103a00:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a03:	89 d0                	mov    %edx,%eax
c0103a05:	c1 e0 03             	shl    $0x3,%eax
c0103a08:	01 d0                	add    %edx,%eax
c0103a0a:	c1 e0 02             	shl    $0x2,%eax
c0103a0d:	89 c2                	mov    %eax,%edx
c0103a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a12:	01 d0                	add    %edx,%eax
c0103a14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a17:	77 9c                	ja     c01039b5 <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0103a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0103a23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a2a:	00 
c0103a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a2e:	89 04 24             	mov    %eax,(%esp)
c0103a31:	e8 bd fb ff ff       	call   c01035f3 <set_page_ref>
    ClearPageProperty(base);
c0103a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a39:	83 c0 04             	add    $0x4,%eax
c0103a3c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a43:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a46:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a49:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a4c:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a52:	83 c0 04             	add    $0x4,%eax
c0103a55:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a5c:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a62:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a65:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a6b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a6e:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0103a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a74:	83 e8 10             	sub    $0x10,%eax
c0103a77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a7a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a7d:	89 d0                	mov    %edx,%eax
c0103a7f:	c1 e0 03             	shl    $0x3,%eax
c0103a82:	01 d0                	add    %edx,%eax
c0103a84:	c1 e0 02             	shl    $0x2,%eax
c0103a87:	89 c2                	mov    %eax,%edx
c0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a8c:	01 d0                	add    %edx,%eax
c0103a8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a91:	75 1e                	jne    c0103ab1 <default_free_pages+0x1b8>
      base->property += p->property;
c0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a96:	8b 50 08             	mov    0x8(%eax),%edx
c0103a99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a9c:	8b 40 08             	mov    0x8(%eax),%eax
c0103a9f:	01 c2                	add    %eax,%edx
c0103aa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa4:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103aaa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0103ab1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ab4:	83 c0 10             	add    $0x10,%eax
c0103ab7:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103aba:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103abd:	8b 00                	mov    (%eax),%eax
c0103abf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ac5:	83 e8 10             	sub    $0x10,%eax
c0103ac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103acb:	81 7d f4 20 41 15 c0 	cmpl   $0xc0154120,-0xc(%ebp)
c0103ad2:	74 57                	je     c0103b2b <default_free_pages+0x232>
c0103ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad7:	83 e8 24             	sub    $0x24,%eax
c0103ada:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103add:	75 4c                	jne    c0103b2b <default_free_pages+0x232>
      while(le!=&free_list){
c0103adf:	eb 41                	jmp    c0103b22 <default_free_pages+0x229>
        if(p->property){
c0103ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae4:	8b 40 08             	mov    0x8(%eax),%eax
c0103ae7:	85 c0                	test   %eax,%eax
c0103ae9:	74 20                	je     c0103b0b <default_free_pages+0x212>
          p->property += base->property;
c0103aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103aee:	8b 50 08             	mov    0x8(%eax),%edx
c0103af1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103af4:	8b 40 08             	mov    0x8(%eax),%eax
c0103af7:	01 c2                	add    %eax,%edx
c0103af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103afc:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b02:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103b09:	eb 20                	jmp    c0103b2b <default_free_pages+0x232>
c0103b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b0e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103b11:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103b14:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103b16:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b1c:	83 e8 10             	sub    $0x10,%eax
c0103b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103b22:	81 7d f4 20 41 15 c0 	cmpl   $0xc0154120,-0xc(%ebp)
c0103b29:	75 b6                	jne    c0103ae1 <default_free_pages+0x1e8>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103b2b:	8b 15 28 41 15 c0    	mov    0xc0154128,%edx
c0103b31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b34:	01 d0                	add    %edx,%eax
c0103b36:	a3 28 41 15 c0       	mov    %eax,0xc0154128
    return ;
c0103b3b:	90                   	nop
}
c0103b3c:	c9                   	leave  
c0103b3d:	c3                   	ret    

c0103b3e <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b3e:	55                   	push   %ebp
c0103b3f:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b41:	a1 28 41 15 c0       	mov    0xc0154128,%eax
}
c0103b46:	5d                   	pop    %ebp
c0103b47:	c3                   	ret    

c0103b48 <basic_check>:

static void
basic_check(void) {
c0103b48:	55                   	push   %ebp
c0103b49:	89 e5                	mov    %esp,%ebp
c0103b4b:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b58:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b68:	e8 15 16 00 00       	call   c0105182 <alloc_pages>
c0103b6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b74:	75 24                	jne    c0103b9a <basic_check+0x52>
c0103b76:	c7 44 24 0c 64 62 11 	movl   $0xc0116264,0xc(%esp)
c0103b7d:	c0 
c0103b7e:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103b85:	c0 
c0103b86:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103b8d:	00 
c0103b8e:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103b95:	e8 2e d3 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b9a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ba1:	e8 dc 15 00 00       	call   c0105182 <alloc_pages>
c0103ba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ba9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103bad:	75 24                	jne    c0103bd3 <basic_check+0x8b>
c0103baf:	c7 44 24 0c 80 62 11 	movl   $0xc0116280,0xc(%esp)
c0103bb6:	c0 
c0103bb7:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103bbe:	c0 
c0103bbf:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103bc6:	00 
c0103bc7:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103bce:	e8 f5 d2 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103bd3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bda:	e8 a3 15 00 00       	call   c0105182 <alloc_pages>
c0103bdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103be2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103be6:	75 24                	jne    c0103c0c <basic_check+0xc4>
c0103be8:	c7 44 24 0c 9c 62 11 	movl   $0xc011629c,0xc(%esp)
c0103bef:	c0 
c0103bf0:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103bf7:	c0 
c0103bf8:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103bff:	00 
c0103c00:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103c07:	e8 bc d2 ff ff       	call   c0100ec8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103c0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c12:	74 10                	je     c0103c24 <basic_check+0xdc>
c0103c14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c1a:	74 08                	je     c0103c24 <basic_check+0xdc>
c0103c1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c1f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c22:	75 24                	jne    c0103c48 <basic_check+0x100>
c0103c24:	c7 44 24 0c b8 62 11 	movl   $0xc01162b8,0xc(%esp)
c0103c2b:	c0 
c0103c2c:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103c33:	c0 
c0103c34:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103c3b:	00 
c0103c3c:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103c43:	e8 80 d2 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c4b:	89 04 24             	mov    %eax,(%esp)
c0103c4e:	e8 96 f9 ff ff       	call   c01035e9 <page_ref>
c0103c53:	85 c0                	test   %eax,%eax
c0103c55:	75 1e                	jne    c0103c75 <basic_check+0x12d>
c0103c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c5a:	89 04 24             	mov    %eax,(%esp)
c0103c5d:	e8 87 f9 ff ff       	call   c01035e9 <page_ref>
c0103c62:	85 c0                	test   %eax,%eax
c0103c64:	75 0f                	jne    c0103c75 <basic_check+0x12d>
c0103c66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c69:	89 04 24             	mov    %eax,(%esp)
c0103c6c:	e8 78 f9 ff ff       	call   c01035e9 <page_ref>
c0103c71:	85 c0                	test   %eax,%eax
c0103c73:	74 24                	je     c0103c99 <basic_check+0x151>
c0103c75:	c7 44 24 0c dc 62 11 	movl   $0xc01162dc,0xc(%esp)
c0103c7c:	c0 
c0103c7d:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103c84:	c0 
c0103c85:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103c8c:	00 
c0103c8d:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103c94:	e8 2f d2 ff ff       	call   c0100ec8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c9c:	89 04 24             	mov    %eax,(%esp)
c0103c9f:	e8 2f f9 ff ff       	call   c01035d3 <page2pa>
c0103ca4:	8b 15 e0 0e 15 c0    	mov    0xc0150ee0,%edx
c0103caa:	c1 e2 0c             	shl    $0xc,%edx
c0103cad:	39 d0                	cmp    %edx,%eax
c0103caf:	72 24                	jb     c0103cd5 <basic_check+0x18d>
c0103cb1:	c7 44 24 0c 18 63 11 	movl   $0xc0116318,0xc(%esp)
c0103cb8:	c0 
c0103cb9:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103cc0:	c0 
c0103cc1:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103cc8:	00 
c0103cc9:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103cd0:	e8 f3 d1 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103cd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cd8:	89 04 24             	mov    %eax,(%esp)
c0103cdb:	e8 f3 f8 ff ff       	call   c01035d3 <page2pa>
c0103ce0:	8b 15 e0 0e 15 c0    	mov    0xc0150ee0,%edx
c0103ce6:	c1 e2 0c             	shl    $0xc,%edx
c0103ce9:	39 d0                	cmp    %edx,%eax
c0103ceb:	72 24                	jb     c0103d11 <basic_check+0x1c9>
c0103ced:	c7 44 24 0c 35 63 11 	movl   $0xc0116335,0xc(%esp)
c0103cf4:	c0 
c0103cf5:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103cfc:	c0 
c0103cfd:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103d04:	00 
c0103d05:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103d0c:	e8 b7 d1 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d14:	89 04 24             	mov    %eax,(%esp)
c0103d17:	e8 b7 f8 ff ff       	call   c01035d3 <page2pa>
c0103d1c:	8b 15 e0 0e 15 c0    	mov    0xc0150ee0,%edx
c0103d22:	c1 e2 0c             	shl    $0xc,%edx
c0103d25:	39 d0                	cmp    %edx,%eax
c0103d27:	72 24                	jb     c0103d4d <basic_check+0x205>
c0103d29:	c7 44 24 0c 52 63 11 	movl   $0xc0116352,0xc(%esp)
c0103d30:	c0 
c0103d31:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103d38:	c0 
c0103d39:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d40:	00 
c0103d41:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103d48:	e8 7b d1 ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103d4d:	a1 20 41 15 c0       	mov    0xc0154120,%eax
c0103d52:	8b 15 24 41 15 c0    	mov    0xc0154124,%edx
c0103d58:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d5b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d5e:	c7 45 e0 20 41 15 c0 	movl   $0xc0154120,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d65:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d68:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d6b:	89 50 04             	mov    %edx,0x4(%eax)
c0103d6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d71:	8b 50 04             	mov    0x4(%eax),%edx
c0103d74:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d77:	89 10                	mov    %edx,(%eax)
c0103d79:	c7 45 dc 20 41 15 c0 	movl   $0xc0154120,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d80:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d83:	8b 40 04             	mov    0x4(%eax),%eax
c0103d86:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d89:	0f 94 c0             	sete   %al
c0103d8c:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d8f:	85 c0                	test   %eax,%eax
c0103d91:	75 24                	jne    c0103db7 <basic_check+0x26f>
c0103d93:	c7 44 24 0c 6f 63 11 	movl   $0xc011636f,0xc(%esp)
c0103d9a:	c0 
c0103d9b:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103da2:	c0 
c0103da3:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103daa:	00 
c0103dab:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103db2:	e8 11 d1 ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0103db7:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c0103dbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103dbf:	c7 05 28 41 15 c0 00 	movl   $0x0,0xc0154128
c0103dc6:	00 00 00 

    assert(alloc_page() == NULL);
c0103dc9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103dd0:	e8 ad 13 00 00       	call   c0105182 <alloc_pages>
c0103dd5:	85 c0                	test   %eax,%eax
c0103dd7:	74 24                	je     c0103dfd <basic_check+0x2b5>
c0103dd9:	c7 44 24 0c 86 63 11 	movl   $0xc0116386,0xc(%esp)
c0103de0:	c0 
c0103de1:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103de8:	c0 
c0103de9:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103df0:	00 
c0103df1:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103df8:	e8 cb d0 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103dfd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e04:	00 
c0103e05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e08:	89 04 24             	mov    %eax,(%esp)
c0103e0b:	e8 dd 13 00 00       	call   c01051ed <free_pages>
    free_page(p1);
c0103e10:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e17:	00 
c0103e18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e1b:	89 04 24             	mov    %eax,(%esp)
c0103e1e:	e8 ca 13 00 00       	call   c01051ed <free_pages>
    free_page(p2);
c0103e23:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e2a:	00 
c0103e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e2e:	89 04 24             	mov    %eax,(%esp)
c0103e31:	e8 b7 13 00 00       	call   c01051ed <free_pages>
    assert(nr_free == 3);
c0103e36:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c0103e3b:	83 f8 03             	cmp    $0x3,%eax
c0103e3e:	74 24                	je     c0103e64 <basic_check+0x31c>
c0103e40:	c7 44 24 0c 9b 63 11 	movl   $0xc011639b,0xc(%esp)
c0103e47:	c0 
c0103e48:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103e4f:	c0 
c0103e50:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e57:	00 
c0103e58:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103e5f:	e8 64 d0 ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e64:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e6b:	e8 12 13 00 00       	call   c0105182 <alloc_pages>
c0103e70:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e77:	75 24                	jne    c0103e9d <basic_check+0x355>
c0103e79:	c7 44 24 0c 64 62 11 	movl   $0xc0116264,0xc(%esp)
c0103e80:	c0 
c0103e81:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103e88:	c0 
c0103e89:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e90:	00 
c0103e91:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103e98:	e8 2b d0 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e9d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ea4:	e8 d9 12 00 00       	call   c0105182 <alloc_pages>
c0103ea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103eac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103eb0:	75 24                	jne    c0103ed6 <basic_check+0x38e>
c0103eb2:	c7 44 24 0c 80 62 11 	movl   $0xc0116280,0xc(%esp)
c0103eb9:	c0 
c0103eba:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103ec1:	c0 
c0103ec2:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103ec9:	00 
c0103eca:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103ed1:	e8 f2 cf ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ed6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103edd:	e8 a0 12 00 00       	call   c0105182 <alloc_pages>
c0103ee2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ee5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ee9:	75 24                	jne    c0103f0f <basic_check+0x3c7>
c0103eeb:	c7 44 24 0c 9c 62 11 	movl   $0xc011629c,0xc(%esp)
c0103ef2:	c0 
c0103ef3:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103efa:	c0 
c0103efb:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103f02:	00 
c0103f03:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103f0a:	e8 b9 cf ff ff       	call   c0100ec8 <__panic>

    assert(alloc_page() == NULL);
c0103f0f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f16:	e8 67 12 00 00       	call   c0105182 <alloc_pages>
c0103f1b:	85 c0                	test   %eax,%eax
c0103f1d:	74 24                	je     c0103f43 <basic_check+0x3fb>
c0103f1f:	c7 44 24 0c 86 63 11 	movl   $0xc0116386,0xc(%esp)
c0103f26:	c0 
c0103f27:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103f2e:	c0 
c0103f2f:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103f36:	00 
c0103f37:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103f3e:	e8 85 cf ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103f43:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f4a:	00 
c0103f4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f4e:	89 04 24             	mov    %eax,(%esp)
c0103f51:	e8 97 12 00 00       	call   c01051ed <free_pages>
c0103f56:	c7 45 d8 20 41 15 c0 	movl   $0xc0154120,-0x28(%ebp)
c0103f5d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f60:	8b 40 04             	mov    0x4(%eax),%eax
c0103f63:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f66:	0f 94 c0             	sete   %al
c0103f69:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f6c:	85 c0                	test   %eax,%eax
c0103f6e:	74 24                	je     c0103f94 <basic_check+0x44c>
c0103f70:	c7 44 24 0c a8 63 11 	movl   $0xc01163a8,0xc(%esp)
c0103f77:	c0 
c0103f78:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103f7f:	c0 
c0103f80:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f87:	00 
c0103f88:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103f8f:	e8 34 cf ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f94:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f9b:	e8 e2 11 00 00       	call   c0105182 <alloc_pages>
c0103fa0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103fa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fa6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103fa9:	74 24                	je     c0103fcf <basic_check+0x487>
c0103fab:	c7 44 24 0c c0 63 11 	movl   $0xc01163c0,0xc(%esp)
c0103fb2:	c0 
c0103fb3:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103fba:	c0 
c0103fbb:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103fc2:	00 
c0103fc3:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103fca:	e8 f9 ce ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103fcf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fd6:	e8 a7 11 00 00       	call   c0105182 <alloc_pages>
c0103fdb:	85 c0                	test   %eax,%eax
c0103fdd:	74 24                	je     c0104003 <basic_check+0x4bb>
c0103fdf:	c7 44 24 0c 86 63 11 	movl   $0xc0116386,0xc(%esp)
c0103fe6:	c0 
c0103fe7:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0103fee:	c0 
c0103fef:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103ff6:	00 
c0103ff7:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0103ffe:	e8 c5 ce ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0104003:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c0104008:	85 c0                	test   %eax,%eax
c010400a:	74 24                	je     c0104030 <basic_check+0x4e8>
c010400c:	c7 44 24 0c d9 63 11 	movl   $0xc01163d9,0xc(%esp)
c0104013:	c0 
c0104014:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c010401b:	c0 
c010401c:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0104023:	00 
c0104024:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c010402b:	e8 98 ce ff ff       	call   c0100ec8 <__panic>
    free_list = free_list_store;
c0104030:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104033:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104036:	a3 20 41 15 c0       	mov    %eax,0xc0154120
c010403b:	89 15 24 41 15 c0    	mov    %edx,0xc0154124
    nr_free = nr_free_store;
c0104041:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104044:	a3 28 41 15 c0       	mov    %eax,0xc0154128

    free_page(p);
c0104049:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104050:	00 
c0104051:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104054:	89 04 24             	mov    %eax,(%esp)
c0104057:	e8 91 11 00 00       	call   c01051ed <free_pages>
    free_page(p1);
c010405c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104063:	00 
c0104064:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104067:	89 04 24             	mov    %eax,(%esp)
c010406a:	e8 7e 11 00 00       	call   c01051ed <free_pages>
    free_page(p2);
c010406f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104076:	00 
c0104077:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010407a:	89 04 24             	mov    %eax,(%esp)
c010407d:	e8 6b 11 00 00       	call   c01051ed <free_pages>
}
c0104082:	c9                   	leave  
c0104083:	c3                   	ret    

c0104084 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104084:	55                   	push   %ebp
c0104085:	89 e5                	mov    %esp,%ebp
c0104087:	53                   	push   %ebx
c0104088:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c010408e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104095:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010409c:	c7 45 ec 20 41 15 c0 	movl   $0xc0154120,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01040a3:	eb 6b                	jmp    c0104110 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c01040a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040a8:	83 e8 10             	sub    $0x10,%eax
c01040ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c01040ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040b1:	83 c0 04             	add    $0x4,%eax
c01040b4:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01040bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040be:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040c1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01040c4:	0f a3 10             	bt     %edx,(%eax)
c01040c7:	19 c0                	sbb    %eax,%eax
c01040c9:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01040cc:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040d0:	0f 95 c0             	setne  %al
c01040d3:	0f b6 c0             	movzbl %al,%eax
c01040d6:	85 c0                	test   %eax,%eax
c01040d8:	75 24                	jne    c01040fe <default_check+0x7a>
c01040da:	c7 44 24 0c e6 63 11 	movl   $0xc01163e6,0xc(%esp)
c01040e1:	c0 
c01040e2:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01040e9:	c0 
c01040ea:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01040f1:	00 
c01040f2:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01040f9:	e8 ca cd ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c01040fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104102:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104105:	8b 50 08             	mov    0x8(%eax),%edx
c0104108:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010410b:	01 d0                	add    %edx,%eax
c010410d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104110:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104113:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104116:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104119:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010411c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010411f:	81 7d ec 20 41 15 c0 	cmpl   $0xc0154120,-0x14(%ebp)
c0104126:	0f 85 79 ff ff ff    	jne    c01040a5 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010412c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010412f:	e8 eb 10 00 00       	call   c010521f <nr_free_pages>
c0104134:	39 c3                	cmp    %eax,%ebx
c0104136:	74 24                	je     c010415c <default_check+0xd8>
c0104138:	c7 44 24 0c f6 63 11 	movl   $0xc01163f6,0xc(%esp)
c010413f:	c0 
c0104140:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104147:	c0 
c0104148:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c010414f:	00 
c0104150:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104157:	e8 6c cd ff ff       	call   c0100ec8 <__panic>

    basic_check();
c010415c:	e8 e7 f9 ff ff       	call   c0103b48 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104161:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104168:	e8 15 10 00 00       	call   c0105182 <alloc_pages>
c010416d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104170:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104174:	75 24                	jne    c010419a <default_check+0x116>
c0104176:	c7 44 24 0c 0f 64 11 	movl   $0xc011640f,0xc(%esp)
c010417d:	c0 
c010417e:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104185:	c0 
c0104186:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c010418d:	00 
c010418e:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104195:	e8 2e cd ff ff       	call   c0100ec8 <__panic>
    assert(!PageProperty(p0));
c010419a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010419d:	83 c0 04             	add    $0x4,%eax
c01041a0:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01041a7:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01041ad:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01041b0:	0f a3 10             	bt     %edx,(%eax)
c01041b3:	19 c0                	sbb    %eax,%eax
c01041b5:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01041b8:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01041bc:	0f 95 c0             	setne  %al
c01041bf:	0f b6 c0             	movzbl %al,%eax
c01041c2:	85 c0                	test   %eax,%eax
c01041c4:	74 24                	je     c01041ea <default_check+0x166>
c01041c6:	c7 44 24 0c 1a 64 11 	movl   $0xc011641a,0xc(%esp)
c01041cd:	c0 
c01041ce:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01041d5:	c0 
c01041d6:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01041dd:	00 
c01041de:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01041e5:	e8 de cc ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c01041ea:	a1 20 41 15 c0       	mov    0xc0154120,%eax
c01041ef:	8b 15 24 41 15 c0    	mov    0xc0154124,%edx
c01041f5:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041f8:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041fb:	c7 45 b4 20 41 15 c0 	movl   $0xc0154120,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104202:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104205:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104208:	89 50 04             	mov    %edx,0x4(%eax)
c010420b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010420e:	8b 50 04             	mov    0x4(%eax),%edx
c0104211:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104214:	89 10                	mov    %edx,(%eax)
c0104216:	c7 45 b0 20 41 15 c0 	movl   $0xc0154120,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010421d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104220:	8b 40 04             	mov    0x4(%eax),%eax
c0104223:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104226:	0f 94 c0             	sete   %al
c0104229:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010422c:	85 c0                	test   %eax,%eax
c010422e:	75 24                	jne    c0104254 <default_check+0x1d0>
c0104230:	c7 44 24 0c 6f 63 11 	movl   $0xc011636f,0xc(%esp)
c0104237:	c0 
c0104238:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c010423f:	c0 
c0104240:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104247:	00 
c0104248:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c010424f:	e8 74 cc ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104254:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010425b:	e8 22 0f 00 00       	call   c0105182 <alloc_pages>
c0104260:	85 c0                	test   %eax,%eax
c0104262:	74 24                	je     c0104288 <default_check+0x204>
c0104264:	c7 44 24 0c 86 63 11 	movl   $0xc0116386,0xc(%esp)
c010426b:	c0 
c010426c:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104273:	c0 
c0104274:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010427b:	00 
c010427c:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104283:	e8 40 cc ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0104288:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c010428d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104290:	c7 05 28 41 15 c0 00 	movl   $0x0,0xc0154128
c0104297:	00 00 00 

    free_pages(p0 + 2, 3);
c010429a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010429d:	83 c0 48             	add    $0x48,%eax
c01042a0:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01042a7:	00 
c01042a8:	89 04 24             	mov    %eax,(%esp)
c01042ab:	e8 3d 0f 00 00       	call   c01051ed <free_pages>
    assert(alloc_pages(4) == NULL);
c01042b0:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01042b7:	e8 c6 0e 00 00       	call   c0105182 <alloc_pages>
c01042bc:	85 c0                	test   %eax,%eax
c01042be:	74 24                	je     c01042e4 <default_check+0x260>
c01042c0:	c7 44 24 0c 2c 64 11 	movl   $0xc011642c,0xc(%esp)
c01042c7:	c0 
c01042c8:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01042cf:	c0 
c01042d0:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01042d7:	00 
c01042d8:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01042df:	e8 e4 cb ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042e7:	83 c0 48             	add    $0x48,%eax
c01042ea:	83 c0 04             	add    $0x4,%eax
c01042ed:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042f4:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042f7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042fa:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042fd:	0f a3 10             	bt     %edx,(%eax)
c0104300:	19 c0                	sbb    %eax,%eax
c0104302:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0104305:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0104309:	0f 95 c0             	setne  %al
c010430c:	0f b6 c0             	movzbl %al,%eax
c010430f:	85 c0                	test   %eax,%eax
c0104311:	74 0e                	je     c0104321 <default_check+0x29d>
c0104313:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104316:	83 c0 48             	add    $0x48,%eax
c0104319:	8b 40 08             	mov    0x8(%eax),%eax
c010431c:	83 f8 03             	cmp    $0x3,%eax
c010431f:	74 24                	je     c0104345 <default_check+0x2c1>
c0104321:	c7 44 24 0c 44 64 11 	movl   $0xc0116444,0xc(%esp)
c0104328:	c0 
c0104329:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104330:	c0 
c0104331:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0104338:	00 
c0104339:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104340:	e8 83 cb ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104345:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010434c:	e8 31 0e 00 00       	call   c0105182 <alloc_pages>
c0104351:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104354:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104358:	75 24                	jne    c010437e <default_check+0x2fa>
c010435a:	c7 44 24 0c 70 64 11 	movl   $0xc0116470,0xc(%esp)
c0104361:	c0 
c0104362:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104369:	c0 
c010436a:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0104371:	00 
c0104372:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104379:	e8 4a cb ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c010437e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104385:	e8 f8 0d 00 00       	call   c0105182 <alloc_pages>
c010438a:	85 c0                	test   %eax,%eax
c010438c:	74 24                	je     c01043b2 <default_check+0x32e>
c010438e:	c7 44 24 0c 86 63 11 	movl   $0xc0116386,0xc(%esp)
c0104395:	c0 
c0104396:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c010439d:	c0 
c010439e:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01043a5:	00 
c01043a6:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01043ad:	e8 16 cb ff ff       	call   c0100ec8 <__panic>
    assert(p0 + 2 == p1);
c01043b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043b5:	83 c0 48             	add    $0x48,%eax
c01043b8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01043bb:	74 24                	je     c01043e1 <default_check+0x35d>
c01043bd:	c7 44 24 0c 8e 64 11 	movl   $0xc011648e,0xc(%esp)
c01043c4:	c0 
c01043c5:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01043cc:	c0 
c01043cd:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01043d4:	00 
c01043d5:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01043dc:	e8 e7 ca ff ff       	call   c0100ec8 <__panic>

    p2 = p0 + 1;
c01043e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043e4:	83 c0 24             	add    $0x24,%eax
c01043e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043ea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043f1:	00 
c01043f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043f5:	89 04 24             	mov    %eax,(%esp)
c01043f8:	e8 f0 0d 00 00       	call   c01051ed <free_pages>
    free_pages(p1, 3);
c01043fd:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104404:	00 
c0104405:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104408:	89 04 24             	mov    %eax,(%esp)
c010440b:	e8 dd 0d 00 00       	call   c01051ed <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0104410:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104413:	83 c0 04             	add    $0x4,%eax
c0104416:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c010441d:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104420:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104423:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104426:	0f a3 10             	bt     %edx,(%eax)
c0104429:	19 c0                	sbb    %eax,%eax
c010442b:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c010442e:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104432:	0f 95 c0             	setne  %al
c0104435:	0f b6 c0             	movzbl %al,%eax
c0104438:	85 c0                	test   %eax,%eax
c010443a:	74 0b                	je     c0104447 <default_check+0x3c3>
c010443c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010443f:	8b 40 08             	mov    0x8(%eax),%eax
c0104442:	83 f8 01             	cmp    $0x1,%eax
c0104445:	74 24                	je     c010446b <default_check+0x3e7>
c0104447:	c7 44 24 0c 9c 64 11 	movl   $0xc011649c,0xc(%esp)
c010444e:	c0 
c010444f:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104456:	c0 
c0104457:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010445e:	00 
c010445f:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104466:	e8 5d ca ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010446b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010446e:	83 c0 04             	add    $0x4,%eax
c0104471:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104478:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010447b:	8b 45 90             	mov    -0x70(%ebp),%eax
c010447e:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104481:	0f a3 10             	bt     %edx,(%eax)
c0104484:	19 c0                	sbb    %eax,%eax
c0104486:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104489:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010448d:	0f 95 c0             	setne  %al
c0104490:	0f b6 c0             	movzbl %al,%eax
c0104493:	85 c0                	test   %eax,%eax
c0104495:	74 0b                	je     c01044a2 <default_check+0x41e>
c0104497:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010449a:	8b 40 08             	mov    0x8(%eax),%eax
c010449d:	83 f8 03             	cmp    $0x3,%eax
c01044a0:	74 24                	je     c01044c6 <default_check+0x442>
c01044a2:	c7 44 24 0c c4 64 11 	movl   $0xc01164c4,0xc(%esp)
c01044a9:	c0 
c01044aa:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01044b1:	c0 
c01044b2:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01044b9:	00 
c01044ba:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01044c1:	e8 02 ca ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01044c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044cd:	e8 b0 0c 00 00       	call   c0105182 <alloc_pages>
c01044d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044d8:	83 e8 24             	sub    $0x24,%eax
c01044db:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044de:	74 24                	je     c0104504 <default_check+0x480>
c01044e0:	c7 44 24 0c ea 64 11 	movl   $0xc01164ea,0xc(%esp)
c01044e7:	c0 
c01044e8:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01044ef:	c0 
c01044f0:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01044f7:	00 
c01044f8:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01044ff:	e8 c4 c9 ff ff       	call   c0100ec8 <__panic>
    free_page(p0);
c0104504:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010450b:	00 
c010450c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010450f:	89 04 24             	mov    %eax,(%esp)
c0104512:	e8 d6 0c 00 00       	call   c01051ed <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0104517:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010451e:	e8 5f 0c 00 00       	call   c0105182 <alloc_pages>
c0104523:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104526:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104529:	83 c0 24             	add    $0x24,%eax
c010452c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010452f:	74 24                	je     c0104555 <default_check+0x4d1>
c0104531:	c7 44 24 0c 08 65 11 	movl   $0xc0116508,0xc(%esp)
c0104538:	c0 
c0104539:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104540:	c0 
c0104541:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0104548:	00 
c0104549:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104550:	e8 73 c9 ff ff       	call   c0100ec8 <__panic>

    free_pages(p0, 2);
c0104555:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010455c:	00 
c010455d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104560:	89 04 24             	mov    %eax,(%esp)
c0104563:	e8 85 0c 00 00       	call   c01051ed <free_pages>
    free_page(p2);
c0104568:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010456f:	00 
c0104570:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104573:	89 04 24             	mov    %eax,(%esp)
c0104576:	e8 72 0c 00 00       	call   c01051ed <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010457b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104582:	e8 fb 0b 00 00       	call   c0105182 <alloc_pages>
c0104587:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010458a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010458e:	75 24                	jne    c01045b4 <default_check+0x530>
c0104590:	c7 44 24 0c 28 65 11 	movl   $0xc0116528,0xc(%esp)
c0104597:	c0 
c0104598:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c010459f:	c0 
c01045a0:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c01045a7:	00 
c01045a8:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01045af:	e8 14 c9 ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c01045b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01045bb:	e8 c2 0b 00 00       	call   c0105182 <alloc_pages>
c01045c0:	85 c0                	test   %eax,%eax
c01045c2:	74 24                	je     c01045e8 <default_check+0x564>
c01045c4:	c7 44 24 0c 86 63 11 	movl   $0xc0116386,0xc(%esp)
c01045cb:	c0 
c01045cc:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01045d3:	c0 
c01045d4:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01045db:	00 
c01045dc:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01045e3:	e8 e0 c8 ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c01045e8:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c01045ed:	85 c0                	test   %eax,%eax
c01045ef:	74 24                	je     c0104615 <default_check+0x591>
c01045f1:	c7 44 24 0c d9 63 11 	movl   $0xc01163d9,0xc(%esp)
c01045f8:	c0 
c01045f9:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104600:	c0 
c0104601:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0104608:	00 
c0104609:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c0104610:	e8 b3 c8 ff ff       	call   c0100ec8 <__panic>
    nr_free = nr_free_store;
c0104615:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104618:	a3 28 41 15 c0       	mov    %eax,0xc0154128

    free_list = free_list_store;
c010461d:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104620:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104623:	a3 20 41 15 c0       	mov    %eax,0xc0154120
c0104628:	89 15 24 41 15 c0    	mov    %edx,0xc0154124
    free_pages(p0, 5);
c010462e:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104635:	00 
c0104636:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104639:	89 04 24             	mov    %eax,(%esp)
c010463c:	e8 ac 0b 00 00       	call   c01051ed <free_pages>

    le = &free_list;
c0104641:	c7 45 ec 20 41 15 c0 	movl   $0xc0154120,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104648:	eb 1d                	jmp    c0104667 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010464a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010464d:	83 e8 10             	sub    $0x10,%eax
c0104650:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104653:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104657:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010465a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010465d:	8b 40 08             	mov    0x8(%eax),%eax
c0104660:	29 c2                	sub    %eax,%edx
c0104662:	89 d0                	mov    %edx,%eax
c0104664:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104667:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010466a:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010466d:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104670:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104673:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104676:	81 7d ec 20 41 15 c0 	cmpl   $0xc0154120,-0x14(%ebp)
c010467d:	75 cb                	jne    c010464a <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010467f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104683:	74 24                	je     c01046a9 <default_check+0x625>
c0104685:	c7 44 24 0c 46 65 11 	movl   $0xc0116546,0xc(%esp)
c010468c:	c0 
c010468d:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c0104694:	c0 
c0104695:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c010469c:	00 
c010469d:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01046a4:	e8 1f c8 ff ff       	call   c0100ec8 <__panic>
    assert(total == 0);
c01046a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01046ad:	74 24                	je     c01046d3 <default_check+0x64f>
c01046af:	c7 44 24 0c 51 65 11 	movl   $0xc0116551,0xc(%esp)
c01046b6:	c0 
c01046b7:	c7 44 24 08 16 62 11 	movl   $0xc0116216,0x8(%esp)
c01046be:	c0 
c01046bf:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c01046c6:	00 
c01046c7:	c7 04 24 2b 62 11 c0 	movl   $0xc011622b,(%esp)
c01046ce:	e8 f5 c7 ff ff       	call   c0100ec8 <__panic>
}
c01046d3:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046d9:	5b                   	pop    %ebx
c01046da:	5d                   	pop    %ebp
c01046db:	c3                   	ret    

c01046dc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046dc:	55                   	push   %ebp
c01046dd:	89 e5                	mov    %esp,%ebp
c01046df:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046e2:	9c                   	pushf  
c01046e3:	58                   	pop    %eax
c01046e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01046e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046ea:	25 00 02 00 00       	and    $0x200,%eax
c01046ef:	85 c0                	test   %eax,%eax
c01046f1:	74 0c                	je     c01046ff <__intr_save+0x23>
        intr_disable();
c01046f3:	e8 50 da ff ff       	call   c0102148 <intr_disable>
        return 1;
c01046f8:	b8 01 00 00 00       	mov    $0x1,%eax
c01046fd:	eb 05                	jmp    c0104704 <__intr_save+0x28>
    }
    return 0;
c01046ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104704:	c9                   	leave  
c0104705:	c3                   	ret    

c0104706 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104706:	55                   	push   %ebp
c0104707:	89 e5                	mov    %esp,%ebp
c0104709:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010470c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104710:	74 05                	je     c0104717 <__intr_restore+0x11>
        intr_enable();
c0104712:	e8 2b da ff ff       	call   c0102142 <intr_enable>
    }
}
c0104717:	c9                   	leave  
c0104718:	c3                   	ret    

c0104719 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104719:	55                   	push   %ebp
c010471a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010471c:	8b 55 08             	mov    0x8(%ebp),%edx
c010471f:	a1 34 41 15 c0       	mov    0xc0154134,%eax
c0104724:	29 c2                	sub    %eax,%edx
c0104726:	89 d0                	mov    %edx,%eax
c0104728:	c1 f8 02             	sar    $0x2,%eax
c010472b:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104731:	5d                   	pop    %ebp
c0104732:	c3                   	ret    

c0104733 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104733:	55                   	push   %ebp
c0104734:	89 e5                	mov    %esp,%ebp
c0104736:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104739:	8b 45 08             	mov    0x8(%ebp),%eax
c010473c:	89 04 24             	mov    %eax,(%esp)
c010473f:	e8 d5 ff ff ff       	call   c0104719 <page2ppn>
c0104744:	c1 e0 0c             	shl    $0xc,%eax
}
c0104747:	c9                   	leave  
c0104748:	c3                   	ret    

c0104749 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104749:	55                   	push   %ebp
c010474a:	89 e5                	mov    %esp,%ebp
c010474c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010474f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104752:	c1 e8 0c             	shr    $0xc,%eax
c0104755:	89 c2                	mov    %eax,%edx
c0104757:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010475c:	39 c2                	cmp    %eax,%edx
c010475e:	72 1c                	jb     c010477c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104760:	c7 44 24 08 8c 65 11 	movl   $0xc011658c,0x8(%esp)
c0104767:	c0 
c0104768:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010476f:	00 
c0104770:	c7 04 24 ab 65 11 c0 	movl   $0xc01165ab,(%esp)
c0104777:	e8 4c c7 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010477c:	8b 0d 34 41 15 c0    	mov    0xc0154134,%ecx
c0104782:	8b 45 08             	mov    0x8(%ebp),%eax
c0104785:	c1 e8 0c             	shr    $0xc,%eax
c0104788:	89 c2                	mov    %eax,%edx
c010478a:	89 d0                	mov    %edx,%eax
c010478c:	c1 e0 03             	shl    $0x3,%eax
c010478f:	01 d0                	add    %edx,%eax
c0104791:	c1 e0 02             	shl    $0x2,%eax
c0104794:	01 c8                	add    %ecx,%eax
}
c0104796:	c9                   	leave  
c0104797:	c3                   	ret    

c0104798 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104798:	55                   	push   %ebp
c0104799:	89 e5                	mov    %esp,%ebp
c010479b:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010479e:	8b 45 08             	mov    0x8(%ebp),%eax
c01047a1:	89 04 24             	mov    %eax,(%esp)
c01047a4:	e8 8a ff ff ff       	call   c0104733 <page2pa>
c01047a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047af:	c1 e8 0c             	shr    $0xc,%eax
c01047b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01047b5:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c01047ba:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01047bd:	72 23                	jb     c01047e2 <page2kva+0x4a>
c01047bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047c6:	c7 44 24 08 bc 65 11 	movl   $0xc01165bc,0x8(%esp)
c01047cd:	c0 
c01047ce:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01047d5:	00 
c01047d6:	c7 04 24 ab 65 11 c0 	movl   $0xc01165ab,(%esp)
c01047dd:	e8 e6 c6 ff ff       	call   c0100ec8 <__panic>
c01047e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047e5:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047ea:	c9                   	leave  
c01047eb:	c3                   	ret    

c01047ec <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047ec:	55                   	push   %ebp
c01047ed:	89 e5                	mov    %esp,%ebp
c01047ef:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01047f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047f8:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047ff:	77 23                	ja     c0104824 <kva2page+0x38>
c0104801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104804:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104808:	c7 44 24 08 e0 65 11 	movl   $0xc01165e0,0x8(%esp)
c010480f:	c0 
c0104810:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104817:	00 
c0104818:	c7 04 24 ab 65 11 c0 	movl   $0xc01165ab,(%esp)
c010481f:	e8 a4 c6 ff ff       	call   c0100ec8 <__panic>
c0104824:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104827:	05 00 00 00 40       	add    $0x40000000,%eax
c010482c:	89 04 24             	mov    %eax,(%esp)
c010482f:	e8 15 ff ff ff       	call   c0104749 <pa2page>
}
c0104834:	c9                   	leave  
c0104835:	c3                   	ret    

c0104836 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104836:	55                   	push   %ebp
c0104837:	89 e5                	mov    %esp,%ebp
c0104839:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010483c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010483f:	ba 01 00 00 00       	mov    $0x1,%edx
c0104844:	89 c1                	mov    %eax,%ecx
c0104846:	d3 e2                	shl    %cl,%edx
c0104848:	89 d0                	mov    %edx,%eax
c010484a:	89 04 24             	mov    %eax,(%esp)
c010484d:	e8 30 09 00 00       	call   c0105182 <alloc_pages>
c0104852:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104855:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104859:	75 07                	jne    c0104862 <__slob_get_free_pages+0x2c>
    return NULL;
c010485b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104860:	eb 0b                	jmp    c010486d <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104865:	89 04 24             	mov    %eax,(%esp)
c0104868:	e8 2b ff ff ff       	call   c0104798 <page2kva>
}
c010486d:	c9                   	leave  
c010486e:	c3                   	ret    

c010486f <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c010486f:	55                   	push   %ebp
c0104870:	89 e5                	mov    %esp,%ebp
c0104872:	53                   	push   %ebx
c0104873:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104876:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104879:	ba 01 00 00 00       	mov    $0x1,%edx
c010487e:	89 c1                	mov    %eax,%ecx
c0104880:	d3 e2                	shl    %cl,%edx
c0104882:	89 d0                	mov    %edx,%eax
c0104884:	89 c3                	mov    %eax,%ebx
c0104886:	8b 45 08             	mov    0x8(%ebp),%eax
c0104889:	89 04 24             	mov    %eax,(%esp)
c010488c:	e8 5b ff ff ff       	call   c01047ec <kva2page>
c0104891:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104895:	89 04 24             	mov    %eax,(%esp)
c0104898:	e8 50 09 00 00       	call   c01051ed <free_pages>
}
c010489d:	83 c4 14             	add    $0x14,%esp
c01048a0:	5b                   	pop    %ebx
c01048a1:	5d                   	pop    %ebp
c01048a2:	c3                   	ret    

c01048a3 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01048a3:	55                   	push   %ebp
c01048a4:	89 e5                	mov    %esp,%ebp
c01048a6:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01048a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01048ac:	83 c0 08             	add    $0x8,%eax
c01048af:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01048b4:	76 24                	jbe    c01048da <slob_alloc+0x37>
c01048b6:	c7 44 24 0c 04 66 11 	movl   $0xc0116604,0xc(%esp)
c01048bd:	c0 
c01048be:	c7 44 24 08 23 66 11 	movl   $0xc0116623,0x8(%esp)
c01048c5:	c0 
c01048c6:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01048cd:	00 
c01048ce:	c7 04 24 38 66 11 c0 	movl   $0xc0116638,(%esp)
c01048d5:	e8 ee c5 ff ff       	call   c0100ec8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048e1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01048eb:	83 c0 07             	add    $0x7,%eax
c01048ee:	c1 e8 03             	shr    $0x3,%eax
c01048f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048f4:	e8 e3 fd ff ff       	call   c01046dc <__intr_save>
c01048f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048fc:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c0104901:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104907:	8b 40 04             	mov    0x4(%eax),%eax
c010490a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c010490d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104911:	74 25                	je     c0104938 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104913:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104916:	8b 45 10             	mov    0x10(%ebp),%eax
c0104919:	01 d0                	add    %edx,%eax
c010491b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010491e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104921:	f7 d8                	neg    %eax
c0104923:	21 d0                	and    %edx,%eax
c0104925:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104928:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010492b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010492e:	29 c2                	sub    %eax,%edx
c0104930:	89 d0                	mov    %edx,%eax
c0104932:	c1 f8 03             	sar    $0x3,%eax
c0104935:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104938:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010493b:	8b 00                	mov    (%eax),%eax
c010493d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104940:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104943:	01 ca                	add    %ecx,%edx
c0104945:	39 d0                	cmp    %edx,%eax
c0104947:	0f 8c aa 00 00 00    	jl     c01049f7 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010494d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104951:	74 38                	je     c010498b <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104953:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104956:	8b 00                	mov    (%eax),%eax
c0104958:	2b 45 e8             	sub    -0x18(%ebp),%eax
c010495b:	89 c2                	mov    %eax,%edx
c010495d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104960:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104962:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104965:	8b 50 04             	mov    0x4(%eax),%edx
c0104968:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010496b:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010496e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104971:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104974:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104977:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010497a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010497d:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010497f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104982:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104985:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104988:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c010498b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010498e:	8b 00                	mov    (%eax),%eax
c0104990:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104993:	75 0e                	jne    c01049a3 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104998:	8b 50 04             	mov    0x4(%eax),%edx
c010499b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010499e:	89 50 04             	mov    %edx,0x4(%eax)
c01049a1:	eb 3c                	jmp    c01049df <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c01049a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01049a6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01049ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049b0:	01 c2                	add    %eax,%edx
c01049b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049b5:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01049b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049bb:	8b 40 04             	mov    0x4(%eax),%eax
c01049be:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049c1:	8b 12                	mov    (%edx),%edx
c01049c3:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01049c6:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01049c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049cb:	8b 40 04             	mov    0x4(%eax),%eax
c01049ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049d1:	8b 52 04             	mov    0x4(%edx),%edx
c01049d4:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01049d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049da:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049dd:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049e2:	a3 08 fa 14 c0       	mov    %eax,0xc014fa08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049ea:	89 04 24             	mov    %eax,(%esp)
c01049ed:	e8 14 fd ff ff       	call   c0104706 <__intr_restore>
			return cur;
c01049f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049f5:	eb 7f                	jmp    c0104a76 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01049f7:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c01049fc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049ff:	75 61                	jne    c0104a62 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104a01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a04:	89 04 24             	mov    %eax,(%esp)
c0104a07:	e8 fa fc ff ff       	call   c0104706 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104a0c:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104a13:	75 07                	jne    c0104a1c <slob_alloc+0x179>
				return 0;
c0104a15:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a1a:	eb 5a                	jmp    c0104a76 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104a1c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a23:	00 
c0104a24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a27:	89 04 24             	mov    %eax,(%esp)
c0104a2a:	e8 07 fe ff ff       	call   c0104836 <__slob_get_free_pages>
c0104a2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104a32:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a36:	75 07                	jne    c0104a3f <slob_alloc+0x19c>
				return 0;
c0104a38:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a3d:	eb 37                	jmp    c0104a76 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104a3f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a46:	00 
c0104a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4a:	89 04 24             	mov    %eax,(%esp)
c0104a4d:	e8 26 00 00 00       	call   c0104a78 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a52:	e8 85 fc ff ff       	call   c01046dc <__intr_save>
c0104a57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a5a:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c0104a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a65:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6b:	8b 40 04             	mov    0x4(%eax),%eax
c0104a6e:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a71:	e9 97 fe ff ff       	jmp    c010490d <slob_alloc+0x6a>
}
c0104a76:	c9                   	leave  
c0104a77:	c3                   	ret    

c0104a78 <slob_free>:

static void slob_free(void *block, int size)
{
c0104a78:	55                   	push   %ebp
c0104a79:	89 e5                	mov    %esp,%ebp
c0104a7b:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a81:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a84:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a88:	75 05                	jne    c0104a8f <slob_free+0x17>
		return;
c0104a8a:	e9 ff 00 00 00       	jmp    c0104b8e <slob_free+0x116>

	if (size)
c0104a8f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a93:	74 10                	je     c0104aa5 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a98:	83 c0 07             	add    $0x7,%eax
c0104a9b:	c1 e8 03             	shr    $0x3,%eax
c0104a9e:	89 c2                	mov    %eax,%edx
c0104aa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa3:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104aa5:	e8 32 fc ff ff       	call   c01046dc <__intr_save>
c0104aaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104aad:	a1 08 fa 14 c0       	mov    0xc014fa08,%eax
c0104ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ab5:	eb 27                	jmp    c0104ade <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aba:	8b 40 04             	mov    0x4(%eax),%eax
c0104abd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ac0:	77 13                	ja     c0104ad5 <slob_free+0x5d>
c0104ac2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ac5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ac8:	77 27                	ja     c0104af1 <slob_free+0x79>
c0104aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104acd:	8b 40 04             	mov    0x4(%eax),%eax
c0104ad0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ad3:	77 1c                	ja     c0104af1 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad8:	8b 40 04             	mov    0x4(%eax),%eax
c0104adb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ade:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ae4:	76 d1                	jbe    c0104ab7 <slob_free+0x3f>
c0104ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae9:	8b 40 04             	mov    0x4(%eax),%eax
c0104aec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104aef:	76 c6                	jbe    c0104ab7 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104af1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104af4:	8b 00                	mov    (%eax),%eax
c0104af6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104afd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b00:	01 c2                	add    %eax,%edx
c0104b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b05:	8b 40 04             	mov    0x4(%eax),%eax
c0104b08:	39 c2                	cmp    %eax,%edx
c0104b0a:	75 25                	jne    c0104b31 <slob_free+0xb9>
		b->units += cur->next->units;
c0104b0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b0f:	8b 10                	mov    (%eax),%edx
c0104b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b14:	8b 40 04             	mov    0x4(%eax),%eax
c0104b17:	8b 00                	mov    (%eax),%eax
c0104b19:	01 c2                	add    %eax,%edx
c0104b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1e:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b23:	8b 40 04             	mov    0x4(%eax),%eax
c0104b26:	8b 50 04             	mov    0x4(%eax),%edx
c0104b29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b2c:	89 50 04             	mov    %edx,0x4(%eax)
c0104b2f:	eb 0c                	jmp    c0104b3d <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b34:	8b 50 04             	mov    0x4(%eax),%edx
c0104b37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b3a:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b40:	8b 00                	mov    (%eax),%eax
c0104b42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b4c:	01 d0                	add    %edx,%eax
c0104b4e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b51:	75 1f                	jne    c0104b72 <slob_free+0xfa>
		cur->units += b->units;
c0104b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b56:	8b 10                	mov    (%eax),%edx
c0104b58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b5b:	8b 00                	mov    (%eax),%eax
c0104b5d:	01 c2                	add    %eax,%edx
c0104b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b62:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b67:	8b 50 04             	mov    0x4(%eax),%edx
c0104b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b6d:	89 50 04             	mov    %edx,0x4(%eax)
c0104b70:	eb 09                	jmp    c0104b7b <slob_free+0x103>
	} else
		cur->next = b;
c0104b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b75:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b78:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b7e:	a3 08 fa 14 c0       	mov    %eax,0xc014fa08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b86:	89 04 24             	mov    %eax,(%esp)
c0104b89:	e8 78 fb ff ff       	call   c0104706 <__intr_restore>
}
c0104b8e:	c9                   	leave  
c0104b8f:	c3                   	ret    

c0104b90 <check_slab>:



void check_slab(void) {
c0104b90:	55                   	push   %ebp
c0104b91:	89 e5                	mov    %esp,%ebp
c0104b93:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0104b96:	c7 04 24 4a 66 11 c0 	movl   $0xc011664a,(%esp)
c0104b9d:	e8 c3 b7 ff ff       	call   c0100365 <cprintf>
}
c0104ba2:	c9                   	leave  
c0104ba3:	c3                   	ret    

c0104ba4 <slab_init>:

void
slab_init(void) {
c0104ba4:	55                   	push   %ebp
c0104ba5:	89 e5                	mov    %esp,%ebp
c0104ba7:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104baa:	c7 04 24 60 66 11 c0 	movl   $0xc0116660,(%esp)
c0104bb1:	e8 af b7 ff ff       	call   c0100365 <cprintf>
  check_slab();
c0104bb6:	e8 d5 ff ff ff       	call   c0104b90 <check_slab>
}
c0104bbb:	c9                   	leave  
c0104bbc:	c3                   	ret    

c0104bbd <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104bbd:	55                   	push   %ebp
c0104bbe:	89 e5                	mov    %esp,%ebp
c0104bc0:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0104bc3:	e8 dc ff ff ff       	call   c0104ba4 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104bc8:	c7 04 24 74 66 11 c0 	movl   $0xc0116674,(%esp)
c0104bcf:	e8 91 b7 ff ff       	call   c0100365 <cprintf>
}
c0104bd4:	c9                   	leave  
c0104bd5:	c3                   	ret    

c0104bd6 <slab_allocated>:

size_t
slab_allocated(void) {
c0104bd6:	55                   	push   %ebp
c0104bd7:	89 e5                	mov    %esp,%ebp
  return 0;
c0104bd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bde:	5d                   	pop    %ebp
c0104bdf:	c3                   	ret    

c0104be0 <kallocated>:

size_t
kallocated(void) {
c0104be0:	55                   	push   %ebp
c0104be1:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0104be3:	e8 ee ff ff ff       	call   c0104bd6 <slab_allocated>
}
c0104be8:	5d                   	pop    %ebp
c0104be9:	c3                   	ret    

c0104bea <find_order>:

static int find_order(int size)
{
c0104bea:	55                   	push   %ebp
c0104beb:	89 e5                	mov    %esp,%ebp
c0104bed:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104bf0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bf7:	eb 07                	jmp    c0104c00 <find_order+0x16>
		order++;
c0104bf9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bfd:	d1 7d 08             	sarl   0x8(%ebp)
c0104c00:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104c07:	7f f0                	jg     c0104bf9 <find_order+0xf>
		order++;
	return order;
c0104c09:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104c0c:	c9                   	leave  
c0104c0d:	c3                   	ret    

c0104c0e <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104c0e:	55                   	push   %ebp
c0104c0f:	89 e5                	mov    %esp,%ebp
c0104c11:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104c14:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104c1b:	77 38                	ja     c0104c55 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c20:	8d 50 08             	lea    0x8(%eax),%edx
c0104c23:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c2a:	00 
c0104c2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c32:	89 14 24             	mov    %edx,(%esp)
c0104c35:	e8 69 fc ff ff       	call   c01048a3 <slob_alloc>
c0104c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104c3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c41:	74 08                	je     c0104c4b <__kmalloc+0x3d>
c0104c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c46:	83 c0 08             	add    $0x8,%eax
c0104c49:	eb 05                	jmp    c0104c50 <__kmalloc+0x42>
c0104c4b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c50:	e9 a6 00 00 00       	jmp    c0104cfb <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c55:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c5c:	00 
c0104c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c60:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c64:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c6b:	e8 33 fc ff ff       	call   c01048a3 <slob_alloc>
c0104c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c77:	75 07                	jne    c0104c80 <__kmalloc+0x72>
		return 0;
c0104c79:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c7e:	eb 7b                	jmp    c0104cfb <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c80:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c83:	89 04 24             	mov    %eax,(%esp)
c0104c86:	e8 5f ff ff ff       	call   c0104bea <find_order>
c0104c8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c8e:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c93:	8b 00                	mov    (%eax),%eax
c0104c95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c9c:	89 04 24             	mov    %eax,(%esp)
c0104c9f:	e8 92 fb ff ff       	call   c0104836 <__slob_get_free_pages>
c0104ca4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104ca7:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104caa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cad:	8b 40 04             	mov    0x4(%eax),%eax
c0104cb0:	85 c0                	test   %eax,%eax
c0104cb2:	74 2f                	je     c0104ce3 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104cb4:	e8 23 fa ff ff       	call   c01046dc <__intr_save>
c0104cb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104cbc:	8b 15 cc 0e 15 c0    	mov    0xc0150ecc,%edx
c0104cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cc5:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ccb:	a3 cc 0e 15 c0       	mov    %eax,0xc0150ecc
		spin_unlock_irqrestore(&block_lock, flags);
c0104cd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cd3:	89 04 24             	mov    %eax,(%esp)
c0104cd6:	e8 2b fa ff ff       	call   c0104706 <__intr_restore>
		return bb->pages;
c0104cdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cde:	8b 40 04             	mov    0x4(%eax),%eax
c0104ce1:	eb 18                	jmp    c0104cfb <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104ce3:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104cea:	00 
c0104ceb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cee:	89 04 24             	mov    %eax,(%esp)
c0104cf1:	e8 82 fd ff ff       	call   c0104a78 <slob_free>
	return 0;
c0104cf6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cfb:	c9                   	leave  
c0104cfc:	c3                   	ret    

c0104cfd <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cfd:	55                   	push   %ebp
c0104cfe:	89 e5                	mov    %esp,%ebp
c0104d00:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104d03:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d0a:	00 
c0104d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d0e:	89 04 24             	mov    %eax,(%esp)
c0104d11:	e8 f8 fe ff ff       	call   c0104c0e <__kmalloc>
}
c0104d16:	c9                   	leave  
c0104d17:	c3                   	ret    

c0104d18 <kfree>:


void kfree(void *block)
{
c0104d18:	55                   	push   %ebp
c0104d19:	89 e5                	mov    %esp,%ebp
c0104d1b:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104d1e:	c7 45 f0 cc 0e 15 c0 	movl   $0xc0150ecc,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104d25:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d29:	75 05                	jne    c0104d30 <kfree+0x18>
		return;
c0104d2b:	e9 a2 00 00 00       	jmp    c0104dd2 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d30:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d33:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d38:	85 c0                	test   %eax,%eax
c0104d3a:	75 7f                	jne    c0104dbb <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104d3c:	e8 9b f9 ff ff       	call   c01046dc <__intr_save>
c0104d41:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d44:	a1 cc 0e 15 c0       	mov    0xc0150ecc,%eax
c0104d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d4c:	eb 5c                	jmp    c0104daa <kfree+0x92>
			if (bb->pages == block) {
c0104d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d51:	8b 40 04             	mov    0x4(%eax),%eax
c0104d54:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d57:	75 3f                	jne    c0104d98 <kfree+0x80>
				*last = bb->next;
c0104d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d5c:	8b 50 08             	mov    0x8(%eax),%edx
c0104d5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d62:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d67:	89 04 24             	mov    %eax,(%esp)
c0104d6a:	e8 97 f9 ff ff       	call   c0104706 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d72:	8b 10                	mov    (%eax),%edx
c0104d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d77:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d7b:	89 04 24             	mov    %eax,(%esp)
c0104d7e:	e8 ec fa ff ff       	call   c010486f <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d83:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d8a:	00 
c0104d8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8e:	89 04 24             	mov    %eax,(%esp)
c0104d91:	e8 e2 fc ff ff       	call   c0104a78 <slob_free>
				return;
c0104d96:	eb 3a                	jmp    c0104dd2 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d9b:	83 c0 08             	add    $0x8,%eax
c0104d9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104da4:	8b 40 08             	mov    0x8(%eax),%eax
c0104da7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104daa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104dae:	75 9e                	jne    c0104d4e <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104db3:	89 04 24             	mov    %eax,(%esp)
c0104db6:	e8 4b f9 ff ff       	call   c0104706 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104dbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dbe:	83 e8 08             	sub    $0x8,%eax
c0104dc1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104dc8:	00 
c0104dc9:	89 04 24             	mov    %eax,(%esp)
c0104dcc:	e8 a7 fc ff ff       	call   c0104a78 <slob_free>
	return;
c0104dd1:	90                   	nop
}
c0104dd2:	c9                   	leave  
c0104dd3:	c3                   	ret    

c0104dd4 <ksize>:


unsigned int ksize(const void *block)
{
c0104dd4:	55                   	push   %ebp
c0104dd5:	89 e5                	mov    %esp,%ebp
c0104dd7:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104dda:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104dde:	75 07                	jne    c0104de7 <ksize+0x13>
		return 0;
c0104de0:	b8 00 00 00 00       	mov    $0x0,%eax
c0104de5:	eb 6b                	jmp    c0104e52 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104de7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dea:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104def:	85 c0                	test   %eax,%eax
c0104df1:	75 54                	jne    c0104e47 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104df3:	e8 e4 f8 ff ff       	call   c01046dc <__intr_save>
c0104df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104dfb:	a1 cc 0e 15 c0       	mov    0xc0150ecc,%eax
c0104e00:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e03:	eb 31                	jmp    c0104e36 <ksize+0x62>
			if (bb->pages == block) {
c0104e05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e08:	8b 40 04             	mov    0x4(%eax),%eax
c0104e0b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104e0e:	75 1d                	jne    c0104e2d <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104e10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e13:	89 04 24             	mov    %eax,(%esp)
c0104e16:	e8 eb f8 ff ff       	call   c0104706 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e1e:	8b 00                	mov    (%eax),%eax
c0104e20:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104e25:	89 c1                	mov    %eax,%ecx
c0104e27:	d3 e2                	shl    %cl,%edx
c0104e29:	89 d0                	mov    %edx,%eax
c0104e2b:	eb 25                	jmp    c0104e52 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e30:	8b 40 08             	mov    0x8(%eax),%eax
c0104e33:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e3a:	75 c9                	jne    c0104e05 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e3f:	89 04 24             	mov    %eax,(%esp)
c0104e42:	e8 bf f8 ff ff       	call   c0104706 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e47:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4a:	83 e8 08             	sub    $0x8,%eax
c0104e4d:	8b 00                	mov    (%eax),%eax
c0104e4f:	c1 e0 03             	shl    $0x3,%eax
}
c0104e52:	c9                   	leave  
c0104e53:	c3                   	ret    

c0104e54 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e54:	55                   	push   %ebp
c0104e55:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e57:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e5a:	a1 34 41 15 c0       	mov    0xc0154134,%eax
c0104e5f:	29 c2                	sub    %eax,%edx
c0104e61:	89 d0                	mov    %edx,%eax
c0104e63:	c1 f8 02             	sar    $0x2,%eax
c0104e66:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104e6c:	5d                   	pop    %ebp
c0104e6d:	c3                   	ret    

c0104e6e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e6e:	55                   	push   %ebp
c0104e6f:	89 e5                	mov    %esp,%ebp
c0104e71:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e74:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e77:	89 04 24             	mov    %eax,(%esp)
c0104e7a:	e8 d5 ff ff ff       	call   c0104e54 <page2ppn>
c0104e7f:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e82:	c9                   	leave  
c0104e83:	c3                   	ret    

c0104e84 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e84:	55                   	push   %ebp
c0104e85:	89 e5                	mov    %esp,%ebp
c0104e87:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e8d:	c1 e8 0c             	shr    $0xc,%eax
c0104e90:	89 c2                	mov    %eax,%edx
c0104e92:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0104e97:	39 c2                	cmp    %eax,%edx
c0104e99:	72 1c                	jb     c0104eb7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e9b:	c7 44 24 08 90 66 11 	movl   $0xc0116690,0x8(%esp)
c0104ea2:	c0 
c0104ea3:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104eaa:	00 
c0104eab:	c7 04 24 af 66 11 c0 	movl   $0xc01166af,(%esp)
c0104eb2:	e8 11 c0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104eb7:	8b 0d 34 41 15 c0    	mov    0xc0154134,%ecx
c0104ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec0:	c1 e8 0c             	shr    $0xc,%eax
c0104ec3:	89 c2                	mov    %eax,%edx
c0104ec5:	89 d0                	mov    %edx,%eax
c0104ec7:	c1 e0 03             	shl    $0x3,%eax
c0104eca:	01 d0                	add    %edx,%eax
c0104ecc:	c1 e0 02             	shl    $0x2,%eax
c0104ecf:	01 c8                	add    %ecx,%eax
}
c0104ed1:	c9                   	leave  
c0104ed2:	c3                   	ret    

c0104ed3 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104ed3:	55                   	push   %ebp
c0104ed4:	89 e5                	mov    %esp,%ebp
c0104ed6:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104ed9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104edc:	89 04 24             	mov    %eax,(%esp)
c0104edf:	e8 8a ff ff ff       	call   c0104e6e <page2pa>
c0104ee4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eea:	c1 e8 0c             	shr    $0xc,%eax
c0104eed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104ef0:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0104ef5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ef8:	72 23                	jb     c0104f1d <page2kva+0x4a>
c0104efa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104efd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104f01:	c7 44 24 08 c0 66 11 	movl   $0xc01166c0,0x8(%esp)
c0104f08:	c0 
c0104f09:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104f10:	00 
c0104f11:	c7 04 24 af 66 11 c0 	movl   $0xc01166af,(%esp)
c0104f18:	e8 ab bf ff ff       	call   c0100ec8 <__panic>
c0104f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f20:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104f25:	c9                   	leave  
c0104f26:	c3                   	ret    

c0104f27 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104f27:	55                   	push   %ebp
c0104f28:	89 e5                	mov    %esp,%ebp
c0104f2a:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104f2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f30:	83 e0 01             	and    $0x1,%eax
c0104f33:	85 c0                	test   %eax,%eax
c0104f35:	75 1c                	jne    c0104f53 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104f37:	c7 44 24 08 e4 66 11 	movl   $0xc01166e4,0x8(%esp)
c0104f3e:	c0 
c0104f3f:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104f46:	00 
c0104f47:	c7 04 24 af 66 11 c0 	movl   $0xc01166af,(%esp)
c0104f4e:	e8 75 bf ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f53:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f56:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f5b:	89 04 24             	mov    %eax,(%esp)
c0104f5e:	e8 21 ff ff ff       	call   c0104e84 <pa2page>
}
c0104f63:	c9                   	leave  
c0104f64:	c3                   	ret    

c0104f65 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f65:	55                   	push   %ebp
c0104f66:	89 e5                	mov    %esp,%ebp
c0104f68:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f73:	89 04 24             	mov    %eax,(%esp)
c0104f76:	e8 09 ff ff ff       	call   c0104e84 <pa2page>
}
c0104f7b:	c9                   	leave  
c0104f7c:	c3                   	ret    

c0104f7d <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f7d:	55                   	push   %ebp
c0104f7e:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f80:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f83:	8b 00                	mov    (%eax),%eax
}
c0104f85:	5d                   	pop    %ebp
c0104f86:	c3                   	ret    

c0104f87 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f87:	55                   	push   %ebp
c0104f88:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f8d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f90:	89 10                	mov    %edx,(%eax)
}
c0104f92:	5d                   	pop    %ebp
c0104f93:	c3                   	ret    

c0104f94 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f94:	55                   	push   %ebp
c0104f95:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f97:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f9a:	8b 00                	mov    (%eax),%eax
c0104f9c:	8d 50 01             	lea    0x1(%eax),%edx
c0104f9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa2:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104fa4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa7:	8b 00                	mov    (%eax),%eax
}
c0104fa9:	5d                   	pop    %ebp
c0104faa:	c3                   	ret    

c0104fab <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104fab:	55                   	push   %ebp
c0104fac:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb1:	8b 00                	mov    (%eax),%eax
c0104fb3:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb9:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104fbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fbe:	8b 00                	mov    (%eax),%eax
}
c0104fc0:	5d                   	pop    %ebp
c0104fc1:	c3                   	ret    

c0104fc2 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104fc2:	55                   	push   %ebp
c0104fc3:	89 e5                	mov    %esp,%ebp
c0104fc5:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104fc8:	9c                   	pushf  
c0104fc9:	58                   	pop    %eax
c0104fca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104fd0:	25 00 02 00 00       	and    $0x200,%eax
c0104fd5:	85 c0                	test   %eax,%eax
c0104fd7:	74 0c                	je     c0104fe5 <__intr_save+0x23>
        intr_disable();
c0104fd9:	e8 6a d1 ff ff       	call   c0102148 <intr_disable>
        return 1;
c0104fde:	b8 01 00 00 00       	mov    $0x1,%eax
c0104fe3:	eb 05                	jmp    c0104fea <__intr_save+0x28>
    }
    return 0;
c0104fe5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fea:	c9                   	leave  
c0104feb:	c3                   	ret    

c0104fec <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104fec:	55                   	push   %ebp
c0104fed:	89 e5                	mov    %esp,%ebp
c0104fef:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104ff2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ff6:	74 05                	je     c0104ffd <__intr_restore+0x11>
        intr_enable();
c0104ff8:	e8 45 d1 ff ff       	call   c0102142 <intr_enable>
    }
}
c0104ffd:	c9                   	leave  
c0104ffe:	c3                   	ret    

c0104fff <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104fff:	55                   	push   %ebp
c0105000:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0105002:	8b 45 08             	mov    0x8(%ebp),%eax
c0105005:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0105008:	b8 23 00 00 00       	mov    $0x23,%eax
c010500d:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c010500f:	b8 23 00 00 00       	mov    $0x23,%eax
c0105014:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0105016:	b8 10 00 00 00       	mov    $0x10,%eax
c010501b:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c010501d:	b8 10 00 00 00       	mov    $0x10,%eax
c0105022:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0105024:	b8 10 00 00 00       	mov    $0x10,%eax
c0105029:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c010502b:	ea 32 50 10 c0 08 00 	ljmp   $0x8,$0xc0105032
}
c0105032:	5d                   	pop    %ebp
c0105033:	c3                   	ret    

c0105034 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0105034:	55                   	push   %ebp
c0105035:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0105037:	8b 45 08             	mov    0x8(%ebp),%eax
c010503a:	a3 04 0f 15 c0       	mov    %eax,0xc0150f04
}
c010503f:	5d                   	pop    %ebp
c0105040:	c3                   	ret    

c0105041 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0105041:	55                   	push   %ebp
c0105042:	89 e5                	mov    %esp,%ebp
c0105044:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0105047:	b8 00 f0 14 c0       	mov    $0xc014f000,%eax
c010504c:	89 04 24             	mov    %eax,(%esp)
c010504f:	e8 e0 ff ff ff       	call   c0105034 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0105054:	66 c7 05 08 0f 15 c0 	movw   $0x10,0xc0150f08
c010505b:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010505d:	66 c7 05 48 fa 14 c0 	movw   $0x68,0xc014fa48
c0105064:	68 00 
c0105066:	b8 00 0f 15 c0       	mov    $0xc0150f00,%eax
c010506b:	66 a3 4a fa 14 c0    	mov    %ax,0xc014fa4a
c0105071:	b8 00 0f 15 c0       	mov    $0xc0150f00,%eax
c0105076:	c1 e8 10             	shr    $0x10,%eax
c0105079:	a2 4c fa 14 c0       	mov    %al,0xc014fa4c
c010507e:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105085:	83 e0 f0             	and    $0xfffffff0,%eax
c0105088:	83 c8 09             	or     $0x9,%eax
c010508b:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c0105090:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c0105097:	83 e0 ef             	and    $0xffffffef,%eax
c010509a:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c010509f:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c01050a6:	83 e0 9f             	and    $0xffffff9f,%eax
c01050a9:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c01050ae:	0f b6 05 4d fa 14 c0 	movzbl 0xc014fa4d,%eax
c01050b5:	83 c8 80             	or     $0xffffff80,%eax
c01050b8:	a2 4d fa 14 c0       	mov    %al,0xc014fa4d
c01050bd:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050c4:	83 e0 f0             	and    $0xfffffff0,%eax
c01050c7:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050cc:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050d3:	83 e0 ef             	and    $0xffffffef,%eax
c01050d6:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050db:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050e2:	83 e0 df             	and    $0xffffffdf,%eax
c01050e5:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050ea:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c01050f1:	83 c8 40             	or     $0x40,%eax
c01050f4:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c01050f9:	0f b6 05 4e fa 14 c0 	movzbl 0xc014fa4e,%eax
c0105100:	83 e0 7f             	and    $0x7f,%eax
c0105103:	a2 4e fa 14 c0       	mov    %al,0xc014fa4e
c0105108:	b8 00 0f 15 c0       	mov    $0xc0150f00,%eax
c010510d:	c1 e8 18             	shr    $0x18,%eax
c0105110:	a2 4f fa 14 c0       	mov    %al,0xc014fa4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0105115:	c7 04 24 50 fa 14 c0 	movl   $0xc014fa50,(%esp)
c010511c:	e8 de fe ff ff       	call   c0104fff <lgdt>
c0105121:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105127:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010512b:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010512e:	c9                   	leave  
c010512f:	c3                   	ret    

c0105130 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0105130:	55                   	push   %ebp
c0105131:	89 e5                	mov    %esp,%ebp
c0105133:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0105136:	c7 05 2c 41 15 c0 70 	movl   $0xc0116570,0xc015412c
c010513d:	65 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0105140:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c0105145:	8b 00                	mov    (%eax),%eax
c0105147:	89 44 24 04          	mov    %eax,0x4(%esp)
c010514b:	c7 04 24 10 67 11 c0 	movl   $0xc0116710,(%esp)
c0105152:	e8 0e b2 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c0105157:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c010515c:	8b 40 04             	mov    0x4(%eax),%eax
c010515f:	ff d0                	call   *%eax
}
c0105161:	c9                   	leave  
c0105162:	c3                   	ret    

c0105163 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105163:	55                   	push   %ebp
c0105164:	89 e5                	mov    %esp,%ebp
c0105166:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105169:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c010516e:	8b 40 08             	mov    0x8(%eax),%eax
c0105171:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105174:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105178:	8b 55 08             	mov    0x8(%ebp),%edx
c010517b:	89 14 24             	mov    %edx,(%esp)
c010517e:	ff d0                	call   *%eax
}
c0105180:	c9                   	leave  
c0105181:	c3                   	ret    

c0105182 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105182:	55                   	push   %ebp
c0105183:	89 e5                	mov    %esp,%ebp
c0105185:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105188:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010518f:	e8 2e fe ff ff       	call   c0104fc2 <__intr_save>
c0105194:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105197:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c010519c:	8b 40 0c             	mov    0xc(%eax),%eax
c010519f:	8b 55 08             	mov    0x8(%ebp),%edx
c01051a2:	89 14 24             	mov    %edx,(%esp)
c01051a5:	ff d0                	call   *%eax
c01051a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01051aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051ad:	89 04 24             	mov    %eax,(%esp)
c01051b0:	e8 37 fe ff ff       	call   c0104fec <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01051b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01051b9:	75 2d                	jne    c01051e8 <alloc_pages+0x66>
c01051bb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01051bf:	77 27                	ja     c01051e8 <alloc_pages+0x66>
c01051c1:	a1 6c 0f 15 c0       	mov    0xc0150f6c,%eax
c01051c6:	85 c0                	test   %eax,%eax
c01051c8:	74 1e                	je     c01051e8 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01051ca:	8b 55 08             	mov    0x8(%ebp),%edx
c01051cd:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c01051d2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01051d9:	00 
c01051da:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051de:	89 04 24             	mov    %eax,(%esp)
c01051e1:	e8 b6 1d 00 00       	call   c0106f9c <swap_out>
    }
c01051e6:	eb a7                	jmp    c010518f <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01051e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01051eb:	c9                   	leave  
c01051ec:	c3                   	ret    

c01051ed <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051ed:	55                   	push   %ebp
c01051ee:	89 e5                	mov    %esp,%ebp
c01051f0:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051f3:	e8 ca fd ff ff       	call   c0104fc2 <__intr_save>
c01051f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051fb:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c0105200:	8b 40 10             	mov    0x10(%eax),%eax
c0105203:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105206:	89 54 24 04          	mov    %edx,0x4(%esp)
c010520a:	8b 55 08             	mov    0x8(%ebp),%edx
c010520d:	89 14 24             	mov    %edx,(%esp)
c0105210:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c0105212:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105215:	89 04 24             	mov    %eax,(%esp)
c0105218:	e8 cf fd ff ff       	call   c0104fec <__intr_restore>
}
c010521d:	c9                   	leave  
c010521e:	c3                   	ret    

c010521f <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010521f:	55                   	push   %ebp
c0105220:	89 e5                	mov    %esp,%ebp
c0105222:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0105225:	e8 98 fd ff ff       	call   c0104fc2 <__intr_save>
c010522a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010522d:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c0105232:	8b 40 14             	mov    0x14(%eax),%eax
c0105235:	ff d0                	call   *%eax
c0105237:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010523a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010523d:	89 04 24             	mov    %eax,(%esp)
c0105240:	e8 a7 fd ff ff       	call   c0104fec <__intr_restore>
    return ret;
c0105245:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105248:	c9                   	leave  
c0105249:	c3                   	ret    

c010524a <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010524a:	55                   	push   %ebp
c010524b:	89 e5                	mov    %esp,%ebp
c010524d:	57                   	push   %edi
c010524e:	56                   	push   %esi
c010524f:	53                   	push   %ebx
c0105250:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105256:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010525d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105264:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010526b:	c7 04 24 27 67 11 c0 	movl   $0xc0116727,(%esp)
c0105272:	e8 ee b0 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105277:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010527e:	e9 15 01 00 00       	jmp    c0105398 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105283:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105286:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105289:	89 d0                	mov    %edx,%eax
c010528b:	c1 e0 02             	shl    $0x2,%eax
c010528e:	01 d0                	add    %edx,%eax
c0105290:	c1 e0 02             	shl    $0x2,%eax
c0105293:	01 c8                	add    %ecx,%eax
c0105295:	8b 50 08             	mov    0x8(%eax),%edx
c0105298:	8b 40 04             	mov    0x4(%eax),%eax
c010529b:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010529e:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01052a1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052a4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052a7:	89 d0                	mov    %edx,%eax
c01052a9:	c1 e0 02             	shl    $0x2,%eax
c01052ac:	01 d0                	add    %edx,%eax
c01052ae:	c1 e0 02             	shl    $0x2,%eax
c01052b1:	01 c8                	add    %ecx,%eax
c01052b3:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052b6:	8b 58 10             	mov    0x10(%eax),%ebx
c01052b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052bc:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052bf:	01 c8                	add    %ecx,%eax
c01052c1:	11 da                	adc    %ebx,%edx
c01052c3:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01052c6:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01052c9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052cc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052cf:	89 d0                	mov    %edx,%eax
c01052d1:	c1 e0 02             	shl    $0x2,%eax
c01052d4:	01 d0                	add    %edx,%eax
c01052d6:	c1 e0 02             	shl    $0x2,%eax
c01052d9:	01 c8                	add    %ecx,%eax
c01052db:	83 c0 14             	add    $0x14,%eax
c01052de:	8b 00                	mov    (%eax),%eax
c01052e0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01052e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01052e9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052ec:	83 c0 ff             	add    $0xffffffff,%eax
c01052ef:	83 d2 ff             	adc    $0xffffffff,%edx
c01052f2:	89 c6                	mov    %eax,%esi
c01052f4:	89 d7                	mov    %edx,%edi
c01052f6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052fc:	89 d0                	mov    %edx,%eax
c01052fe:	c1 e0 02             	shl    $0x2,%eax
c0105301:	01 d0                	add    %edx,%eax
c0105303:	c1 e0 02             	shl    $0x2,%eax
c0105306:	01 c8                	add    %ecx,%eax
c0105308:	8b 48 0c             	mov    0xc(%eax),%ecx
c010530b:	8b 58 10             	mov    0x10(%eax),%ebx
c010530e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0105314:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105318:	89 74 24 14          	mov    %esi,0x14(%esp)
c010531c:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0105320:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105323:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105326:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010532a:	89 54 24 10          	mov    %edx,0x10(%esp)
c010532e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105332:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105336:	c7 04 24 34 67 11 c0 	movl   $0xc0116734,(%esp)
c010533d:	e8 23 b0 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105342:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105345:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105348:	89 d0                	mov    %edx,%eax
c010534a:	c1 e0 02             	shl    $0x2,%eax
c010534d:	01 d0                	add    %edx,%eax
c010534f:	c1 e0 02             	shl    $0x2,%eax
c0105352:	01 c8                	add    %ecx,%eax
c0105354:	83 c0 14             	add    $0x14,%eax
c0105357:	8b 00                	mov    (%eax),%eax
c0105359:	83 f8 01             	cmp    $0x1,%eax
c010535c:	75 36                	jne    c0105394 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c010535e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105361:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105364:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105367:	77 2b                	ja     c0105394 <page_init+0x14a>
c0105369:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010536c:	72 05                	jb     c0105373 <page_init+0x129>
c010536e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105371:	73 21                	jae    c0105394 <page_init+0x14a>
c0105373:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105377:	77 1b                	ja     c0105394 <page_init+0x14a>
c0105379:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010537d:	72 09                	jb     c0105388 <page_init+0x13e>
c010537f:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105386:	77 0c                	ja     c0105394 <page_init+0x14a>
                maxpa = end;
c0105388:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010538b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010538e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105391:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105394:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105398:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010539b:	8b 00                	mov    (%eax),%eax
c010539d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01053a0:	0f 8f dd fe ff ff    	jg     c0105283 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01053a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01053aa:	72 1d                	jb     c01053c9 <page_init+0x17f>
c01053ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01053b0:	77 09                	ja     c01053bb <page_init+0x171>
c01053b2:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01053b9:	76 0e                	jbe    c01053c9 <page_init+0x17f>
        maxpa = KMEMSIZE;
c01053bb:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01053c2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01053c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01053cc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01053cf:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01053d3:	c1 ea 0c             	shr    $0xc,%edx
c01053d6:	a3 e0 0e 15 c0       	mov    %eax,0xc0150ee0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01053db:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01053e2:	b8 04 43 15 c0       	mov    $0xc0154304,%eax
c01053e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01053ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01053ed:	01 d0                	add    %edx,%eax
c01053ef:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053f5:	ba 00 00 00 00       	mov    $0x0,%edx
c01053fa:	f7 75 ac             	divl   -0x54(%ebp)
c01053fd:	89 d0                	mov    %edx,%eax
c01053ff:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0105402:	29 c2                	sub    %eax,%edx
c0105404:	89 d0                	mov    %edx,%eax
c0105406:	a3 34 41 15 c0       	mov    %eax,0xc0154134

    for (i = 0; i < npage; i ++) {
c010540b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105412:	eb 2f                	jmp    c0105443 <page_init+0x1f9>
        SetPageReserved(pages + i);
c0105414:	8b 0d 34 41 15 c0    	mov    0xc0154134,%ecx
c010541a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010541d:	89 d0                	mov    %edx,%eax
c010541f:	c1 e0 03             	shl    $0x3,%eax
c0105422:	01 d0                	add    %edx,%eax
c0105424:	c1 e0 02             	shl    $0x2,%eax
c0105427:	01 c8                	add    %ecx,%eax
c0105429:	83 c0 04             	add    $0x4,%eax
c010542c:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0105433:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105436:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0105439:	8b 55 90             	mov    -0x70(%ebp),%edx
c010543c:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010543f:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105443:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105446:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010544b:	39 c2                	cmp    %eax,%edx
c010544d:	72 c5                	jb     c0105414 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010544f:	8b 15 e0 0e 15 c0    	mov    0xc0150ee0,%edx
c0105455:	89 d0                	mov    %edx,%eax
c0105457:	c1 e0 03             	shl    $0x3,%eax
c010545a:	01 d0                	add    %edx,%eax
c010545c:	c1 e0 02             	shl    $0x2,%eax
c010545f:	89 c2                	mov    %eax,%edx
c0105461:	a1 34 41 15 c0       	mov    0xc0154134,%eax
c0105466:	01 d0                	add    %edx,%eax
c0105468:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010546b:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105472:	77 23                	ja     c0105497 <page_init+0x24d>
c0105474:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105477:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010547b:	c7 44 24 08 64 67 11 	movl   $0xc0116764,0x8(%esp)
c0105482:	c0 
c0105483:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010548a:	00 
c010548b:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105492:	e8 31 ba ff ff       	call   c0100ec8 <__panic>
c0105497:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010549a:	05 00 00 00 40       	add    $0x40000000,%eax
c010549f:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01054a2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01054a9:	e9 74 01 00 00       	jmp    c0105622 <page_init+0x3d8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01054ae:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054b4:	89 d0                	mov    %edx,%eax
c01054b6:	c1 e0 02             	shl    $0x2,%eax
c01054b9:	01 d0                	add    %edx,%eax
c01054bb:	c1 e0 02             	shl    $0x2,%eax
c01054be:	01 c8                	add    %ecx,%eax
c01054c0:	8b 50 08             	mov    0x8(%eax),%edx
c01054c3:	8b 40 04             	mov    0x4(%eax),%eax
c01054c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054c9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01054cc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054d2:	89 d0                	mov    %edx,%eax
c01054d4:	c1 e0 02             	shl    $0x2,%eax
c01054d7:	01 d0                	add    %edx,%eax
c01054d9:	c1 e0 02             	shl    $0x2,%eax
c01054dc:	01 c8                	add    %ecx,%eax
c01054de:	8b 48 0c             	mov    0xc(%eax),%ecx
c01054e1:	8b 58 10             	mov    0x10(%eax),%ebx
c01054e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054ea:	01 c8                	add    %ecx,%eax
c01054ec:	11 da                	adc    %ebx,%edx
c01054ee:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01054f1:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01054f4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01054f7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054fa:	89 d0                	mov    %edx,%eax
c01054fc:	c1 e0 02             	shl    $0x2,%eax
c01054ff:	01 d0                	add    %edx,%eax
c0105501:	c1 e0 02             	shl    $0x2,%eax
c0105504:	01 c8                	add    %ecx,%eax
c0105506:	83 c0 14             	add    $0x14,%eax
c0105509:	8b 00                	mov    (%eax),%eax
c010550b:	83 f8 01             	cmp    $0x1,%eax
c010550e:	0f 85 0a 01 00 00    	jne    c010561e <page_init+0x3d4>
            if (begin < freemem) {
c0105514:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105517:	ba 00 00 00 00       	mov    $0x0,%edx
c010551c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010551f:	72 17                	jb     c0105538 <page_init+0x2ee>
c0105521:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105524:	77 05                	ja     c010552b <page_init+0x2e1>
c0105526:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0105529:	76 0d                	jbe    c0105538 <page_init+0x2ee>
                begin = freemem;
c010552b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010552e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105531:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105538:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010553c:	72 1d                	jb     c010555b <page_init+0x311>
c010553e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105542:	77 09                	ja     c010554d <page_init+0x303>
c0105544:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010554b:	76 0e                	jbe    c010555b <page_init+0x311>
                end = KMEMSIZE;
c010554d:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105554:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010555b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010555e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105561:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105564:	0f 87 b4 00 00 00    	ja     c010561e <page_init+0x3d4>
c010556a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010556d:	72 09                	jb     c0105578 <page_init+0x32e>
c010556f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105572:	0f 83 a6 00 00 00    	jae    c010561e <page_init+0x3d4>
                begin = ROUNDUP(begin, PGSIZE);
c0105578:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010557f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105582:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105585:	01 d0                	add    %edx,%eax
c0105587:	83 e8 01             	sub    $0x1,%eax
c010558a:	89 45 98             	mov    %eax,-0x68(%ebp)
c010558d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105590:	ba 00 00 00 00       	mov    $0x0,%edx
c0105595:	f7 75 9c             	divl   -0x64(%ebp)
c0105598:	89 d0                	mov    %edx,%eax
c010559a:	8b 55 98             	mov    -0x68(%ebp),%edx
c010559d:	29 c2                	sub    %eax,%edx
c010559f:	89 d0                	mov    %edx,%eax
c01055a1:	ba 00 00 00 00       	mov    $0x0,%edx
c01055a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01055a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01055ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055af:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01055b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01055b5:	ba 00 00 00 00       	mov    $0x0,%edx
c01055ba:	89 c7                	mov    %eax,%edi
c01055bc:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c01055c2:	89 7d 80             	mov    %edi,-0x80(%ebp)
c01055c5:	89 d0                	mov    %edx,%eax
c01055c7:	83 e0 00             	and    $0x0,%eax
c01055ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01055cd:	8b 45 80             	mov    -0x80(%ebp),%eax
c01055d0:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01055d3:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01055d6:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01055d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055dc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055df:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055e2:	77 3a                	ja     c010561e <page_init+0x3d4>
c01055e4:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055e7:	72 05                	jb     c01055ee <page_init+0x3a4>
c01055e9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01055ec:	73 30                	jae    c010561e <page_init+0x3d4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01055ee:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01055f1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01055f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055f7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01055fa:	29 c8                	sub    %ecx,%eax
c01055fc:	19 da                	sbb    %ebx,%edx
c01055fe:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105602:	c1 ea 0c             	shr    $0xc,%edx
c0105605:	89 c3                	mov    %eax,%ebx
c0105607:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010560a:	89 04 24             	mov    %eax,(%esp)
c010560d:	e8 72 f8 ff ff       	call   c0104e84 <pa2page>
c0105612:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105616:	89 04 24             	mov    %eax,(%esp)
c0105619:	e8 45 fb ff ff       	call   c0105163 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010561e:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105622:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105625:	8b 00                	mov    (%eax),%eax
c0105627:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010562a:	0f 8f 7e fe ff ff    	jg     c01054ae <page_init+0x264>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0105630:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0105636:	5b                   	pop    %ebx
c0105637:	5e                   	pop    %esi
c0105638:	5f                   	pop    %edi
c0105639:	5d                   	pop    %ebp
c010563a:	c3                   	ret    

c010563b <enable_paging>:

static void
enable_paging(void) {
c010563b:	55                   	push   %ebp
c010563c:	89 e5                	mov    %esp,%ebp
c010563e:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0105641:	a1 30 41 15 c0       	mov    0xc0154130,%eax
c0105646:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0105649:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010564c:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c010564f:	0f 20 c0             	mov    %cr0,%eax
c0105652:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0105655:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105658:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c010565b:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0105662:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0105666:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105669:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c010566c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010566f:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105672:	c9                   	leave  
c0105673:	c3                   	ret    

c0105674 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105674:	55                   	push   %ebp
c0105675:	89 e5                	mov    %esp,%ebp
c0105677:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010567a:	8b 45 14             	mov    0x14(%ebp),%eax
c010567d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105680:	31 d0                	xor    %edx,%eax
c0105682:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105687:	85 c0                	test   %eax,%eax
c0105689:	74 24                	je     c01056af <boot_map_segment+0x3b>
c010568b:	c7 44 24 0c 96 67 11 	movl   $0xc0116796,0xc(%esp)
c0105692:	c0 
c0105693:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010569a:	c0 
c010569b:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c01056a2:	00 
c01056a3:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01056aa:	e8 19 b8 ff ff       	call   c0100ec8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c01056af:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c01056b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056b9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056be:	89 c2                	mov    %eax,%edx
c01056c0:	8b 45 10             	mov    0x10(%ebp),%eax
c01056c3:	01 c2                	add    %eax,%edx
c01056c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056c8:	01 d0                	add    %edx,%eax
c01056ca:	83 e8 01             	sub    $0x1,%eax
c01056cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01056d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056d3:	ba 00 00 00 00       	mov    $0x0,%edx
c01056d8:	f7 75 f0             	divl   -0x10(%ebp)
c01056db:	89 d0                	mov    %edx,%eax
c01056dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01056e0:	29 c2                	sub    %eax,%edx
c01056e2:	89 d0                	mov    %edx,%eax
c01056e4:	c1 e8 0c             	shr    $0xc,%eax
c01056e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01056ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01056f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056f3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056f8:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01056fb:	8b 45 14             	mov    0x14(%ebp),%eax
c01056fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105701:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105704:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105709:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010570c:	eb 6b                	jmp    c0105779 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010570e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105715:	00 
c0105716:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105719:	89 44 24 04          	mov    %eax,0x4(%esp)
c010571d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105720:	89 04 24             	mov    %eax,(%esp)
c0105723:	e8 d1 01 00 00       	call   c01058f9 <get_pte>
c0105728:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010572b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010572f:	75 24                	jne    c0105755 <boot_map_segment+0xe1>
c0105731:	c7 44 24 0c c2 67 11 	movl   $0xc01167c2,0xc(%esp)
c0105738:	c0 
c0105739:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105740:	c0 
c0105741:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105748:	00 
c0105749:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105750:	e8 73 b7 ff ff       	call   c0100ec8 <__panic>
        *ptep = pa | PTE_P | perm;
c0105755:	8b 45 18             	mov    0x18(%ebp),%eax
c0105758:	8b 55 14             	mov    0x14(%ebp),%edx
c010575b:	09 d0                	or     %edx,%eax
c010575d:	83 c8 01             	or     $0x1,%eax
c0105760:	89 c2                	mov    %eax,%edx
c0105762:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105765:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105767:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010576b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105772:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105779:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010577d:	75 8f                	jne    c010570e <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010577f:	c9                   	leave  
c0105780:	c3                   	ret    

c0105781 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105781:	55                   	push   %ebp
c0105782:	89 e5                	mov    %esp,%ebp
c0105784:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105787:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010578e:	e8 ef f9 ff ff       	call   c0105182 <alloc_pages>
c0105793:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010579a:	75 1c                	jne    c01057b8 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010579c:	c7 44 24 08 cf 67 11 	movl   $0xc01167cf,0x8(%esp)
c01057a3:	c0 
c01057a4:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01057ab:	00 
c01057ac:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01057b3:	e8 10 b7 ff ff       	call   c0100ec8 <__panic>
    }
    return page2kva(p);
c01057b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057bb:	89 04 24             	mov    %eax,(%esp)
c01057be:	e8 10 f7 ff ff       	call   c0104ed3 <page2kva>
}
c01057c3:	c9                   	leave  
c01057c4:	c3                   	ret    

c01057c5 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c01057c5:	55                   	push   %ebp
c01057c6:	89 e5                	mov    %esp,%ebp
c01057c8:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c01057cb:	e8 60 f9 ff ff       	call   c0105130 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c01057d0:	e8 75 fa ff ff       	call   c010524a <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01057d5:	e8 5d 09 00 00       	call   c0106137 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c01057da:	e8 a2 ff ff ff       	call   c0105781 <boot_alloc_page>
c01057df:	a3 e4 0e 15 c0       	mov    %eax,0xc0150ee4
    memset(boot_pgdir, 0, PGSIZE);
c01057e4:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01057e9:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01057f0:	00 
c01057f1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01057f8:	00 
c01057f9:	89 04 24             	mov    %eax,(%esp)
c01057fc:	e8 4f ff 00 00       	call   c0115750 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0105801:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105809:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105810:	77 23                	ja     c0105835 <pmm_init+0x70>
c0105812:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105815:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105819:	c7 44 24 08 64 67 11 	movl   $0xc0116764,0x8(%esp)
c0105820:	c0 
c0105821:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105828:	00 
c0105829:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105830:	e8 93 b6 ff ff       	call   c0100ec8 <__panic>
c0105835:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105838:	05 00 00 00 40       	add    $0x40000000,%eax
c010583d:	a3 30 41 15 c0       	mov    %eax,0xc0154130

    check_pgdir();
c0105842:	e8 0e 09 00 00       	call   c0106155 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105847:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010584c:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105852:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0105857:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010585a:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105861:	77 23                	ja     c0105886 <pmm_init+0xc1>
c0105863:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105866:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010586a:	c7 44 24 08 64 67 11 	movl   $0xc0116764,0x8(%esp)
c0105871:	c0 
c0105872:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105879:	00 
c010587a:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105881:	e8 42 b6 ff ff       	call   c0100ec8 <__panic>
c0105886:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105889:	05 00 00 00 40       	add    $0x40000000,%eax
c010588e:	83 c8 03             	or     $0x3,%eax
c0105891:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105893:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0105898:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010589f:	00 
c01058a0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01058a7:	00 
c01058a8:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01058af:	38 
c01058b0:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c01058b7:	c0 
c01058b8:	89 04 24             	mov    %eax,(%esp)
c01058bb:	e8 b4 fd ff ff       	call   c0105674 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c01058c0:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01058c5:	8b 15 e4 0e 15 c0    	mov    0xc0150ee4,%edx
c01058cb:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c01058d1:	89 10                	mov    %edx,(%eax)

    enable_paging();
c01058d3:	e8 63 fd ff ff       	call   c010563b <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01058d8:	e8 64 f7 ff ff       	call   c0105041 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01058dd:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01058e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01058e8:	e8 03 0f 00 00       	call   c01067f0 <check_boot_pgdir>

    print_pgdir();
c01058ed:	e8 8b 13 00 00       	call   c0106c7d <print_pgdir>
    
    kmalloc_init();
c01058f2:	e8 c6 f2 ff ff       	call   c0104bbd <kmalloc_init>

}
c01058f7:	c9                   	leave  
c01058f8:	c3                   	ret    

c01058f9 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01058f9:	55                   	push   %ebp
c01058fa:	89 e5                	mov    %esp,%ebp
c01058fc:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01058ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105902:	c1 e8 16             	shr    $0x16,%eax
c0105905:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010590c:	8b 45 08             	mov    0x8(%ebp),%eax
c010590f:	01 d0                	add    %edx,%eax
c0105911:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c0105914:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105917:	8b 00                	mov    (%eax),%eax
c0105919:	83 e0 01             	and    $0x1,%eax
c010591c:	85 c0                	test   %eax,%eax
c010591e:	0f 85 af 00 00 00    	jne    c01059d3 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0105924:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105928:	74 15                	je     c010593f <get_pte+0x46>
c010592a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105931:	e8 4c f8 ff ff       	call   c0105182 <alloc_pages>
c0105936:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105939:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010593d:	75 0a                	jne    c0105949 <get_pte+0x50>
            return NULL;
c010593f:	b8 00 00 00 00       	mov    $0x0,%eax
c0105944:	e9 e6 00 00 00       	jmp    c0105a2f <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0105949:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105950:	00 
c0105951:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105954:	89 04 24             	mov    %eax,(%esp)
c0105957:	e8 2b f6 ff ff       	call   c0104f87 <set_page_ref>
        uintptr_t pa = page2pa(page);
c010595c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010595f:	89 04 24             	mov    %eax,(%esp)
c0105962:	e8 07 f5 ff ff       	call   c0104e6e <page2pa>
c0105967:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c010596a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010596d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105970:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105973:	c1 e8 0c             	shr    $0xc,%eax
c0105976:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105979:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010597e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105981:	72 23                	jb     c01059a6 <get_pte+0xad>
c0105983:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105986:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010598a:	c7 44 24 08 c0 66 11 	movl   $0xc01166c0,0x8(%esp)
c0105991:	c0 
c0105992:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0105999:	00 
c010599a:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01059a1:	e8 22 b5 ff ff       	call   c0100ec8 <__panic>
c01059a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059a9:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059ae:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01059b5:	00 
c01059b6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01059bd:	00 
c01059be:	89 04 24             	mov    %eax,(%esp)
c01059c1:	e8 8a fd 00 00       	call   c0115750 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01059c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059c9:	83 c8 07             	or     $0x7,%eax
c01059cc:	89 c2                	mov    %eax,%edx
c01059ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059d1:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01059d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059d6:	8b 00                	mov    (%eax),%eax
c01059d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01059dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01059e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059e3:	c1 e8 0c             	shr    $0xc,%eax
c01059e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01059e9:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c01059ee:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01059f1:	72 23                	jb     c0105a16 <get_pte+0x11d>
c01059f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059fa:	c7 44 24 08 c0 66 11 	movl   $0xc01166c0,0x8(%esp)
c0105a01:	c0 
c0105a02:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c0105a09:	00 
c0105a0a:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105a11:	e8 b2 b4 ff ff       	call   c0100ec8 <__panic>
c0105a16:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a19:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a1e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a21:	c1 ea 0c             	shr    $0xc,%edx
c0105a24:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105a2a:	c1 e2 02             	shl    $0x2,%edx
c0105a2d:	01 d0                	add    %edx,%eax
}
c0105a2f:	c9                   	leave  
c0105a30:	c3                   	ret    

c0105a31 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105a31:	55                   	push   %ebp
c0105a32:	89 e5                	mov    %esp,%ebp
c0105a34:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105a37:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a3e:	00 
c0105a3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a42:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a49:	89 04 24             	mov    %eax,(%esp)
c0105a4c:	e8 a8 fe ff ff       	call   c01058f9 <get_pte>
c0105a51:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a54:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a58:	74 08                	je     c0105a62 <get_page+0x31>
        *ptep_store = ptep;
c0105a5a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a60:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a66:	74 1b                	je     c0105a83 <get_page+0x52>
c0105a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a6b:	8b 00                	mov    (%eax),%eax
c0105a6d:	83 e0 01             	and    $0x1,%eax
c0105a70:	85 c0                	test   %eax,%eax
c0105a72:	74 0f                	je     c0105a83 <get_page+0x52>
        return pte2page(*ptep);
c0105a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a77:	8b 00                	mov    (%eax),%eax
c0105a79:	89 04 24             	mov    %eax,(%esp)
c0105a7c:	e8 a6 f4 ff ff       	call   c0104f27 <pte2page>
c0105a81:	eb 05                	jmp    c0105a88 <get_page+0x57>
    }
    return NULL;
c0105a83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a88:	c9                   	leave  
c0105a89:	c3                   	ret    

c0105a8a <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a8a:	55                   	push   %ebp
c0105a8b:	89 e5                	mov    %esp,%ebp
c0105a8d:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a90:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a93:	8b 00                	mov    (%eax),%eax
c0105a95:	83 e0 01             	and    $0x1,%eax
c0105a98:	85 c0                	test   %eax,%eax
c0105a9a:	74 4d                	je     c0105ae9 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0105a9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a9f:	8b 00                	mov    (%eax),%eax
c0105aa1:	89 04 24             	mov    %eax,(%esp)
c0105aa4:	e8 7e f4 ff ff       	call   c0104f27 <pte2page>
c0105aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105aac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aaf:	89 04 24             	mov    %eax,(%esp)
c0105ab2:	e8 f4 f4 ff ff       	call   c0104fab <page_ref_dec>
c0105ab7:	85 c0                	test   %eax,%eax
c0105ab9:	75 13                	jne    c0105ace <page_remove_pte+0x44>
            free_page(page);
c0105abb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105ac2:	00 
c0105ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ac6:	89 04 24             	mov    %eax,(%esp)
c0105ac9:	e8 1f f7 ff ff       	call   c01051ed <free_pages>
        }
        *ptep = 0;
c0105ace:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ad1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ada:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ade:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ae1:	89 04 24             	mov    %eax,(%esp)
c0105ae4:	e8 1d 05 00 00       	call   c0106006 <tlb_invalidate>
    }
}
c0105ae9:	c9                   	leave  
c0105aea:	c3                   	ret    

c0105aeb <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105aeb:	55                   	push   %ebp
c0105aec:	89 e5                	mov    %esp,%ebp
c0105aee:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105af1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105af4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105af9:	85 c0                	test   %eax,%eax
c0105afb:	75 0c                	jne    c0105b09 <unmap_range+0x1e>
c0105afd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b00:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b05:	85 c0                	test   %eax,%eax
c0105b07:	74 24                	je     c0105b2d <unmap_range+0x42>
c0105b09:	c7 44 24 0c e8 67 11 	movl   $0xc01167e8,0xc(%esp)
c0105b10:	c0 
c0105b11:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105b18:	c0 
c0105b19:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105b20:	00 
c0105b21:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105b28:	e8 9b b3 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105b2d:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b34:	76 11                	jbe    c0105b47 <unmap_range+0x5c>
c0105b36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b39:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b3c:	73 09                	jae    c0105b47 <unmap_range+0x5c>
c0105b3e:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b45:	76 24                	jbe    c0105b6b <unmap_range+0x80>
c0105b47:	c7 44 24 0c 11 68 11 	movl   $0xc0116811,0xc(%esp)
c0105b4e:	c0 
c0105b4f:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105b56:	c0 
c0105b57:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105b5e:	00 
c0105b5f:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105b66:	e8 5d b3 ff ff       	call   c0100ec8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b6b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b72:	00 
c0105b73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b76:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b7d:	89 04 24             	mov    %eax,(%esp)
c0105b80:	e8 74 fd ff ff       	call   c01058f9 <get_pte>
c0105b85:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b8c:	75 18                	jne    c0105ba6 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b91:	05 00 00 40 00       	add    $0x400000,%eax
c0105b96:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b9c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105ba1:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105ba4:	eb 29                	jmp    c0105bcf <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ba9:	8b 00                	mov    (%eax),%eax
c0105bab:	85 c0                	test   %eax,%eax
c0105bad:	74 19                	je     c0105bc8 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bb2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bc0:	89 04 24             	mov    %eax,(%esp)
c0105bc3:	e8 c2 fe ff ff       	call   c0105a8a <page_remove_pte>
        }
        start += PGSIZE;
c0105bc8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105bcf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105bd3:	74 08                	je     c0105bdd <unmap_range+0xf2>
c0105bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bd8:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bdb:	72 8e                	jb     c0105b6b <unmap_range+0x80>
}
c0105bdd:	c9                   	leave  
c0105bde:	c3                   	ret    

c0105bdf <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105bdf:	55                   	push   %ebp
c0105be0:	89 e5                	mov    %esp,%ebp
c0105be2:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105be5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105be8:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bed:	85 c0                	test   %eax,%eax
c0105bef:	75 0c                	jne    c0105bfd <exit_range+0x1e>
c0105bf1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bf4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bf9:	85 c0                	test   %eax,%eax
c0105bfb:	74 24                	je     c0105c21 <exit_range+0x42>
c0105bfd:	c7 44 24 0c e8 67 11 	movl   $0xc01167e8,0xc(%esp)
c0105c04:	c0 
c0105c05:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105c0c:	c0 
c0105c0d:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105c14:	00 
c0105c15:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105c1c:	e8 a7 b2 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105c21:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105c28:	76 11                	jbe    c0105c3b <exit_range+0x5c>
c0105c2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c2d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c30:	73 09                	jae    c0105c3b <exit_range+0x5c>
c0105c32:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c39:	76 24                	jbe    c0105c5f <exit_range+0x80>
c0105c3b:	c7 44 24 0c 11 68 11 	movl   $0xc0116811,0xc(%esp)
c0105c42:	c0 
c0105c43:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105c4a:	c0 
c0105c4b:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105c52:	00 
c0105c53:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105c5a:	e8 69 b2 ff ff       	call   c0100ec8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c68:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c6d:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c70:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c73:	c1 e8 16             	shr    $0x16,%eax
c0105c76:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c86:	01 d0                	add    %edx,%eax
c0105c88:	8b 00                	mov    (%eax),%eax
c0105c8a:	83 e0 01             	and    $0x1,%eax
c0105c8d:	85 c0                	test   %eax,%eax
c0105c8f:	74 3e                	je     c0105ccf <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105c91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c9e:	01 d0                	add    %edx,%eax
c0105ca0:	8b 00                	mov    (%eax),%eax
c0105ca2:	89 04 24             	mov    %eax,(%esp)
c0105ca5:	e8 bb f2 ff ff       	call   c0104f65 <pde2page>
c0105caa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105cb1:	00 
c0105cb2:	89 04 24             	mov    %eax,(%esp)
c0105cb5:	e8 33 f5 ff ff       	call   c01051ed <free_pages>
            pgdir[pde_idx] = 0;
c0105cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105cc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cc7:	01 d0                	add    %edx,%eax
c0105cc9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105ccf:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105cd6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105cda:	74 08                	je     c0105ce4 <exit_range+0x105>
c0105cdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cdf:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ce2:	72 8c                	jb     c0105c70 <exit_range+0x91>
}
c0105ce4:	c9                   	leave  
c0105ce5:	c3                   	ret    

c0105ce6 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105ce6:	55                   	push   %ebp
c0105ce7:	89 e5                	mov    %esp,%ebp
c0105ce9:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105cec:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cef:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cf4:	85 c0                	test   %eax,%eax
c0105cf6:	75 0c                	jne    c0105d04 <copy_range+0x1e>
c0105cf8:	8b 45 14             	mov    0x14(%ebp),%eax
c0105cfb:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d00:	85 c0                	test   %eax,%eax
c0105d02:	74 24                	je     c0105d28 <copy_range+0x42>
c0105d04:	c7 44 24 0c e8 67 11 	movl   $0xc01167e8,0xc(%esp)
c0105d0b:	c0 
c0105d0c:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105d13:	c0 
c0105d14:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105d1b:	00 
c0105d1c:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105d23:	e8 a0 b1 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105d28:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105d2f:	76 11                	jbe    c0105d42 <copy_range+0x5c>
c0105d31:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d34:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d37:	73 09                	jae    c0105d42 <copy_range+0x5c>
c0105d39:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105d40:	76 24                	jbe    c0105d66 <copy_range+0x80>
c0105d42:	c7 44 24 0c 11 68 11 	movl   $0xc0116811,0xc(%esp)
c0105d49:	c0 
c0105d4a:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105d51:	c0 
c0105d52:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105d59:	00 
c0105d5a:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105d61:	e8 62 b1 ff ff       	call   c0100ec8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d66:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d6d:	00 
c0105d6e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d78:	89 04 24             	mov    %eax,(%esp)
c0105d7b:	e8 79 fb ff ff       	call   c01058f9 <get_pte>
c0105d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d87:	75 1b                	jne    c0105da4 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d89:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d8c:	05 00 00 40 00       	add    $0x400000,%eax
c0105d91:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d97:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d9c:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d9f:	e9 4c 01 00 00       	jmp    c0105ef0 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105da7:	8b 00                	mov    (%eax),%eax
c0105da9:	83 e0 01             	and    $0x1,%eax
c0105dac:	85 c0                	test   %eax,%eax
c0105dae:	0f 84 35 01 00 00    	je     c0105ee9 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105db4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105dbb:	00 
c0105dbc:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dbf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dc6:	89 04 24             	mov    %eax,(%esp)
c0105dc9:	e8 2b fb ff ff       	call   c01058f9 <get_pte>
c0105dce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105dd1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105dd5:	75 0a                	jne    c0105de1 <copy_range+0xfb>
                return -E_NO_MEM;
c0105dd7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105ddc:	e9 26 01 00 00       	jmp    c0105f07 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105de4:	8b 00                	mov    (%eax),%eax
c0105de6:	83 e0 07             	and    $0x7,%eax
c0105de9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105def:	8b 00                	mov    (%eax),%eax
c0105df1:	89 04 24             	mov    %eax,(%esp)
c0105df4:	e8 2e f1 ff ff       	call   c0104f27 <pte2page>
c0105df9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105dfc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105e03:	e8 7a f3 ff ff       	call   c0105182 <alloc_pages>
c0105e08:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105e0b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105e0f:	75 24                	jne    c0105e35 <copy_range+0x14f>
c0105e11:	c7 44 24 0c 29 68 11 	movl   $0xc0116829,0xc(%esp)
c0105e18:	c0 
c0105e19:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105e20:	c0 
c0105e21:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105e28:	00 
c0105e29:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105e30:	e8 93 b0 ff ff       	call   c0100ec8 <__panic>
        assert(npage!=NULL);
c0105e35:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e39:	75 24                	jne    c0105e5f <copy_range+0x179>
c0105e3b:	c7 44 24 0c 34 68 11 	movl   $0xc0116834,0xc(%esp)
c0105e42:	c0 
c0105e43:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105e4a:	c0 
c0105e4b:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105e52:	00 
c0105e53:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105e5a:	e8 69 b0 ff ff       	call   c0100ec8 <__panic>
        int ret=0;
c0105e5f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105e66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e69:	89 04 24             	mov    %eax,(%esp)
c0105e6c:	e8 62 f0 ff ff       	call   c0104ed3 <page2kva>
c0105e71:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105e74:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e77:	89 04 24             	mov    %eax,(%esp)
c0105e7a:	e8 54 f0 ff ff       	call   c0104ed3 <page2kva>
c0105e7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105e82:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e89:	00 
c0105e8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e91:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e94:	89 04 24             	mov    %eax,(%esp)
c0105e97:	e8 96 f9 00 00       	call   c0115832 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105e9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105ea3:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ea6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105eaa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ead:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105eb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eb4:	89 04 24             	mov    %eax,(%esp)
c0105eb7:	e8 91 00 00 00       	call   c0105f4d <page_insert>
c0105ebc:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105ebf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105ec3:	74 24                	je     c0105ee9 <copy_range+0x203>
c0105ec5:	c7 44 24 0c 40 68 11 	movl   $0xc0116840,0xc(%esp)
c0105ecc:	c0 
c0105ecd:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0105ed4:	c0 
c0105ed5:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c0105edc:	00 
c0105edd:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0105ee4:	e8 df af ff ff       	call   c0100ec8 <__panic>
        }
        start += PGSIZE;
c0105ee9:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105ef0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ef4:	74 0c                	je     c0105f02 <copy_range+0x21c>
c0105ef6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ef9:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105efc:	0f 82 64 fe ff ff    	jb     c0105d66 <copy_range+0x80>
    return 0;
c0105f02:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f07:	c9                   	leave  
c0105f08:	c3                   	ret    

c0105f09 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105f09:	55                   	push   %ebp
c0105f0a:	89 e5                	mov    %esp,%ebp
c0105f0c:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105f0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105f16:	00 
c0105f17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f21:	89 04 24             	mov    %eax,(%esp)
c0105f24:	e8 d0 f9 ff ff       	call   c01058f9 <get_pte>
c0105f29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105f2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f30:	74 19                	je     c0105f4b <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105f32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f35:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f40:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f43:	89 04 24             	mov    %eax,(%esp)
c0105f46:	e8 3f fb ff ff       	call   c0105a8a <page_remove_pte>
    }
}
c0105f4b:	c9                   	leave  
c0105f4c:	c3                   	ret    

c0105f4d <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105f4d:	55                   	push   %ebp
c0105f4e:	89 e5                	mov    %esp,%ebp
c0105f50:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105f53:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105f5a:	00 
c0105f5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f65:	89 04 24             	mov    %eax,(%esp)
c0105f68:	e8 8c f9 ff ff       	call   c01058f9 <get_pte>
c0105f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f74:	75 0a                	jne    c0105f80 <page_insert+0x33>
        return -E_NO_MEM;
c0105f76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f7b:	e9 84 00 00 00       	jmp    c0106004 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f83:	89 04 24             	mov    %eax,(%esp)
c0105f86:	e8 09 f0 ff ff       	call   c0104f94 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f8e:	8b 00                	mov    (%eax),%eax
c0105f90:	83 e0 01             	and    $0x1,%eax
c0105f93:	85 c0                	test   %eax,%eax
c0105f95:	74 3e                	je     c0105fd5 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f9a:	8b 00                	mov    (%eax),%eax
c0105f9c:	89 04 24             	mov    %eax,(%esp)
c0105f9f:	e8 83 ef ff ff       	call   c0104f27 <pte2page>
c0105fa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105fa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105faa:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105fad:	75 0d                	jne    c0105fbc <page_insert+0x6f>
            page_ref_dec(page);
c0105faf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fb2:	89 04 24             	mov    %eax,(%esp)
c0105fb5:	e8 f1 ef ff ff       	call   c0104fab <page_ref_dec>
c0105fba:	eb 19                	jmp    c0105fd5 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fbf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fc3:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fca:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fcd:	89 04 24             	mov    %eax,(%esp)
c0105fd0:	e8 b5 fa ff ff       	call   c0105a8a <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fd8:	89 04 24             	mov    %eax,(%esp)
c0105fdb:	e8 8e ee ff ff       	call   c0104e6e <page2pa>
c0105fe0:	0b 45 14             	or     0x14(%ebp),%eax
c0105fe3:	83 c8 01             	or     $0x1,%eax
c0105fe6:	89 c2                	mov    %eax,%edx
c0105fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105feb:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105fed:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ff0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ff7:	89 04 24             	mov    %eax,(%esp)
c0105ffa:	e8 07 00 00 00       	call   c0106006 <tlb_invalidate>
    return 0;
c0105fff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106004:	c9                   	leave  
c0106005:	c3                   	ret    

c0106006 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0106006:	55                   	push   %ebp
c0106007:	89 e5                	mov    %esp,%ebp
c0106009:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c010600c:	0f 20 d8             	mov    %cr3,%eax
c010600f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0106012:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0106015:	89 c2                	mov    %eax,%edx
c0106017:	8b 45 08             	mov    0x8(%ebp),%eax
c010601a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010601d:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106024:	77 23                	ja     c0106049 <tlb_invalidate+0x43>
c0106026:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106029:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010602d:	c7 44 24 08 64 67 11 	movl   $0xc0116764,0x8(%esp)
c0106034:	c0 
c0106035:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c010603c:	00 
c010603d:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106044:	e8 7f ae ff ff       	call   c0100ec8 <__panic>
c0106049:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010604c:	05 00 00 00 40       	add    $0x40000000,%eax
c0106051:	39 c2                	cmp    %eax,%edx
c0106053:	75 0c                	jne    c0106061 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0106055:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106058:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010605b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010605e:	0f 01 38             	invlpg (%eax)
    }
}
c0106061:	c9                   	leave  
c0106062:	c3                   	ret    

c0106063 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106063:	55                   	push   %ebp
c0106064:	89 e5                	mov    %esp,%ebp
c0106066:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106069:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106070:	e8 0d f1 ff ff       	call   c0105182 <alloc_pages>
c0106075:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106078:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010607c:	0f 84 b0 00 00 00    	je     c0106132 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106082:	8b 45 10             	mov    0x10(%ebp),%eax
c0106085:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106089:	8b 45 0c             	mov    0xc(%ebp),%eax
c010608c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106090:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106093:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106097:	8b 45 08             	mov    0x8(%ebp),%eax
c010609a:	89 04 24             	mov    %eax,(%esp)
c010609d:	e8 ab fe ff ff       	call   c0105f4d <page_insert>
c01060a2:	85 c0                	test   %eax,%eax
c01060a4:	74 1a                	je     c01060c0 <pgdir_alloc_page+0x5d>
            free_page(page);
c01060a6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01060ad:	00 
c01060ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060b1:	89 04 24             	mov    %eax,(%esp)
c01060b4:	e8 34 f1 ff ff       	call   c01051ed <free_pages>
            return NULL;
c01060b9:	b8 00 00 00 00       	mov    $0x0,%eax
c01060be:	eb 75                	jmp    c0106135 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c01060c0:	a1 6c 0f 15 c0       	mov    0xc0150f6c,%eax
c01060c5:	85 c0                	test   %eax,%eax
c01060c7:	74 69                	je     c0106132 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01060c9:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c01060ce:	85 c0                	test   %eax,%eax
c01060d0:	74 60                	je     c0106132 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01060d2:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c01060d7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01060de:	00 
c01060df:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060e2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01060e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060ed:	89 04 24             	mov    %eax,(%esp)
c01060f0:	e8 5b 0e 00 00       	call   c0106f50 <swap_map_swappable>
                page->pra_vaddr=la;
c01060f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060f8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060fb:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c01060fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106101:	89 04 24             	mov    %eax,(%esp)
c0106104:	e8 74 ee ff ff       	call   c0104f7d <page_ref>
c0106109:	83 f8 01             	cmp    $0x1,%eax
c010610c:	74 24                	je     c0106132 <pgdir_alloc_page+0xcf>
c010610e:	c7 44 24 0c 49 68 11 	movl   $0xc0116849,0xc(%esp)
c0106115:	c0 
c0106116:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010611d:	c0 
c010611e:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c0106125:	00 
c0106126:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010612d:	e8 96 ad ff ff       	call   c0100ec8 <__panic>
            }
        }

    }

    return page;
c0106132:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106135:	c9                   	leave  
c0106136:	c3                   	ret    

c0106137 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106137:	55                   	push   %ebp
c0106138:	89 e5                	mov    %esp,%ebp
c010613a:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010613d:	a1 2c 41 15 c0       	mov    0xc015412c,%eax
c0106142:	8b 40 18             	mov    0x18(%eax),%eax
c0106145:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106147:	c7 04 24 60 68 11 c0 	movl   $0xc0116860,(%esp)
c010614e:	e8 12 a2 ff ff       	call   c0100365 <cprintf>
}
c0106153:	c9                   	leave  
c0106154:	c3                   	ret    

c0106155 <check_pgdir>:

static void
check_pgdir(void) {
c0106155:	55                   	push   %ebp
c0106156:	89 e5                	mov    %esp,%ebp
c0106158:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010615b:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0106160:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106165:	76 24                	jbe    c010618b <check_pgdir+0x36>
c0106167:	c7 44 24 0c 7f 68 11 	movl   $0xc011687f,0xc(%esp)
c010616e:	c0 
c010616f:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106176:	c0 
c0106177:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010617e:	00 
c010617f:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106186:	e8 3d ad ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010618b:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106190:	85 c0                	test   %eax,%eax
c0106192:	74 0e                	je     c01061a2 <check_pgdir+0x4d>
c0106194:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106199:	25 ff 0f 00 00       	and    $0xfff,%eax
c010619e:	85 c0                	test   %eax,%eax
c01061a0:	74 24                	je     c01061c6 <check_pgdir+0x71>
c01061a2:	c7 44 24 0c 9c 68 11 	movl   $0xc011689c,0xc(%esp)
c01061a9:	c0 
c01061aa:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01061b1:	c0 
c01061b2:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c01061b9:	00 
c01061ba:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01061c1:	e8 02 ad ff ff       	call   c0100ec8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01061c6:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01061cb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061d2:	00 
c01061d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061da:	00 
c01061db:	89 04 24             	mov    %eax,(%esp)
c01061de:	e8 4e f8 ff ff       	call   c0105a31 <get_page>
c01061e3:	85 c0                	test   %eax,%eax
c01061e5:	74 24                	je     c010620b <check_pgdir+0xb6>
c01061e7:	c7 44 24 0c d4 68 11 	movl   $0xc01168d4,0xc(%esp)
c01061ee:	c0 
c01061ef:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01061f6:	c0 
c01061f7:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01061fe:	00 
c01061ff:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106206:	e8 bd ac ff ff       	call   c0100ec8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010620b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106212:	e8 6b ef ff ff       	call   c0105182 <alloc_pages>
c0106217:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010621a:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010621f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106226:	00 
c0106227:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010622e:	00 
c010622f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106232:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106236:	89 04 24             	mov    %eax,(%esp)
c0106239:	e8 0f fd ff ff       	call   c0105f4d <page_insert>
c010623e:	85 c0                	test   %eax,%eax
c0106240:	74 24                	je     c0106266 <check_pgdir+0x111>
c0106242:	c7 44 24 0c fc 68 11 	movl   $0xc01168fc,0xc(%esp)
c0106249:	c0 
c010624a:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106251:	c0 
c0106252:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106259:	00 
c010625a:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106261:	e8 62 ac ff ff       	call   c0100ec8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106266:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010626b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106272:	00 
c0106273:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010627a:	00 
c010627b:	89 04 24             	mov    %eax,(%esp)
c010627e:	e8 76 f6 ff ff       	call   c01058f9 <get_pte>
c0106283:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106286:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010628a:	75 24                	jne    c01062b0 <check_pgdir+0x15b>
c010628c:	c7 44 24 0c 28 69 11 	movl   $0xc0116928,0xc(%esp)
c0106293:	c0 
c0106294:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010629b:	c0 
c010629c:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01062a3:	00 
c01062a4:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01062ab:	e8 18 ac ff ff       	call   c0100ec8 <__panic>
    assert(pte2page(*ptep) == p1);
c01062b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062b3:	8b 00                	mov    (%eax),%eax
c01062b5:	89 04 24             	mov    %eax,(%esp)
c01062b8:	e8 6a ec ff ff       	call   c0104f27 <pte2page>
c01062bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01062c0:	74 24                	je     c01062e6 <check_pgdir+0x191>
c01062c2:	c7 44 24 0c 55 69 11 	movl   $0xc0116955,0xc(%esp)
c01062c9:	c0 
c01062ca:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01062d1:	c0 
c01062d2:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01062d9:	00 
c01062da:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01062e1:	e8 e2 ab ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 1);
c01062e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062e9:	89 04 24             	mov    %eax,(%esp)
c01062ec:	e8 8c ec ff ff       	call   c0104f7d <page_ref>
c01062f1:	83 f8 01             	cmp    $0x1,%eax
c01062f4:	74 24                	je     c010631a <check_pgdir+0x1c5>
c01062f6:	c7 44 24 0c 6b 69 11 	movl   $0xc011696b,0xc(%esp)
c01062fd:	c0 
c01062fe:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106305:	c0 
c0106306:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c010630d:	00 
c010630e:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106315:	e8 ae ab ff ff       	call   c0100ec8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010631a:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010631f:	8b 00                	mov    (%eax),%eax
c0106321:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106326:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106329:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010632c:	c1 e8 0c             	shr    $0xc,%eax
c010632f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106332:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0106337:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010633a:	72 23                	jb     c010635f <check_pgdir+0x20a>
c010633c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010633f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106343:	c7 44 24 08 c0 66 11 	movl   $0xc01166c0,0x8(%esp)
c010634a:	c0 
c010634b:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106352:	00 
c0106353:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010635a:	e8 69 ab ff ff       	call   c0100ec8 <__panic>
c010635f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106362:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106367:	83 c0 04             	add    $0x4,%eax
c010636a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010636d:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106372:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106379:	00 
c010637a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106381:	00 
c0106382:	89 04 24             	mov    %eax,(%esp)
c0106385:	e8 6f f5 ff ff       	call   c01058f9 <get_pte>
c010638a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010638d:	74 24                	je     c01063b3 <check_pgdir+0x25e>
c010638f:	c7 44 24 0c 80 69 11 	movl   $0xc0116980,0xc(%esp)
c0106396:	c0 
c0106397:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010639e:	c0 
c010639f:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c01063a6:	00 
c01063a7:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01063ae:	e8 15 ab ff ff       	call   c0100ec8 <__panic>

    p2 = alloc_page();
c01063b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01063ba:	e8 c3 ed ff ff       	call   c0105182 <alloc_pages>
c01063bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01063c2:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01063c7:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01063ce:	00 
c01063cf:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01063d6:	00 
c01063d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063da:	89 54 24 04          	mov    %edx,0x4(%esp)
c01063de:	89 04 24             	mov    %eax,(%esp)
c01063e1:	e8 67 fb ff ff       	call   c0105f4d <page_insert>
c01063e6:	85 c0                	test   %eax,%eax
c01063e8:	74 24                	je     c010640e <check_pgdir+0x2b9>
c01063ea:	c7 44 24 0c a8 69 11 	movl   $0xc01169a8,0xc(%esp)
c01063f1:	c0 
c01063f2:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01063f9:	c0 
c01063fa:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c0106401:	00 
c0106402:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106409:	e8 ba aa ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010640e:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106413:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010641a:	00 
c010641b:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106422:	00 
c0106423:	89 04 24             	mov    %eax,(%esp)
c0106426:	e8 ce f4 ff ff       	call   c01058f9 <get_pte>
c010642b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010642e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106432:	75 24                	jne    c0106458 <check_pgdir+0x303>
c0106434:	c7 44 24 0c e0 69 11 	movl   $0xc01169e0,0xc(%esp)
c010643b:	c0 
c010643c:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106443:	c0 
c0106444:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010644b:	00 
c010644c:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106453:	e8 70 aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_U);
c0106458:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010645b:	8b 00                	mov    (%eax),%eax
c010645d:	83 e0 04             	and    $0x4,%eax
c0106460:	85 c0                	test   %eax,%eax
c0106462:	75 24                	jne    c0106488 <check_pgdir+0x333>
c0106464:	c7 44 24 0c 10 6a 11 	movl   $0xc0116a10,0xc(%esp)
c010646b:	c0 
c010646c:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106473:	c0 
c0106474:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010647b:	00 
c010647c:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106483:	e8 40 aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_W);
c0106488:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010648b:	8b 00                	mov    (%eax),%eax
c010648d:	83 e0 02             	and    $0x2,%eax
c0106490:	85 c0                	test   %eax,%eax
c0106492:	75 24                	jne    c01064b8 <check_pgdir+0x363>
c0106494:	c7 44 24 0c 1e 6a 11 	movl   $0xc0116a1e,0xc(%esp)
c010649b:	c0 
c010649c:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01064a3:	c0 
c01064a4:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01064ab:	00 
c01064ac:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01064b3:	e8 10 aa ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01064b8:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01064bd:	8b 00                	mov    (%eax),%eax
c01064bf:	83 e0 04             	and    $0x4,%eax
c01064c2:	85 c0                	test   %eax,%eax
c01064c4:	75 24                	jne    c01064ea <check_pgdir+0x395>
c01064c6:	c7 44 24 0c 2c 6a 11 	movl   $0xc0116a2c,0xc(%esp)
c01064cd:	c0 
c01064ce:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01064d5:	c0 
c01064d6:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01064dd:	00 
c01064de:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01064e5:	e8 de a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 1);
c01064ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064ed:	89 04 24             	mov    %eax,(%esp)
c01064f0:	e8 88 ea ff ff       	call   c0104f7d <page_ref>
c01064f5:	83 f8 01             	cmp    $0x1,%eax
c01064f8:	74 24                	je     c010651e <check_pgdir+0x3c9>
c01064fa:	c7 44 24 0c 42 6a 11 	movl   $0xc0116a42,0xc(%esp)
c0106501:	c0 
c0106502:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106509:	c0 
c010650a:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c0106511:	00 
c0106512:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106519:	e8 aa a9 ff ff       	call   c0100ec8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c010651e:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106523:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010652a:	00 
c010652b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106532:	00 
c0106533:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106536:	89 54 24 04          	mov    %edx,0x4(%esp)
c010653a:	89 04 24             	mov    %eax,(%esp)
c010653d:	e8 0b fa ff ff       	call   c0105f4d <page_insert>
c0106542:	85 c0                	test   %eax,%eax
c0106544:	74 24                	je     c010656a <check_pgdir+0x415>
c0106546:	c7 44 24 0c 54 6a 11 	movl   $0xc0116a54,0xc(%esp)
c010654d:	c0 
c010654e:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106555:	c0 
c0106556:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010655d:	00 
c010655e:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106565:	e8 5e a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 2);
c010656a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010656d:	89 04 24             	mov    %eax,(%esp)
c0106570:	e8 08 ea ff ff       	call   c0104f7d <page_ref>
c0106575:	83 f8 02             	cmp    $0x2,%eax
c0106578:	74 24                	je     c010659e <check_pgdir+0x449>
c010657a:	c7 44 24 0c 80 6a 11 	movl   $0xc0116a80,0xc(%esp)
c0106581:	c0 
c0106582:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106589:	c0 
c010658a:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0106591:	00 
c0106592:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106599:	e8 2a a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c010659e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065a1:	89 04 24             	mov    %eax,(%esp)
c01065a4:	e8 d4 e9 ff ff       	call   c0104f7d <page_ref>
c01065a9:	85 c0                	test   %eax,%eax
c01065ab:	74 24                	je     c01065d1 <check_pgdir+0x47c>
c01065ad:	c7 44 24 0c 92 6a 11 	movl   $0xc0116a92,0xc(%esp)
c01065b4:	c0 
c01065b5:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01065bc:	c0 
c01065bd:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01065c4:	00 
c01065c5:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01065cc:	e8 f7 a8 ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01065d1:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01065d6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01065dd:	00 
c01065de:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01065e5:	00 
c01065e6:	89 04 24             	mov    %eax,(%esp)
c01065e9:	e8 0b f3 ff ff       	call   c01058f9 <get_pte>
c01065ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01065f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01065f5:	75 24                	jne    c010661b <check_pgdir+0x4c6>
c01065f7:	c7 44 24 0c e0 69 11 	movl   $0xc01169e0,0xc(%esp)
c01065fe:	c0 
c01065ff:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106606:	c0 
c0106607:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c010660e:	00 
c010660f:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106616:	e8 ad a8 ff ff       	call   c0100ec8 <__panic>
    assert(pte2page(*ptep) == p1);
c010661b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010661e:	8b 00                	mov    (%eax),%eax
c0106620:	89 04 24             	mov    %eax,(%esp)
c0106623:	e8 ff e8 ff ff       	call   c0104f27 <pte2page>
c0106628:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010662b:	74 24                	je     c0106651 <check_pgdir+0x4fc>
c010662d:	c7 44 24 0c 55 69 11 	movl   $0xc0116955,0xc(%esp)
c0106634:	c0 
c0106635:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010663c:	c0 
c010663d:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106644:	00 
c0106645:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010664c:	e8 77 a8 ff ff       	call   c0100ec8 <__panic>
    assert((*ptep & PTE_U) == 0);
c0106651:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106654:	8b 00                	mov    (%eax),%eax
c0106656:	83 e0 04             	and    $0x4,%eax
c0106659:	85 c0                	test   %eax,%eax
c010665b:	74 24                	je     c0106681 <check_pgdir+0x52c>
c010665d:	c7 44 24 0c a4 6a 11 	movl   $0xc0116aa4,0xc(%esp)
c0106664:	c0 
c0106665:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010666c:	c0 
c010666d:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106674:	00 
c0106675:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010667c:	e8 47 a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106681:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106686:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010668d:	00 
c010668e:	89 04 24             	mov    %eax,(%esp)
c0106691:	e8 73 f8 ff ff       	call   c0105f09 <page_remove>
    assert(page_ref(p1) == 1);
c0106696:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106699:	89 04 24             	mov    %eax,(%esp)
c010669c:	e8 dc e8 ff ff       	call   c0104f7d <page_ref>
c01066a1:	83 f8 01             	cmp    $0x1,%eax
c01066a4:	74 24                	je     c01066ca <check_pgdir+0x575>
c01066a6:	c7 44 24 0c 6b 69 11 	movl   $0xc011696b,0xc(%esp)
c01066ad:	c0 
c01066ae:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01066b5:	c0 
c01066b6:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c01066bd:	00 
c01066be:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01066c5:	e8 fe a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c01066ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066cd:	89 04 24             	mov    %eax,(%esp)
c01066d0:	e8 a8 e8 ff ff       	call   c0104f7d <page_ref>
c01066d5:	85 c0                	test   %eax,%eax
c01066d7:	74 24                	je     c01066fd <check_pgdir+0x5a8>
c01066d9:	c7 44 24 0c 92 6a 11 	movl   $0xc0116a92,0xc(%esp)
c01066e0:	c0 
c01066e1:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01066e8:	c0 
c01066e9:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01066f0:	00 
c01066f1:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01066f8:	e8 cb a7 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01066fd:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106702:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106709:	00 
c010670a:	89 04 24             	mov    %eax,(%esp)
c010670d:	e8 f7 f7 ff ff       	call   c0105f09 <page_remove>
    assert(page_ref(p1) == 0);
c0106712:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106715:	89 04 24             	mov    %eax,(%esp)
c0106718:	e8 60 e8 ff ff       	call   c0104f7d <page_ref>
c010671d:	85 c0                	test   %eax,%eax
c010671f:	74 24                	je     c0106745 <check_pgdir+0x5f0>
c0106721:	c7 44 24 0c b9 6a 11 	movl   $0xc0116ab9,0xc(%esp)
c0106728:	c0 
c0106729:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106730:	c0 
c0106731:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0106738:	00 
c0106739:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106740:	e8 83 a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106745:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106748:	89 04 24             	mov    %eax,(%esp)
c010674b:	e8 2d e8 ff ff       	call   c0104f7d <page_ref>
c0106750:	85 c0                	test   %eax,%eax
c0106752:	74 24                	je     c0106778 <check_pgdir+0x623>
c0106754:	c7 44 24 0c 92 6a 11 	movl   $0xc0116a92,0xc(%esp)
c010675b:	c0 
c010675c:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106763:	c0 
c0106764:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c010676b:	00 
c010676c:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106773:	e8 50 a7 ff ff       	call   c0100ec8 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106778:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010677d:	8b 00                	mov    (%eax),%eax
c010677f:	89 04 24             	mov    %eax,(%esp)
c0106782:	e8 de e7 ff ff       	call   c0104f65 <pde2page>
c0106787:	89 04 24             	mov    %eax,(%esp)
c010678a:	e8 ee e7 ff ff       	call   c0104f7d <page_ref>
c010678f:	83 f8 01             	cmp    $0x1,%eax
c0106792:	74 24                	je     c01067b8 <check_pgdir+0x663>
c0106794:	c7 44 24 0c cc 6a 11 	movl   $0xc0116acc,0xc(%esp)
c010679b:	c0 
c010679c:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01067a3:	c0 
c01067a4:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c01067ab:	00 
c01067ac:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01067b3:	e8 10 a7 ff ff       	call   c0100ec8 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01067b8:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01067bd:	8b 00                	mov    (%eax),%eax
c01067bf:	89 04 24             	mov    %eax,(%esp)
c01067c2:	e8 9e e7 ff ff       	call   c0104f65 <pde2page>
c01067c7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01067ce:	00 
c01067cf:	89 04 24             	mov    %eax,(%esp)
c01067d2:	e8 16 ea ff ff       	call   c01051ed <free_pages>
    boot_pgdir[0] = 0;
c01067d7:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01067dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01067e2:	c7 04 24 f3 6a 11 c0 	movl   $0xc0116af3,(%esp)
c01067e9:	e8 77 9b ff ff       	call   c0100365 <cprintf>
}
c01067ee:	c9                   	leave  
c01067ef:	c3                   	ret    

c01067f0 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01067f0:	55                   	push   %ebp
c01067f1:	89 e5                	mov    %esp,%ebp
c01067f3:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01067fd:	e9 ca 00 00 00       	jmp    c01068cc <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106802:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106805:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106808:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010680b:	c1 e8 0c             	shr    $0xc,%eax
c010680e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106811:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0106816:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106819:	72 23                	jb     c010683e <check_boot_pgdir+0x4e>
c010681b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010681e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106822:	c7 44 24 08 c0 66 11 	movl   $0xc01166c0,0x8(%esp)
c0106829:	c0 
c010682a:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106831:	00 
c0106832:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106839:	e8 8a a6 ff ff       	call   c0100ec8 <__panic>
c010683e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106841:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106846:	89 c2                	mov    %eax,%edx
c0106848:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010684d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106854:	00 
c0106855:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106859:	89 04 24             	mov    %eax,(%esp)
c010685c:	e8 98 f0 ff ff       	call   c01058f9 <get_pte>
c0106861:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106864:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106868:	75 24                	jne    c010688e <check_boot_pgdir+0x9e>
c010686a:	c7 44 24 0c 10 6b 11 	movl   $0xc0116b10,0xc(%esp)
c0106871:	c0 
c0106872:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106879:	c0 
c010687a:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106881:	00 
c0106882:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106889:	e8 3a a6 ff ff       	call   c0100ec8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010688e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106891:	8b 00                	mov    (%eax),%eax
c0106893:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106898:	89 c2                	mov    %eax,%edx
c010689a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010689d:	39 c2                	cmp    %eax,%edx
c010689f:	74 24                	je     c01068c5 <check_boot_pgdir+0xd5>
c01068a1:	c7 44 24 0c 4d 6b 11 	movl   $0xc0116b4d,0xc(%esp)
c01068a8:	c0 
c01068a9:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01068b0:	c0 
c01068b1:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c01068b8:	00 
c01068b9:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01068c0:	e8 03 a6 ff ff       	call   c0100ec8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01068c5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01068cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01068cf:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c01068d4:	39 c2                	cmp    %eax,%edx
c01068d6:	0f 82 26 ff ff ff    	jb     c0106802 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01068dc:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01068e1:	05 ac 0f 00 00       	add    $0xfac,%eax
c01068e6:	8b 00                	mov    (%eax),%eax
c01068e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01068ed:	89 c2                	mov    %eax,%edx
c01068ef:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c01068f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068f7:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01068fe:	77 23                	ja     c0106923 <check_boot_pgdir+0x133>
c0106900:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106903:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106907:	c7 44 24 08 64 67 11 	movl   $0xc0116764,0x8(%esp)
c010690e:	c0 
c010690f:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106916:	00 
c0106917:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010691e:	e8 a5 a5 ff ff       	call   c0100ec8 <__panic>
c0106923:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106926:	05 00 00 00 40       	add    $0x40000000,%eax
c010692b:	39 c2                	cmp    %eax,%edx
c010692d:	74 24                	je     c0106953 <check_boot_pgdir+0x163>
c010692f:	c7 44 24 0c 64 6b 11 	movl   $0xc0116b64,0xc(%esp)
c0106936:	c0 
c0106937:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010693e:	c0 
c010693f:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106946:	00 
c0106947:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010694e:	e8 75 a5 ff ff       	call   c0100ec8 <__panic>

    assert(boot_pgdir[0] == 0);
c0106953:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106958:	8b 00                	mov    (%eax),%eax
c010695a:	85 c0                	test   %eax,%eax
c010695c:	74 24                	je     c0106982 <check_boot_pgdir+0x192>
c010695e:	c7 44 24 0c 98 6b 11 	movl   $0xc0116b98,0xc(%esp)
c0106965:	c0 
c0106966:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c010696d:	c0 
c010696e:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0106975:	00 
c0106976:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c010697d:	e8 46 a5 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    p = alloc_page();
c0106982:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106989:	e8 f4 e7 ff ff       	call   c0105182 <alloc_pages>
c010698e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106991:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106996:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010699d:	00 
c010699e:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c01069a5:	00 
c01069a6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069ad:	89 04 24             	mov    %eax,(%esp)
c01069b0:	e8 98 f5 ff ff       	call   c0105f4d <page_insert>
c01069b5:	85 c0                	test   %eax,%eax
c01069b7:	74 24                	je     c01069dd <check_boot_pgdir+0x1ed>
c01069b9:	c7 44 24 0c ac 6b 11 	movl   $0xc0116bac,0xc(%esp)
c01069c0:	c0 
c01069c1:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01069c8:	c0 
c01069c9:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01069d0:	00 
c01069d1:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c01069d8:	e8 eb a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 1);
c01069dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069e0:	89 04 24             	mov    %eax,(%esp)
c01069e3:	e8 95 e5 ff ff       	call   c0104f7d <page_ref>
c01069e8:	83 f8 01             	cmp    $0x1,%eax
c01069eb:	74 24                	je     c0106a11 <check_boot_pgdir+0x221>
c01069ed:	c7 44 24 0c da 6b 11 	movl   $0xc0116bda,0xc(%esp)
c01069f4:	c0 
c01069f5:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c01069fc:	c0 
c01069fd:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0106a04:	00 
c0106a05:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106a0c:	e8 b7 a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106a11:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106a16:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106a1d:	00 
c0106a1e:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106a25:	00 
c0106a26:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a29:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a2d:	89 04 24             	mov    %eax,(%esp)
c0106a30:	e8 18 f5 ff ff       	call   c0105f4d <page_insert>
c0106a35:	85 c0                	test   %eax,%eax
c0106a37:	74 24                	je     c0106a5d <check_boot_pgdir+0x26d>
c0106a39:	c7 44 24 0c ec 6b 11 	movl   $0xc0116bec,0xc(%esp)
c0106a40:	c0 
c0106a41:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106a48:	c0 
c0106a49:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0106a50:	00 
c0106a51:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106a58:	e8 6b a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 2);
c0106a5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a60:	89 04 24             	mov    %eax,(%esp)
c0106a63:	e8 15 e5 ff ff       	call   c0104f7d <page_ref>
c0106a68:	83 f8 02             	cmp    $0x2,%eax
c0106a6b:	74 24                	je     c0106a91 <check_boot_pgdir+0x2a1>
c0106a6d:	c7 44 24 0c 23 6c 11 	movl   $0xc0116c23,0xc(%esp)
c0106a74:	c0 
c0106a75:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106a7c:	c0 
c0106a7d:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106a84:	00 
c0106a85:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106a8c:	e8 37 a4 ff ff       	call   c0100ec8 <__panic>

    const char *str = "ucore: Hello world!!";
c0106a91:	c7 45 dc 34 6c 11 c0 	movl   $0xc0116c34,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a98:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a9f:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106aa6:	e8 ce e9 00 00       	call   c0115479 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106aab:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106ab2:	00 
c0106ab3:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106aba:	e8 33 ea 00 00       	call   c01154f2 <strcmp>
c0106abf:	85 c0                	test   %eax,%eax
c0106ac1:	74 24                	je     c0106ae7 <check_boot_pgdir+0x2f7>
c0106ac3:	c7 44 24 0c 4c 6c 11 	movl   $0xc0116c4c,0xc(%esp)
c0106aca:	c0 
c0106acb:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106ad2:	c0 
c0106ad3:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106ada:	00 
c0106adb:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106ae2:	e8 e1 a3 ff ff       	call   c0100ec8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106ae7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aea:	89 04 24             	mov    %eax,(%esp)
c0106aed:	e8 e1 e3 ff ff       	call   c0104ed3 <page2kva>
c0106af2:	05 00 01 00 00       	add    $0x100,%eax
c0106af7:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106afa:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106b01:	e8 f4 e8 00 00       	call   c01153fa <strlen>
c0106b06:	85 c0                	test   %eax,%eax
c0106b08:	74 24                	je     c0106b2e <check_boot_pgdir+0x33e>
c0106b0a:	c7 44 24 0c 84 6c 11 	movl   $0xc0116c84,0xc(%esp)
c0106b11:	c0 
c0106b12:	c7 44 24 08 ad 67 11 	movl   $0xc01167ad,0x8(%esp)
c0106b19:	c0 
c0106b1a:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106b21:	00 
c0106b22:	c7 04 24 88 67 11 c0 	movl   $0xc0116788,(%esp)
c0106b29:	e8 9a a3 ff ff       	call   c0100ec8 <__panic>

    free_page(p);
c0106b2e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b35:	00 
c0106b36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b39:	89 04 24             	mov    %eax,(%esp)
c0106b3c:	e8 ac e6 ff ff       	call   c01051ed <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106b41:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106b46:	8b 00                	mov    (%eax),%eax
c0106b48:	89 04 24             	mov    %eax,(%esp)
c0106b4b:	e8 15 e4 ff ff       	call   c0104f65 <pde2page>
c0106b50:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b57:	00 
c0106b58:	89 04 24             	mov    %eax,(%esp)
c0106b5b:	e8 8d e6 ff ff       	call   c01051ed <free_pages>
    boot_pgdir[0] = 0;
c0106b60:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c0106b65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106b6b:	c7 04 24 a8 6c 11 c0 	movl   $0xc0116ca8,(%esp)
c0106b72:	e8 ee 97 ff ff       	call   c0100365 <cprintf>
}
c0106b77:	c9                   	leave  
c0106b78:	c3                   	ret    

c0106b79 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b79:	55                   	push   %ebp
c0106b7a:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b7f:	83 e0 04             	and    $0x4,%eax
c0106b82:	85 c0                	test   %eax,%eax
c0106b84:	74 07                	je     c0106b8d <perm2str+0x14>
c0106b86:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b8b:	eb 05                	jmp    c0106b92 <perm2str+0x19>
c0106b8d:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b92:	a2 68 0f 15 c0       	mov    %al,0xc0150f68
    str[1] = 'r';
c0106b97:	c6 05 69 0f 15 c0 72 	movb   $0x72,0xc0150f69
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ba1:	83 e0 02             	and    $0x2,%eax
c0106ba4:	85 c0                	test   %eax,%eax
c0106ba6:	74 07                	je     c0106baf <perm2str+0x36>
c0106ba8:	b8 77 00 00 00       	mov    $0x77,%eax
c0106bad:	eb 05                	jmp    c0106bb4 <perm2str+0x3b>
c0106baf:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106bb4:	a2 6a 0f 15 c0       	mov    %al,0xc0150f6a
    str[3] = '\0';
c0106bb9:	c6 05 6b 0f 15 c0 00 	movb   $0x0,0xc0150f6b
    return str;
c0106bc0:	b8 68 0f 15 c0       	mov    $0xc0150f68,%eax
}
c0106bc5:	5d                   	pop    %ebp
c0106bc6:	c3                   	ret    

c0106bc7 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106bc7:	55                   	push   %ebp
c0106bc8:	89 e5                	mov    %esp,%ebp
c0106bca:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106bcd:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bd0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bd3:	72 0a                	jb     c0106bdf <get_pgtable_items+0x18>
        return 0;
c0106bd5:	b8 00 00 00 00       	mov    $0x0,%eax
c0106bda:	e9 9c 00 00 00       	jmp    c0106c7b <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106bdf:	eb 04                	jmp    c0106be5 <get_pgtable_items+0x1e>
        start ++;
c0106be1:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106be5:	8b 45 10             	mov    0x10(%ebp),%eax
c0106be8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106beb:	73 18                	jae    c0106c05 <get_pgtable_items+0x3e>
c0106bed:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bf0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bf7:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bfa:	01 d0                	add    %edx,%eax
c0106bfc:	8b 00                	mov    (%eax),%eax
c0106bfe:	83 e0 01             	and    $0x1,%eax
c0106c01:	85 c0                	test   %eax,%eax
c0106c03:	74 dc                	je     c0106be1 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106c05:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c08:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c0b:	73 69                	jae    c0106c76 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106c0d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106c11:	74 08                	je     c0106c1b <get_pgtable_items+0x54>
            *left_store = start;
c0106c13:	8b 45 18             	mov    0x18(%ebp),%eax
c0106c16:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c19:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106c1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c1e:	8d 50 01             	lea    0x1(%eax),%edx
c0106c21:	89 55 10             	mov    %edx,0x10(%ebp)
c0106c24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c2b:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c2e:	01 d0                	add    %edx,%eax
c0106c30:	8b 00                	mov    (%eax),%eax
c0106c32:	83 e0 07             	and    $0x7,%eax
c0106c35:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c38:	eb 04                	jmp    c0106c3e <get_pgtable_items+0x77>
            start ++;
c0106c3a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106c3e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c41:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c44:	73 1d                	jae    c0106c63 <get_pgtable_items+0x9c>
c0106c46:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c50:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c53:	01 d0                	add    %edx,%eax
c0106c55:	8b 00                	mov    (%eax),%eax
c0106c57:	83 e0 07             	and    $0x7,%eax
c0106c5a:	89 c2                	mov    %eax,%edx
c0106c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c5f:	39 c2                	cmp    %eax,%edx
c0106c61:	74 d7                	je     c0106c3a <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106c63:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106c67:	74 08                	je     c0106c71 <get_pgtable_items+0xaa>
            *right_store = start;
c0106c69:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c6c:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c6f:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c71:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c74:	eb 05                	jmp    c0106c7b <get_pgtable_items+0xb4>
    }
    return 0;
c0106c76:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c7b:	c9                   	leave  
c0106c7c:	c3                   	ret    

c0106c7d <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c7d:	55                   	push   %ebp
c0106c7e:	89 e5                	mov    %esp,%ebp
c0106c80:	57                   	push   %edi
c0106c81:	56                   	push   %esi
c0106c82:	53                   	push   %ebx
c0106c83:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c86:	c7 04 24 c8 6c 11 c0 	movl   $0xc0116cc8,(%esp)
c0106c8d:	e8 d3 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c0106c92:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c99:	e9 fa 00 00 00       	jmp    c0106d98 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ca1:	89 04 24             	mov    %eax,(%esp)
c0106ca4:	e8 d0 fe ff ff       	call   c0106b79 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106ca9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106cac:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106caf:	29 d1                	sub    %edx,%ecx
c0106cb1:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106cb3:	89 d6                	mov    %edx,%esi
c0106cb5:	c1 e6 16             	shl    $0x16,%esi
c0106cb8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106cbb:	89 d3                	mov    %edx,%ebx
c0106cbd:	c1 e3 16             	shl    $0x16,%ebx
c0106cc0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cc3:	89 d1                	mov    %edx,%ecx
c0106cc5:	c1 e1 16             	shl    $0x16,%ecx
c0106cc8:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106ccb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cce:	29 d7                	sub    %edx,%edi
c0106cd0:	89 fa                	mov    %edi,%edx
c0106cd2:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106cd6:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106cda:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106cde:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106ce2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ce6:	c7 04 24 f9 6c 11 c0 	movl   $0xc0116cf9,(%esp)
c0106ced:	e8 73 96 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106cf2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106cf5:	c1 e0 0a             	shl    $0xa,%eax
c0106cf8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106cfb:	eb 54                	jmp    c0106d51 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106cfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d00:	89 04 24             	mov    %eax,(%esp)
c0106d03:	e8 71 fe ff ff       	call   c0106b79 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106d08:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106d0b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d0e:	29 d1                	sub    %edx,%ecx
c0106d10:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106d12:	89 d6                	mov    %edx,%esi
c0106d14:	c1 e6 0c             	shl    $0xc,%esi
c0106d17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106d1a:	89 d3                	mov    %edx,%ebx
c0106d1c:	c1 e3 0c             	shl    $0xc,%ebx
c0106d1f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d22:	c1 e2 0c             	shl    $0xc,%edx
c0106d25:	89 d1                	mov    %edx,%ecx
c0106d27:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106d2a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106d2d:	29 d7                	sub    %edx,%edi
c0106d2f:	89 fa                	mov    %edi,%edx
c0106d31:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106d35:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106d39:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106d3d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106d41:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d45:	c7 04 24 18 6d 11 c0 	movl   $0xc0116d18,(%esp)
c0106d4c:	e8 14 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d51:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106d56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106d59:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d5c:	89 ce                	mov    %ecx,%esi
c0106d5e:	c1 e6 0a             	shl    $0xa,%esi
c0106d61:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d64:	89 cb                	mov    %ecx,%ebx
c0106d66:	c1 e3 0a             	shl    $0xa,%ebx
c0106d69:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d6c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d70:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d73:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d77:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d7b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d7f:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d83:	89 1c 24             	mov    %ebx,(%esp)
c0106d86:	e8 3c fe ff ff       	call   c0106bc7 <get_pgtable_items>
c0106d8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d8e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d92:	0f 85 65 ff ff ff    	jne    c0106cfd <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d98:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106da0:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106da3:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106da7:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106daa:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106dae:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106db2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106db6:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106dbd:	00 
c0106dbe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106dc5:	e8 fd fd ff ff       	call   c0106bc7 <get_pgtable_items>
c0106dca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106dcd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106dd1:	0f 85 c7 fe ff ff    	jne    c0106c9e <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106dd7:	c7 04 24 3c 6d 11 c0 	movl   $0xc0116d3c,(%esp)
c0106dde:	e8 82 95 ff ff       	call   c0100365 <cprintf>
}
c0106de3:	83 c4 4c             	add    $0x4c,%esp
c0106de6:	5b                   	pop    %ebx
c0106de7:	5e                   	pop    %esi
c0106de8:	5f                   	pop    %edi
c0106de9:	5d                   	pop    %ebp
c0106dea:	c3                   	ret    

c0106deb <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106deb:	55                   	push   %ebp
c0106dec:	89 e5                	mov    %esp,%ebp
c0106dee:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106df1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106df4:	c1 e8 0c             	shr    $0xc,%eax
c0106df7:	89 c2                	mov    %eax,%edx
c0106df9:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0106dfe:	39 c2                	cmp    %eax,%edx
c0106e00:	72 1c                	jb     c0106e1e <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106e02:	c7 44 24 08 70 6d 11 	movl   $0xc0116d70,0x8(%esp)
c0106e09:	c0 
c0106e0a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106e11:	00 
c0106e12:	c7 04 24 8f 6d 11 c0 	movl   $0xc0116d8f,(%esp)
c0106e19:	e8 aa a0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0106e1e:	8b 0d 34 41 15 c0    	mov    0xc0154134,%ecx
c0106e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e27:	c1 e8 0c             	shr    $0xc,%eax
c0106e2a:	89 c2                	mov    %eax,%edx
c0106e2c:	89 d0                	mov    %edx,%eax
c0106e2e:	c1 e0 03             	shl    $0x3,%eax
c0106e31:	01 d0                	add    %edx,%eax
c0106e33:	c1 e0 02             	shl    $0x2,%eax
c0106e36:	01 c8                	add    %ecx,%eax
}
c0106e38:	c9                   	leave  
c0106e39:	c3                   	ret    

c0106e3a <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e3a:	55                   	push   %ebp
c0106e3b:	89 e5                	mov    %esp,%ebp
c0106e3d:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e43:	83 e0 01             	and    $0x1,%eax
c0106e46:	85 c0                	test   %eax,%eax
c0106e48:	75 1c                	jne    c0106e66 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106e4a:	c7 44 24 08 a0 6d 11 	movl   $0xc0116da0,0x8(%esp)
c0106e51:	c0 
c0106e52:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106e59:	00 
c0106e5a:	c7 04 24 8f 6d 11 c0 	movl   $0xc0116d8f,(%esp)
c0106e61:	e8 62 a0 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e66:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e6e:	89 04 24             	mov    %eax,(%esp)
c0106e71:	e8 75 ff ff ff       	call   c0106deb <pa2page>
}
c0106e76:	c9                   	leave  
c0106e77:	c3                   	ret    

c0106e78 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e78:	55                   	push   %ebp
c0106e79:	89 e5                	mov    %esp,%ebp
c0106e7b:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106e7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e86:	89 04 24             	mov    %eax,(%esp)
c0106e89:	e8 5d ff ff ff       	call   c0106deb <pa2page>
}
c0106e8e:	c9                   	leave  
c0106e8f:	c3                   	ret    

c0106e90 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e90:	55                   	push   %ebp
c0106e91:	89 e5                	mov    %esp,%ebp
c0106e93:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e96:	e8 0c 81 00 00       	call   c010efa7 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e9b:	a1 dc 41 15 c0       	mov    0xc01541dc,%eax
c0106ea0:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106ea5:	76 0c                	jbe    c0106eb3 <swap_init+0x23>
c0106ea7:	a1 dc 41 15 c0       	mov    0xc01541dc,%eax
c0106eac:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106eb1:	76 25                	jbe    c0106ed8 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106eb3:	a1 dc 41 15 c0       	mov    0xc01541dc,%eax
c0106eb8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106ebc:	c7 44 24 08 c1 6d 11 	movl   $0xc0116dc1,0x8(%esp)
c0106ec3:	c0 
c0106ec4:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106ecb:	00 
c0106ecc:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0106ed3:	e8 f0 9f ff ff       	call   c0100ec8 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106ed8:	c7 05 78 0f 15 c0 60 	movl   $0xc014fa60,0xc0150f78
c0106edf:	fa 14 c0 
     int r = sm->init();
c0106ee2:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106ee7:	8b 40 04             	mov    0x4(%eax),%eax
c0106eea:	ff d0                	call   *%eax
c0106eec:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106eef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ef3:	75 26                	jne    c0106f1b <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106ef5:	c7 05 6c 0f 15 c0 01 	movl   $0x1,0xc0150f6c
c0106efc:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106eff:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106f04:	8b 00                	mov    (%eax),%eax
c0106f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f0a:	c7 04 24 eb 6d 11 c0 	movl   $0xc0116deb,(%esp)
c0106f11:	e8 4f 94 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106f16:	e8 a4 04 00 00       	call   c01073bf <check_swap>
     }

     return r;
c0106f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106f1e:	c9                   	leave  
c0106f1f:	c3                   	ret    

c0106f20 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106f20:	55                   	push   %ebp
c0106f21:	89 e5                	mov    %esp,%ebp
c0106f23:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106f26:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106f2b:	8b 40 08             	mov    0x8(%eax),%eax
c0106f2e:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f31:	89 14 24             	mov    %edx,(%esp)
c0106f34:	ff d0                	call   *%eax
}
c0106f36:	c9                   	leave  
c0106f37:	c3                   	ret    

c0106f38 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106f38:	55                   	push   %ebp
c0106f39:	89 e5                	mov    %esp,%ebp
c0106f3b:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106f3e:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106f43:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f46:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f49:	89 14 24             	mov    %edx,(%esp)
c0106f4c:	ff d0                	call   *%eax
}
c0106f4e:	c9                   	leave  
c0106f4f:	c3                   	ret    

c0106f50 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106f50:	55                   	push   %ebp
c0106f51:	89 e5                	mov    %esp,%ebp
c0106f53:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106f56:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106f5b:	8b 40 10             	mov    0x10(%eax),%eax
c0106f5e:	8b 55 14             	mov    0x14(%ebp),%edx
c0106f61:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106f65:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f68:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f6c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f6f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f73:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f76:	89 14 24             	mov    %edx,(%esp)
c0106f79:	ff d0                	call   *%eax
}
c0106f7b:	c9                   	leave  
c0106f7c:	c3                   	ret    

c0106f7d <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106f7d:	55                   	push   %ebp
c0106f7e:	89 e5                	mov    %esp,%ebp
c0106f80:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106f83:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106f88:	8b 40 14             	mov    0x14(%eax),%eax
c0106f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f8e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f92:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f95:	89 14 24             	mov    %edx,(%esp)
c0106f98:	ff d0                	call   *%eax
}
c0106f9a:	c9                   	leave  
c0106f9b:	c3                   	ret    

c0106f9c <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f9c:	55                   	push   %ebp
c0106f9d:	89 e5                	mov    %esp,%ebp
c0106f9f:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106fa9:	e9 5a 01 00 00       	jmp    c0107108 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106fae:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0106fb3:	8b 40 18             	mov    0x18(%eax),%eax
c0106fb6:	8b 55 10             	mov    0x10(%ebp),%edx
c0106fb9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106fbd:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106fc0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fc4:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fc7:	89 14 24             	mov    %edx,(%esp)
c0106fca:	ff d0                	call   *%eax
c0106fcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106fcf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106fd3:	74 18                	je     c0106fed <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fdc:	c7 04 24 00 6e 11 c0 	movl   $0xc0116e00,(%esp)
c0106fe3:	e8 7d 93 ff ff       	call   c0100365 <cprintf>
c0106fe8:	e9 27 01 00 00       	jmp    c0107114 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106fed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ff0:	8b 40 20             	mov    0x20(%eax),%eax
c0106ff3:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106ff6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ff9:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ffc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107003:	00 
c0107004:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107007:	89 54 24 04          	mov    %edx,0x4(%esp)
c010700b:	89 04 24             	mov    %eax,(%esp)
c010700e:	e8 e6 e8 ff ff       	call   c01058f9 <get_pte>
c0107013:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0107016:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107019:	8b 00                	mov    (%eax),%eax
c010701b:	83 e0 01             	and    $0x1,%eax
c010701e:	85 c0                	test   %eax,%eax
c0107020:	75 24                	jne    c0107046 <swap_out+0xaa>
c0107022:	c7 44 24 0c 2d 6e 11 	movl   $0xc0116e2d,0xc(%esp)
c0107029:	c0 
c010702a:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107031:	c0 
c0107032:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107039:	00 
c010703a:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107041:	e8 82 9e ff ff       	call   c0100ec8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0107046:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107049:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010704c:	8b 52 20             	mov    0x20(%edx),%edx
c010704f:	c1 ea 0c             	shr    $0xc,%edx
c0107052:	83 c2 01             	add    $0x1,%edx
c0107055:	c1 e2 08             	shl    $0x8,%edx
c0107058:	89 44 24 04          	mov    %eax,0x4(%esp)
c010705c:	89 14 24             	mov    %edx,(%esp)
c010705f:	e8 fd 7f 00 00       	call   c010f061 <swapfs_write>
c0107064:	85 c0                	test   %eax,%eax
c0107066:	74 34                	je     c010709c <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0107068:	c7 04 24 57 6e 11 c0 	movl   $0xc0116e57,(%esp)
c010706f:	e8 f1 92 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0107074:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c0107079:	8b 40 10             	mov    0x10(%eax),%eax
c010707c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010707f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107086:	00 
c0107087:	89 54 24 08          	mov    %edx,0x8(%esp)
c010708b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010708e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107092:	8b 55 08             	mov    0x8(%ebp),%edx
c0107095:	89 14 24             	mov    %edx,(%esp)
c0107098:	ff d0                	call   *%eax
c010709a:	eb 68                	jmp    c0107104 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010709c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010709f:	8b 40 20             	mov    0x20(%eax),%eax
c01070a2:	c1 e8 0c             	shr    $0xc,%eax
c01070a5:	83 c0 01             	add    $0x1,%eax
c01070a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01070ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070af:	89 44 24 08          	mov    %eax,0x8(%esp)
c01070b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070ba:	c7 04 24 70 6e 11 c0 	movl   $0xc0116e70,(%esp)
c01070c1:	e8 9f 92 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01070c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070c9:	8b 40 20             	mov    0x20(%eax),%eax
c01070cc:	c1 e8 0c             	shr    $0xc,%eax
c01070cf:	83 c0 01             	add    $0x1,%eax
c01070d2:	c1 e0 08             	shl    $0x8,%eax
c01070d5:	89 c2                	mov    %eax,%edx
c01070d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070da:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01070dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01070e6:	00 
c01070e7:	89 04 24             	mov    %eax,(%esp)
c01070ea:	e8 fe e0 ff ff       	call   c01051ed <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c01070ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01070f2:	8b 40 0c             	mov    0xc(%eax),%eax
c01070f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01070f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070fc:	89 04 24             	mov    %eax,(%esp)
c01070ff:	e8 02 ef ff ff       	call   c0106006 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107104:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010710b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010710e:	0f 85 9a fe ff ff    	jne    c0106fae <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0107114:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107117:	c9                   	leave  
c0107118:	c3                   	ret    

c0107119 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107119:	55                   	push   %ebp
c010711a:	89 e5                	mov    %esp,%ebp
c010711c:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c010711f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107126:	e8 57 e0 ff ff       	call   c0105182 <alloc_pages>
c010712b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c010712e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107132:	75 24                	jne    c0107158 <swap_in+0x3f>
c0107134:	c7 44 24 0c b0 6e 11 	movl   $0xc0116eb0,0xc(%esp)
c010713b:	c0 
c010713c:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107143:	c0 
c0107144:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c010714b:	00 
c010714c:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107153:	e8 70 9d ff ff       	call   c0100ec8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107158:	8b 45 08             	mov    0x8(%ebp),%eax
c010715b:	8b 40 0c             	mov    0xc(%eax),%eax
c010715e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107165:	00 
c0107166:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107169:	89 54 24 04          	mov    %edx,0x4(%esp)
c010716d:	89 04 24             	mov    %eax,(%esp)
c0107170:	e8 84 e7 ff ff       	call   c01058f9 <get_pte>
c0107175:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0107178:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010717b:	8b 00                	mov    (%eax),%eax
c010717d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107180:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107184:	89 04 24             	mov    %eax,(%esp)
c0107187:	e8 63 7e 00 00       	call   c010efef <swapfs_read>
c010718c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010718f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107193:	74 2a                	je     c01071bf <swap_in+0xa6>
     {
        assert(r!=0);
c0107195:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107199:	75 24                	jne    c01071bf <swap_in+0xa6>
c010719b:	c7 44 24 0c bd 6e 11 	movl   $0xc0116ebd,0xc(%esp)
c01071a2:	c0 
c01071a3:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01071aa:	c0 
c01071ab:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01071b2:	00 
c01071b3:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01071ba:	e8 09 9d ff ff       	call   c0100ec8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01071bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071c2:	8b 00                	mov    (%eax),%eax
c01071c4:	c1 e8 08             	shr    $0x8,%eax
c01071c7:	89 c2                	mov    %eax,%edx
c01071c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01071cc:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071d0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071d4:	c7 04 24 c4 6e 11 c0 	movl   $0xc0116ec4,(%esp)
c01071db:	e8 85 91 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c01071e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01071e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01071e6:	89 10                	mov    %edx,(%eax)
     return 0;
c01071e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01071ed:	c9                   	leave  
c01071ee:	c3                   	ret    

c01071ef <check_content_set>:



static inline void
check_content_set(void)
{
c01071ef:	55                   	push   %ebp
c01071f0:	89 e5                	mov    %esp,%ebp
c01071f2:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01071f5:	b8 00 10 00 00       	mov    $0x1000,%eax
c01071fa:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071fd:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107202:	83 f8 01             	cmp    $0x1,%eax
c0107205:	74 24                	je     c010722b <check_content_set+0x3c>
c0107207:	c7 44 24 0c 02 6f 11 	movl   $0xc0116f02,0xc(%esp)
c010720e:	c0 
c010720f:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107216:	c0 
c0107217:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c010721e:	00 
c010721f:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107226:	e8 9d 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010722b:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107230:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107233:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107238:	83 f8 01             	cmp    $0x1,%eax
c010723b:	74 24                	je     c0107261 <check_content_set+0x72>
c010723d:	c7 44 24 0c 02 6f 11 	movl   $0xc0116f02,0xc(%esp)
c0107244:	c0 
c0107245:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010724c:	c0 
c010724d:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107254:	00 
c0107255:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010725c:	e8 67 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107261:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107266:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107269:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c010726e:	83 f8 02             	cmp    $0x2,%eax
c0107271:	74 24                	je     c0107297 <check_content_set+0xa8>
c0107273:	c7 44 24 0c 11 6f 11 	movl   $0xc0116f11,0xc(%esp)
c010727a:	c0 
c010727b:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107282:	c0 
c0107283:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010728a:	00 
c010728b:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107292:	e8 31 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107297:	b8 10 20 00 00       	mov    $0x2010,%eax
c010729c:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010729f:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c01072a4:	83 f8 02             	cmp    $0x2,%eax
c01072a7:	74 24                	je     c01072cd <check_content_set+0xde>
c01072a9:	c7 44 24 0c 11 6f 11 	movl   $0xc0116f11,0xc(%esp)
c01072b0:	c0 
c01072b1:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01072b8:	c0 
c01072b9:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01072c0:	00 
c01072c1:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01072c8:	e8 fb 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01072cd:	b8 00 30 00 00       	mov    $0x3000,%eax
c01072d2:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01072d5:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c01072da:	83 f8 03             	cmp    $0x3,%eax
c01072dd:	74 24                	je     c0107303 <check_content_set+0x114>
c01072df:	c7 44 24 0c 20 6f 11 	movl   $0xc0116f20,0xc(%esp)
c01072e6:	c0 
c01072e7:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01072ee:	c0 
c01072ef:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01072f6:	00 
c01072f7:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01072fe:	e8 c5 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107303:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107308:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010730b:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107310:	83 f8 03             	cmp    $0x3,%eax
c0107313:	74 24                	je     c0107339 <check_content_set+0x14a>
c0107315:	c7 44 24 0c 20 6f 11 	movl   $0xc0116f20,0xc(%esp)
c010731c:	c0 
c010731d:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107324:	c0 
c0107325:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010732c:	00 
c010732d:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107334:	e8 8f 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107339:	b8 00 40 00 00       	mov    $0x4000,%eax
c010733e:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107341:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107346:	83 f8 04             	cmp    $0x4,%eax
c0107349:	74 24                	je     c010736f <check_content_set+0x180>
c010734b:	c7 44 24 0c 2f 6f 11 	movl   $0xc0116f2f,0xc(%esp)
c0107352:	c0 
c0107353:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010735a:	c0 
c010735b:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107362:	00 
c0107363:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010736a:	e8 59 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010736f:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107374:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107377:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c010737c:	83 f8 04             	cmp    $0x4,%eax
c010737f:	74 24                	je     c01073a5 <check_content_set+0x1b6>
c0107381:	c7 44 24 0c 2f 6f 11 	movl   $0xc0116f2f,0xc(%esp)
c0107388:	c0 
c0107389:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107390:	c0 
c0107391:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0107398:	00 
c0107399:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01073a0:	e8 23 9b ff ff       	call   c0100ec8 <__panic>
}
c01073a5:	c9                   	leave  
c01073a6:	c3                   	ret    

c01073a7 <check_content_access>:

static inline int
check_content_access(void)
{
c01073a7:	55                   	push   %ebp
c01073a8:	89 e5                	mov    %esp,%ebp
c01073aa:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01073ad:	a1 78 0f 15 c0       	mov    0xc0150f78,%eax
c01073b2:	8b 40 1c             	mov    0x1c(%eax),%eax
c01073b5:	ff d0                	call   *%eax
c01073b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01073ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01073bd:	c9                   	leave  
c01073be:	c3                   	ret    

c01073bf <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01073bf:	55                   	push   %ebp
c01073c0:	89 e5                	mov    %esp,%ebp
c01073c2:	53                   	push   %ebx
c01073c3:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01073c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01073cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01073d4:	c7 45 e8 20 41 15 c0 	movl   $0xc0154120,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01073db:	eb 6b                	jmp    c0107448 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c01073dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073e0:	83 e8 10             	sub    $0x10,%eax
c01073e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01073e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073e9:	83 c0 04             	add    $0x4,%eax
c01073ec:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01073f3:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01073f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01073f9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01073fc:	0f a3 10             	bt     %edx,(%eax)
c01073ff:	19 c0                	sbb    %eax,%eax
c0107401:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107404:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107408:	0f 95 c0             	setne  %al
c010740b:	0f b6 c0             	movzbl %al,%eax
c010740e:	85 c0                	test   %eax,%eax
c0107410:	75 24                	jne    c0107436 <check_swap+0x77>
c0107412:	c7 44 24 0c 3e 6f 11 	movl   $0xc0116f3e,0xc(%esp)
c0107419:	c0 
c010741a:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107421:	c0 
c0107422:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107429:	00 
c010742a:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107431:	e8 92 9a ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c0107436:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010743a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010743d:	8b 50 08             	mov    0x8(%eax),%edx
c0107440:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107443:	01 d0                	add    %edx,%eax
c0107445:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107448:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010744b:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010744e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107451:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107454:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107457:	81 7d e8 20 41 15 c0 	cmpl   $0xc0154120,-0x18(%ebp)
c010745e:	0f 85 79 ff ff ff    	jne    c01073dd <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0107464:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0107467:	e8 b3 dd ff ff       	call   c010521f <nr_free_pages>
c010746c:	39 c3                	cmp    %eax,%ebx
c010746e:	74 24                	je     c0107494 <check_swap+0xd5>
c0107470:	c7 44 24 0c 4e 6f 11 	movl   $0xc0116f4e,0xc(%esp)
c0107477:	c0 
c0107478:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010747f:	c0 
c0107480:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107487:	00 
c0107488:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010748f:	e8 34 9a ff ff       	call   c0100ec8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107494:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107497:	89 44 24 08          	mov    %eax,0x8(%esp)
c010749b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010749e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074a2:	c7 04 24 68 6f 11 c0 	movl   $0xc0116f68,(%esp)
c01074a9:	e8 b7 8e ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01074ae:	e8 bc 0a 00 00       	call   c0107f6f <mm_create>
c01074b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c01074b6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01074ba:	75 24                	jne    c01074e0 <check_swap+0x121>
c01074bc:	c7 44 24 0c 8e 6f 11 	movl   $0xc0116f8e,0xc(%esp)
c01074c3:	c0 
c01074c4:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01074cb:	c0 
c01074cc:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c01074d3:	00 
c01074d4:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01074db:	e8 e8 99 ff ff       	call   c0100ec8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01074e0:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c01074e5:	85 c0                	test   %eax,%eax
c01074e7:	74 24                	je     c010750d <check_swap+0x14e>
c01074e9:	c7 44 24 0c 99 6f 11 	movl   $0xc0116f99,0xc(%esp)
c01074f0:	c0 
c01074f1:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01074f8:	c0 
c01074f9:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107500:	00 
c0107501:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107508:	e8 bb 99 ff ff       	call   c0100ec8 <__panic>

     check_mm_struct = mm;
c010750d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107510:	a3 0c 42 15 c0       	mov    %eax,0xc015420c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107515:	8b 15 e4 0e 15 c0    	mov    0xc0150ee4,%edx
c010751b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010751e:	89 50 0c             	mov    %edx,0xc(%eax)
c0107521:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107524:	8b 40 0c             	mov    0xc(%eax),%eax
c0107527:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c010752a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010752d:	8b 00                	mov    (%eax),%eax
c010752f:	85 c0                	test   %eax,%eax
c0107531:	74 24                	je     c0107557 <check_swap+0x198>
c0107533:	c7 44 24 0c b1 6f 11 	movl   $0xc0116fb1,0xc(%esp)
c010753a:	c0 
c010753b:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107542:	c0 
c0107543:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010754a:	00 
c010754b:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107552:	e8 71 99 ff ff       	call   c0100ec8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107557:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010755e:	00 
c010755f:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0107566:	00 
c0107567:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010756e:	e8 a1 0a 00 00       	call   c0108014 <vma_create>
c0107573:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c0107576:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010757a:	75 24                	jne    c01075a0 <check_swap+0x1e1>
c010757c:	c7 44 24 0c bf 6f 11 	movl   $0xc0116fbf,0xc(%esp)
c0107583:	c0 
c0107584:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010758b:	c0 
c010758c:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107593:	00 
c0107594:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010759b:	e8 28 99 ff ff       	call   c0100ec8 <__panic>

     insert_vma_struct(mm, vma);
c01075a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01075a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01075a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075aa:	89 04 24             	mov    %eax,(%esp)
c01075ad:	e8 f2 0b 00 00       	call   c01081a4 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01075b2:	c7 04 24 cc 6f 11 c0 	movl   $0xc0116fcc,(%esp)
c01075b9:	e8 a7 8d ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c01075be:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01075c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075c8:	8b 40 0c             	mov    0xc(%eax),%eax
c01075cb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01075d2:	00 
c01075d3:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01075da:	00 
c01075db:	89 04 24             	mov    %eax,(%esp)
c01075de:	e8 16 e3 ff ff       	call   c01058f9 <get_pte>
c01075e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c01075e6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01075ea:	75 24                	jne    c0107610 <check_swap+0x251>
c01075ec:	c7 44 24 0c 00 70 11 	movl   $0xc0117000,0xc(%esp)
c01075f3:	c0 
c01075f4:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01075fb:	c0 
c01075fc:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107603:	00 
c0107604:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010760b:	e8 b8 98 ff ff       	call   c0100ec8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107610:	c7 04 24 14 70 11 c0 	movl   $0xc0117014,(%esp)
c0107617:	e8 49 8d ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010761c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107623:	e9 a3 00 00 00       	jmp    c01076cb <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0107628:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010762f:	e8 4e db ff ff       	call   c0105182 <alloc_pages>
c0107634:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107637:	89 04 95 40 41 15 c0 	mov    %eax,-0x3feabec0(,%edx,4)
          assert(check_rp[i] != NULL );
c010763e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107641:	8b 04 85 40 41 15 c0 	mov    -0x3feabec0(,%eax,4),%eax
c0107648:	85 c0                	test   %eax,%eax
c010764a:	75 24                	jne    c0107670 <check_swap+0x2b1>
c010764c:	c7 44 24 0c 38 70 11 	movl   $0xc0117038,0xc(%esp)
c0107653:	c0 
c0107654:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010765b:	c0 
c010765c:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0107663:	00 
c0107664:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010766b:	e8 58 98 ff ff       	call   c0100ec8 <__panic>
          assert(!PageProperty(check_rp[i]));
c0107670:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107673:	8b 04 85 40 41 15 c0 	mov    -0x3feabec0(,%eax,4),%eax
c010767a:	83 c0 04             	add    $0x4,%eax
c010767d:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107684:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107687:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010768a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010768d:	0f a3 10             	bt     %edx,(%eax)
c0107690:	19 c0                	sbb    %eax,%eax
c0107692:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107695:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107699:	0f 95 c0             	setne  %al
c010769c:	0f b6 c0             	movzbl %al,%eax
c010769f:	85 c0                	test   %eax,%eax
c01076a1:	74 24                	je     c01076c7 <check_swap+0x308>
c01076a3:	c7 44 24 0c 4c 70 11 	movl   $0xc011704c,0xc(%esp)
c01076aa:	c0 
c01076ab:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01076b2:	c0 
c01076b3:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01076ba:	00 
c01076bb:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01076c2:	e8 01 98 ff ff       	call   c0100ec8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076c7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076cb:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076cf:	0f 8e 53 ff ff ff    	jle    c0107628 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c01076d5:	a1 20 41 15 c0       	mov    0xc0154120,%eax
c01076da:	8b 15 24 41 15 c0    	mov    0xc0154124,%edx
c01076e0:	89 45 98             	mov    %eax,-0x68(%ebp)
c01076e3:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01076e6:	c7 45 a8 20 41 15 c0 	movl   $0xc0154120,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01076ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076f0:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01076f3:	89 50 04             	mov    %edx,0x4(%eax)
c01076f6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076f9:	8b 50 04             	mov    0x4(%eax),%edx
c01076fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076ff:	89 10                	mov    %edx,(%eax)
c0107701:	c7 45 a4 20 41 15 c0 	movl   $0xc0154120,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107708:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010770b:	8b 40 04             	mov    0x4(%eax),%eax
c010770e:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107711:	0f 94 c0             	sete   %al
c0107714:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107717:	85 c0                	test   %eax,%eax
c0107719:	75 24                	jne    c010773f <check_swap+0x380>
c010771b:	c7 44 24 0c 67 70 11 	movl   $0xc0117067,0xc(%esp)
c0107722:	c0 
c0107723:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010772a:	c0 
c010772b:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107732:	00 
c0107733:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010773a:	e8 89 97 ff ff       	call   c0100ec8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010773f:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c0107744:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c0107747:	c7 05 28 41 15 c0 00 	movl   $0x0,0xc0154128
c010774e:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107751:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107758:	eb 1e                	jmp    c0107778 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c010775a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010775d:	8b 04 85 40 41 15 c0 	mov    -0x3feabec0(,%eax,4),%eax
c0107764:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010776b:	00 
c010776c:	89 04 24             	mov    %eax,(%esp)
c010776f:	e8 79 da ff ff       	call   c01051ed <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107774:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107778:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010777c:	7e dc                	jle    c010775a <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c010777e:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c0107783:	83 f8 04             	cmp    $0x4,%eax
c0107786:	74 24                	je     c01077ac <check_swap+0x3ed>
c0107788:	c7 44 24 0c 80 70 11 	movl   $0xc0117080,0xc(%esp)
c010778f:	c0 
c0107790:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107797:	c0 
c0107798:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010779f:	00 
c01077a0:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01077a7:	e8 1c 97 ff ff       	call   c0100ec8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01077ac:	c7 04 24 a4 70 11 c0 	movl   $0xc01170a4,(%esp)
c01077b3:	e8 ad 8b ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01077b8:	c7 05 80 0f 15 c0 00 	movl   $0x0,0xc0150f80
c01077bf:	00 00 00 
     
     check_content_set();
c01077c2:	e8 28 fa ff ff       	call   c01071ef <check_content_set>
     assert( nr_free == 0);         
c01077c7:	a1 28 41 15 c0       	mov    0xc0154128,%eax
c01077cc:	85 c0                	test   %eax,%eax
c01077ce:	74 24                	je     c01077f4 <check_swap+0x435>
c01077d0:	c7 44 24 0c cb 70 11 	movl   $0xc01170cb,0xc(%esp)
c01077d7:	c0 
c01077d8:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01077df:	c0 
c01077e0:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01077e7:	00 
c01077e8:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01077ef:	e8 d4 96 ff ff       	call   c0100ec8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077fb:	eb 26                	jmp    c0107823 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01077fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107800:	c7 04 85 60 41 15 c0 	movl   $0xffffffff,-0x3feabea0(,%eax,4)
c0107807:	ff ff ff ff 
c010780b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010780e:	8b 14 85 60 41 15 c0 	mov    -0x3feabea0(,%eax,4),%edx
c0107815:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107818:	89 14 85 a0 41 15 c0 	mov    %edx,-0x3feabe60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010781f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107823:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107827:	7e d4                	jle    c01077fd <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107829:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107830:	e9 eb 00 00 00       	jmp    c0107920 <check_swap+0x561>
         check_ptep[i]=0;
c0107835:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107838:	c7 04 85 f4 41 15 c0 	movl   $0x0,-0x3feabe0c(,%eax,4)
c010783f:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107843:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107846:	83 c0 01             	add    $0x1,%eax
c0107849:	c1 e0 0c             	shl    $0xc,%eax
c010784c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107853:	00 
c0107854:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107858:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010785b:	89 04 24             	mov    %eax,(%esp)
c010785e:	e8 96 e0 ff ff       	call   c01058f9 <get_pte>
c0107863:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107866:	89 04 95 f4 41 15 c0 	mov    %eax,-0x3feabe0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010786d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107870:	8b 04 85 f4 41 15 c0 	mov    -0x3feabe0c(,%eax,4),%eax
c0107877:	85 c0                	test   %eax,%eax
c0107879:	75 24                	jne    c010789f <check_swap+0x4e0>
c010787b:	c7 44 24 0c d8 70 11 	movl   $0xc01170d8,0xc(%esp)
c0107882:	c0 
c0107883:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c010788a:	c0 
c010788b:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107892:	00 
c0107893:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c010789a:	e8 29 96 ff ff       	call   c0100ec8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c010789f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078a2:	8b 04 85 f4 41 15 c0 	mov    -0x3feabe0c(,%eax,4),%eax
c01078a9:	8b 00                	mov    (%eax),%eax
c01078ab:	89 04 24             	mov    %eax,(%esp)
c01078ae:	e8 87 f5 ff ff       	call   c0106e3a <pte2page>
c01078b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01078b6:	8b 14 95 40 41 15 c0 	mov    -0x3feabec0(,%edx,4),%edx
c01078bd:	39 d0                	cmp    %edx,%eax
c01078bf:	74 24                	je     c01078e5 <check_swap+0x526>
c01078c1:	c7 44 24 0c f0 70 11 	movl   $0xc01170f0,0xc(%esp)
c01078c8:	c0 
c01078c9:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c01078d0:	c0 
c01078d1:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01078d8:	00 
c01078d9:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c01078e0:	e8 e3 95 ff ff       	call   c0100ec8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01078e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078e8:	8b 04 85 f4 41 15 c0 	mov    -0x3feabe0c(,%eax,4),%eax
c01078ef:	8b 00                	mov    (%eax),%eax
c01078f1:	83 e0 01             	and    $0x1,%eax
c01078f4:	85 c0                	test   %eax,%eax
c01078f6:	75 24                	jne    c010791c <check_swap+0x55d>
c01078f8:	c7 44 24 0c 18 71 11 	movl   $0xc0117118,0xc(%esp)
c01078ff:	c0 
c0107900:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107907:	c0 
c0107908:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010790f:	00 
c0107910:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107917:	e8 ac 95 ff ff       	call   c0100ec8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010791c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107920:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107924:	0f 8e 0b ff ff ff    	jle    c0107835 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010792a:	c7 04 24 34 71 11 c0 	movl   $0xc0117134,(%esp)
c0107931:	e8 2f 8a ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107936:	e8 6c fa ff ff       	call   c01073a7 <check_content_access>
c010793b:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c010793e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107942:	74 24                	je     c0107968 <check_swap+0x5a9>
c0107944:	c7 44 24 0c 5a 71 11 	movl   $0xc011715a,0xc(%esp)
c010794b:	c0 
c010794c:	c7 44 24 08 42 6e 11 	movl   $0xc0116e42,0x8(%esp)
c0107953:	c0 
c0107954:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010795b:	00 
c010795c:	c7 04 24 dc 6d 11 c0 	movl   $0xc0116ddc,(%esp)
c0107963:	e8 60 95 ff ff       	call   c0100ec8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107968:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010796f:	eb 1e                	jmp    c010798f <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107971:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107974:	8b 04 85 40 41 15 c0 	mov    -0x3feabec0(,%eax,4),%eax
c010797b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107982:	00 
c0107983:	89 04 24             	mov    %eax,(%esp)
c0107986:	e8 62 d8 ff ff       	call   c01051ed <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010798b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010798f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107993:	7e dc                	jle    c0107971 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107995:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107998:	8b 00                	mov    (%eax),%eax
c010799a:	89 04 24             	mov    %eax,(%esp)
c010799d:	e8 d6 f4 ff ff       	call   c0106e78 <pde2page>
c01079a2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01079a9:	00 
c01079aa:	89 04 24             	mov    %eax,(%esp)
c01079ad:	e8 3b d8 ff ff       	call   c01051ed <free_pages>
     pgdir[0] = 0;
c01079b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01079bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079be:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01079c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079c8:	89 04 24             	mov    %eax,(%esp)
c01079cb:	e8 04 09 00 00       	call   c01082d4 <mm_destroy>
     check_mm_struct = NULL;
c01079d0:	c7 05 0c 42 15 c0 00 	movl   $0x0,0xc015420c
c01079d7:	00 00 00 
     
     nr_free = nr_free_store;
c01079da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01079dd:	a3 28 41 15 c0       	mov    %eax,0xc0154128
     free_list = free_list_store;
c01079e2:	8b 45 98             	mov    -0x68(%ebp),%eax
c01079e5:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01079e8:	a3 20 41 15 c0       	mov    %eax,0xc0154120
c01079ed:	89 15 24 41 15 c0    	mov    %edx,0xc0154124

     
     le = &free_list;
c01079f3:	c7 45 e8 20 41 15 c0 	movl   $0xc0154120,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01079fa:	eb 1d                	jmp    c0107a19 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c01079fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079ff:	83 e8 10             	sub    $0x10,%eax
c0107a02:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107a05:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107a09:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107a0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107a0f:	8b 40 08             	mov    0x8(%eax),%eax
c0107a12:	29 c2                	sub    %eax,%edx
c0107a14:	89 d0                	mov    %edx,%eax
c0107a16:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107a19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a1c:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107a1f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107a22:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107a25:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a28:	81 7d e8 20 41 15 c0 	cmpl   $0xc0154120,-0x18(%ebp)
c0107a2f:	75 cb                	jne    c01079fc <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107a31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a34:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107a3f:	c7 04 24 61 71 11 c0 	movl   $0xc0117161,(%esp)
c0107a46:	e8 1a 89 ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107a4b:	c7 04 24 7b 71 11 c0 	movl   $0xc011717b,(%esp)
c0107a52:	e8 0e 89 ff ff       	call   c0100365 <cprintf>
}
c0107a57:	83 c4 74             	add    $0x74,%esp
c0107a5a:	5b                   	pop    %ebx
c0107a5b:	5d                   	pop    %ebp
c0107a5c:	c3                   	ret    

c0107a5d <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107a5d:	55                   	push   %ebp
c0107a5e:	89 e5                	mov    %esp,%ebp
c0107a60:	83 ec 10             	sub    $0x10,%esp
c0107a63:	c7 45 fc 04 42 15 c0 	movl   $0xc0154204,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107a6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a6d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107a70:	89 50 04             	mov    %edx,0x4(%eax)
c0107a73:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a76:	8b 50 04             	mov    0x4(%eax),%edx
c0107a79:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a7c:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107a7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a81:	c7 40 14 04 42 15 c0 	movl   $0xc0154204,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107a88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a8d:	c9                   	leave  
c0107a8e:	c3                   	ret    

c0107a8f <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a8f:	55                   	push   %ebp
c0107a90:	89 e5                	mov    %esp,%ebp
c0107a92:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a98:	8b 40 14             	mov    0x14(%eax),%eax
c0107a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107aa1:	83 c0 18             	add    $0x18,%eax
c0107aa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107aa7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107aab:	74 06                	je     c0107ab3 <_fifo_map_swappable+0x24>
c0107aad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ab1:	75 24                	jne    c0107ad7 <_fifo_map_swappable+0x48>
c0107ab3:	c7 44 24 0c 94 71 11 	movl   $0xc0117194,0xc(%esp)
c0107aba:	c0 
c0107abb:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107ac2:	c0 
c0107ac3:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107aca:	00 
c0107acb:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107ad2:	e8 f1 93 ff ff       	call   c0100ec8 <__panic>
c0107ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ada:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107add:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ae0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107ae3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107ae9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107aec:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107aef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107af2:	8b 40 04             	mov    0x4(%eax),%eax
c0107af5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107af8:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107afb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107afe:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107b01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107b04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107b07:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b0a:	89 10                	mov    %edx,(%eax)
c0107b0c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107b0f:	8b 10                	mov    (%eax),%edx
c0107b11:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107b14:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107b17:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b1a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b1d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107b20:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b23:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107b26:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107b28:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b2d:	c9                   	leave  
c0107b2e:	c3                   	ret    

c0107b2f <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107b2f:	55                   	push   %ebp
c0107b30:	89 e5                	mov    %esp,%ebp
c0107b32:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b35:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b38:	8b 40 14             	mov    0x14(%eax),%eax
c0107b3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107b3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b42:	75 24                	jne    c0107b68 <_fifo_swap_out_victim+0x39>
c0107b44:	c7 44 24 0c db 71 11 	movl   $0xc01171db,0xc(%esp)
c0107b4b:	c0 
c0107b4c:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107b53:	c0 
c0107b54:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107b5b:	00 
c0107b5c:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107b63:	e8 60 93 ff ff       	call   c0100ec8 <__panic>
     assert(in_tick==0);
c0107b68:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107b6c:	74 24                	je     c0107b92 <_fifo_swap_out_victim+0x63>
c0107b6e:	c7 44 24 0c e8 71 11 	movl   $0xc01171e8,0xc(%esp)
c0107b75:	c0 
c0107b76:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107b7d:	c0 
c0107b7e:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107b85:	00 
c0107b86:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107b8d:	e8 36 93 ff ff       	call   c0100ec8 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b95:	8b 00                	mov    (%eax),%eax
c0107b97:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107ba0:	75 24                	jne    c0107bc6 <_fifo_swap_out_victim+0x97>
c0107ba2:	c7 44 24 0c f3 71 11 	movl   $0xc01171f3,0xc(%esp)
c0107ba9:	c0 
c0107baa:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107bb1:	c0 
c0107bb2:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107bb9:	00 
c0107bba:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107bc1:	e8 02 93 ff ff       	call   c0100ec8 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107bc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bc9:	83 e8 18             	sub    $0x18,%eax
c0107bcc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107bcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107bd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107bd8:	8b 40 04             	mov    0x4(%eax),%eax
c0107bdb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107bde:	8b 12                	mov    (%edx),%edx
c0107be0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107be3:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107be6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107be9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107bec:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107bef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107bf2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107bf5:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107bf7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107bfb:	75 24                	jne    c0107c21 <_fifo_swap_out_victim+0xf2>
c0107bfd:	c7 44 24 0c fc 71 11 	movl   $0xc01171fc,0xc(%esp)
c0107c04:	c0 
c0107c05:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107c0c:	c0 
c0107c0d:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107c14:	00 
c0107c15:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107c1c:	e8 a7 92 ff ff       	call   c0100ec8 <__panic>
     *ptr_page = p;
c0107c21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c24:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107c27:	89 10                	mov    %edx,(%eax)
     return 0;
c0107c29:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c2e:	c9                   	leave  
c0107c2f:	c3                   	ret    

c0107c30 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107c30:	55                   	push   %ebp
c0107c31:	89 e5                	mov    %esp,%ebp
c0107c33:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107c36:	c7 04 24 08 72 11 c0 	movl   $0xc0117208,(%esp)
c0107c3d:	e8 23 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107c42:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107c47:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107c4a:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107c4f:	83 f8 04             	cmp    $0x4,%eax
c0107c52:	74 24                	je     c0107c78 <_fifo_check_swap+0x48>
c0107c54:	c7 44 24 0c 2e 72 11 	movl   $0xc011722e,0xc(%esp)
c0107c5b:	c0 
c0107c5c:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107c63:	c0 
c0107c64:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107c6b:	00 
c0107c6c:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107c73:	e8 50 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c78:	c7 04 24 40 72 11 c0 	movl   $0xc0117240,(%esp)
c0107c7f:	e8 e1 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c84:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c89:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107c8c:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107c91:	83 f8 04             	cmp    $0x4,%eax
c0107c94:	74 24                	je     c0107cba <_fifo_check_swap+0x8a>
c0107c96:	c7 44 24 0c 2e 72 11 	movl   $0xc011722e,0xc(%esp)
c0107c9d:	c0 
c0107c9e:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107ca5:	c0 
c0107ca6:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107cad:	00 
c0107cae:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107cb5:	e8 0e 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107cba:	c7 04 24 68 72 11 c0 	movl   $0xc0117268,(%esp)
c0107cc1:	e8 9f 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107cc6:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107ccb:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107cce:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107cd3:	83 f8 04             	cmp    $0x4,%eax
c0107cd6:	74 24                	je     c0107cfc <_fifo_check_swap+0xcc>
c0107cd8:	c7 44 24 0c 2e 72 11 	movl   $0xc011722e,0xc(%esp)
c0107cdf:	c0 
c0107ce0:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107ce7:	c0 
c0107ce8:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107cef:	00 
c0107cf0:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107cf7:	e8 cc 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107cfc:	c7 04 24 90 72 11 c0 	movl   $0xc0117290,(%esp)
c0107d03:	e8 5d 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d08:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d0d:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107d10:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107d15:	83 f8 04             	cmp    $0x4,%eax
c0107d18:	74 24                	je     c0107d3e <_fifo_check_swap+0x10e>
c0107d1a:	c7 44 24 0c 2e 72 11 	movl   $0xc011722e,0xc(%esp)
c0107d21:	c0 
c0107d22:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107d29:	c0 
c0107d2a:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107d31:	00 
c0107d32:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107d39:	e8 8a 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107d3e:	c7 04 24 b8 72 11 c0 	movl   $0xc01172b8,(%esp)
c0107d45:	e8 1b 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107d4a:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107d4f:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107d52:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107d57:	83 f8 05             	cmp    $0x5,%eax
c0107d5a:	74 24                	je     c0107d80 <_fifo_check_swap+0x150>
c0107d5c:	c7 44 24 0c de 72 11 	movl   $0xc01172de,0xc(%esp)
c0107d63:	c0 
c0107d64:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107d6b:	c0 
c0107d6c:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107d73:	00 
c0107d74:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107d7b:	e8 48 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d80:	c7 04 24 90 72 11 c0 	movl   $0xc0117290,(%esp)
c0107d87:	e8 d9 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d8c:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d91:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d94:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107d99:	83 f8 05             	cmp    $0x5,%eax
c0107d9c:	74 24                	je     c0107dc2 <_fifo_check_swap+0x192>
c0107d9e:	c7 44 24 0c de 72 11 	movl   $0xc01172de,0xc(%esp)
c0107da5:	c0 
c0107da6:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107dad:	c0 
c0107dae:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107db5:	00 
c0107db6:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107dbd:	e8 06 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107dc2:	c7 04 24 40 72 11 c0 	movl   $0xc0117240,(%esp)
c0107dc9:	e8 97 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107dce:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107dd3:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107dd6:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107ddb:	83 f8 06             	cmp    $0x6,%eax
c0107dde:	74 24                	je     c0107e04 <_fifo_check_swap+0x1d4>
c0107de0:	c7 44 24 0c ed 72 11 	movl   $0xc01172ed,0xc(%esp)
c0107de7:	c0 
c0107de8:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107def:	c0 
c0107df0:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107df7:	00 
c0107df8:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107dff:	e8 c4 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e04:	c7 04 24 90 72 11 c0 	movl   $0xc0117290,(%esp)
c0107e0b:	e8 55 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e10:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e15:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107e18:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107e1d:	83 f8 07             	cmp    $0x7,%eax
c0107e20:	74 24                	je     c0107e46 <_fifo_check_swap+0x216>
c0107e22:	c7 44 24 0c fc 72 11 	movl   $0xc01172fc,0xc(%esp)
c0107e29:	c0 
c0107e2a:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107e31:	c0 
c0107e32:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107e39:	00 
c0107e3a:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107e41:	e8 82 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107e46:	c7 04 24 08 72 11 c0 	movl   $0xc0117208,(%esp)
c0107e4d:	e8 13 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107e52:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107e57:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107e5a:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107e5f:	83 f8 08             	cmp    $0x8,%eax
c0107e62:	74 24                	je     c0107e88 <_fifo_check_swap+0x258>
c0107e64:	c7 44 24 0c 0b 73 11 	movl   $0xc011730b,0xc(%esp)
c0107e6b:	c0 
c0107e6c:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107e73:	c0 
c0107e74:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107e7b:	00 
c0107e7c:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107e83:	e8 40 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107e88:	c7 04 24 68 72 11 c0 	movl   $0xc0117268,(%esp)
c0107e8f:	e8 d1 84 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e94:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e99:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e9c:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0107ea1:	83 f8 09             	cmp    $0x9,%eax
c0107ea4:	74 24                	je     c0107eca <_fifo_check_swap+0x29a>
c0107ea6:	c7 44 24 0c 1a 73 11 	movl   $0xc011731a,0xc(%esp)
c0107ead:	c0 
c0107eae:	c7 44 24 08 b2 71 11 	movl   $0xc01171b2,0x8(%esp)
c0107eb5:	c0 
c0107eb6:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107ebd:	00 
c0107ebe:	c7 04 24 c7 71 11 c0 	movl   $0xc01171c7,(%esp)
c0107ec5:	e8 fe 8f ff ff       	call   c0100ec8 <__panic>
    return 0;
c0107eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ecf:	c9                   	leave  
c0107ed0:	c3                   	ret    

c0107ed1 <_fifo_init>:


static int
_fifo_init(void)
{
c0107ed1:	55                   	push   %ebp
c0107ed2:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ed9:	5d                   	pop    %ebp
c0107eda:	c3                   	ret    

c0107edb <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107edb:	55                   	push   %ebp
c0107edc:	89 e5                	mov    %esp,%ebp
    return 0;
c0107ede:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ee3:	5d                   	pop    %ebp
c0107ee4:	c3                   	ret    

c0107ee5 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107ee5:	55                   	push   %ebp
c0107ee6:	89 e5                	mov    %esp,%ebp
c0107ee8:	b8 00 00 00 00       	mov    $0x0,%eax
c0107eed:	5d                   	pop    %ebp
c0107eee:	c3                   	ret    

c0107eef <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107eef:	55                   	push   %ebp
c0107ef0:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ef5:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107ef8:	5d                   	pop    %ebp
c0107ef9:	c3                   	ret    

c0107efa <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107efa:	55                   	push   %ebp
c0107efb:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107efd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f00:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f03:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107f06:	5d                   	pop    %ebp
c0107f07:	c3                   	ret    

c0107f08 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107f08:	55                   	push   %ebp
c0107f09:	89 e5                	mov    %esp,%ebp
c0107f0b:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107f0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f11:	c1 e8 0c             	shr    $0xc,%eax
c0107f14:	89 c2                	mov    %eax,%edx
c0107f16:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c0107f1b:	39 c2                	cmp    %eax,%edx
c0107f1d:	72 1c                	jb     c0107f3b <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107f1f:	c7 44 24 08 3c 73 11 	movl   $0xc011733c,0x8(%esp)
c0107f26:	c0 
c0107f27:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107f2e:	00 
c0107f2f:	c7 04 24 5b 73 11 c0 	movl   $0xc011735b,(%esp)
c0107f36:	e8 8d 8f ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0107f3b:	8b 0d 34 41 15 c0    	mov    0xc0154134,%ecx
c0107f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f44:	c1 e8 0c             	shr    $0xc,%eax
c0107f47:	89 c2                	mov    %eax,%edx
c0107f49:	89 d0                	mov    %edx,%eax
c0107f4b:	c1 e0 03             	shl    $0x3,%eax
c0107f4e:	01 d0                	add    %edx,%eax
c0107f50:	c1 e0 02             	shl    $0x2,%eax
c0107f53:	01 c8                	add    %ecx,%eax
}
c0107f55:	c9                   	leave  
c0107f56:	c3                   	ret    

c0107f57 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107f57:	55                   	push   %ebp
c0107f58:	89 e5                	mov    %esp,%ebp
c0107f5a:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107f5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f65:	89 04 24             	mov    %eax,(%esp)
c0107f68:	e8 9b ff ff ff       	call   c0107f08 <pa2page>
}
c0107f6d:	c9                   	leave  
c0107f6e:	c3                   	ret    

c0107f6f <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107f6f:	55                   	push   %ebp
c0107f70:	89 e5                	mov    %esp,%ebp
c0107f72:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107f75:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107f7c:	e8 7c cd ff ff       	call   c0104cfd <kmalloc>
c0107f81:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107f84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f88:	0f 84 81 00 00 00    	je     c010800f <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f91:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107f94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f97:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107f9a:	89 50 04             	mov    %edx,0x4(%eax)
c0107f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fa0:	8b 50 04             	mov    0x4(%eax),%edx
c0107fa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fa6:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fab:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fbf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107fc6:	a1 6c 0f 15 c0       	mov    0xc0150f6c,%eax
c0107fcb:	85 c0                	test   %eax,%eax
c0107fcd:	74 0d                	je     c0107fdc <mm_create+0x6d>
c0107fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fd2:	89 04 24             	mov    %eax,(%esp)
c0107fd5:	e8 46 ef ff ff       	call   c0106f20 <swap_init_mm>
c0107fda:	eb 0a                	jmp    c0107fe6 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fdf:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107fe6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107fed:	00 
c0107fee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff1:	89 04 24             	mov    %eax,(%esp)
c0107ff4:	e8 01 ff ff ff       	call   c0107efa <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ffc:	83 c0 1c             	add    $0x1c,%eax
c0107fff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108006:	00 
c0108007:	89 04 24             	mov    %eax,(%esp)
c010800a:	e8 80 1b 00 00       	call   c0109b8f <sem_init>
    }    
    return mm;
c010800f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108012:	c9                   	leave  
c0108013:	c3                   	ret    

c0108014 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0108014:	55                   	push   %ebp
c0108015:	89 e5                	mov    %esp,%ebp
c0108017:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c010801a:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0108021:	e8 d7 cc ff ff       	call   c0104cfd <kmalloc>
c0108026:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108029:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010802d:	74 1b                	je     c010804a <vma_create+0x36>
        vma->vm_start = vm_start;
c010802f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108032:	8b 55 08             	mov    0x8(%ebp),%edx
c0108035:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0108038:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010803e:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0108041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108044:	8b 55 10             	mov    0x10(%ebp),%edx
c0108047:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c010804a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010804d:	c9                   	leave  
c010804e:	c3                   	ret    

c010804f <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010804f:	55                   	push   %ebp
c0108050:	89 e5                	mov    %esp,%ebp
c0108052:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0108055:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010805c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108060:	0f 84 95 00 00 00    	je     c01080fb <find_vma+0xac>
        vma = mm->mmap_cache;
c0108066:	8b 45 08             	mov    0x8(%ebp),%eax
c0108069:	8b 40 08             	mov    0x8(%eax),%eax
c010806c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010806f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108073:	74 16                	je     c010808b <find_vma+0x3c>
c0108075:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108078:	8b 40 04             	mov    0x4(%eax),%eax
c010807b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010807e:	77 0b                	ja     c010808b <find_vma+0x3c>
c0108080:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108083:	8b 40 08             	mov    0x8(%eax),%eax
c0108086:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108089:	77 61                	ja     c01080ec <find_vma+0x9d>
                bool found = 0;
c010808b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0108092:	8b 45 08             	mov    0x8(%ebp),%eax
c0108095:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108098:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010809b:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010809e:	eb 28                	jmp    c01080c8 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01080a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080a3:	83 e8 10             	sub    $0x10,%eax
c01080a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01080a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080ac:	8b 40 04             	mov    0x4(%eax),%eax
c01080af:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080b2:	77 14                	ja     c01080c8 <find_vma+0x79>
c01080b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080b7:	8b 40 08             	mov    0x8(%eax),%eax
c01080ba:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080bd:	76 09                	jbe    c01080c8 <find_vma+0x79>
                        found = 1;
c01080bf:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01080c6:	eb 17                	jmp    c01080df <find_vma+0x90>
c01080c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01080ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080d1:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01080d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01080d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01080dd:	75 c1                	jne    c01080a0 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01080df:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01080e3:	75 07                	jne    c01080ec <find_vma+0x9d>
                    vma = NULL;
c01080e5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01080ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080f0:	74 09                	je     c01080fb <find_vma+0xac>
            mm->mmap_cache = vma;
c01080f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01080f5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01080f8:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01080fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01080fe:	c9                   	leave  
c01080ff:	c3                   	ret    

c0108100 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108100:	55                   	push   %ebp
c0108101:	89 e5                	mov    %esp,%ebp
c0108103:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108106:	8b 45 08             	mov    0x8(%ebp),%eax
c0108109:	8b 50 04             	mov    0x4(%eax),%edx
c010810c:	8b 45 08             	mov    0x8(%ebp),%eax
c010810f:	8b 40 08             	mov    0x8(%eax),%eax
c0108112:	39 c2                	cmp    %eax,%edx
c0108114:	72 24                	jb     c010813a <check_vma_overlap+0x3a>
c0108116:	c7 44 24 0c 69 73 11 	movl   $0xc0117369,0xc(%esp)
c010811d:	c0 
c010811e:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108125:	c0 
c0108126:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010812d:	00 
c010812e:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108135:	e8 8e 8d ff ff       	call   c0100ec8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010813a:	8b 45 08             	mov    0x8(%ebp),%eax
c010813d:	8b 50 08             	mov    0x8(%eax),%edx
c0108140:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108143:	8b 40 04             	mov    0x4(%eax),%eax
c0108146:	39 c2                	cmp    %eax,%edx
c0108148:	76 24                	jbe    c010816e <check_vma_overlap+0x6e>
c010814a:	c7 44 24 0c ac 73 11 	movl   $0xc01173ac,0xc(%esp)
c0108151:	c0 
c0108152:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108159:	c0 
c010815a:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0108161:	00 
c0108162:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108169:	e8 5a 8d ff ff       	call   c0100ec8 <__panic>
    assert(next->vm_start < next->vm_end);
c010816e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108171:	8b 50 04             	mov    0x4(%eax),%edx
c0108174:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108177:	8b 40 08             	mov    0x8(%eax),%eax
c010817a:	39 c2                	cmp    %eax,%edx
c010817c:	72 24                	jb     c01081a2 <check_vma_overlap+0xa2>
c010817e:	c7 44 24 0c cb 73 11 	movl   $0xc01173cb,0xc(%esp)
c0108185:	c0 
c0108186:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c010818d:	c0 
c010818e:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108195:	00 
c0108196:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c010819d:	e8 26 8d ff ff       	call   c0100ec8 <__panic>
}
c01081a2:	c9                   	leave  
c01081a3:	c3                   	ret    

c01081a4 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01081a4:	55                   	push   %ebp
c01081a5:	89 e5                	mov    %esp,%ebp
c01081a7:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01081aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ad:	8b 50 04             	mov    0x4(%eax),%edx
c01081b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081b3:	8b 40 08             	mov    0x8(%eax),%eax
c01081b6:	39 c2                	cmp    %eax,%edx
c01081b8:	72 24                	jb     c01081de <insert_vma_struct+0x3a>
c01081ba:	c7 44 24 0c e9 73 11 	movl   $0xc01173e9,0xc(%esp)
c01081c1:	c0 
c01081c2:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01081c9:	c0 
c01081ca:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01081d1:	00 
c01081d2:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c01081d9:	e8 ea 8c ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01081de:	8b 45 08             	mov    0x8(%ebp),%eax
c01081e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01081e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081e7:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01081ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01081f0:	eb 21                	jmp    c0108213 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01081f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081f5:	83 e8 10             	sub    $0x10,%eax
c01081f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01081fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081fe:	8b 50 04             	mov    0x4(%eax),%edx
c0108201:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108204:	8b 40 04             	mov    0x4(%eax),%eax
c0108207:	39 c2                	cmp    %eax,%edx
c0108209:	76 02                	jbe    c010820d <insert_vma_struct+0x69>
                break;
c010820b:	eb 1d                	jmp    c010822a <insert_vma_struct+0x86>
            }
            le_prev = le;
c010820d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108210:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108213:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108216:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108219:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010821c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010821f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108222:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108225:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108228:	75 c8                	jne    c01081f2 <insert_vma_struct+0x4e>
c010822a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010822d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108230:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108233:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108236:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108239:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010823c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010823f:	74 15                	je     c0108256 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108241:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108244:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108247:	8b 45 0c             	mov    0xc(%ebp),%eax
c010824a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010824e:	89 14 24             	mov    %edx,(%esp)
c0108251:	e8 aa fe ff ff       	call   c0108100 <check_vma_overlap>
    }
    if (le_next != list) {
c0108256:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108259:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010825c:	74 15                	je     c0108273 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010825e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108261:	83 e8 10             	sub    $0x10,%eax
c0108264:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108268:	8b 45 0c             	mov    0xc(%ebp),%eax
c010826b:	89 04 24             	mov    %eax,(%esp)
c010826e:	e8 8d fe ff ff       	call   c0108100 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0108273:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108276:	8b 55 08             	mov    0x8(%ebp),%edx
c0108279:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010827b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010827e:	8d 50 10             	lea    0x10(%eax),%edx
c0108281:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108284:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108287:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010828a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010828d:	8b 40 04             	mov    0x4(%eax),%eax
c0108290:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108293:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108296:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108299:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010829c:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010829f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082a2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01082a5:	89 10                	mov    %edx,(%eax)
c01082a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082aa:	8b 10                	mov    (%eax),%edx
c01082ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01082af:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01082b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01082b5:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01082b8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01082bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01082be:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01082c1:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01082c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c6:	8b 40 10             	mov    0x10(%eax),%eax
c01082c9:	8d 50 01             	lea    0x1(%eax),%edx
c01082cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01082cf:	89 50 10             	mov    %edx,0x10(%eax)
}
c01082d2:	c9                   	leave  
c01082d3:	c3                   	ret    

c01082d4 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01082d4:	55                   	push   %ebp
c01082d5:	89 e5                	mov    %esp,%ebp
c01082d7:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01082da:	8b 45 08             	mov    0x8(%ebp),%eax
c01082dd:	89 04 24             	mov    %eax,(%esp)
c01082e0:	e8 0a fc ff ff       	call   c0107eef <mm_count>
c01082e5:	85 c0                	test   %eax,%eax
c01082e7:	74 24                	je     c010830d <mm_destroy+0x39>
c01082e9:	c7 44 24 0c 05 74 11 	movl   $0xc0117405,0xc(%esp)
c01082f0:	c0 
c01082f1:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01082f8:	c0 
c01082f9:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108300:	00 
c0108301:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108308:	e8 bb 8b ff ff       	call   c0100ec8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010830d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108310:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108313:	eb 36                	jmp    c010834b <mm_destroy+0x77>
c0108315:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108318:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010831b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010831e:	8b 40 04             	mov    0x4(%eax),%eax
c0108321:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108324:	8b 12                	mov    (%edx),%edx
c0108326:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108329:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010832c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010832f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108332:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108335:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108338:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010833b:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010833d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108340:	83 e8 10             	sub    $0x10,%eax
c0108343:	89 04 24             	mov    %eax,(%esp)
c0108346:	e8 cd c9 ff ff       	call   c0104d18 <kfree>
c010834b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010834e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108351:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108354:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108357:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010835a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010835d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108360:	75 b3                	jne    c0108315 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108362:	8b 45 08             	mov    0x8(%ebp),%eax
c0108365:	89 04 24             	mov    %eax,(%esp)
c0108368:	e8 ab c9 ff ff       	call   c0104d18 <kfree>
    mm=NULL;
c010836d:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108374:	c9                   	leave  
c0108375:	c3                   	ret    

c0108376 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0108376:	55                   	push   %ebp
c0108377:	89 e5                	mov    %esp,%ebp
c0108379:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c010837c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010837f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108382:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108385:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010838a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010838d:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108394:	8b 45 10             	mov    0x10(%ebp),%eax
c0108397:	8b 55 0c             	mov    0xc(%ebp),%edx
c010839a:	01 c2                	add    %eax,%edx
c010839c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010839f:	01 d0                	add    %edx,%eax
c01083a1:	83 e8 01             	sub    $0x1,%eax
c01083a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01083a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083aa:	ba 00 00 00 00       	mov    $0x0,%edx
c01083af:	f7 75 e8             	divl   -0x18(%ebp)
c01083b2:	89 d0                	mov    %edx,%eax
c01083b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01083b7:	29 c2                	sub    %eax,%edx
c01083b9:	89 d0                	mov    %edx,%eax
c01083bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01083be:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01083c5:	76 11                	jbe    c01083d8 <mm_map+0x62>
c01083c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083ca:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01083cd:	73 09                	jae    c01083d8 <mm_map+0x62>
c01083cf:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01083d6:	76 0a                	jbe    c01083e2 <mm_map+0x6c>
        return -E_INVAL;
c01083d8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01083dd:	e9 ae 00 00 00       	jmp    c0108490 <mm_map+0x11a>
    }

    assert(mm != NULL);
c01083e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01083e6:	75 24                	jne    c010840c <mm_map+0x96>
c01083e8:	c7 44 24 0c 17 74 11 	movl   $0xc0117417,0xc(%esp)
c01083ef:	c0 
c01083f0:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01083f7:	c0 
c01083f8:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01083ff:	00 
c0108400:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108407:	e8 bc 8a ff ff       	call   c0100ec8 <__panic>

    int ret = -E_INVAL;
c010840c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108413:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108416:	89 44 24 04          	mov    %eax,0x4(%esp)
c010841a:	8b 45 08             	mov    0x8(%ebp),%eax
c010841d:	89 04 24             	mov    %eax,(%esp)
c0108420:	e8 2a fc ff ff       	call   c010804f <find_vma>
c0108425:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108428:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010842c:	74 0d                	je     c010843b <mm_map+0xc5>
c010842e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108431:	8b 40 04             	mov    0x4(%eax),%eax
c0108434:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108437:	73 02                	jae    c010843b <mm_map+0xc5>
        goto out;
c0108439:	eb 52                	jmp    c010848d <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c010843b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108442:	8b 45 14             	mov    0x14(%ebp),%eax
c0108445:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108449:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010844c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108450:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108453:	89 04 24             	mov    %eax,(%esp)
c0108456:	e8 b9 fb ff ff       	call   c0108014 <vma_create>
c010845b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010845e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108462:	75 02                	jne    c0108466 <mm_map+0xf0>
        goto out;
c0108464:	eb 27                	jmp    c010848d <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0108466:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108469:	89 44 24 04          	mov    %eax,0x4(%esp)
c010846d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108470:	89 04 24             	mov    %eax,(%esp)
c0108473:	e8 2c fd ff ff       	call   c01081a4 <insert_vma_struct>
    if (vma_store != NULL) {
c0108478:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010847c:	74 08                	je     c0108486 <mm_map+0x110>
        *vma_store = vma;
c010847e:	8b 45 18             	mov    0x18(%ebp),%eax
c0108481:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108484:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108486:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c010848d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108490:	c9                   	leave  
c0108491:	c3                   	ret    

c0108492 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108492:	55                   	push   %ebp
c0108493:	89 e5                	mov    %esp,%ebp
c0108495:	56                   	push   %esi
c0108496:	53                   	push   %ebx
c0108497:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010849a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010849e:	74 06                	je     c01084a6 <dup_mmap+0x14>
c01084a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01084a4:	75 24                	jne    c01084ca <dup_mmap+0x38>
c01084a6:	c7 44 24 0c 22 74 11 	movl   $0xc0117422,0xc(%esp)
c01084ad:	c0 
c01084ae:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01084b5:	c0 
c01084b6:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01084bd:	00 
c01084be:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c01084c5:	e8 fe 89 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01084ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01084d6:	e9 92 00 00 00       	jmp    c010856d <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01084db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084de:	83 e8 10             	sub    $0x10,%eax
c01084e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01084e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e7:	8b 48 0c             	mov    0xc(%eax),%ecx
c01084ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084ed:	8b 50 08             	mov    0x8(%eax),%edx
c01084f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084f3:	8b 40 04             	mov    0x4(%eax),%eax
c01084f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084fe:	89 04 24             	mov    %eax,(%esp)
c0108501:	e8 0e fb ff ff       	call   c0108014 <vma_create>
c0108506:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108509:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010850d:	75 07                	jne    c0108516 <dup_mmap+0x84>
            return -E_NO_MEM;
c010850f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108514:	eb 76                	jmp    c010858c <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108516:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108519:	89 44 24 04          	mov    %eax,0x4(%esp)
c010851d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108520:	89 04 24             	mov    %eax,(%esp)
c0108523:	e8 7c fc ff ff       	call   c01081a4 <insert_vma_struct>

        bool share = 0;
c0108528:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010852f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108532:	8b 58 08             	mov    0x8(%eax),%ebx
c0108535:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108538:	8b 48 04             	mov    0x4(%eax),%ecx
c010853b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010853e:	8b 50 0c             	mov    0xc(%eax),%edx
c0108541:	8b 45 08             	mov    0x8(%ebp),%eax
c0108544:	8b 40 0c             	mov    0xc(%eax),%eax
c0108547:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010854a:	89 74 24 10          	mov    %esi,0x10(%esp)
c010854e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108552:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108556:	89 54 24 04          	mov    %edx,0x4(%esp)
c010855a:	89 04 24             	mov    %eax,(%esp)
c010855d:	e8 84 d7 ff ff       	call   c0105ce6 <copy_range>
c0108562:	85 c0                	test   %eax,%eax
c0108564:	74 07                	je     c010856d <dup_mmap+0xdb>
            return -E_NO_MEM;
c0108566:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010856b:	eb 1f                	jmp    c010858c <dup_mmap+0xfa>
c010856d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108570:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108573:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108576:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108578:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010857b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010857e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108581:	0f 85 54 ff ff ff    	jne    c01084db <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0108587:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010858c:	83 c4 40             	add    $0x40,%esp
c010858f:	5b                   	pop    %ebx
c0108590:	5e                   	pop    %esi
c0108591:	5d                   	pop    %ebp
c0108592:	c3                   	ret    

c0108593 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108593:	55                   	push   %ebp
c0108594:	89 e5                	mov    %esp,%ebp
c0108596:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108599:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010859d:	74 0f                	je     c01085ae <exit_mmap+0x1b>
c010859f:	8b 45 08             	mov    0x8(%ebp),%eax
c01085a2:	89 04 24             	mov    %eax,(%esp)
c01085a5:	e8 45 f9 ff ff       	call   c0107eef <mm_count>
c01085aa:	85 c0                	test   %eax,%eax
c01085ac:	74 24                	je     c01085d2 <exit_mmap+0x3f>
c01085ae:	c7 44 24 0c 40 74 11 	movl   $0xc0117440,0xc(%esp)
c01085b5:	c0 
c01085b6:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01085bd:	c0 
c01085be:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01085c5:	00 
c01085c6:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c01085cd:	e8 f6 88 ff ff       	call   c0100ec8 <__panic>
    pde_t *pgdir = mm->pgdir;
c01085d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01085d5:	8b 40 0c             	mov    0xc(%eax),%eax
c01085d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01085db:	8b 45 08             	mov    0x8(%ebp),%eax
c01085de:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01085e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01085e7:	eb 28                	jmp    c0108611 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01085e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085ec:	83 e8 10             	sub    $0x10,%eax
c01085ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01085f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085f5:	8b 50 08             	mov    0x8(%eax),%edx
c01085f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085fb:	8b 40 04             	mov    0x4(%eax),%eax
c01085fe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108602:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108606:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108609:	89 04 24             	mov    %eax,(%esp)
c010860c:	e8 da d4 ff ff       	call   c0105aeb <unmap_range>
c0108611:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108614:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108617:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010861a:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010861d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108620:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108623:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108626:	75 c1                	jne    c01085e9 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108628:	eb 28                	jmp    c0108652 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010862a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010862d:	83 e8 10             	sub    $0x10,%eax
c0108630:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108633:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108636:	8b 50 08             	mov    0x8(%eax),%edx
c0108639:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010863c:	8b 40 04             	mov    0x4(%eax),%eax
c010863f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108643:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108647:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010864a:	89 04 24             	mov    %eax,(%esp)
c010864d:	e8 8d d5 ff ff       	call   c0105bdf <exit_range>
c0108652:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108655:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108658:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010865b:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010865e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108661:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108664:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108667:	75 c1                	jne    c010862a <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108669:	c9                   	leave  
c010866a:	c3                   	ret    

c010866b <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c010866b:	55                   	push   %ebp
c010866c:	89 e5                	mov    %esp,%ebp
c010866e:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108671:	8b 45 10             	mov    0x10(%ebp),%eax
c0108674:	8b 55 18             	mov    0x18(%ebp),%edx
c0108677:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010867b:	8b 55 14             	mov    0x14(%ebp),%edx
c010867e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108682:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108686:	8b 45 08             	mov    0x8(%ebp),%eax
c0108689:	89 04 24             	mov    %eax,(%esp)
c010868c:	e8 dc 09 00 00       	call   c010906d <user_mem_check>
c0108691:	85 c0                	test   %eax,%eax
c0108693:	75 07                	jne    c010869c <copy_from_user+0x31>
        return 0;
c0108695:	b8 00 00 00 00       	mov    $0x0,%eax
c010869a:	eb 1e                	jmp    c01086ba <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c010869c:	8b 45 14             	mov    0x14(%ebp),%eax
c010869f:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01086a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086ad:	89 04 24             	mov    %eax,(%esp)
c01086b0:	e8 7d d1 00 00       	call   c0115832 <memcpy>
    return 1;
c01086b5:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01086ba:	c9                   	leave  
c01086bb:	c3                   	ret    

c01086bc <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01086bc:	55                   	push   %ebp
c01086bd:	89 e5                	mov    %esp,%ebp
c01086bf:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01086c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086c5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01086cc:	00 
c01086cd:	8b 55 14             	mov    0x14(%ebp),%edx
c01086d0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01086db:	89 04 24             	mov    %eax,(%esp)
c01086de:	e8 8a 09 00 00       	call   c010906d <user_mem_check>
c01086e3:	85 c0                	test   %eax,%eax
c01086e5:	75 07                	jne    c01086ee <copy_to_user+0x32>
        return 0;
c01086e7:	b8 00 00 00 00       	mov    $0x0,%eax
c01086ec:	eb 1e                	jmp    c010870c <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01086ee:	8b 45 14             	mov    0x14(%ebp),%eax
c01086f1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01086f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086ff:	89 04 24             	mov    %eax,(%esp)
c0108702:	e8 2b d1 00 00       	call   c0115832 <memcpy>
    return 1;
c0108707:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010870c:	c9                   	leave  
c010870d:	c3                   	ret    

c010870e <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010870e:	55                   	push   %ebp
c010870f:	89 e5                	mov    %esp,%ebp
c0108711:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108714:	e8 02 00 00 00       	call   c010871b <check_vmm>
}
c0108719:	c9                   	leave  
c010871a:	c3                   	ret    

c010871b <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010871b:	55                   	push   %ebp
c010871c:	89 e5                	mov    %esp,%ebp
c010871e:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108721:	e8 f9 ca ff ff       	call   c010521f <nr_free_pages>
c0108726:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108729:	e8 13 00 00 00       	call   c0108741 <check_vma_struct>
    check_pgfault();
c010872e:	e8 a7 04 00 00       	call   c0108bda <check_pgfault>

    //assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0108733:	c7 04 24 60 74 11 c0 	movl   $0xc0117460,(%esp)
c010873a:	e8 26 7c ff ff       	call   c0100365 <cprintf>
}
c010873f:	c9                   	leave  
c0108740:	c3                   	ret    

c0108741 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108741:	55                   	push   %ebp
c0108742:	89 e5                	mov    %esp,%ebp
c0108744:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108747:	e8 d3 ca ff ff       	call   c010521f <nr_free_pages>
c010874c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c010874f:	e8 1b f8 ff ff       	call   c0107f6f <mm_create>
c0108754:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108757:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010875b:	75 24                	jne    c0108781 <check_vma_struct+0x40>
c010875d:	c7 44 24 0c 17 74 11 	movl   $0xc0117417,0xc(%esp)
c0108764:	c0 
c0108765:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c010876c:	c0 
c010876d:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0108774:	00 
c0108775:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c010877c:	e8 47 87 ff ff       	call   c0100ec8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108781:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108788:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010878b:	89 d0                	mov    %edx,%eax
c010878d:	c1 e0 02             	shl    $0x2,%eax
c0108790:	01 d0                	add    %edx,%eax
c0108792:	01 c0                	add    %eax,%eax
c0108794:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108797:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010879a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010879d:	eb 70                	jmp    c010880f <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010879f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087a2:	89 d0                	mov    %edx,%eax
c01087a4:	c1 e0 02             	shl    $0x2,%eax
c01087a7:	01 d0                	add    %edx,%eax
c01087a9:	83 c0 02             	add    $0x2,%eax
c01087ac:	89 c1                	mov    %eax,%ecx
c01087ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087b1:	89 d0                	mov    %edx,%eax
c01087b3:	c1 e0 02             	shl    $0x2,%eax
c01087b6:	01 d0                	add    %edx,%eax
c01087b8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01087bf:	00 
c01087c0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01087c4:	89 04 24             	mov    %eax,(%esp)
c01087c7:	e8 48 f8 ff ff       	call   c0108014 <vma_create>
c01087cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01087cf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01087d3:	75 24                	jne    c01087f9 <check_vma_struct+0xb8>
c01087d5:	c7 44 24 0c 78 74 11 	movl   $0xc0117478,0xc(%esp)
c01087dc:	c0 
c01087dd:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01087e4:	c0 
c01087e5:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c01087ec:	00 
c01087ed:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c01087f4:	e8 cf 86 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c01087f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01087fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108800:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108803:	89 04 24             	mov    %eax,(%esp)
c0108806:	e8 99 f9 ff ff       	call   c01081a4 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c010880b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010880f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108813:	7f 8a                	jg     c010879f <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108815:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108818:	83 c0 01             	add    $0x1,%eax
c010881b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010881e:	eb 70                	jmp    c0108890 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108820:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108823:	89 d0                	mov    %edx,%eax
c0108825:	c1 e0 02             	shl    $0x2,%eax
c0108828:	01 d0                	add    %edx,%eax
c010882a:	83 c0 02             	add    $0x2,%eax
c010882d:	89 c1                	mov    %eax,%ecx
c010882f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108832:	89 d0                	mov    %edx,%eax
c0108834:	c1 e0 02             	shl    $0x2,%eax
c0108837:	01 d0                	add    %edx,%eax
c0108839:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108840:	00 
c0108841:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108845:	89 04 24             	mov    %eax,(%esp)
c0108848:	e8 c7 f7 ff ff       	call   c0108014 <vma_create>
c010884d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108850:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108854:	75 24                	jne    c010887a <check_vma_struct+0x139>
c0108856:	c7 44 24 0c 78 74 11 	movl   $0xc0117478,0xc(%esp)
c010885d:	c0 
c010885e:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108865:	c0 
c0108866:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c010886d:	00 
c010886e:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108875:	e8 4e 86 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c010887a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010887d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108881:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108884:	89 04 24             	mov    %eax,(%esp)
c0108887:	e8 18 f9 ff ff       	call   c01081a4 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010888c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108890:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108893:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108896:	7e 88                	jle    c0108820 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108898:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010889b:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010889e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01088a1:	8b 40 04             	mov    0x4(%eax),%eax
c01088a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01088a7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01088ae:	e9 97 00 00 00       	jmp    c010894a <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01088b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01088b9:	75 24                	jne    c01088df <check_vma_struct+0x19e>
c01088bb:	c7 44 24 0c 84 74 11 	movl   $0xc0117484,0xc(%esp)
c01088c2:	c0 
c01088c3:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01088ca:	c0 
c01088cb:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c01088d2:	00 
c01088d3:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c01088da:	e8 e9 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01088df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088e2:	83 e8 10             	sub    $0x10,%eax
c01088e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01088e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088eb:	8b 48 04             	mov    0x4(%eax),%ecx
c01088ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088f1:	89 d0                	mov    %edx,%eax
c01088f3:	c1 e0 02             	shl    $0x2,%eax
c01088f6:	01 d0                	add    %edx,%eax
c01088f8:	39 c1                	cmp    %eax,%ecx
c01088fa:	75 17                	jne    c0108913 <check_vma_struct+0x1d2>
c01088fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088ff:	8b 48 08             	mov    0x8(%eax),%ecx
c0108902:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108905:	89 d0                	mov    %edx,%eax
c0108907:	c1 e0 02             	shl    $0x2,%eax
c010890a:	01 d0                	add    %edx,%eax
c010890c:	83 c0 02             	add    $0x2,%eax
c010890f:	39 c1                	cmp    %eax,%ecx
c0108911:	74 24                	je     c0108937 <check_vma_struct+0x1f6>
c0108913:	c7 44 24 0c 9c 74 11 	movl   $0xc011749c,0xc(%esp)
c010891a:	c0 
c010891b:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108922:	c0 
c0108923:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010892a:	00 
c010892b:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108932:	e8 91 85 ff ff       	call   c0100ec8 <__panic>
c0108937:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010893a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010893d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108940:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108943:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108946:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010894a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010894d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108950:	0f 8e 5d ff ff ff    	jle    c01088b3 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108956:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c010895d:	e9 cd 01 00 00       	jmp    c0108b2f <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108962:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108965:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108969:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010896c:	89 04 24             	mov    %eax,(%esp)
c010896f:	e8 db f6 ff ff       	call   c010804f <find_vma>
c0108974:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108977:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010897b:	75 24                	jne    c01089a1 <check_vma_struct+0x260>
c010897d:	c7 44 24 0c d1 74 11 	movl   $0xc01174d1,0xc(%esp)
c0108984:	c0 
c0108985:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c010898c:	c0 
c010898d:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108994:	00 
c0108995:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c010899c:	e8 27 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01089a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a4:	83 c0 01             	add    $0x1,%eax
c01089a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089ae:	89 04 24             	mov    %eax,(%esp)
c01089b1:	e8 99 f6 ff ff       	call   c010804f <find_vma>
c01089b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01089b9:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01089bd:	75 24                	jne    c01089e3 <check_vma_struct+0x2a2>
c01089bf:	c7 44 24 0c de 74 11 	movl   $0xc01174de,0xc(%esp)
c01089c6:	c0 
c01089c7:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c01089ce:	c0 
c01089cf:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c01089d6:	00 
c01089d7:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c01089de:	e8 e5 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01089e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089e6:	83 c0 02             	add    $0x2,%eax
c01089e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089f0:	89 04 24             	mov    %eax,(%esp)
c01089f3:	e8 57 f6 ff ff       	call   c010804f <find_vma>
c01089f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01089fb:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01089ff:	74 24                	je     c0108a25 <check_vma_struct+0x2e4>
c0108a01:	c7 44 24 0c eb 74 11 	movl   $0xc01174eb,0xc(%esp)
c0108a08:	c0 
c0108a09:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108a10:	c0 
c0108a11:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108a18:	00 
c0108a19:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108a20:	e8 a3 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108a25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a28:	83 c0 03             	add    $0x3,%eax
c0108a2b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a32:	89 04 24             	mov    %eax,(%esp)
c0108a35:	e8 15 f6 ff ff       	call   c010804f <find_vma>
c0108a3a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108a3d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108a41:	74 24                	je     c0108a67 <check_vma_struct+0x326>
c0108a43:	c7 44 24 0c f8 74 11 	movl   $0xc01174f8,0xc(%esp)
c0108a4a:	c0 
c0108a4b:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108a52:	c0 
c0108a53:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108a5a:	00 
c0108a5b:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108a62:	e8 61 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a6a:	83 c0 04             	add    $0x4,%eax
c0108a6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a71:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a74:	89 04 24             	mov    %eax,(%esp)
c0108a77:	e8 d3 f5 ff ff       	call   c010804f <find_vma>
c0108a7c:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108a7f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108a83:	74 24                	je     c0108aa9 <check_vma_struct+0x368>
c0108a85:	c7 44 24 0c 05 75 11 	movl   $0xc0117505,0xc(%esp)
c0108a8c:	c0 
c0108a8d:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108a94:	c0 
c0108a95:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108a9c:	00 
c0108a9d:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108aa4:	e8 1f 84 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108aa9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108aac:	8b 50 04             	mov    0x4(%eax),%edx
c0108aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ab2:	39 c2                	cmp    %eax,%edx
c0108ab4:	75 10                	jne    c0108ac6 <check_vma_struct+0x385>
c0108ab6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108ab9:	8b 50 08             	mov    0x8(%eax),%edx
c0108abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108abf:	83 c0 02             	add    $0x2,%eax
c0108ac2:	39 c2                	cmp    %eax,%edx
c0108ac4:	74 24                	je     c0108aea <check_vma_struct+0x3a9>
c0108ac6:	c7 44 24 0c 14 75 11 	movl   $0xc0117514,0xc(%esp)
c0108acd:	c0 
c0108ace:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108ad5:	c0 
c0108ad6:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0108add:	00 
c0108ade:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108ae5:	e8 de 83 ff ff       	call   c0100ec8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108aea:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108aed:	8b 50 04             	mov    0x4(%eax),%edx
c0108af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108af3:	39 c2                	cmp    %eax,%edx
c0108af5:	75 10                	jne    c0108b07 <check_vma_struct+0x3c6>
c0108af7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108afa:	8b 50 08             	mov    0x8(%eax),%edx
c0108afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b00:	83 c0 02             	add    $0x2,%eax
c0108b03:	39 c2                	cmp    %eax,%edx
c0108b05:	74 24                	je     c0108b2b <check_vma_struct+0x3ea>
c0108b07:	c7 44 24 0c 44 75 11 	movl   $0xc0117544,0xc(%esp)
c0108b0e:	c0 
c0108b0f:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108b16:	c0 
c0108b17:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0108b1e:	00 
c0108b1f:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108b26:	e8 9d 83 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108b2b:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108b2f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b32:	89 d0                	mov    %edx,%eax
c0108b34:	c1 e0 02             	shl    $0x2,%eax
c0108b37:	01 d0                	add    %edx,%eax
c0108b39:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b3c:	0f 8d 20 fe ff ff    	jge    c0108962 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b42:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108b49:	eb 70                	jmp    c0108bbb <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b52:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b55:	89 04 24             	mov    %eax,(%esp)
c0108b58:	e8 f2 f4 ff ff       	call   c010804f <find_vma>
c0108b5d:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108b60:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b64:	74 27                	je     c0108b8d <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108b66:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b69:	8b 50 08             	mov    0x8(%eax),%edx
c0108b6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108b6f:	8b 40 04             	mov    0x4(%eax),%eax
c0108b72:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108b76:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b81:	c7 04 24 74 75 11 c0 	movl   $0xc0117574,(%esp)
c0108b88:	e8 d8 77 ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108b8d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b91:	74 24                	je     c0108bb7 <check_vma_struct+0x476>
c0108b93:	c7 44 24 0c 99 75 11 	movl   $0xc0117599,0xc(%esp)
c0108b9a:	c0 
c0108b9b:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108ba2:	c0 
c0108ba3:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0108baa:	00 
c0108bab:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108bb2:	e8 11 83 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108bb7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108bbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108bbf:	79 8a                	jns    c0108b4b <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108bc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bc4:	89 04 24             	mov    %eax,(%esp)
c0108bc7:	e8 08 f7 ff ff       	call   c01082d4 <mm_destroy>

  //  assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0108bcc:	c7 04 24 b0 75 11 c0 	movl   $0xc01175b0,(%esp)
c0108bd3:	e8 8d 77 ff ff       	call   c0100365 <cprintf>
}
c0108bd8:	c9                   	leave  
c0108bd9:	c3                   	ret    

c0108bda <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108bda:	55                   	push   %ebp
c0108bdb:	89 e5                	mov    %esp,%ebp
c0108bdd:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108be0:	e8 3a c6 ff ff       	call   c010521f <nr_free_pages>
c0108be5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108be8:	e8 82 f3 ff ff       	call   c0107f6f <mm_create>
c0108bed:	a3 0c 42 15 c0       	mov    %eax,0xc015420c
    assert(check_mm_struct != NULL);
c0108bf2:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c0108bf7:	85 c0                	test   %eax,%eax
c0108bf9:	75 24                	jne    c0108c1f <check_pgfault+0x45>
c0108bfb:	c7 44 24 0c cf 75 11 	movl   $0xc01175cf,0xc(%esp)
c0108c02:	c0 
c0108c03:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108c0a:	c0 
c0108c0b:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108c12:	00 
c0108c13:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108c1a:	e8 a9 82 ff ff       	call   c0100ec8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108c1f:	a1 0c 42 15 c0       	mov    0xc015420c,%eax
c0108c24:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108c27:	8b 15 e4 0e 15 c0    	mov    0xc0150ee4,%edx
c0108c2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c30:	89 50 0c             	mov    %edx,0xc(%eax)
c0108c33:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c36:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108c3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c3f:	8b 00                	mov    (%eax),%eax
c0108c41:	85 c0                	test   %eax,%eax
c0108c43:	74 24                	je     c0108c69 <check_pgfault+0x8f>
c0108c45:	c7 44 24 0c e7 75 11 	movl   $0xc01175e7,0xc(%esp)
c0108c4c:	c0 
c0108c4d:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108c54:	c0 
c0108c55:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c0108c5c:	00 
c0108c5d:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108c64:	e8 5f 82 ff ff       	call   c0100ec8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108c69:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108c70:	00 
c0108c71:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108c78:	00 
c0108c79:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108c80:	e8 8f f3 ff ff       	call   c0108014 <vma_create>
c0108c85:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108c88:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108c8c:	75 24                	jne    c0108cb2 <check_pgfault+0xd8>
c0108c8e:	c7 44 24 0c 78 74 11 	movl   $0xc0117478,0xc(%esp)
c0108c95:	c0 
c0108c96:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108c9d:	c0 
c0108c9e:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c0108ca5:	00 
c0108ca6:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108cad:	e8 16 82 ff ff       	call   c0100ec8 <__panic>

    insert_vma_struct(mm, vma);
c0108cb2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108cb5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cbc:	89 04 24             	mov    %eax,(%esp)
c0108cbf:	e8 e0 f4 ff ff       	call   c01081a4 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108cc4:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108ccb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cce:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cd5:	89 04 24             	mov    %eax,(%esp)
c0108cd8:	e8 72 f3 ff ff       	call   c010804f <find_vma>
c0108cdd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108ce0:	74 24                	je     c0108d06 <check_pgfault+0x12c>
c0108ce2:	c7 44 24 0c f5 75 11 	movl   $0xc01175f5,0xc(%esp)
c0108ce9:	c0 
c0108cea:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108cf1:	c0 
c0108cf2:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c0108cf9:	00 
c0108cfa:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108d01:	e8 c2 81 ff ff       	call   c0100ec8 <__panic>

    int i, sum = 0;
c0108d06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108d0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d14:	eb 17                	jmp    c0108d2d <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108d16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d19:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d1c:	01 d0                	add    %edx,%eax
c0108d1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d21:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108d23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d26:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108d29:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d2d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d31:	7e e3                	jle    c0108d16 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d3a:	eb 15                	jmp    c0108d51 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108d3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d42:	01 d0                	add    %edx,%eax
c0108d44:	0f b6 00             	movzbl (%eax),%eax
c0108d47:	0f be c0             	movsbl %al,%eax
c0108d4a:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d4d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d51:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d55:	7e e5                	jle    c0108d3c <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108d57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108d5b:	74 24                	je     c0108d81 <check_pgfault+0x1a7>
c0108d5d:	c7 44 24 0c 0f 76 11 	movl   $0xc011760f,0xc(%esp)
c0108d64:	c0 
c0108d65:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108d6c:	c0 
c0108d6d:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c0108d74:	00 
c0108d75:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108d7c:	e8 47 81 ff ff       	call   c0100ec8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108d81:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d84:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108d87:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108d8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108d8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d96:	89 04 24             	mov    %eax,(%esp)
c0108d99:	e8 6b d1 ff ff       	call   c0105f09 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108d9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108da1:	8b 00                	mov    (%eax),%eax
c0108da3:	89 04 24             	mov    %eax,(%esp)
c0108da6:	e8 ac f1 ff ff       	call   c0107f57 <pde2page>
c0108dab:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108db2:	00 
c0108db3:	89 04 24             	mov    %eax,(%esp)
c0108db6:	e8 32 c4 ff ff       	call   c01051ed <free_pages>
    pgdir[0] = 0;
c0108dbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108dbe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108dc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dc7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108dce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108dd1:	89 04 24             	mov    %eax,(%esp)
c0108dd4:	e8 fb f4 ff ff       	call   c01082d4 <mm_destroy>
    check_mm_struct = NULL;
c0108dd9:	c7 05 0c 42 15 c0 00 	movl   $0x0,0xc015420c
c0108de0:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108de3:	e8 37 c4 ff ff       	call   c010521f <nr_free_pages>
c0108de8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108deb:	74 24                	je     c0108e11 <check_pgfault+0x237>
c0108ded:	c7 44 24 0c 18 76 11 	movl   $0xc0117618,0xc(%esp)
c0108df4:	c0 
c0108df5:	c7 44 24 08 87 73 11 	movl   $0xc0117387,0x8(%esp)
c0108dfc:	c0 
c0108dfd:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c0108e04:	00 
c0108e05:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108e0c:	e8 b7 80 ff ff       	call   c0100ec8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108e11:	c7 04 24 3f 76 11 c0 	movl   $0xc011763f,(%esp)
c0108e18:	e8 48 75 ff ff       	call   c0100365 <cprintf>
}
c0108e1d:	c9                   	leave  
c0108e1e:	c3                   	ret    

c0108e1f <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108e1f:	55                   	push   %ebp
c0108e20:	89 e5                	mov    %esp,%ebp
c0108e22:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108e25:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108e2c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e36:	89 04 24             	mov    %eax,(%esp)
c0108e39:	e8 11 f2 ff ff       	call   c010804f <find_vma>
c0108e3e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108e41:	a1 80 0f 15 c0       	mov    0xc0150f80,%eax
c0108e46:	83 c0 01             	add    $0x1,%eax
c0108e49:	a3 80 0f 15 c0       	mov    %eax,0xc0150f80
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108e4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108e52:	74 0b                	je     c0108e5f <do_pgfault+0x40>
c0108e54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e57:	8b 40 04             	mov    0x4(%eax),%eax
c0108e5a:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108e5d:	76 18                	jbe    c0108e77 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108e5f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e62:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e66:	c7 04 24 5c 76 11 c0 	movl   $0xc011765c,(%esp)
c0108e6d:	e8 f3 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e72:	e9 f1 01 00 00       	jmp    c0109068 <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c0108e77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e7a:	83 e0 03             	and    $0x3,%eax
c0108e7d:	85 c0                	test   %eax,%eax
c0108e7f:	74 36                	je     c0108eb7 <do_pgfault+0x98>
c0108e81:	83 f8 01             	cmp    $0x1,%eax
c0108e84:	74 20                	je     c0108ea6 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108e86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e89:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e8c:	83 e0 02             	and    $0x2,%eax
c0108e8f:	85 c0                	test   %eax,%eax
c0108e91:	75 11                	jne    c0108ea4 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108e93:	c7 04 24 8c 76 11 c0 	movl   $0xc011768c,(%esp)
c0108e9a:	e8 c6 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108e9f:	e9 c4 01 00 00       	jmp    c0109068 <do_pgfault+0x249>
        }
        break;
c0108ea4:	eb 2f                	jmp    c0108ed5 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108ea6:	c7 04 24 ec 76 11 c0 	movl   $0xc01176ec,(%esp)
c0108ead:	e8 b3 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108eb2:	e9 b1 01 00 00       	jmp    c0109068 <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108eb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108eba:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ebd:	83 e0 05             	and    $0x5,%eax
c0108ec0:	85 c0                	test   %eax,%eax
c0108ec2:	75 11                	jne    c0108ed5 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108ec4:	c7 04 24 24 77 11 c0 	movl   $0xc0117724,(%esp)
c0108ecb:	e8 95 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108ed0:	e9 93 01 00 00       	jmp    c0109068 <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108ed5:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108edc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108edf:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ee2:	83 e0 02             	and    $0x2,%eax
c0108ee5:	85 c0                	test   %eax,%eax
c0108ee7:	74 04                	je     c0108eed <do_pgfault+0xce>
        perm |= PTE_W;
c0108ee9:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108eed:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ef0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ef6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108efb:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108efe:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108f05:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f0f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f12:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108f19:	00 
c0108f1a:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f1d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f21:	89 04 24             	mov    %eax,(%esp)
c0108f24:	e8 d0 c9 ff ff       	call   c01058f9 <get_pte>
c0108f29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108f2c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f30:	75 11                	jne    c0108f43 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108f32:	c7 04 24 87 77 11 c0 	movl   $0xc0117787,(%esp)
c0108f39:	e8 27 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108f3e:	e9 25 01 00 00       	jmp    c0109068 <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0108f43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f46:	8b 00                	mov    (%eax),%eax
c0108f48:	85 c0                	test   %eax,%eax
c0108f4a:	75 35                	jne    c0108f81 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f4f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f52:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f55:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108f59:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f5c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f60:	89 04 24             	mov    %eax,(%esp)
c0108f63:	e8 fb d0 ff ff       	call   c0106063 <pgdir_alloc_page>
c0108f68:	85 c0                	test   %eax,%eax
c0108f6a:	0f 85 f1 00 00 00    	jne    c0109061 <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108f70:	c7 04 24 a8 77 11 c0 	movl   $0xc01177a8,(%esp)
c0108f77:	e8 e9 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108f7c:	e9 e7 00 00 00       	jmp    c0109068 <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c0108f81:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0108f88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f8b:	8b 00                	mov    (%eax),%eax
c0108f8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f98:	c7 04 24 cf 77 11 c0 	movl   $0xc01177cf,(%esp)
c0108f9f:	e8 c1 73 ff ff       	call   c0100365 <cprintf>
        if (*ptep & PTE_P) {
c0108fa4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fa7:	8b 00                	mov    (%eax),%eax
c0108fa9:	83 e0 01             	and    $0x1,%eax
c0108fac:	85 c0                	test   %eax,%eax
c0108fae:	74 1c                	je     c0108fcc <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0108fb0:	c7 44 24 08 ec 77 11 	movl   $0xc01177ec,0x8(%esp)
c0108fb7:	c0 
c0108fb8:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c0108fbf:	00 
c0108fc0:	c7 04 24 9c 73 11 c0 	movl   $0xc011739c,(%esp)
c0108fc7:	e8 fc 7e ff ff       	call   c0100ec8 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c0108fcc:	a1 6c 0f 15 c0       	mov    0xc0150f6c,%eax
c0108fd1:	85 c0                	test   %eax,%eax
c0108fd3:	74 30                	je     c0109005 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108fd5:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108fd8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108fdc:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fdf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fe3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe6:	89 04 24             	mov    %eax,(%esp)
c0108fe9:	e8 2b e1 ff ff       	call   c0107119 <swap_in>
c0108fee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108ff1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108ff5:	74 26                	je     c010901d <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c0108ff7:	c7 04 24 0b 78 11 c0 	movl   $0xc011780b,(%esp)
c0108ffe:	e8 62 73 ff ff       	call   c0100365 <cprintf>
                   goto failed;
c0109003:	eb 63                	jmp    c0109068 <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0109005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109008:	8b 00                	mov    (%eax),%eax
c010900a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010900e:	c7 04 24 2c 78 11 c0 	movl   $0xc011782c,(%esp)
c0109015:	e8 4b 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c010901a:	90                   	nop
c010901b:	eb 4b                	jmp    c0109068 <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c010901d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109020:	8b 45 08             	mov    0x8(%ebp),%eax
c0109023:	8b 40 0c             	mov    0xc(%eax),%eax
c0109026:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109029:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010902d:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0109030:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109034:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109038:	89 04 24             	mov    %eax,(%esp)
c010903b:	e8 0d cf ff ff       	call   c0105f4d <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0109040:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109043:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010904a:	00 
c010904b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010904f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109052:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109056:	8b 45 08             	mov    0x8(%ebp),%eax
c0109059:	89 04 24             	mov    %eax,(%esp)
c010905c:	e8 ef de ff ff       	call   c0106f50 <swap_map_swappable>
   }
   ret = 0;
c0109061:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109068:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010906b:	c9                   	leave  
c010906c:	c3                   	ret    

c010906d <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010906d:	55                   	push   %ebp
c010906e:	89 e5                	mov    %esp,%ebp
c0109070:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109073:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109077:	0f 84 e0 00 00 00    	je     c010915d <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010907d:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0109084:	76 1c                	jbe    c01090a2 <user_mem_check+0x35>
c0109086:	8b 45 10             	mov    0x10(%ebp),%eax
c0109089:	8b 55 0c             	mov    0xc(%ebp),%edx
c010908c:	01 d0                	add    %edx,%eax
c010908e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109091:	76 0f                	jbe    c01090a2 <user_mem_check+0x35>
c0109093:	8b 45 10             	mov    0x10(%ebp),%eax
c0109096:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109099:	01 d0                	add    %edx,%eax
c010909b:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01090a0:	76 0a                	jbe    c01090ac <user_mem_check+0x3f>
            return 0;
c01090a2:	b8 00 00 00 00       	mov    $0x0,%eax
c01090a7:	e9 e2 00 00 00       	jmp    c010918e <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01090ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090af:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01090b2:	8b 45 10             	mov    0x10(%ebp),%eax
c01090b5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090b8:	01 d0                	add    %edx,%eax
c01090ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01090bd:	e9 88 00 00 00       	jmp    c010914a <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01090c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01090cc:	89 04 24             	mov    %eax,(%esp)
c01090cf:	e8 7b ef ff ff       	call   c010804f <find_vma>
c01090d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01090d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01090db:	74 0b                	je     c01090e8 <user_mem_check+0x7b>
c01090dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090e0:	8b 40 04             	mov    0x4(%eax),%eax
c01090e3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01090e6:	76 0a                	jbe    c01090f2 <user_mem_check+0x85>
                return 0;
c01090e8:	b8 00 00 00 00       	mov    $0x0,%eax
c01090ed:	e9 9c 00 00 00       	jmp    c010918e <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01090f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090f5:	8b 50 0c             	mov    0xc(%eax),%edx
c01090f8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01090fc:	74 07                	je     c0109105 <user_mem_check+0x98>
c01090fe:	b8 02 00 00 00       	mov    $0x2,%eax
c0109103:	eb 05                	jmp    c010910a <user_mem_check+0x9d>
c0109105:	b8 01 00 00 00       	mov    $0x1,%eax
c010910a:	21 d0                	and    %edx,%eax
c010910c:	85 c0                	test   %eax,%eax
c010910e:	75 07                	jne    c0109117 <user_mem_check+0xaa>
                return 0;
c0109110:	b8 00 00 00 00       	mov    $0x0,%eax
c0109115:	eb 77                	jmp    c010918e <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109117:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010911b:	74 24                	je     c0109141 <user_mem_check+0xd4>
c010911d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109120:	8b 40 0c             	mov    0xc(%eax),%eax
c0109123:	83 e0 08             	and    $0x8,%eax
c0109126:	85 c0                	test   %eax,%eax
c0109128:	74 17                	je     c0109141 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010912a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010912d:	8b 40 04             	mov    0x4(%eax),%eax
c0109130:	05 00 10 00 00       	add    $0x1000,%eax
c0109135:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109138:	76 07                	jbe    c0109141 <user_mem_check+0xd4>
                    return 0;
c010913a:	b8 00 00 00 00       	mov    $0x0,%eax
c010913f:	eb 4d                	jmp    c010918e <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109141:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109144:	8b 40 08             	mov    0x8(%eax),%eax
c0109147:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010914a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010914d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109150:	0f 82 6c ff ff ff    	jb     c01090c2 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109156:	b8 01 00 00 00       	mov    $0x1,%eax
c010915b:	eb 31                	jmp    c010918e <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010915d:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109164:	76 23                	jbe    c0109189 <user_mem_check+0x11c>
c0109166:	8b 45 10             	mov    0x10(%ebp),%eax
c0109169:	8b 55 0c             	mov    0xc(%ebp),%edx
c010916c:	01 d0                	add    %edx,%eax
c010916e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109171:	76 16                	jbe    c0109189 <user_mem_check+0x11c>
c0109173:	8b 45 10             	mov    0x10(%ebp),%eax
c0109176:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109179:	01 d0                	add    %edx,%eax
c010917b:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0109180:	77 07                	ja     c0109189 <user_mem_check+0x11c>
c0109182:	b8 01 00 00 00       	mov    $0x1,%eax
c0109187:	eb 05                	jmp    c010918e <user_mem_check+0x121>
c0109189:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010918e:	c9                   	leave  
c010918f:	c3                   	ret    

c0109190 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0109190:	55                   	push   %ebp
c0109191:	89 e5                	mov    %esp,%ebp
c0109193:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0109196:	8b 45 10             	mov    0x10(%ebp),%eax
c0109199:	05 00 10 00 00       	add    $0x1000,%eax
c010919e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01091a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01091a9:	89 c2                	mov    %eax,%edx
c01091ab:	8b 45 10             	mov    0x10(%ebp),%eax
c01091ae:	29 c2                	sub    %eax,%edx
c01091b0:	89 d0                	mov    %edx,%eax
c01091b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c01091b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091b8:	3b 45 14             	cmp    0x14(%ebp),%eax
c01091bb:	76 06                	jbe    c01091c3 <copy_string+0x33>
            part = maxn;
c01091bd:	8b 45 14             	mov    0x14(%ebp),%eax
c01091c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01091c3:	8b 45 10             	mov    0x10(%ebp),%eax
c01091c6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01091cd:	00 
c01091ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01091d1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01091d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01091dc:	89 04 24             	mov    %eax,(%esp)
c01091df:	e8 89 fe ff ff       	call   c010906d <user_mem_check>
c01091e4:	85 c0                	test   %eax,%eax
c01091e6:	75 0a                	jne    c01091f2 <copy_string+0x62>
            return 0;
c01091e8:	b8 00 00 00 00       	mov    $0x0,%eax
c01091ed:	e9 86 00 00 00       	jmp    c0109278 <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01091f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091f9:	8b 45 10             	mov    0x10(%ebp),%eax
c01091fc:	89 04 24             	mov    %eax,(%esp)
c01091ff:	e8 1e c2 00 00       	call   c0115422 <strnlen>
c0109204:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109207:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010920a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010920d:	73 23                	jae    c0109232 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c010920f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109212:	83 c0 01             	add    $0x1,%eax
c0109215:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109219:	8b 45 10             	mov    0x10(%ebp),%eax
c010921c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109220:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109223:	89 04 24             	mov    %eax,(%esp)
c0109226:	e8 07 c6 00 00       	call   c0115832 <memcpy>
            return 1;
c010922b:	b8 01 00 00 00       	mov    $0x1,%eax
c0109230:	eb 46                	jmp    c0109278 <copy_string+0xe8>
        }
        if (part == maxn) {
c0109232:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109235:	3b 45 14             	cmp    0x14(%ebp),%eax
c0109238:	75 07                	jne    c0109241 <copy_string+0xb1>
            return 0;
c010923a:	b8 00 00 00 00       	mov    $0x0,%eax
c010923f:	eb 37                	jmp    c0109278 <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c0109241:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109244:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109248:	8b 45 10             	mov    0x10(%ebp),%eax
c010924b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010924f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109252:	89 04 24             	mov    %eax,(%esp)
c0109255:	e8 d8 c5 00 00       	call   c0115832 <memcpy>
        dst += part, src += part, maxn -= part;
c010925a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010925d:	01 45 0c             	add    %eax,0xc(%ebp)
c0109260:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109263:	01 45 10             	add    %eax,0x10(%ebp)
c0109266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109269:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c010926c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0109273:	e9 3d ff ff ff       	jmp    c01091b5 <copy_string+0x25>
}
c0109278:	c9                   	leave  
c0109279:	c3                   	ret    

c010927a <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c010927a:	55                   	push   %ebp
c010927b:	89 e5                	mov    %esp,%ebp
c010927d:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0109280:	8b 45 08             	mov    0x8(%ebp),%eax
c0109283:	8b 04 85 20 42 15 c0 	mov    -0x3feabde0(,%eax,4),%eax
c010928a:	83 f8 01             	cmp    $0x1,%eax
c010928d:	0f 85 85 00 00 00    	jne    c0109318 <phi_test_sema+0x9e>
c0109293:	8b 45 08             	mov    0x8(%ebp),%eax
c0109296:	8d 48 04             	lea    0x4(%eax),%ecx
c0109299:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010929e:	89 c8                	mov    %ecx,%eax
c01092a0:	f7 ea                	imul   %edx
c01092a2:	d1 fa                	sar    %edx
c01092a4:	89 c8                	mov    %ecx,%eax
c01092a6:	c1 f8 1f             	sar    $0x1f,%eax
c01092a9:	29 c2                	sub    %eax,%edx
c01092ab:	89 d0                	mov    %edx,%eax
c01092ad:	c1 e0 02             	shl    $0x2,%eax
c01092b0:	01 d0                	add    %edx,%eax
c01092b2:	29 c1                	sub    %eax,%ecx
c01092b4:	89 ca                	mov    %ecx,%edx
c01092b6:	8b 04 95 20 42 15 c0 	mov    -0x3feabde0(,%edx,4),%eax
c01092bd:	83 f8 02             	cmp    $0x2,%eax
c01092c0:	74 56                	je     c0109318 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01092c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c5:	8d 48 01             	lea    0x1(%eax),%ecx
c01092c8:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092cd:	89 c8                	mov    %ecx,%eax
c01092cf:	f7 ea                	imul   %edx
c01092d1:	d1 fa                	sar    %edx
c01092d3:	89 c8                	mov    %ecx,%eax
c01092d5:	c1 f8 1f             	sar    $0x1f,%eax
c01092d8:	29 c2                	sub    %eax,%edx
c01092da:	89 d0                	mov    %edx,%eax
c01092dc:	c1 e0 02             	shl    $0x2,%eax
c01092df:	01 d0                	add    %edx,%eax
c01092e1:	29 c1                	sub    %eax,%ecx
c01092e3:	89 ca                	mov    %ecx,%edx
c01092e5:	8b 04 95 20 42 15 c0 	mov    -0x3feabde0(,%edx,4),%eax
c01092ec:	83 f8 02             	cmp    $0x2,%eax
c01092ef:	74 27                	je     c0109318 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01092f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01092f4:	c7 04 85 20 42 15 c0 	movl   $0x2,-0x3feabde0(,%eax,4)
c01092fb:	02 00 00 00 
        up(&s[i]);
c01092ff:	8b 55 08             	mov    0x8(%ebp),%edx
c0109302:	89 d0                	mov    %edx,%eax
c0109304:	01 c0                	add    %eax,%eax
c0109306:	01 d0                	add    %edx,%eax
c0109308:	c1 e0 02             	shl    $0x2,%eax
c010930b:	05 c0 42 15 c0       	add    $0xc01542c0,%eax
c0109310:	89 04 24             	mov    %eax,(%esp)
c0109313:	e8 ea 09 00 00       	call   c0109d02 <up>
    }
}
c0109318:	c9                   	leave  
c0109319:	c3                   	ret    

c010931a <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010931a:	55                   	push   %ebp
c010931b:	89 e5                	mov    %esp,%ebp
c010931d:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109320:	c7 04 24 48 42 15 c0 	movl   $0xc0154248,(%esp)
c0109327:	e8 f1 09 00 00       	call   c0109d1d <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c010932c:	8b 45 08             	mov    0x8(%ebp),%eax
c010932f:	c7 04 85 20 42 15 c0 	movl   $0x1,-0x3feabde0(,%eax,4)
c0109336:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c010933a:	8b 45 08             	mov    0x8(%ebp),%eax
c010933d:	89 04 24             	mov    %eax,(%esp)
c0109340:	e8 35 ff ff ff       	call   c010927a <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109345:	c7 04 24 48 42 15 c0 	movl   $0xc0154248,(%esp)
c010934c:	e8 b1 09 00 00       	call   c0109d02 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109351:	8b 55 08             	mov    0x8(%ebp),%edx
c0109354:	89 d0                	mov    %edx,%eax
c0109356:	01 c0                	add    %eax,%eax
c0109358:	01 d0                	add    %edx,%eax
c010935a:	c1 e0 02             	shl    $0x2,%eax
c010935d:	05 c0 42 15 c0       	add    $0xc01542c0,%eax
c0109362:	89 04 24             	mov    %eax,(%esp)
c0109365:	e8 b3 09 00 00       	call   c0109d1d <down>
}
c010936a:	c9                   	leave  
c010936b:	c3                   	ret    

c010936c <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010936c:	55                   	push   %ebp
c010936d:	89 e5                	mov    %esp,%ebp
c010936f:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109372:	c7 04 24 48 42 15 c0 	movl   $0xc0154248,(%esp)
c0109379:	e8 9f 09 00 00       	call   c0109d1d <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c010937e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109381:	c7 04 85 20 42 15 c0 	movl   $0x0,-0x3feabde0(,%eax,4)
c0109388:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c010938c:	8b 45 08             	mov    0x8(%ebp),%eax
c010938f:	8d 48 04             	lea    0x4(%eax),%ecx
c0109392:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109397:	89 c8                	mov    %ecx,%eax
c0109399:	f7 ea                	imul   %edx
c010939b:	d1 fa                	sar    %edx
c010939d:	89 c8                	mov    %ecx,%eax
c010939f:	c1 f8 1f             	sar    $0x1f,%eax
c01093a2:	29 c2                	sub    %eax,%edx
c01093a4:	89 d0                	mov    %edx,%eax
c01093a6:	c1 e0 02             	shl    $0x2,%eax
c01093a9:	01 d0                	add    %edx,%eax
c01093ab:	29 c1                	sub    %eax,%ecx
c01093ad:	89 ca                	mov    %ecx,%edx
c01093af:	89 14 24             	mov    %edx,(%esp)
c01093b2:	e8 c3 fe ff ff       	call   c010927a <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c01093b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01093ba:	8d 48 01             	lea    0x1(%eax),%ecx
c01093bd:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093c2:	89 c8                	mov    %ecx,%eax
c01093c4:	f7 ea                	imul   %edx
c01093c6:	d1 fa                	sar    %edx
c01093c8:	89 c8                	mov    %ecx,%eax
c01093ca:	c1 f8 1f             	sar    $0x1f,%eax
c01093cd:	29 c2                	sub    %eax,%edx
c01093cf:	89 d0                	mov    %edx,%eax
c01093d1:	c1 e0 02             	shl    $0x2,%eax
c01093d4:	01 d0                	add    %edx,%eax
c01093d6:	29 c1                	sub    %eax,%ecx
c01093d8:	89 ca                	mov    %ecx,%edx
c01093da:	89 14 24             	mov    %edx,(%esp)
c01093dd:	e8 98 fe ff ff       	call   c010927a <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01093e2:	c7 04 24 48 42 15 c0 	movl   $0xc0154248,(%esp)
c01093e9:	e8 14 09 00 00       	call   c0109d02 <up>
}
c01093ee:	c9                   	leave  
c01093ef:	c3                   	ret    

c01093f0 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01093f0:	55                   	push   %ebp
c01093f1:	89 e5                	mov    %esp,%ebp
c01093f3:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01093f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01093fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109400:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109403:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109406:	89 44 24 04          	mov    %eax,0x4(%esp)
c010940a:	c7 04 24 54 78 11 c0 	movl   $0xc0117854,(%esp)
c0109411:	e8 4f 6f ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109416:	eb 62                	jmp    c010947a <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109418:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010941b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010941f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109422:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109426:	c7 04 24 74 78 11 c0 	movl   $0xc0117874,(%esp)
c010942d:	e8 33 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109432:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109439:	e8 ed 4c 00 00       	call   c010e12b <do_sleep>
        phi_take_forks_sema(i); 
c010943e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109441:	89 04 24             	mov    %eax,(%esp)
c0109444:	e8 d1 fe ff ff       	call   c010931a <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109449:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010944c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109450:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109453:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109457:	c7 04 24 a4 78 11 c0 	movl   $0xc01178a4,(%esp)
c010945e:	e8 02 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109463:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010946a:	e8 bc 4c 00 00       	call   c010e12b <do_sleep>
        phi_put_forks_sema(i); 
c010946f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109472:	89 04 24             	mov    %eax,(%esp)
c0109475:	e8 f2 fe ff ff       	call   c010936c <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c010947a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010947d:	8d 50 01             	lea    0x1(%eax),%edx
c0109480:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109483:	83 f8 03             	cmp    $0x3,%eax
c0109486:	7e 90                	jle    c0109418 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0109488:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010948b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010948f:	c7 04 24 cf 78 11 c0 	movl   $0xc01178cf,(%esp)
c0109496:	e8 ca 6e ff ff       	call   c0100365 <cprintf>
    return 0;    
c010949b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01094a0:	c9                   	leave  
c01094a1:	c3                   	ret    

c01094a2 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                                    // mp is mutex semaphore for monitor's procedures

void phi_test_condvar (i) { 
c01094a2:	55                   	push   %ebp
c01094a3:	89 e5                	mov    %esp,%ebp
c01094a5:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01094a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ab:	8b 04 85 80 42 15 c0 	mov    -0x3feabd80(,%eax,4),%eax
c01094b2:	83 f8 01             	cmp    $0x1,%eax
c01094b5:	0f 85 b5 00 00 00    	jne    c0109570 <phi_test_condvar+0xce>
c01094bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01094be:	8d 48 04             	lea    0x4(%eax),%ecx
c01094c1:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094c6:	89 c8                	mov    %ecx,%eax
c01094c8:	f7 ea                	imul   %edx
c01094ca:	d1 fa                	sar    %edx
c01094cc:	89 c8                	mov    %ecx,%eax
c01094ce:	c1 f8 1f             	sar    $0x1f,%eax
c01094d1:	29 c2                	sub    %eax,%edx
c01094d3:	89 d0                	mov    %edx,%eax
c01094d5:	c1 e0 02             	shl    $0x2,%eax
c01094d8:	01 d0                	add    %edx,%eax
c01094da:	29 c1                	sub    %eax,%ecx
c01094dc:	89 ca                	mov    %ecx,%edx
c01094de:	8b 04 95 80 42 15 c0 	mov    -0x3feabd80(,%edx,4),%eax
c01094e5:	83 f8 02             	cmp    $0x2,%eax
c01094e8:	0f 84 82 00 00 00    	je     c0109570 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01094ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01094f1:	8d 48 01             	lea    0x1(%eax),%ecx
c01094f4:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094f9:	89 c8                	mov    %ecx,%eax
c01094fb:	f7 ea                	imul   %edx
c01094fd:	d1 fa                	sar    %edx
c01094ff:	89 c8                	mov    %ecx,%eax
c0109501:	c1 f8 1f             	sar    $0x1f,%eax
c0109504:	29 c2                	sub    %eax,%edx
c0109506:	89 d0                	mov    %edx,%eax
c0109508:	c1 e0 02             	shl    $0x2,%eax
c010950b:	01 d0                	add    %edx,%eax
c010950d:	29 c1                	sub    %eax,%ecx
c010950f:	89 ca                	mov    %ecx,%edx
c0109511:	8b 04 95 80 42 15 c0 	mov    -0x3feabd80(,%edx,4),%eax
c0109518:	83 f8 02             	cmp    $0x2,%eax
c010951b:	74 53                	je     c0109570 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010951d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109520:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109524:	c7 04 24 ec 78 11 c0 	movl   $0xc01178ec,(%esp)
c010952b:	e8 35 6e ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c0109530:	8b 45 08             	mov    0x8(%ebp),%eax
c0109533:	c7 04 85 80 42 15 c0 	movl   $0x2,-0x3feabd80(,%eax,4)
c010953a:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010953e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109541:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109545:	c7 04 24 20 79 11 c0 	movl   $0xc0117920,(%esp)
c010954c:	e8 14 6e ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109551:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109556:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109559:	8b 55 08             	mov    0x8(%ebp),%edx
c010955c:	89 d0                	mov    %edx,%eax
c010955e:	c1 e0 02             	shl    $0x2,%eax
c0109561:	01 d0                	add    %edx,%eax
c0109563:	c1 e0 02             	shl    $0x2,%eax
c0109566:	01 c8                	add    %ecx,%eax
c0109568:	89 04 24             	mov    %eax,(%esp)
c010956b:	e8 8f 04 00 00       	call   c01099ff <cond_signal>
    }
}
c0109570:	c9                   	leave  
c0109571:	c3                   	ret    

c0109572 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109572:	55                   	push   %ebp
c0109573:	89 e5                	mov    %esp,%ebp
c0109575:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109578:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010957d:	89 04 24             	mov    %eax,(%esp)
c0109580:	e8 98 07 00 00       	call   c0109d1d <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c0109585:	8b 45 08             	mov    0x8(%ebp),%eax
c0109588:	c7 04 85 80 42 15 c0 	movl   $0x1,-0x3feabd80(,%eax,4)
c010958f:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c0109593:	8b 45 08             	mov    0x8(%ebp),%eax
c0109596:	89 04 24             	mov    %eax,(%esp)
c0109599:	e8 04 ff ff ff       	call   c01094a2 <phi_test_condvar>
      while (state_condvar[i] != EATING) {
c010959e:	eb 32                	jmp    c01095d2 <phi_take_forks_condvar+0x60>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c01095a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095a7:	c7 04 24 48 79 11 c0 	movl   $0xc0117948,(%esp)
c01095ae:	e8 b2 6d ff ff       	call   c0100365 <cprintf>
          cond_wait(&mtp->cv[i]);
c01095b3:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095b8:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01095bb:	8b 55 08             	mov    0x8(%ebp),%edx
c01095be:	89 d0                	mov    %edx,%eax
c01095c0:	c1 e0 02             	shl    $0x2,%eax
c01095c3:	01 d0                	add    %edx,%eax
c01095c5:	c1 e0 02             	shl    $0x2,%eax
c01095c8:	01 c8                	add    %ecx,%eax
c01095ca:	89 04 24             	mov    %eax,(%esp)
c01095cd:	e8 cd 04 00 00       	call   c0109a9f <cond_wait>
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
      // try to get fork
      phi_test_condvar(i); 
      while (state_condvar[i] != EATING) {
c01095d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d5:	8b 04 85 80 42 15 c0 	mov    -0x3feabd80(,%eax,4),%eax
c01095dc:	83 f8 02             	cmp    $0x2,%eax
c01095df:	75 bf                	jne    c01095a0 <phi_take_forks_condvar+0x2e>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
          cond_wait(&mtp->cv[i]);
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01095e1:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095e6:	8b 40 18             	mov    0x18(%eax),%eax
c01095e9:	85 c0                	test   %eax,%eax
c01095eb:	7e 12                	jle    c01095ff <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c01095ed:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01095f2:	83 c0 0c             	add    $0xc,%eax
c01095f5:	89 04 24             	mov    %eax,(%esp)
c01095f8:	e8 05 07 00 00       	call   c0109d02 <up>
c01095fd:	eb 0d                	jmp    c010960c <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c01095ff:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109604:	89 04 24             	mov    %eax,(%esp)
c0109607:	e8 f6 06 00 00       	call   c0109d02 <up>
}
c010960c:	c9                   	leave  
c010960d:	c3                   	ret    

c010960e <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c010960e:	55                   	push   %ebp
c010960f:	89 e5                	mov    %esp,%ebp
c0109611:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109614:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109619:	89 04 24             	mov    %eax,(%esp)
c010961c:	e8 fc 06 00 00       	call   c0109d1d <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c0109621:	8b 45 08             	mov    0x8(%ebp),%eax
c0109624:	c7 04 85 80 42 15 c0 	movl   $0x0,-0x3feabd80(,%eax,4)
c010962b:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c010962f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109632:	8d 48 04             	lea    0x4(%eax),%ecx
c0109635:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010963a:	89 c8                	mov    %ecx,%eax
c010963c:	f7 ea                	imul   %edx
c010963e:	d1 fa                	sar    %edx
c0109640:	89 c8                	mov    %ecx,%eax
c0109642:	c1 f8 1f             	sar    $0x1f,%eax
c0109645:	29 c2                	sub    %eax,%edx
c0109647:	89 d0                	mov    %edx,%eax
c0109649:	c1 e0 02             	shl    $0x2,%eax
c010964c:	01 d0                	add    %edx,%eax
c010964e:	29 c1                	sub    %eax,%ecx
c0109650:	89 ca                	mov    %ecx,%edx
c0109652:	89 14 24             	mov    %edx,(%esp)
c0109655:	e8 48 fe ff ff       	call   c01094a2 <phi_test_condvar>
      phi_test_condvar(RIGHT);
c010965a:	8b 45 08             	mov    0x8(%ebp),%eax
c010965d:	8d 48 01             	lea    0x1(%eax),%ecx
c0109660:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109665:	89 c8                	mov    %ecx,%eax
c0109667:	f7 ea                	imul   %edx
c0109669:	d1 fa                	sar    %edx
c010966b:	89 c8                	mov    %ecx,%eax
c010966d:	c1 f8 1f             	sar    $0x1f,%eax
c0109670:	29 c2                	sub    %eax,%edx
c0109672:	89 d0                	mov    %edx,%eax
c0109674:	c1 e0 02             	shl    $0x2,%eax
c0109677:	01 d0                	add    %edx,%eax
c0109679:	29 c1                	sub    %eax,%ecx
c010967b:	89 ca                	mov    %ecx,%edx
c010967d:	89 14 24             	mov    %edx,(%esp)
c0109680:	e8 1d fe ff ff       	call   c01094a2 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0109685:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c010968a:	8b 40 18             	mov    0x18(%eax),%eax
c010968d:	85 c0                	test   %eax,%eax
c010968f:	7e 12                	jle    c01096a3 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0109691:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c0109696:	83 c0 0c             	add    $0xc,%eax
c0109699:	89 04 24             	mov    %eax,(%esp)
c010969c:	e8 61 06 00 00       	call   c0109d02 <up>
c01096a1:	eb 0d                	jmp    c01096b0 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c01096a3:	a1 80 fa 14 c0       	mov    0xc014fa80,%eax
c01096a8:	89 04 24             	mov    %eax,(%esp)
c01096ab:	e8 52 06 00 00       	call   c0109d02 <up>
}
c01096b0:	c9                   	leave  
c01096b1:	c3                   	ret    

c01096b2 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c01096b2:	55                   	push   %ebp
c01096b3:	89 e5                	mov    %esp,%ebp
c01096b5:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c01096b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01096bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c01096c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096cc:	c7 04 24 84 79 11 c0 	movl   $0xc0117984,(%esp)
c01096d3:	e8 8d 6c ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c01096d8:	eb 62                	jmp    c010973c <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01096da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01096e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096e8:	c7 04 24 a4 79 11 c0 	movl   $0xc01179a4,(%esp)
c01096ef:	e8 71 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01096f4:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01096fb:	e8 2b 4a 00 00       	call   c010e12b <do_sleep>
        phi_take_forks_condvar(i); 
c0109700:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109703:	89 04 24             	mov    %eax,(%esp)
c0109706:	e8 67 fe ff ff       	call   c0109572 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c010970b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010970e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109712:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109715:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109719:	c7 04 24 d4 79 11 c0 	movl   $0xc01179d4,(%esp)
c0109720:	e8 40 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109725:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010972c:	e8 fa 49 00 00       	call   c010e12b <do_sleep>
        phi_put_forks_condvar(i); 
c0109731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109734:	89 04 24             	mov    %eax,(%esp)
c0109737:	e8 d2 fe ff ff       	call   c010960e <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010973c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010973f:	8d 50 01             	lea    0x1(%eax),%edx
c0109742:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109745:	83 f8 03             	cmp    $0x3,%eax
c0109748:	7e 90                	jle    c01096da <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010974a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010974d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109751:	c7 04 24 04 7a 11 c0 	movl   $0xc0117a04,(%esp)
c0109758:	e8 08 6c ff ff       	call   c0100365 <cprintf>
    return 0;    
c010975d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109762:	c9                   	leave  
c0109763:	c3                   	ret    

c0109764 <check_sync>:

void check_sync(void){
c0109764:	55                   	push   %ebp
c0109765:	89 e5                	mov    %esp,%ebp
c0109767:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010976a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109771:	00 
c0109772:	c7 04 24 48 42 15 c0 	movl   $0xc0154248,(%esp)
c0109779:	e8 11 04 00 00       	call   c0109b8f <sem_init>
    for(i=0;i<N;i++){
c010977e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109785:	e9 94 00 00 00       	jmp    c010981e <check_sync+0xba>
        sem_init(&s[i], 0);
c010978a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010978d:	89 d0                	mov    %edx,%eax
c010978f:	01 c0                	add    %eax,%eax
c0109791:	01 d0                	add    %edx,%eax
c0109793:	c1 e0 02             	shl    $0x2,%eax
c0109796:	05 c0 42 15 c0       	add    $0xc01542c0,%eax
c010979b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01097a2:	00 
c01097a3:	89 04 24             	mov    %eax,(%esp)
c01097a6:	e8 e4 03 00 00       	call   c0109b8f <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01097ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097ae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01097b5:	00 
c01097b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097ba:	c7 04 24 f0 93 10 c0 	movl   $0xc01093f0,(%esp)
c01097c1:	e8 76 2e 00 00       	call   c010c63c <kernel_thread>
c01097c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c01097c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01097cd:	7f 1c                	jg     c01097eb <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01097cf:	c7 44 24 08 24 7a 11 	movl   $0xc0117a24,0x8(%esp)
c01097d6:	c0 
c01097d7:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01097de:	00 
c01097df:	c7 04 24 56 7a 11 c0 	movl   $0xc0117a56,(%esp)
c01097e6:	e8 dd 76 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01097eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097ee:	89 04 24             	mov    %eax,(%esp)
c01097f1:	e8 d2 2d 00 00       	call   c010c5c8 <find_proc>
c01097f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01097f9:	89 04 95 94 42 15 c0 	mov    %eax,-0x3feabd6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109800:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109803:	8b 04 85 94 42 15 c0 	mov    -0x3feabd6c(,%eax,4),%eax
c010980a:	c7 44 24 04 6d 7a 11 	movl   $0xc0117a6d,0x4(%esp)
c0109811:	c0 
c0109812:	89 04 24             	mov    %eax,(%esp)
c0109815:	e8 95 29 00 00       	call   c010c1af <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c010981a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010981e:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109822:	0f 8e 62 ff ff ff    	jle    c010978a <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109828:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010982f:	00 
c0109830:	c7 04 24 60 42 15 c0 	movl   $0xc0154260,(%esp)
c0109837:	e8 99 00 00 00       	call   c01098d5 <monitor_init>
    for(i=0;i<N;i++){
c010983c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109843:	e9 81 00 00 00       	jmp    c01098c9 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010984b:	c7 04 85 80 42 15 c0 	movl   $0x0,-0x3feabd80(,%eax,4)
c0109852:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109859:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109860:	00 
c0109861:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109865:	c7 04 24 b2 96 10 c0 	movl   $0xc01096b2,(%esp)
c010986c:	e8 cb 2d 00 00       	call   c010c63c <kernel_thread>
c0109871:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109874:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109878:	7f 1c                	jg     c0109896 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c010987a:	c7 44 24 08 84 7a 11 	movl   $0xc0117a84,0x8(%esp)
c0109881:	c0 
c0109882:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0109889:	00 
c010988a:	c7 04 24 56 7a 11 c0 	movl   $0xc0117a56,(%esp)
c0109891:	e8 32 76 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109896:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109899:	89 04 24             	mov    %eax,(%esp)
c010989c:	e8 27 2d 00 00       	call   c010c5c8 <find_proc>
c01098a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098a4:	89 04 95 34 42 15 c0 	mov    %eax,-0x3feabdcc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c01098ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098ae:	8b 04 85 34 42 15 c0 	mov    -0x3feabdcc(,%eax,4),%eax
c01098b5:	c7 44 24 04 b4 7a 11 	movl   $0xc0117ab4,0x4(%esp)
c01098bc:	c0 
c01098bd:	89 04 24             	mov    %eax,(%esp)
c01098c0:	e8 ea 28 00 00       	call   c010c1af <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c01098c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01098c9:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01098cd:	0f 8e 75 ff ff ff    	jle    c0109848 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01098d3:	c9                   	leave  
c01098d4:	c3                   	ret    

c01098d5 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c01098d5:	55                   	push   %ebp
c01098d6:	89 e5                	mov    %esp,%ebp
c01098d8:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c01098db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01098df:	75 24                	jne    c0109905 <monitor_init+0x30>
c01098e1:	c7 44 24 0c d0 7a 11 	movl   $0xc0117ad0,0xc(%esp)
c01098e8:	c0 
c01098e9:	c7 44 24 08 d9 7a 11 	movl   $0xc0117ad9,0x8(%esp)
c01098f0:	c0 
c01098f1:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01098f8:	00 
c01098f9:	c7 04 24 ee 7a 11 c0 	movl   $0xc0117aee,(%esp)
c0109900:	e8 c3 75 ff ff       	call   c0100ec8 <__panic>
    mtp->next_count = 0;
c0109905:	8b 45 08             	mov    0x8(%ebp),%eax
c0109908:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c010990f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109912:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109919:	8b 45 08             	mov    0x8(%ebp),%eax
c010991c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109923:	00 
c0109924:	89 04 24             	mov    %eax,(%esp)
c0109927:	e8 63 02 00 00       	call   c0109b8f <sem_init>
    sem_init(&(mtp->next), 0);
c010992c:	8b 45 08             	mov    0x8(%ebp),%eax
c010992f:	83 c0 0c             	add    $0xc,%eax
c0109932:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109939:	00 
c010993a:	89 04 24             	mov    %eax,(%esp)
c010993d:	e8 4d 02 00 00       	call   c0109b8f <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109942:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109945:	89 d0                	mov    %edx,%eax
c0109947:	c1 e0 02             	shl    $0x2,%eax
c010994a:	01 d0                	add    %edx,%eax
c010994c:	c1 e0 02             	shl    $0x2,%eax
c010994f:	89 04 24             	mov    %eax,(%esp)
c0109952:	e8 a6 b3 ff ff       	call   c0104cfd <kmalloc>
c0109957:	8b 55 08             	mov    0x8(%ebp),%edx
c010995a:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c010995d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109960:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109963:	85 c0                	test   %eax,%eax
c0109965:	75 24                	jne    c010998b <monitor_init+0xb6>
c0109967:	c7 44 24 0c 02 7b 11 	movl   $0xc0117b02,0xc(%esp)
c010996e:	c0 
c010996f:	c7 44 24 08 d9 7a 11 	movl   $0xc0117ad9,0x8(%esp)
c0109976:	c0 
c0109977:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010997e:	00 
c010997f:	c7 04 24 ee 7a 11 c0 	movl   $0xc0117aee,(%esp)
c0109986:	e8 3d 75 ff ff       	call   c0100ec8 <__panic>
    for(i=0; i<num_cv; i++){
c010998b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109992:	eb 61                	jmp    c01099f5 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109994:	8b 45 08             	mov    0x8(%ebp),%eax
c0109997:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010999a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010999d:	89 d0                	mov    %edx,%eax
c010999f:	c1 e0 02             	shl    $0x2,%eax
c01099a2:	01 d0                	add    %edx,%eax
c01099a4:	c1 e0 02             	shl    $0x2,%eax
c01099a7:	01 c8                	add    %ecx,%eax
c01099a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c01099b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b3:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01099b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099b9:	89 d0                	mov    %edx,%eax
c01099bb:	c1 e0 02             	shl    $0x2,%eax
c01099be:	01 d0                	add    %edx,%eax
c01099c0:	c1 e0 02             	shl    $0x2,%eax
c01099c3:	01 c8                	add    %ecx,%eax
c01099c5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01099cc:	00 
c01099cd:	89 04 24             	mov    %eax,(%esp)
c01099d0:	e8 ba 01 00 00       	call   c0109b8f <sem_init>
        mtp->cv[i].owner=mtp;
c01099d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d8:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01099db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099de:	89 d0                	mov    %edx,%eax
c01099e0:	c1 e0 02             	shl    $0x2,%eax
c01099e3:	01 d0                	add    %edx,%eax
c01099e5:	c1 e0 02             	shl    $0x2,%eax
c01099e8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01099eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ee:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01099f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01099f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01099fb:	72 97                	jb     c0109994 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01099fd:	c9                   	leave  
c01099fe:	c3                   	ret    

c01099ff <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01099ff:	55                   	push   %ebp
c0109a00:	89 e5                	mov    %esp,%ebp
c0109a02:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a08:	8b 40 10             	mov    0x10(%eax),%eax
c0109a0b:	8b 50 18             	mov    0x18(%eax),%edx
c0109a0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a11:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a14:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a23:	c7 04 24 10 7b 11 c0 	movl   $0xc0117b10,(%esp)
c0109a2a:	e8 36 69 ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c0109a2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a32:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a35:	85 c0                	test   %eax,%eax
c0109a37:	7e 3a                	jle    c0109a73 <cond_signal+0x74>
        cvp->owner->next_count ++;
c0109a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a3c:	8b 40 10             	mov    0x10(%eax),%eax
c0109a3f:	8b 50 18             	mov    0x18(%eax),%edx
c0109a42:	83 c2 01             	add    $0x1,%edx
c0109a45:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c0109a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a4b:	89 04 24             	mov    %eax,(%esp)
c0109a4e:	e8 af 02 00 00       	call   c0109d02 <up>
        down(&(cvp->owner->next));
c0109a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a56:	8b 40 10             	mov    0x10(%eax),%eax
c0109a59:	83 c0 0c             	add    $0xc,%eax
c0109a5c:	89 04 24             	mov    %eax,(%esp)
c0109a5f:	e8 b9 02 00 00       	call   c0109d1d <down>
        cvp->owner->next_count --;
c0109a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a67:	8b 40 10             	mov    0x10(%eax),%eax
c0109a6a:	8b 50 18             	mov    0x18(%eax),%edx
c0109a6d:	83 ea 01             	sub    $0x1,%edx
c0109a70:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a73:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a76:	8b 40 10             	mov    0x10(%eax),%eax
c0109a79:	8b 50 18             	mov    0x18(%eax),%edx
c0109a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a82:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a86:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a91:	c7 04 24 58 7b 11 c0 	movl   $0xc0117b58,(%esp)
c0109a98:	e8 c8 68 ff ff       	call   c0100365 <cprintf>
}
c0109a9d:	c9                   	leave  
c0109a9e:	c3                   	ret    

c0109a9f <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109a9f:	55                   	push   %ebp
c0109aa0:	89 e5                	mov    %esp,%ebp
c0109aa2:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109aa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa8:	8b 40 10             	mov    0x10(%eax),%eax
c0109aab:	8b 50 18             	mov    0x18(%eax),%edx
c0109aae:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab1:	8b 40 0c             	mov    0xc(%eax),%eax
c0109ab4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109ab8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109abf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ac3:	c7 04 24 9c 7b 11 c0 	movl   $0xc0117b9c,(%esp)
c0109aca:	e8 96 68 ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad2:	8b 40 0c             	mov    0xc(%eax),%eax
c0109ad5:	8d 50 01             	lea    0x1(%eax),%edx
c0109ad8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109adb:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109ade:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae1:	8b 40 10             	mov    0x10(%eax),%eax
c0109ae4:	8b 40 18             	mov    0x18(%eax),%eax
c0109ae7:	85 c0                	test   %eax,%eax
c0109ae9:	7e 13                	jle    c0109afe <cond_wait+0x5f>
         up(&(cvp->owner->next));
c0109aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aee:	8b 40 10             	mov    0x10(%eax),%eax
c0109af1:	83 c0 0c             	add    $0xc,%eax
c0109af4:	89 04 24             	mov    %eax,(%esp)
c0109af7:	e8 06 02 00 00       	call   c0109d02 <up>
c0109afc:	eb 0e                	jmp    c0109b0c <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c0109afe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b01:	8b 40 10             	mov    0x10(%eax),%eax
c0109b04:	89 04 24             	mov    %eax,(%esp)
c0109b07:	e8 f6 01 00 00       	call   c0109d02 <up>
      down(&(cvp->sem));
c0109b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0f:	89 04 24             	mov    %eax,(%esp)
c0109b12:	e8 06 02 00 00       	call   c0109d1d <down>
      cvp->count --;
c0109b17:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b1d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b23:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109b26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b29:	8b 40 10             	mov    0x10(%eax),%eax
c0109b2c:	8b 50 18             	mov    0x18(%eax),%edx
c0109b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b32:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b35:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109b39:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b44:	c7 04 24 e0 7b 11 c0 	movl   $0xc0117be0,(%esp)
c0109b4b:	e8 15 68 ff ff       	call   c0100365 <cprintf>
}
c0109b50:	c9                   	leave  
c0109b51:	c3                   	ret    

c0109b52 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109b52:	55                   	push   %ebp
c0109b53:	89 e5                	mov    %esp,%ebp
c0109b55:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109b58:	9c                   	pushf  
c0109b59:	58                   	pop    %eax
c0109b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109b60:	25 00 02 00 00       	and    $0x200,%eax
c0109b65:	85 c0                	test   %eax,%eax
c0109b67:	74 0c                	je     c0109b75 <__intr_save+0x23>
        intr_disable();
c0109b69:	e8 da 85 ff ff       	call   c0102148 <intr_disable>
        return 1;
c0109b6e:	b8 01 00 00 00       	mov    $0x1,%eax
c0109b73:	eb 05                	jmp    c0109b7a <__intr_save+0x28>
    }
    return 0;
c0109b75:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b7a:	c9                   	leave  
c0109b7b:	c3                   	ret    

c0109b7c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109b7c:	55                   	push   %ebp
c0109b7d:	89 e5                	mov    %esp,%ebp
c0109b7f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109b82:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b86:	74 05                	je     c0109b8d <__intr_restore+0x11>
        intr_enable();
c0109b88:	e8 b5 85 ff ff       	call   c0102142 <intr_enable>
    }
}
c0109b8d:	c9                   	leave  
c0109b8e:	c3                   	ret    

c0109b8f <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109b8f:	55                   	push   %ebp
c0109b90:	89 e5                	mov    %esp,%ebp
c0109b92:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109b95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b98:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b9b:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109b9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ba0:	83 c0 04             	add    $0x4,%eax
c0109ba3:	89 04 24             	mov    %eax,(%esp)
c0109ba6:	e8 33 02 00 00       	call   c0109dde <wait_queue_init>
}
c0109bab:	c9                   	leave  
c0109bac:	c3                   	ret    

c0109bad <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109bad:	55                   	push   %ebp
c0109bae:	89 e5                	mov    %esp,%ebp
c0109bb0:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109bb3:	e8 9a ff ff ff       	call   c0109b52 <__intr_save>
c0109bb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109bbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bbe:	83 c0 04             	add    $0x4,%eax
c0109bc1:	89 04 24             	mov    %eax,(%esp)
c0109bc4:	e8 69 04 00 00       	call   c010a032 <wait_queue_first>
c0109bc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109bcc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109bd0:	75 0f                	jne    c0109be1 <__up+0x34>
            sem->value ++;
c0109bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd5:	8b 00                	mov    (%eax),%eax
c0109bd7:	8d 50 01             	lea    0x1(%eax),%edx
c0109bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bdd:	89 10                	mov    %edx,(%eax)
c0109bdf:	eb 58                	jmp    c0109c39 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109be4:	8b 00                	mov    (%eax),%eax
c0109be6:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109bec:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109bef:	74 24                	je     c0109c15 <__up+0x68>
c0109bf1:	c7 44 24 0c 24 7c 11 	movl   $0xc0117c24,0xc(%esp)
c0109bf8:	c0 
c0109bf9:	c7 44 24 08 49 7c 11 	movl   $0xc0117c49,0x8(%esp)
c0109c00:	c0 
c0109c01:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109c08:	00 
c0109c09:	c7 04 24 5e 7c 11 c0 	movl   $0xc0117c5e,(%esp)
c0109c10:	e8 b3 72 ff ff       	call   c0100ec8 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c18:	8d 50 04             	lea    0x4(%eax),%edx
c0109c1b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109c22:	00 
c0109c23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c26:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c31:	89 14 24             	mov    %edx,(%esp)
c0109c34:	e8 95 04 00 00       	call   c010a0ce <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109c39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c3c:	89 04 24             	mov    %eax,(%esp)
c0109c3f:	e8 38 ff ff ff       	call   c0109b7c <__intr_restore>
}
c0109c44:	c9                   	leave  
c0109c45:	c3                   	ret    

c0109c46 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109c46:	55                   	push   %ebp
c0109c47:	89 e5                	mov    %esp,%ebp
c0109c49:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109c4c:	e8 01 ff ff ff       	call   c0109b52 <__intr_save>
c0109c51:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c57:	8b 00                	mov    (%eax),%eax
c0109c59:	85 c0                	test   %eax,%eax
c0109c5b:	7e 22                	jle    c0109c7f <__down+0x39>
        sem->value --;
c0109c5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c60:	8b 00                	mov    (%eax),%eax
c0109c62:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c65:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c68:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109c6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c6d:	89 04 24             	mov    %eax,(%esp)
c0109c70:	e8 07 ff ff ff       	call   c0109b7c <__intr_restore>
        return 0;
c0109c75:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c7a:	e9 81 00 00 00       	jmp    c0109d00 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109c7f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109c82:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109c85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c88:	8d 50 04             	lea    0x4(%eax),%edx
c0109c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c8e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c99:	89 14 24             	mov    %edx,(%esp)
c0109c9c:	e8 34 05 00 00       	call   c010a1d5 <wait_current_set>
    local_intr_restore(intr_flag);
c0109ca1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ca4:	89 04 24             	mov    %eax,(%esp)
c0109ca7:	e8 d0 fe ff ff       	call   c0109b7c <__intr_restore>

    schedule();
c0109cac:	e8 8a 4a 00 00       	call   c010e73b <schedule>

    local_intr_save(intr_flag);
c0109cb1:	e8 9c fe ff ff       	call   c0109b52 <__intr_save>
c0109cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109cb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cbc:	89 04 24             	mov    %eax,(%esp)
c0109cbf:	e8 e2 03 00 00       	call   c010a0a6 <wait_in_queue>
c0109cc4:	85 c0                	test   %eax,%eax
c0109cc6:	74 15                	je     c0109cdd <__down+0x97>
c0109cc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ccb:	8d 50 04             	lea    0x4(%eax),%edx
c0109cce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cd1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109cd5:	89 14 24             	mov    %edx,(%esp)
c0109cd8:	e8 c4 01 00 00       	call   c0109ea1 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ce0:	89 04 24             	mov    %eax,(%esp)
c0109ce3:	e8 94 fe ff ff       	call   c0109b7c <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ceb:	8b 40 04             	mov    0x4(%eax),%eax
c0109cee:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109cf1:	74 08                	je     c0109cfb <__down+0xb5>
        return wait->wakeup_flags;
c0109cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cf6:	8b 40 04             	mov    0x4(%eax),%eax
c0109cf9:	eb 05                	jmp    c0109d00 <__down+0xba>
    }
    return 0;
c0109cfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109d00:	c9                   	leave  
c0109d01:	c3                   	ret    

c0109d02 <up>:

void
up(semaphore_t *sem) {
c0109d02:	55                   	push   %ebp
c0109d03:	89 e5                	mov    %esp,%ebp
c0109d05:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109d08:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109d0f:	00 
c0109d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d13:	89 04 24             	mov    %eax,(%esp)
c0109d16:	e8 92 fe ff ff       	call   c0109bad <__up>
}
c0109d1b:	c9                   	leave  
c0109d1c:	c3                   	ret    

c0109d1d <down>:

void
down(semaphore_t *sem) {
c0109d1d:	55                   	push   %ebp
c0109d1e:	89 e5                	mov    %esp,%ebp
c0109d20:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109d23:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109d2a:	00 
c0109d2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d2e:	89 04 24             	mov    %eax,(%esp)
c0109d31:	e8 10 ff ff ff       	call   c0109c46 <__down>
c0109d36:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109d39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d3d:	74 24                	je     c0109d63 <down+0x46>
c0109d3f:	c7 44 24 0c 6e 7c 11 	movl   $0xc0117c6e,0xc(%esp)
c0109d46:	c0 
c0109d47:	c7 44 24 08 49 7c 11 	movl   $0xc0117c49,0x8(%esp)
c0109d4e:	c0 
c0109d4f:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109d56:	00 
c0109d57:	c7 04 24 5e 7c 11 c0 	movl   $0xc0117c5e,(%esp)
c0109d5e:	e8 65 71 ff ff       	call   c0100ec8 <__panic>
}
c0109d63:	c9                   	leave  
c0109d64:	c3                   	ret    

c0109d65 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109d65:	55                   	push   %ebp
c0109d66:	89 e5                	mov    %esp,%ebp
c0109d68:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109d6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109d72:	e8 db fd ff ff       	call   c0109b52 <__intr_save>
c0109d77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109d7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d7d:	8b 00                	mov    (%eax),%eax
c0109d7f:	85 c0                	test   %eax,%eax
c0109d81:	7e 14                	jle    c0109d97 <try_down+0x32>
        sem->value --, ret = 1;
c0109d83:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d86:	8b 00                	mov    (%eax),%eax
c0109d88:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d8e:	89 10                	mov    %edx,(%eax)
c0109d90:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109d97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d9a:	89 04 24             	mov    %eax,(%esp)
c0109d9d:	e8 da fd ff ff       	call   c0109b7c <__intr_restore>
    return ret;
c0109da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109da5:	c9                   	leave  
c0109da6:	c3                   	ret    

c0109da7 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109da7:	55                   	push   %ebp
c0109da8:	89 e5                	mov    %esp,%ebp
c0109daa:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109dad:	8b 45 08             	mov    0x8(%ebp),%eax
c0109db0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109db3:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109db5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109db8:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109dbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dc2:	83 c0 0c             	add    $0xc,%eax
c0109dc5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109dc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dcb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109dce:	89 50 04             	mov    %edx,0x4(%eax)
c0109dd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dd4:	8b 50 04             	mov    0x4(%eax),%edx
c0109dd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dda:	89 10                	mov    %edx,(%eax)
}
c0109ddc:	c9                   	leave  
c0109ddd:	c3                   	ret    

c0109dde <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109dde:	55                   	push   %ebp
c0109ddf:	89 e5                	mov    %esp,%ebp
c0109de1:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109de4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ded:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109df0:	89 50 04             	mov    %edx,0x4(%eax)
c0109df3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109df6:	8b 50 04             	mov    0x4(%eax),%edx
c0109df9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dfc:	89 10                	mov    %edx,(%eax)
}
c0109dfe:	c9                   	leave  
c0109dff:	c3                   	ret    

c0109e00 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109e00:	55                   	push   %ebp
c0109e01:	89 e5                	mov    %esp,%ebp
c0109e03:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109e06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e09:	83 c0 0c             	add    $0xc,%eax
c0109e0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e12:	8b 40 04             	mov    0x4(%eax),%eax
c0109e15:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109e18:	0f 94 c0             	sete   %al
c0109e1b:	0f b6 c0             	movzbl %al,%eax
c0109e1e:	85 c0                	test   %eax,%eax
c0109e20:	74 09                	je     c0109e2b <wait_queue_add+0x2b>
c0109e22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e25:	8b 00                	mov    (%eax),%eax
c0109e27:	85 c0                	test   %eax,%eax
c0109e29:	75 24                	jne    c0109e4f <wait_queue_add+0x4f>
c0109e2b:	c7 44 24 0c 7c 7c 11 	movl   $0xc0117c7c,0xc(%esp)
c0109e32:	c0 
c0109e33:	c7 44 24 08 b1 7c 11 	movl   $0xc0117cb1,0x8(%esp)
c0109e3a:	c0 
c0109e3b:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109e42:	00 
c0109e43:	c7 04 24 c6 7c 11 c0 	movl   $0xc0117cc6,(%esp)
c0109e4a:	e8 79 70 ff ff       	call   c0100ec8 <__panic>
    wait->wait_queue = queue;
c0109e4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e52:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e55:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109e58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e5b:	8d 50 0c             	lea    0xc(%eax),%edx
c0109e5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e61:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e64:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109e67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e6a:	8b 00                	mov    (%eax),%eax
c0109e6c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e6f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e78:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109e7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109e81:	89 10                	mov    %edx,(%eax)
c0109e83:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e86:	8b 10                	mov    (%eax),%edx
c0109e88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e8b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109e8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e91:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109e94:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109e97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e9a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e9d:	89 10                	mov    %edx,(%eax)
}
c0109e9f:	c9                   	leave  
c0109ea0:	c3                   	ret    

c0109ea1 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109ea1:	55                   	push   %ebp
c0109ea2:	89 e5                	mov    %esp,%ebp
c0109ea4:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eaa:	83 c0 0c             	add    $0xc,%eax
c0109ead:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109eb3:	8b 40 04             	mov    0x4(%eax),%eax
c0109eb6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109eb9:	0f 94 c0             	sete   %al
c0109ebc:	0f b6 c0             	movzbl %al,%eax
c0109ebf:	85 c0                	test   %eax,%eax
c0109ec1:	75 0b                	jne    c0109ece <wait_queue_del+0x2d>
c0109ec3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ec6:	8b 40 08             	mov    0x8(%eax),%eax
c0109ec9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109ecc:	74 24                	je     c0109ef2 <wait_queue_del+0x51>
c0109ece:	c7 44 24 0c d8 7c 11 	movl   $0xc0117cd8,0xc(%esp)
c0109ed5:	c0 
c0109ed6:	c7 44 24 08 b1 7c 11 	movl   $0xc0117cb1,0x8(%esp)
c0109edd:	c0 
c0109ede:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109ee5:	00 
c0109ee6:	c7 04 24 c6 7c 11 c0 	movl   $0xc0117cc6,(%esp)
c0109eed:	e8 d6 6f ff ff       	call   c0100ec8 <__panic>
    list_del_init(&(wait->wait_link));
c0109ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ef5:	83 c0 0c             	add    $0xc,%eax
c0109ef8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109efe:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f04:	8b 40 04             	mov    0x4(%eax),%eax
c0109f07:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f0a:	8b 12                	mov    (%edx),%edx
c0109f0c:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109f0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109f12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109f18:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109f1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109f1e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109f21:	89 10                	mov    %edx,(%eax)
c0109f23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f26:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109f29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f2c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109f2f:	89 50 04             	mov    %edx,0x4(%eax)
c0109f32:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f35:	8b 50 04             	mov    0x4(%eax),%edx
c0109f38:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f3b:	89 10                	mov    %edx,(%eax)
}
c0109f3d:	c9                   	leave  
c0109f3e:	c3                   	ret    

c0109f3f <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109f3f:	55                   	push   %ebp
c0109f40:	89 e5                	mov    %esp,%ebp
c0109f42:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109f45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f48:	83 c0 0c             	add    $0xc,%eax
c0109f4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f51:	8b 40 04             	mov    0x4(%eax),%eax
c0109f54:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109f57:	0f 94 c0             	sete   %al
c0109f5a:	0f b6 c0             	movzbl %al,%eax
c0109f5d:	85 c0                	test   %eax,%eax
c0109f5f:	75 0b                	jne    c0109f6c <wait_queue_next+0x2d>
c0109f61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f64:	8b 40 08             	mov    0x8(%eax),%eax
c0109f67:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109f6a:	74 24                	je     c0109f90 <wait_queue_next+0x51>
c0109f6c:	c7 44 24 0c d8 7c 11 	movl   $0xc0117cd8,0xc(%esp)
c0109f73:	c0 
c0109f74:	c7 44 24 08 b1 7c 11 	movl   $0xc0117cb1,0x8(%esp)
c0109f7b:	c0 
c0109f7c:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109f83:	00 
c0109f84:	c7 04 24 c6 7c 11 c0 	movl   $0xc0117cc6,(%esp)
c0109f8b:	e8 38 6f ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109f90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f93:	83 c0 0c             	add    $0xc,%eax
c0109f96:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f9c:	8b 40 04             	mov    0x4(%eax),%eax
c0109f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109fa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fa5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109fa8:	74 08                	je     c0109fb2 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109faa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fad:	83 e8 0c             	sub    $0xc,%eax
c0109fb0:	eb 05                	jmp    c0109fb7 <wait_queue_next+0x78>
    }
    return NULL;
c0109fb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fb7:	c9                   	leave  
c0109fb8:	c3                   	ret    

c0109fb9 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109fb9:	55                   	push   %ebp
c0109fba:	89 e5                	mov    %esp,%ebp
c0109fbc:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fc2:	83 c0 0c             	add    $0xc,%eax
c0109fc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109fc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fcb:	8b 40 04             	mov    0x4(%eax),%eax
c0109fce:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109fd1:	0f 94 c0             	sete   %al
c0109fd4:	0f b6 c0             	movzbl %al,%eax
c0109fd7:	85 c0                	test   %eax,%eax
c0109fd9:	75 0b                	jne    c0109fe6 <wait_queue_prev+0x2d>
c0109fdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fde:	8b 40 08             	mov    0x8(%eax),%eax
c0109fe1:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109fe4:	74 24                	je     c010a00a <wait_queue_prev+0x51>
c0109fe6:	c7 44 24 0c d8 7c 11 	movl   $0xc0117cd8,0xc(%esp)
c0109fed:	c0 
c0109fee:	c7 44 24 08 b1 7c 11 	movl   $0xc0117cb1,0x8(%esp)
c0109ff5:	c0 
c0109ff6:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109ffd:	00 
c0109ffe:	c7 04 24 c6 7c 11 c0 	movl   $0xc0117cc6,(%esp)
c010a005:	e8 be 6e ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a00a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a00d:	83 c0 0c             	add    $0xc,%eax
c010a010:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a013:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a016:	8b 00                	mov    (%eax),%eax
c010a018:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a01b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a01e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a021:	74 08                	je     c010a02b <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a023:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a026:	83 e8 0c             	sub    $0xc,%eax
c010a029:	eb 05                	jmp    c010a030 <wait_queue_prev+0x77>
    }
    return NULL;
c010a02b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a030:	c9                   	leave  
c010a031:	c3                   	ret    

c010a032 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a032:	55                   	push   %ebp
c010a033:	89 e5                	mov    %esp,%ebp
c010a035:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a038:	8b 45 08             	mov    0x8(%ebp),%eax
c010a03b:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a03e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a041:	8b 40 04             	mov    0x4(%eax),%eax
c010a044:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a047:	8b 45 08             	mov    0x8(%ebp),%eax
c010a04a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a04d:	74 08                	je     c010a057 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a04f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a052:	83 e8 0c             	sub    $0xc,%eax
c010a055:	eb 05                	jmp    c010a05c <wait_queue_first+0x2a>
    }
    return NULL;
c010a057:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a05c:	c9                   	leave  
c010a05d:	c3                   	ret    

c010a05e <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a05e:	55                   	push   %ebp
c010a05f:	89 e5                	mov    %esp,%ebp
c010a061:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a064:	8b 45 08             	mov    0x8(%ebp),%eax
c010a067:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a06a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a06d:	8b 00                	mov    (%eax),%eax
c010a06f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a072:	8b 45 08             	mov    0x8(%ebp),%eax
c010a075:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a078:	74 08                	je     c010a082 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a07a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a07d:	83 e8 0c             	sub    $0xc,%eax
c010a080:	eb 05                	jmp    c010a087 <wait_queue_last+0x29>
    }
    return NULL;
c010a082:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a087:	c9                   	leave  
c010a088:	c3                   	ret    

c010a089 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a089:	55                   	push   %ebp
c010a08a:	89 e5                	mov    %esp,%ebp
c010a08c:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a08f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a092:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a098:	8b 40 04             	mov    0x4(%eax),%eax
c010a09b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a09e:	0f 94 c0             	sete   %al
c010a0a1:	0f b6 c0             	movzbl %al,%eax
}
c010a0a4:	c9                   	leave  
c010a0a5:	c3                   	ret    

c010a0a6 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a0a6:	55                   	push   %ebp
c010a0a7:	89 e5                	mov    %esp,%ebp
c010a0a9:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a0ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0af:	83 c0 0c             	add    $0xc,%eax
c010a0b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a0b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a0b8:	8b 40 04             	mov    0x4(%eax),%eax
c010a0bb:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a0be:	0f 94 c0             	sete   %al
c010a0c1:	0f b6 c0             	movzbl %al,%eax
c010a0c4:	85 c0                	test   %eax,%eax
c010a0c6:	0f 94 c0             	sete   %al
c010a0c9:	0f b6 c0             	movzbl %al,%eax
}
c010a0cc:	c9                   	leave  
c010a0cd:	c3                   	ret    

c010a0ce <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a0ce:	55                   	push   %ebp
c010a0cf:	89 e5                	mov    %esp,%ebp
c010a0d1:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a0d4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a0d8:	74 12                	je     c010a0ec <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a0da:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0e4:	89 04 24             	mov    %eax,(%esp)
c010a0e7:	e8 b5 fd ff ff       	call   c0109ea1 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a0ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0ef:	8b 55 10             	mov    0x10(%ebp),%edx
c010a0f2:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a0f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0f8:	8b 00                	mov    (%eax),%eax
c010a0fa:	89 04 24             	mov    %eax,(%esp)
c010a0fd:	e8 9d 45 00 00       	call   c010e69f <wakeup_proc>
}
c010a102:	c9                   	leave  
c010a103:	c3                   	ret    

c010a104 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a104:	55                   	push   %ebp
c010a105:	89 e5                	mov    %esp,%ebp
c010a107:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a10a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a10d:	89 04 24             	mov    %eax,(%esp)
c010a110:	e8 1d ff ff ff       	call   c010a032 <wait_queue_first>
c010a115:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a118:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a11c:	74 20                	je     c010a13e <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a11e:	8b 45 10             	mov    0x10(%ebp),%eax
c010a121:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a125:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a128:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a12c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a12f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a133:	8b 45 08             	mov    0x8(%ebp),%eax
c010a136:	89 04 24             	mov    %eax,(%esp)
c010a139:	e8 90 ff ff ff       	call   c010a0ce <wakeup_wait>
    }
}
c010a13e:	c9                   	leave  
c010a13f:	c3                   	ret    

c010a140 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a140:	55                   	push   %ebp
c010a141:	89 e5                	mov    %esp,%ebp
c010a143:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a146:	8b 45 08             	mov    0x8(%ebp),%eax
c010a149:	89 04 24             	mov    %eax,(%esp)
c010a14c:	e8 e1 fe ff ff       	call   c010a032 <wait_queue_first>
c010a151:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a154:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a158:	74 79                	je     c010a1d3 <wakeup_queue+0x93>
        if (del) {
c010a15a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a15e:	74 37                	je     c010a197 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a160:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a167:	00 
c010a168:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a16b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a16f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a172:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a176:	8b 45 08             	mov    0x8(%ebp),%eax
c010a179:	89 04 24             	mov    %eax,(%esp)
c010a17c:	e8 4d ff ff ff       	call   c010a0ce <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a181:	8b 45 08             	mov    0x8(%ebp),%eax
c010a184:	89 04 24             	mov    %eax,(%esp)
c010a187:	e8 a6 fe ff ff       	call   c010a032 <wait_queue_first>
c010a18c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a18f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a193:	75 cb                	jne    c010a160 <wakeup_queue+0x20>
c010a195:	eb 3c                	jmp    c010a1d3 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a197:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a19e:	00 
c010a19f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1a2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a1a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b0:	89 04 24             	mov    %eax,(%esp)
c010a1b3:	e8 16 ff ff ff       	call   c010a0ce <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a1b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c2:	89 04 24             	mov    %eax,(%esp)
c010a1c5:	e8 75 fd ff ff       	call   c0109f3f <wait_queue_next>
c010a1ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1d1:	75 c4                	jne    c010a197 <wakeup_queue+0x57>
        }
    }
}
c010a1d3:	c9                   	leave  
c010a1d4:	c3                   	ret    

c010a1d5 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a1d5:	55                   	push   %ebp
c010a1d6:	89 e5                	mov    %esp,%ebp
c010a1d8:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a1db:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010a1e0:	85 c0                	test   %eax,%eax
c010a1e2:	75 24                	jne    c010a208 <wait_current_set+0x33>
c010a1e4:	c7 44 24 0c 15 7d 11 	movl   $0xc0117d15,0xc(%esp)
c010a1eb:	c0 
c010a1ec:	c7 44 24 08 b1 7c 11 	movl   $0xc0117cb1,0x8(%esp)
c010a1f3:	c0 
c010a1f4:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a1fb:	00 
c010a1fc:	c7 04 24 c6 7c 11 c0 	movl   $0xc0117cc6,(%esp)
c010a203:	e8 c0 6c ff ff       	call   c0100ec8 <__panic>
    wait_init(wait, current);
c010a208:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010a20d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a211:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a214:	89 04 24             	mov    %eax,(%esp)
c010a217:	e8 8b fb ff ff       	call   c0109da7 <wait_init>
    current->state = PROC_SLEEPING;
c010a21c:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010a221:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a227:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010a22c:	8b 55 10             	mov    0x10(%ebp),%edx
c010a22f:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a235:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a238:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a23c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a23f:	89 04 24             	mov    %eax,(%esp)
c010a242:	e8 b9 fb ff ff       	call   c0109e00 <wait_queue_add>
}
c010a247:	c9                   	leave  
c010a248:	c3                   	ret    

c010a249 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a249:	55                   	push   %ebp
c010a24a:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a24c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a24f:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a252:	5d                   	pop    %ebp
c010a253:	c3                   	ret    

c010a254 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a254:	55                   	push   %ebp
c010a255:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a257:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25a:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a25d:	5d                   	pop    %ebp
c010a25e:	c3                   	ret    

c010a25f <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a25f:	55                   	push   %ebp
c010a260:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a262:	8b 45 08             	mov    0x8(%ebp),%eax
c010a265:	8b 40 18             	mov    0x18(%eax),%eax
c010a268:	8d 50 01             	lea    0x1(%eax),%edx
c010a26b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a26e:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a271:	8b 45 08             	mov    0x8(%ebp),%eax
c010a274:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a277:	5d                   	pop    %ebp
c010a278:	c3                   	ret    

c010a279 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a279:	55                   	push   %ebp
c010a27a:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a27c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a27f:	8b 40 18             	mov    0x18(%eax),%eax
c010a282:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a285:	8b 45 08             	mov    0x8(%ebp),%eax
c010a288:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a28b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a28e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a291:	5d                   	pop    %ebp
c010a292:	c3                   	ret    

c010a293 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a293:	55                   	push   %ebp
c010a294:	89 e5                	mov    %esp,%ebp
c010a296:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a299:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010a29e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a2a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a2a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2ab:	74 0f                	je     c010a2bc <get_fd_array+0x29>
c010a2ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2b0:	89 04 24             	mov    %eax,(%esp)
c010a2b3:	e8 91 ff ff ff       	call   c010a249 <files_count>
c010a2b8:	85 c0                	test   %eax,%eax
c010a2ba:	7f 24                	jg     c010a2e0 <get_fd_array+0x4d>
c010a2bc:	c7 44 24 0c 28 7d 11 	movl   $0xc0117d28,0xc(%esp)
c010a2c3:	c0 
c010a2c4:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a2cb:	c0 
c010a2cc:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c010a2d3:	00 
c010a2d4:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a2db:	e8 e8 6b ff ff       	call   c0100ec8 <__panic>
    return filesp->fd_array;
c010a2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2e3:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a2e6:	c9                   	leave  
c010a2e7:	c3                   	ret    

c010a2e8 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a2e8:	55                   	push   %ebp
c010a2e9:	89 e5                	mov    %esp,%ebp
c010a2eb:	83 ec 28             	sub    $0x28,%esp
    cprintf("[initialize the open files table]\n");
c010a2ee:	c7 04 24 78 7d 11 c0 	movl   $0xc0117d78,(%esp)
c010a2f5:	e8 6b 60 ff ff       	call   c0100365 <cprintf>
    int fd;
    struct file *file = fd_array;
c010a2fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a300:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a307:	eb 24                	jmp    c010a32d <fd_array_init+0x45>
        file->open_count = 0;
c010a309:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a30c:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a313:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a316:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a31c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a31f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a322:	89 50 0c             	mov    %edx,0xc(%eax)
void
fd_array_init(struct file *fd_array) {
    cprintf("[initialize the open files table]\n");
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a325:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a329:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010a32d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a330:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a335:	76 d2                	jbe    c010a309 <fd_array_init+0x21>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a337:	c9                   	leave  
c010a338:	c3                   	ret    

c010a339 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a339:	55                   	push   %ebp
c010a33a:	89 e5                	mov    %esp,%ebp
c010a33c:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a33f:	e8 4f ff ff ff       	call   c010a293 <get_fd_array>
c010a344:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a347:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a34e:	75 30                	jne    c010a380 <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a350:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a357:	eb 13                	jmp    c010a36c <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a359:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a35c:	8b 00                	mov    (%eax),%eax
c010a35e:	85 c0                	test   %eax,%eax
c010a360:	75 02                	jne    c010a364 <fd_array_alloc+0x2b>
                goto found;
c010a362:	eb 59                	jmp    c010a3bd <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a364:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a368:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a36c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a36f:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a374:	76 e3                	jbe    c010a359 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a376:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a37b:	e9 90 00 00 00       	jmp    c010a410 <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a380:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a384:	78 30                	js     c010a3b6 <fd_array_alloc+0x7d>
c010a386:	8b 45 08             	mov    0x8(%ebp),%eax
c010a389:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a38e:	77 26                	ja     c010a3b6 <fd_array_alloc+0x7d>
            file += fd;
c010a390:	8b 45 08             	mov    0x8(%ebp),%eax
c010a393:	c1 e0 02             	shl    $0x2,%eax
c010a396:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a39d:	29 c2                	sub    %eax,%edx
c010a39f:	89 d0                	mov    %edx,%eax
c010a3a1:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a3a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a7:	8b 00                	mov    (%eax),%eax
c010a3a9:	85 c0                	test   %eax,%eax
c010a3ab:	75 02                	jne    c010a3af <fd_array_alloc+0x76>
                goto found;
c010a3ad:	eb 0e                	jmp    c010a3bd <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a3af:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a3b4:	eb 5a                	jmp    c010a410 <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a3b6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a3bb:	eb 53                	jmp    c010a410 <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a3bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3c0:	89 04 24             	mov    %eax,(%esp)
c010a3c3:	e8 8c fe ff ff       	call   c010a254 <fopen_count>
c010a3c8:	85 c0                	test   %eax,%eax
c010a3ca:	74 24                	je     c010a3f0 <fd_array_alloc+0xb7>
c010a3cc:	c7 44 24 0c 9b 7d 11 	movl   $0xc0117d9b,0xc(%esp)
c010a3d3:	c0 
c010a3d4:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a3db:	c0 
c010a3dc:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010a3e3:	00 
c010a3e4:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a3eb:	e8 d8 6a ff ff       	call   c0100ec8 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a3f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3f3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a3f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3fc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a403:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a406:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a409:	89 10                	mov    %edx,(%eax)
    return 0;
c010a40b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a410:	c9                   	leave  
c010a411:	c3                   	ret    

c010a412 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a412:	55                   	push   %ebp
c010a413:	89 e5                	mov    %esp,%ebp
c010a415:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a418:	8b 45 08             	mov    0x8(%ebp),%eax
c010a41b:	8b 00                	mov    (%eax),%eax
c010a41d:	83 f8 01             	cmp    $0x1,%eax
c010a420:	74 2e                	je     c010a450 <fd_array_free+0x3e>
c010a422:	8b 45 08             	mov    0x8(%ebp),%eax
c010a425:	8b 00                	mov    (%eax),%eax
c010a427:	83 f8 03             	cmp    $0x3,%eax
c010a42a:	74 24                	je     c010a450 <fd_array_free+0x3e>
c010a42c:	c7 44 24 0c b4 7d 11 	movl   $0xc0117db4,0xc(%esp)
c010a433:	c0 
c010a434:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a43b:	c0 
c010a43c:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010a443:	00 
c010a444:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a44b:	e8 78 6a ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) == 0);
c010a450:	8b 45 08             	mov    0x8(%ebp),%eax
c010a453:	89 04 24             	mov    %eax,(%esp)
c010a456:	e8 f9 fd ff ff       	call   c010a254 <fopen_count>
c010a45b:	85 c0                	test   %eax,%eax
c010a45d:	74 24                	je     c010a483 <fd_array_free+0x71>
c010a45f:	c7 44 24 0c 9b 7d 11 	movl   $0xc0117d9b,0xc(%esp)
c010a466:	c0 
c010a467:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a46e:	c0 
c010a46f:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010a476:	00 
c010a477:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a47e:	e8 45 6a ff ff       	call   c0100ec8 <__panic>
    if (file->status == FD_CLOSED) {
c010a483:	8b 45 08             	mov    0x8(%ebp),%eax
c010a486:	8b 00                	mov    (%eax),%eax
c010a488:	83 f8 03             	cmp    $0x3,%eax
c010a48b:	75 0e                	jne    c010a49b <fd_array_free+0x89>
        vfs_close(file->node);
c010a48d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a490:	8b 40 14             	mov    0x14(%eax),%eax
c010a493:	89 04 24             	mov    %eax,(%esp)
c010a496:	e8 b4 5d 00 00       	call   c011024f <vfs_close>
    }
    file->status = FD_NONE;
c010a49b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a4a4:	c9                   	leave  
c010a4a5:	c3                   	ret    

c010a4a6 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a4a6:	55                   	push   %ebp
c010a4a7:	89 e5                	mov    %esp,%ebp
c010a4a9:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4af:	8b 00                	mov    (%eax),%eax
c010a4b1:	83 f8 02             	cmp    $0x2,%eax
c010a4b4:	74 24                	je     c010a4da <fd_array_acquire+0x34>
c010a4b6:	c7 44 24 0c e9 7d 11 	movl   $0xc0117de9,0xc(%esp)
c010a4bd:	c0 
c010a4be:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a4c5:	c0 
c010a4c6:	c7 44 24 04 50 00 00 	movl   $0x50,0x4(%esp)
c010a4cd:	00 
c010a4ce:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a4d5:	e8 ee 69 ff ff       	call   c0100ec8 <__panic>
    fopen_count_inc(file);
c010a4da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4dd:	89 04 24             	mov    %eax,(%esp)
c010a4e0:	e8 7a fd ff ff       	call   c010a25f <fopen_count_inc>
}
c010a4e5:	c9                   	leave  
c010a4e6:	c3                   	ret    

c010a4e7 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a4e7:	55                   	push   %ebp
c010a4e8:	89 e5                	mov    %esp,%ebp
c010a4ea:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a4ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4f0:	8b 00                	mov    (%eax),%eax
c010a4f2:	83 f8 02             	cmp    $0x2,%eax
c010a4f5:	74 2e                	je     c010a525 <fd_array_release+0x3e>
c010a4f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4fa:	8b 00                	mov    (%eax),%eax
c010a4fc:	83 f8 03             	cmp    $0x3,%eax
c010a4ff:	74 24                	je     c010a525 <fd_array_release+0x3e>
c010a501:	c7 44 24 0c 04 7e 11 	movl   $0xc0117e04,0xc(%esp)
c010a508:	c0 
c010a509:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a510:	c0 
c010a511:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c010a518:	00 
c010a519:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a520:	e8 a3 69 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a525:	8b 45 08             	mov    0x8(%ebp),%eax
c010a528:	89 04 24             	mov    %eax,(%esp)
c010a52b:	e8 24 fd ff ff       	call   c010a254 <fopen_count>
c010a530:	85 c0                	test   %eax,%eax
c010a532:	7f 24                	jg     c010a558 <fd_array_release+0x71>
c010a534:	c7 44 24 0c 3b 7e 11 	movl   $0xc0117e3b,0xc(%esp)
c010a53b:	c0 
c010a53c:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a543:	c0 
c010a544:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c010a54b:	00 
c010a54c:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a553:	e8 70 69 ff ff       	call   c0100ec8 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a558:	8b 45 08             	mov    0x8(%ebp),%eax
c010a55b:	89 04 24             	mov    %eax,(%esp)
c010a55e:	e8 16 fd ff ff       	call   c010a279 <fopen_count_dec>
c010a563:	85 c0                	test   %eax,%eax
c010a565:	75 0b                	jne    c010a572 <fd_array_release+0x8b>
        fd_array_free(file);
c010a567:	8b 45 08             	mov    0x8(%ebp),%eax
c010a56a:	89 04 24             	mov    %eax,(%esp)
c010a56d:	e8 a0 fe ff ff       	call   c010a412 <fd_array_free>
    }
}
c010a572:	c9                   	leave  
c010a573:	c3                   	ret    

c010a574 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a574:	55                   	push   %ebp
c010a575:	89 e5                	mov    %esp,%ebp
c010a577:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a57a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57d:	8b 00                	mov    (%eax),%eax
c010a57f:	83 f8 01             	cmp    $0x1,%eax
c010a582:	75 0a                	jne    c010a58e <fd_array_open+0x1a>
c010a584:	8b 45 08             	mov    0x8(%ebp),%eax
c010a587:	8b 40 14             	mov    0x14(%eax),%eax
c010a58a:	85 c0                	test   %eax,%eax
c010a58c:	75 24                	jne    c010a5b2 <fd_array_open+0x3e>
c010a58e:	c7 44 24 0c 54 7e 11 	movl   $0xc0117e54,0xc(%esp)
c010a595:	c0 
c010a596:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a59d:	c0 
c010a59e:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010a5a5:	00 
c010a5a6:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a5ad:	e8 16 69 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_OPENED;
c010a5b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b5:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a5bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5be:	89 04 24             	mov    %eax,(%esp)
c010a5c1:	e8 99 fc ff ff       	call   c010a25f <fopen_count_inc>
}
c010a5c6:	c9                   	leave  
c010a5c7:	c3                   	ret    

c010a5c8 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a5c8:	55                   	push   %ebp
c010a5c9:	89 e5                	mov    %esp,%ebp
c010a5cb:	83 ec 18             	sub    $0x18,%esp

    assert(file->status == FD_OPENED);
c010a5ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5d1:	8b 00                	mov    (%eax),%eax
c010a5d3:	83 f8 02             	cmp    $0x2,%eax
c010a5d6:	74 24                	je     c010a5fc <fd_array_close+0x34>
c010a5d8:	c7 44 24 0c e9 7d 11 	movl   $0xc0117de9,0xc(%esp)
c010a5df:	c0 
c010a5e0:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a5e7:	c0 
c010a5e8:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a5ef:	00 
c010a5f0:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a5f7:	e8 cc 68 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a5fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ff:	89 04 24             	mov    %eax,(%esp)
c010a602:	e8 4d fc ff ff       	call   c010a254 <fopen_count>
c010a607:	85 c0                	test   %eax,%eax
c010a609:	7f 24                	jg     c010a62f <fd_array_close+0x67>
c010a60b:	c7 44 24 0c 3b 7e 11 	movl   $0xc0117e3b,0xc(%esp)
c010a612:	c0 
c010a613:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a61a:	c0 
c010a61b:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010a622:	00 
c010a623:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a62a:	e8 99 68 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_CLOSED;
c010a62f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a632:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a638:	8b 45 08             	mov    0x8(%ebp),%eax
c010a63b:	89 04 24             	mov    %eax,(%esp)
c010a63e:	e8 36 fc ff ff       	call   c010a279 <fopen_count_dec>
c010a643:	85 c0                	test   %eax,%eax
c010a645:	75 0b                	jne    c010a652 <fd_array_close+0x8a>
        fd_array_free(file);
c010a647:	8b 45 08             	mov    0x8(%ebp),%eax
c010a64a:	89 04 24             	mov    %eax,(%esp)
c010a64d:	e8 c0 fd ff ff       	call   c010a412 <fd_array_free>
    }
}
c010a652:	c9                   	leave  
c010a653:	c3                   	ret    

c010a654 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a654:	55                   	push   %ebp
c010a655:	89 e5                	mov    %esp,%ebp
c010a657:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a65a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a65d:	8b 00                	mov    (%eax),%eax
c010a65f:	83 f8 01             	cmp    $0x1,%eax
c010a662:	75 0a                	jne    c010a66e <fd_array_dup+0x1a>
c010a664:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a667:	8b 00                	mov    (%eax),%eax
c010a669:	83 f8 02             	cmp    $0x2,%eax
c010a66c:	74 24                	je     c010a692 <fd_array_dup+0x3e>
c010a66e:	c7 44 24 0c 84 7e 11 	movl   $0xc0117e84,0xc(%esp)
c010a675:	c0 
c010a676:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a67d:	c0 
c010a67e:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c010a685:	00 
c010a686:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a68d:	e8 36 68 ff ff       	call   c0100ec8 <__panic>
    to->pos = from->pos;
c010a692:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a695:	8b 50 10             	mov    0x10(%eax),%edx
c010a698:	8b 45 08             	mov    0x8(%ebp),%eax
c010a69b:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a69e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6a1:	8b 50 04             	mov    0x4(%eax),%edx
c010a6a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a7:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a6aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6ad:	8b 50 08             	mov    0x8(%eax),%edx
c010a6b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6b3:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a6b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6b9:	8b 40 14             	mov    0x14(%eax),%eax
c010a6bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a6bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c2:	89 04 24             	mov    %eax,(%esp)
c010a6c5:	e8 36 4b 00 00       	call   c010f200 <inode_ref_inc>
c010a6ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6cd:	89 04 24             	mov    %eax,(%esp)
c010a6d0:	e8 32 4c 00 00       	call   c010f307 <inode_open_inc>
    to->node = node;
c010a6d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6db:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a6de:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6e1:	89 04 24             	mov    %eax,(%esp)
c010a6e4:	e8 8b fe ff ff       	call   c010a574 <fd_array_open>
}
c010a6e9:	c9                   	leave  
c010a6ea:	c3                   	ret    

c010a6eb <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a6eb:	55                   	push   %ebp
c010a6ec:	89 e5                	mov    %esp,%ebp
c010a6ee:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a6f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a6f5:	78 4b                	js     c010a742 <fd2file+0x57>
c010a6f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6fa:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a6ff:	77 41                	ja     c010a742 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a701:	e8 8d fb ff ff       	call   c010a293 <get_fd_array>
c010a706:	89 c2                	mov    %eax,%edx
c010a708:	8b 45 08             	mov    0x8(%ebp),%eax
c010a70b:	c1 e0 02             	shl    $0x2,%eax
c010a70e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a715:	29 c1                	sub    %eax,%ecx
c010a717:	89 c8                	mov    %ecx,%eax
c010a719:	01 d0                	add    %edx,%eax
c010a71b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a71e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a721:	8b 00                	mov    (%eax),%eax
c010a723:	83 f8 02             	cmp    $0x2,%eax
c010a726:	75 1a                	jne    c010a742 <fd2file+0x57>
c010a728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a72b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a72e:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a731:	75 0f                	jne    c010a742 <fd2file+0x57>
            *file_store = file;
c010a733:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a736:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a739:	89 10                	mov    %edx,(%eax)
            return 0;
c010a73b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a740:	eb 05                	jmp    c010a747 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a742:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a747:	c9                   	leave  
c010a748:	c3                   	ret    

c010a749 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a749:	55                   	push   %ebp
c010a74a:	89 e5                	mov    %esp,%ebp
c010a74c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a74f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a752:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a756:	8b 45 08             	mov    0x8(%ebp),%eax
c010a759:	89 04 24             	mov    %eax,(%esp)
c010a75c:	e8 8a ff ff ff       	call   c010a6eb <fd2file>
c010a761:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a764:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a768:	74 07                	je     c010a771 <file_testfd+0x28>
        return 0;
c010a76a:	b8 00 00 00 00       	mov    $0x0,%eax
c010a76f:	eb 33                	jmp    c010a7a4 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a771:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a775:	74 11                	je     c010a788 <file_testfd+0x3f>
c010a777:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a77a:	8b 40 04             	mov    0x4(%eax),%eax
c010a77d:	85 c0                	test   %eax,%eax
c010a77f:	75 07                	jne    c010a788 <file_testfd+0x3f>
        return 0;
c010a781:	b8 00 00 00 00       	mov    $0x0,%eax
c010a786:	eb 1c                	jmp    c010a7a4 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a788:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a78c:	74 11                	je     c010a79f <file_testfd+0x56>
c010a78e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a791:	8b 40 08             	mov    0x8(%eax),%eax
c010a794:	85 c0                	test   %eax,%eax
c010a796:	75 07                	jne    c010a79f <file_testfd+0x56>
        return 0;
c010a798:	b8 00 00 00 00       	mov    $0x0,%eax
c010a79d:	eb 05                	jmp    c010a7a4 <file_testfd+0x5b>
    }
    return 1;
c010a79f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a7a4:	c9                   	leave  
c010a7a5:	c3                   	ret    

c010a7a6 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a7a6:	55                   	push   %ebp
c010a7a7:	89 e5                	mov    %esp,%ebp
c010a7a9:	83 ec 48             	sub    $0x48,%esp
    cprintf("%d [file_open]\n", openstep++);
c010a7ac:	a1 98 0f 15 c0       	mov    0xc0150f98,%eax
c010a7b1:	8d 50 01             	lea    0x1(%eax),%edx
c010a7b4:	89 15 98 0f 15 c0    	mov    %edx,0xc0150f98
c010a7ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7be:	c7 04 24 b7 7e 11 c0 	movl   $0xc0117eb7,(%esp)
c010a7c5:	e8 9b 5b ff ff       	call   c0100365 <cprintf>
    bool readable = 0, writable = 0;
c010a7ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a7d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a7d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7db:	83 e0 03             	and    $0x3,%eax
c010a7de:	83 f8 01             	cmp    $0x1,%eax
c010a7e1:	74 15                	je     c010a7f8 <file_open+0x52>
c010a7e3:	83 f8 01             	cmp    $0x1,%eax
c010a7e6:	72 07                	jb     c010a7ef <file_open+0x49>
c010a7e8:	83 f8 02             	cmp    $0x2,%eax
c010a7eb:	74 14                	je     c010a801 <file_open+0x5b>
c010a7ed:	eb 21                	jmp    c010a810 <file_open+0x6a>
    case O_RDONLY: readable = 1; break;
c010a7ef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a7f6:	eb 22                	jmp    c010a81a <file_open+0x74>
    case O_WRONLY: writable = 1; break;
c010a7f8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a7ff:	eb 19                	jmp    c010a81a <file_open+0x74>
    case O_RDWR:
        readable = writable = 1;
c010a801:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a808:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a80b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a80e:	eb 0a                	jmp    c010a81a <file_open+0x74>
    default:
        return -E_INVAL;
c010a810:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a815:	e9 45 01 00 00       	jmp    c010a95f <file_open+0x1b9>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a81a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a81d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a821:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a828:	e8 0c fb ff ff       	call   c010a339 <fd_array_alloc>
c010a82d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a830:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a834:	74 08                	je     c010a83e <file_open+0x98>
        return ret;
c010a836:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a839:	e9 21 01 00 00       	jmp    c010a95f <file_open+0x1b9>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a83e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a841:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a845:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a848:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a84c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a84f:	89 04 24             	mov    %eax,(%esp)
c010a852:	e8 ea 56 00 00       	call   c010ff41 <vfs_open>
c010a857:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a85a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a85e:	74 13                	je     c010a873 <file_open+0xcd>
        fd_array_free(file);
c010a860:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a863:	89 04 24             	mov    %eax,(%esp)
c010a866:	e8 a7 fb ff ff       	call   c010a412 <fd_array_free>
        return ret;
c010a86b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a86e:	e9 ec 00 00 00       	jmp    c010a95f <file_open+0x1b9>
    }

    file->pos = 0;
c010a873:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a876:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a87d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a880:	83 e0 20             	and    $0x20,%eax
c010a883:	85 c0                	test   %eax,%eax
c010a885:	0f 84 a8 00 00 00    	je     c010a933 <file_open+0x18d>
        struct stat __stat, *stat = &__stat;
c010a88b:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a88e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a891:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a894:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a897:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a89b:	74 17                	je     c010a8b4 <file_open+0x10e>
c010a89d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8a0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8a3:	85 c0                	test   %eax,%eax
c010a8a5:	74 0d                	je     c010a8b4 <file_open+0x10e>
c010a8a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8aa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8ad:	8b 40 14             	mov    0x14(%eax),%eax
c010a8b0:	85 c0                	test   %eax,%eax
c010a8b2:	75 24                	jne    c010a8d8 <file_open+0x132>
c010a8b4:	c7 44 24 0c c8 7e 11 	movl   $0xc0117ec8,0xc(%esp)
c010a8bb:	c0 
c010a8bc:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010a8c3:	c0 
c010a8c4:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c010a8cb:	00 
c010a8cc:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010a8d3:	e8 f0 65 ff ff       	call   c0100ec8 <__panic>
c010a8d8:	c7 44 24 04 16 7f 11 	movl   $0xc0117f16,0x4(%esp)
c010a8df:	c0 
c010a8e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8e3:	89 04 24             	mov    %eax,(%esp)
c010a8e6:	e8 1d 4b 00 00       	call   c010f408 <inode_check>
c010a8eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a8ee:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8f1:	8b 40 14             	mov    0x14(%eax),%eax
c010a8f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a8f7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a8fa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a8fe:	89 14 24             	mov    %edx,(%esp)
c010a901:	ff d0                	call   *%eax
c010a903:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a906:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a90a:	74 1b                	je     c010a927 <file_open+0x181>
            vfs_close(node);
c010a90c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a90f:	89 04 24             	mov    %eax,(%esp)
c010a912:	e8 38 59 00 00       	call   c011024f <vfs_close>
            fd_array_free(file);
c010a917:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a91a:	89 04 24             	mov    %eax,(%esp)
c010a91d:	e8 f0 fa ff ff       	call   c010a412 <fd_array_free>
            return ret;
c010a922:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a925:	eb 38                	jmp    c010a95f <file_open+0x1b9>
        }
        file->pos = stat->st_size;
c010a927:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a92a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a92d:	8b 52 0c             	mov    0xc(%edx),%edx
c010a930:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a933:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a936:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a939:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a93c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a93f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a942:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a945:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a948:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a94b:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a94e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a951:	89 04 24             	mov    %eax,(%esp)
c010a954:	e8 1b fc ff ff       	call   c010a574 <fd_array_open>
    return file->fd;
c010a959:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a95c:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a95f:	c9                   	leave  
c010a960:	c3                   	ret    

c010a961 <file_close>:

// close file
int
file_close(int fd) {
c010a961:	55                   	push   %ebp
c010a962:	89 e5                	mov    %esp,%ebp
c010a964:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a967:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a96a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a96e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a971:	89 04 24             	mov    %eax,(%esp)
c010a974:	e8 72 fd ff ff       	call   c010a6eb <fd2file>
c010a979:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a97c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a980:	74 05                	je     c010a987 <file_close+0x26>
        return ret;
c010a982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a985:	eb 10                	jmp    c010a997 <file_close+0x36>
    }
    fd_array_close(file);
c010a987:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a98a:	89 04 24             	mov    %eax,(%esp)
c010a98d:	e8 36 fc ff ff       	call   c010a5c8 <fd_array_close>
    return 0;
c010a992:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a997:	c9                   	leave  
c010a998:	c3                   	ret    

c010a999 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a999:	55                   	push   %ebp
c010a99a:	89 e5                	mov    %esp,%ebp
c010a99c:	83 ec 48             	sub    $0x48,%esp
    // cprintf("%d [file_read]\n", _filestep++);

    int ret;
    struct file *file;
    *copied_store = 0;
c010a99f:	8b 45 14             	mov    0x14(%ebp),%eax
c010a9a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a9a8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a9ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9af:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b2:	89 04 24             	mov    %eax,(%esp)
c010a9b5:	e8 31 fd ff ff       	call   c010a6eb <fd2file>
c010a9ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9c1:	74 08                	je     c010a9cb <file_read+0x32>
        return ret;
c010a9c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9c6:	e9 06 01 00 00       	jmp    c010aad1 <file_read+0x138>
    }
    if (!file->readable) {
c010a9cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9ce:	8b 40 04             	mov    0x4(%eax),%eax
c010a9d1:	85 c0                	test   %eax,%eax
c010a9d3:	75 0a                	jne    c010a9df <file_read+0x46>
        return -E_INVAL;
c010a9d5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a9da:	e9 f2 00 00 00       	jmp    c010aad1 <file_read+0x138>
    }
    fd_array_acquire(file);
c010a9df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9e2:	89 04 24             	mov    %eax,(%esp)
c010a9e5:	e8 bc fa ff ff       	call   c010a4a6 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a9ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9ed:	8b 40 10             	mov    0x10(%eax),%eax
c010a9f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a9f4:	8b 45 10             	mov    0x10(%ebp),%eax
c010a9f7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a9fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa02:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aa05:	89 04 24             	mov    %eax,(%esp)
c010aa08:	e8 b1 09 00 00       	call   c010b3be <iobuf_init>
c010aa0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010aa10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa13:	8b 40 14             	mov    0x14(%eax),%eax
c010aa16:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aa19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aa1d:	74 17                	je     c010aa36 <file_read+0x9d>
c010aa1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa22:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa25:	85 c0                	test   %eax,%eax
c010aa27:	74 0d                	je     c010aa36 <file_read+0x9d>
c010aa29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa2f:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa32:	85 c0                	test   %eax,%eax
c010aa34:	75 24                	jne    c010aa5a <file_read+0xc1>
c010aa36:	c7 44 24 0c 1c 7f 11 	movl   $0xc0117f1c,0xc(%esp)
c010aa3d:	c0 
c010aa3e:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010aa45:	c0 
c010aa46:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c010aa4d:	00 
c010aa4e:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010aa55:	e8 6e 64 ff ff       	call   c0100ec8 <__panic>
c010aa5a:	c7 44 24 04 69 7f 11 	movl   $0xc0117f69,0x4(%esp)
c010aa61:	c0 
c010aa62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa65:	89 04 24             	mov    %eax,(%esp)
c010aa68:	e8 9b 49 00 00       	call   c010f408 <inode_check>
c010aa6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa70:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa73:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa76:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa79:	8b 52 14             	mov    0x14(%edx),%edx
c010aa7c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aa7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aa83:	89 14 24             	mov    %edx,(%esp)
c010aa86:	ff d0                	call   *%eax
c010aa88:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa8e:	8b 50 08             	mov    0x8(%eax),%edx
c010aa91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa94:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa97:	29 c2                	sub    %eax,%edx
c010aa99:	89 d0                	mov    %edx,%eax
c010aa9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aa9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaa1:	8b 00                	mov    (%eax),%eax
c010aaa3:	83 f8 02             	cmp    $0x2,%eax
c010aaa6:	75 13                	jne    c010aabb <file_read+0x122>
        file->pos += copied;
c010aaa8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aaae:	8b 52 10             	mov    0x10(%edx),%edx
c010aab1:	89 d1                	mov    %edx,%ecx
c010aab3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aab6:	01 ca                	add    %ecx,%edx
c010aab8:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aabb:	8b 45 14             	mov    0x14(%ebp),%eax
c010aabe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aac1:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aac6:	89 04 24             	mov    %eax,(%esp)
c010aac9:	e8 19 fa ff ff       	call   c010a4e7 <fd_array_release>
    return ret;
c010aace:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aad1:	c9                   	leave  
c010aad2:	c3                   	ret    

c010aad3 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010aad3:	55                   	push   %ebp
c010aad4:	89 e5                	mov    %esp,%ebp
c010aad6:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aad9:	8b 45 14             	mov    0x14(%ebp),%eax
c010aadc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aae2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aae5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aae9:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaec:	89 04 24             	mov    %eax,(%esp)
c010aaef:	e8 f7 fb ff ff       	call   c010a6eb <fd2file>
c010aaf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aaf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aafb:	74 08                	je     c010ab05 <file_write+0x32>
        return ret;
c010aafd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab00:	e9 06 01 00 00       	jmp    c010ac0b <file_write+0x138>
    }
    if (!file->writable) {
c010ab05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab08:	8b 40 08             	mov    0x8(%eax),%eax
c010ab0b:	85 c0                	test   %eax,%eax
c010ab0d:	75 0a                	jne    c010ab19 <file_write+0x46>
        return -E_INVAL;
c010ab0f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ab14:	e9 f2 00 00 00       	jmp    c010ac0b <file_write+0x138>
    }
    fd_array_acquire(file);
c010ab19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab1c:	89 04 24             	mov    %eax,(%esp)
c010ab1f:	e8 82 f9 ff ff       	call   c010a4a6 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010ab24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab27:	8b 40 10             	mov    0x10(%eax),%eax
c010ab2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ab2e:	8b 45 10             	mov    0x10(%ebp),%eax
c010ab31:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ab35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab38:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab3c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ab3f:	89 04 24             	mov    %eax,(%esp)
c010ab42:	e8 77 08 00 00       	call   c010b3be <iobuf_init>
c010ab47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010ab4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab4d:	8b 40 14             	mov    0x14(%eax),%eax
c010ab50:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ab53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab57:	74 17                	je     c010ab70 <file_write+0x9d>
c010ab59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab5c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab5f:	85 c0                	test   %eax,%eax
c010ab61:	74 0d                	je     c010ab70 <file_write+0x9d>
c010ab63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab66:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab69:	8b 40 10             	mov    0x10(%eax),%eax
c010ab6c:	85 c0                	test   %eax,%eax
c010ab6e:	75 24                	jne    c010ab94 <file_write+0xc1>
c010ab70:	c7 44 24 0c 70 7f 11 	movl   $0xc0117f70,0xc(%esp)
c010ab77:	c0 
c010ab78:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010ab7f:	c0 
c010ab80:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010ab87:	00 
c010ab88:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010ab8f:	e8 34 63 ff ff       	call   c0100ec8 <__panic>
c010ab94:	c7 44 24 04 be 7f 11 	movl   $0xc0117fbe,0x4(%esp)
c010ab9b:	c0 
c010ab9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab9f:	89 04 24             	mov    %eax,(%esp)
c010aba2:	e8 61 48 00 00       	call   c010f408 <inode_check>
c010aba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abaa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abad:	8b 40 10             	mov    0x10(%eax),%eax
c010abb0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010abb3:	8b 52 14             	mov    0x14(%edx),%edx
c010abb6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010abb9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010abbd:	89 14 24             	mov    %edx,(%esp)
c010abc0:	ff d0                	call   *%eax
c010abc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010abc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abc8:	8b 50 08             	mov    0x8(%eax),%edx
c010abcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abce:	8b 40 0c             	mov    0xc(%eax),%eax
c010abd1:	29 c2                	sub    %eax,%edx
c010abd3:	89 d0                	mov    %edx,%eax
c010abd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010abd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abdb:	8b 00                	mov    (%eax),%eax
c010abdd:	83 f8 02             	cmp    $0x2,%eax
c010abe0:	75 13                	jne    c010abf5 <file_write+0x122>
        file->pos += copied;
c010abe2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010abe5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010abe8:	8b 52 10             	mov    0x10(%edx),%edx
c010abeb:	89 d1                	mov    %edx,%ecx
c010abed:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010abf0:	01 ca                	add    %ecx,%edx
c010abf2:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010abf5:	8b 45 14             	mov    0x14(%ebp),%eax
c010abf8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010abfb:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010abfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac00:	89 04 24             	mov    %eax,(%esp)
c010ac03:	e8 df f8 ff ff       	call   c010a4e7 <fd_array_release>
    return ret;
c010ac08:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ac0b:	c9                   	leave  
c010ac0c:	c3                   	ret    

c010ac0d <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010ac0d:	55                   	push   %ebp
c010ac0e:	89 e5                	mov    %esp,%ebp
c010ac10:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010ac13:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ac16:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ac19:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ac1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac20:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac23:	89 04 24             	mov    %eax,(%esp)
c010ac26:	e8 c0 fa ff ff       	call   c010a6eb <fd2file>
c010ac2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac32:	74 08                	je     c010ac3c <file_seek+0x2f>
        return ret;
c010ac34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac37:	e9 72 01 00 00       	jmp    c010adae <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010ac3c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac3f:	89 04 24             	mov    %eax,(%esp)
c010ac42:	e8 5f f8 ff ff       	call   c010a4a6 <fd_array_acquire>

    switch (whence) {
c010ac47:	8b 45 10             	mov    0x10(%ebp),%eax
c010ac4a:	83 f8 01             	cmp    $0x1,%eax
c010ac4d:	74 12                	je     c010ac61 <file_seek+0x54>
c010ac4f:	83 f8 02             	cmp    $0x2,%eax
c010ac52:	74 1b                	je     c010ac6f <file_seek+0x62>
c010ac54:	85 c0                	test   %eax,%eax
c010ac56:	0f 84 af 00 00 00    	je     c010ad0b <file_seek+0xfe>
c010ac5c:	e9 a1 00 00 00       	jmp    c010ad02 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ac61:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac64:	8b 40 10             	mov    0x10(%eax),%eax
c010ac67:	01 45 0c             	add    %eax,0xc(%ebp)
c010ac6a:	e9 9d 00 00 00       	jmp    c010ad0c <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ac6f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac72:	8b 40 14             	mov    0x14(%eax),%eax
c010ac75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac7c:	74 17                	je     c010ac95 <file_seek+0x88>
c010ac7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac81:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac84:	85 c0                	test   %eax,%eax
c010ac86:	74 0d                	je     c010ac95 <file_seek+0x88>
c010ac88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac8b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac8e:	8b 40 14             	mov    0x14(%eax),%eax
c010ac91:	85 c0                	test   %eax,%eax
c010ac93:	75 24                	jne    c010acb9 <file_seek+0xac>
c010ac95:	c7 44 24 0c c8 7e 11 	movl   $0xc0117ec8,0xc(%esp)
c010ac9c:	c0 
c010ac9d:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010aca4:	c0 
c010aca5:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
c010acac:	00 
c010acad:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010acb4:	e8 0f 62 ff ff       	call   c0100ec8 <__panic>
c010acb9:	c7 44 24 04 16 7f 11 	movl   $0xc0117f16,0x4(%esp)
c010acc0:	c0 
c010acc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acc4:	89 04 24             	mov    %eax,(%esp)
c010acc7:	e8 3c 47 00 00       	call   c010f408 <inode_check>
c010accc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010accf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acd2:	8b 40 14             	mov    0x14(%eax),%eax
c010acd5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010acd8:	8b 52 14             	mov    0x14(%edx),%edx
c010acdb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010acde:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ace2:	89 14 24             	mov    %edx,(%esp)
c010ace5:	ff d0                	call   *%eax
c010ace7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acee:	75 10                	jne    c010ad00 <file_seek+0xf3>
            pos += stat->st_size;
c010acf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acf3:	8b 50 0c             	mov    0xc(%eax),%edx
c010acf6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010acf9:	01 d0                	add    %edx,%eax
c010acfb:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010acfe:	eb 0c                	jmp    c010ad0c <file_seek+0xff>
c010ad00:	eb 0a                	jmp    c010ad0c <file_seek+0xff>
    default: ret = -E_INVAL;
c010ad02:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010ad09:	eb 01                	jmp    c010ad0c <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010ad0b:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010ad0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad10:	0f 85 8a 00 00 00    	jne    c010ada0 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010ad16:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad19:	8b 40 14             	mov    0x14(%eax),%eax
c010ad1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ad1f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ad23:	74 17                	je     c010ad3c <file_seek+0x12f>
c010ad25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad28:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad2b:	85 c0                	test   %eax,%eax
c010ad2d:	74 0d                	je     c010ad3c <file_seek+0x12f>
c010ad2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad32:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad35:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ad38:	85 c0                	test   %eax,%eax
c010ad3a:	75 24                	jne    c010ad60 <file_seek+0x153>
c010ad3c:	c7 44 24 0c c4 7f 11 	movl   $0xc0117fc4,0xc(%esp)
c010ad43:	c0 
c010ad44:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010ad4b:	c0 
c010ad4c:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010ad53:	00 
c010ad54:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010ad5b:	e8 68 61 ff ff       	call   c0100ec8 <__panic>
c010ad60:	c7 44 24 04 14 80 11 	movl   $0xc0118014,0x4(%esp)
c010ad67:	c0 
c010ad68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad6b:	89 04 24             	mov    %eax,(%esp)
c010ad6e:	e8 95 46 00 00       	call   c010f408 <inode_check>
c010ad73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad76:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad79:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ad7c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ad7f:	8b 52 14             	mov    0x14(%edx),%edx
c010ad82:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ad85:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ad89:	89 14 24             	mov    %edx,(%esp)
c010ad8c:	ff d0                	call   *%eax
c010ad8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad95:	75 09                	jne    c010ada0 <file_seek+0x193>
            file->pos = pos;
c010ad97:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad9a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad9d:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ada0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ada3:	89 04 24             	mov    %eax,(%esp)
c010ada6:	e8 3c f7 ff ff       	call   c010a4e7 <fd_array_release>
    return ret;
c010adab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010adae:	c9                   	leave  
c010adaf:	c3                   	ret    

c010adb0 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010adb0:	55                   	push   %ebp
c010adb1:	89 e5                	mov    %esp,%ebp
c010adb3:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010adb6:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010adb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc0:	89 04 24             	mov    %eax,(%esp)
c010adc3:	e8 23 f9 ff ff       	call   c010a6eb <fd2file>
c010adc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adcf:	74 08                	je     c010add9 <file_fstat+0x29>
        return ret;
c010add1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010add4:	e9 94 00 00 00       	jmp    c010ae6d <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010add9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010addc:	89 04 24             	mov    %eax,(%esp)
c010addf:	e8 c2 f6 ff ff       	call   c010a4a6 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010ade4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ade7:	8b 40 14             	mov    0x14(%eax),%eax
c010adea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aded:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010adf1:	74 17                	je     c010ae0a <file_fstat+0x5a>
c010adf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adf6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adf9:	85 c0                	test   %eax,%eax
c010adfb:	74 0d                	je     c010ae0a <file_fstat+0x5a>
c010adfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae00:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae03:	8b 40 14             	mov    0x14(%eax),%eax
c010ae06:	85 c0                	test   %eax,%eax
c010ae08:	75 24                	jne    c010ae2e <file_fstat+0x7e>
c010ae0a:	c7 44 24 0c c8 7e 11 	movl   $0xc0117ec8,0xc(%esp)
c010ae11:	c0 
c010ae12:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010ae19:	c0 
c010ae1a:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
c010ae21:	00 
c010ae22:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010ae29:	e8 9a 60 ff ff       	call   c0100ec8 <__panic>
c010ae2e:	c7 44 24 04 16 7f 11 	movl   $0xc0117f16,0x4(%esp)
c010ae35:	c0 
c010ae36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae39:	89 04 24             	mov    %eax,(%esp)
c010ae3c:	e8 c7 45 00 00       	call   c010f408 <inode_check>
c010ae41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae44:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae47:	8b 40 14             	mov    0x14(%eax),%eax
c010ae4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae4d:	8b 52 14             	mov    0x14(%edx),%edx
c010ae50:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae53:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ae57:	89 14 24             	mov    %edx,(%esp)
c010ae5a:	ff d0                	call   *%eax
c010ae5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ae5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae62:	89 04 24             	mov    %eax,(%esp)
c010ae65:	e8 7d f6 ff ff       	call   c010a4e7 <fd_array_release>
    return ret;
c010ae6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ae6d:	c9                   	leave  
c010ae6e:	c3                   	ret    

c010ae6f <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010ae6f:	55                   	push   %ebp
c010ae70:	89 e5                	mov    %esp,%ebp
c010ae72:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ae75:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ae78:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae7f:	89 04 24             	mov    %eax,(%esp)
c010ae82:	e8 64 f8 ff ff       	call   c010a6eb <fd2file>
c010ae87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae8e:	74 08                	je     c010ae98 <file_fsync+0x29>
        return ret;
c010ae90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae93:	e9 8d 00 00 00       	jmp    c010af25 <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010ae98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae9b:	89 04 24             	mov    %eax,(%esp)
c010ae9e:	e8 03 f6 ff ff       	call   c010a4a6 <fd_array_acquire>
    ret = vop_fsync(file->node);
c010aea3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aea6:	8b 40 14             	mov    0x14(%eax),%eax
c010aea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aeac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aeb0:	74 17                	je     c010aec9 <file_fsync+0x5a>
c010aeb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeb5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aeb8:	85 c0                	test   %eax,%eax
c010aeba:	74 0d                	je     c010aec9 <file_fsync+0x5a>
c010aebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aebf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aec2:	8b 40 18             	mov    0x18(%eax),%eax
c010aec5:	85 c0                	test   %eax,%eax
c010aec7:	75 24                	jne    c010aeed <file_fsync+0x7e>
c010aec9:	c7 44 24 0c 1c 80 11 	movl   $0xc011801c,0xc(%esp)
c010aed0:	c0 
c010aed1:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010aed8:	c0 
c010aed9:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
c010aee0:	00 
c010aee1:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010aee8:	e8 db 5f ff ff       	call   c0100ec8 <__panic>
c010aeed:	c7 44 24 04 6a 80 11 	movl   $0xc011806a,0x4(%esp)
c010aef4:	c0 
c010aef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aef8:	89 04 24             	mov    %eax,(%esp)
c010aefb:	e8 08 45 00 00       	call   c010f408 <inode_check>
c010af00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af03:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af06:	8b 40 18             	mov    0x18(%eax),%eax
c010af09:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010af0c:	8b 52 14             	mov    0x14(%edx),%edx
c010af0f:	89 14 24             	mov    %edx,(%esp)
c010af12:	ff d0                	call   *%eax
c010af14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010af17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af1a:	89 04 24             	mov    %eax,(%esp)
c010af1d:	e8 c5 f5 ff ff       	call   c010a4e7 <fd_array_release>
    return ret;
c010af22:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010af25:	c9                   	leave  
c010af26:	c3                   	ret    

c010af27 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010af27:	55                   	push   %ebp
c010af28:	89 e5                	mov    %esp,%ebp
c010af2a:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010af2d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010af30:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af34:	8b 45 08             	mov    0x8(%ebp),%eax
c010af37:	89 04 24             	mov    %eax,(%esp)
c010af3a:	e8 ac f7 ff ff       	call   c010a6eb <fd2file>
c010af3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af46:	74 08                	je     c010af50 <file_getdirentry+0x29>
        return ret;
c010af48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af4b:	e9 e3 00 00 00       	jmp    c010b033 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010af50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af53:	89 04 24             	mov    %eax,(%esp)
c010af56:	e8 4b f5 ff ff       	call   c010a4a6 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010af5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af5e:	8b 00                	mov    (%eax),%eax
c010af60:	8b 55 0c             	mov    0xc(%ebp),%edx
c010af63:	83 c2 04             	add    $0x4,%edx
c010af66:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010af6a:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010af71:	00 
c010af72:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af76:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010af79:	89 04 24             	mov    %eax,(%esp)
c010af7c:	e8 3d 04 00 00       	call   c010b3be <iobuf_init>
c010af81:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010af84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af87:	8b 40 14             	mov    0x14(%eax),%eax
c010af8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af8d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010af91:	74 17                	je     c010afaa <file_getdirentry+0x83>
c010af93:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af96:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af99:	85 c0                	test   %eax,%eax
c010af9b:	74 0d                	je     c010afaa <file_getdirentry+0x83>
c010af9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afa0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010afa3:	8b 40 20             	mov    0x20(%eax),%eax
c010afa6:	85 c0                	test   %eax,%eax
c010afa8:	75 24                	jne    c010afce <file_getdirentry+0xa7>
c010afaa:	c7 44 24 0c 70 80 11 	movl   $0xc0118070,0xc(%esp)
c010afb1:	c0 
c010afb2:	c7 44 24 08 52 7d 11 	movl   $0xc0117d52,0x8(%esp)
c010afb9:	c0 
c010afba:	c7 44 24 04 54 01 00 	movl   $0x154,0x4(%esp)
c010afc1:	00 
c010afc2:	c7 04 24 67 7d 11 c0 	movl   $0xc0117d67,(%esp)
c010afc9:	e8 fa 5e ff ff       	call   c0100ec8 <__panic>
c010afce:	c7 44 24 04 c4 80 11 	movl   $0xc01180c4,0x4(%esp)
c010afd5:	c0 
c010afd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afd9:	89 04 24             	mov    %eax,(%esp)
c010afdc:	e8 27 44 00 00       	call   c010f408 <inode_check>
c010afe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afe4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010afe7:	8b 40 20             	mov    0x20(%eax),%eax
c010afea:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010afed:	8b 52 14             	mov    0x14(%edx),%edx
c010aff0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aff3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aff7:	89 14 24             	mov    %edx,(%esp)
c010affa:	ff d0                	call   *%eax
c010affc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b003:	75 20                	jne    c010b025 <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010b005:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b008:	8b 00                	mov    (%eax),%eax
c010b00a:	89 c2                	mov    %eax,%edx
c010b00c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b00f:	8b 48 08             	mov    0x8(%eax),%ecx
c010b012:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b015:	8b 40 0c             	mov    0xc(%eax),%eax
c010b018:	29 c1                	sub    %eax,%ecx
c010b01a:	89 c8                	mov    %ecx,%eax
c010b01c:	01 d0                	add    %edx,%eax
c010b01e:	89 c2                	mov    %eax,%edx
c010b020:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b023:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010b025:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b028:	89 04 24             	mov    %eax,(%esp)
c010b02b:	e8 b7 f4 ff ff       	call   c010a4e7 <fd_array_release>
    return ret;
c010b030:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b033:	c9                   	leave  
c010b034:	c3                   	ret    

c010b035 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010b035:	55                   	push   %ebp
c010b036:	89 e5                	mov    %esp,%ebp
c010b038:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010b03b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b03e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b042:	8b 45 08             	mov    0x8(%ebp),%eax
c010b045:	89 04 24             	mov    %eax,(%esp)
c010b048:	e8 9e f6 ff ff       	call   c010a6eb <fd2file>
c010b04d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b054:	74 05                	je     c010b05b <file_dup+0x26>
        return ret;
c010b056:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b059:	eb 38                	jmp    c010b093 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010b05b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b05e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b062:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b065:	89 04 24             	mov    %eax,(%esp)
c010b068:	e8 cc f2 ff ff       	call   c010a339 <fd_array_alloc>
c010b06d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b070:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b074:	74 05                	je     c010b07b <file_dup+0x46>
        return ret;
c010b076:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b079:	eb 18                	jmp    c010b093 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010b07b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b07e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b081:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b085:	89 04 24             	mov    %eax,(%esp)
c010b088:	e8 c7 f5 ff ff       	call   c010a654 <fd_array_dup>
    return file2->fd;
c010b08d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b090:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b093:	c9                   	leave  
c010b094:	c3                   	ret    

c010b095 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b095:	55                   	push   %ebp
c010b096:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b098:	8b 45 08             	mov    0x8(%ebp),%eax
c010b09b:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b09e:	5d                   	pop    %ebp
c010b09f:	c3                   	ret    

c010b0a0 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b0a0:	55                   	push   %ebp
c010b0a1:	89 e5                	mov    %esp,%ebp
c010b0a3:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b0a6:	e8 79 44 00 00       	call   c010f524 <vfs_init>
    dev_init();
c010b0ab:	e8 88 5c 00 00       	call   c0110d38 <dev_init>
    sfs_init();
c010b0b0:	e8 63 6a 00 00       	call   c0111b18 <sfs_init>
}
c010b0b5:	c9                   	leave  
c010b0b6:	c3                   	ret    

c010b0b7 <fs_cleanup>:

void
fs_cleanup(void) {
c010b0b7:	55                   	push   %ebp
c010b0b8:	89 e5                	mov    %esp,%ebp
c010b0ba:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b0bd:	e8 1b 46 00 00       	call   c010f6dd <vfs_cleanup>
}
c010b0c2:	c9                   	leave  
c010b0c3:	c3                   	ret    

c010b0c4 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b0c4:	55                   	push   %ebp
c010b0c5:	89 e5                	mov    %esp,%ebp
c010b0c7:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010b0ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cd:	83 c0 0c             	add    $0xc,%eax
c010b0d0:	89 04 24             	mov    %eax,(%esp)
c010b0d3:	e8 45 ec ff ff       	call   c0109d1d <down>
}
c010b0d8:	c9                   	leave  
c010b0d9:	c3                   	ret    

c010b0da <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b0da:	55                   	push   %ebp
c010b0db:	89 e5                	mov    %esp,%ebp
c010b0dd:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010b0e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e3:	83 c0 0c             	add    $0xc,%eax
c010b0e6:	89 04 24             	mov    %eax,(%esp)
c010b0e9:	e8 14 ec ff ff       	call   c0109d02 <up>
}
c010b0ee:	c9                   	leave  
c010b0ef:	c3                   	ret    

c010b0f0 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b0f0:	55                   	push   %ebp
c010b0f1:	89 e5                	mov    %esp,%ebp
c010b0f3:	83 ec 28             	sub    $0x28,%esp
    cprintf("[files_create]\n");
c010b0f6:	c7 04 24 d0 80 11 c0 	movl   $0xc01180d0,(%esp)
c010b0fd:	e8 63 52 ff ff       	call   c0100365 <cprintf>
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b102:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b109:	e8 ef 9b ff ff       	call   c0104cfd <kmalloc>
c010b10e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b111:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b115:	74 43                	je     c010b15a <files_create+0x6a>
        filesp->pwd = NULL;
c010b117:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b11a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b120:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b123:	8d 50 18             	lea    0x18(%eax),%edx
c010b126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b129:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b12c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b12f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b136:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b139:	83 c0 0c             	add    $0xc,%eax
c010b13c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b143:	00 
c010b144:	89 04 24             	mov    %eax,(%esp)
c010b147:	e8 43 ea ff ff       	call   c0109b8f <sem_init>
        fd_array_init(filesp->fd_array);
c010b14c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b14f:	8b 40 04             	mov    0x4(%eax),%eax
c010b152:	89 04 24             	mov    %eax,(%esp)
c010b155:	e8 8e f1 ff ff       	call   c010a2e8 <fd_array_init>
    }
    return filesp;
c010b15a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b15d:	c9                   	leave  
c010b15e:	c3                   	ret    

c010b15f <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b15f:	55                   	push   %ebp
c010b160:	89 e5                	mov    %esp,%ebp
c010b162:	83 ec 28             	sub    $0x28,%esp
    cprintf("[files_destroy]\n");
c010b165:	c7 04 24 e0 80 11 c0 	movl   $0xc01180e0,(%esp)
c010b16c:	e8 f4 51 ff ff       	call   c0100365 <cprintf>
    assert(filesp != NULL && files_count(filesp) == 0);
c010b171:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b175:	74 0f                	je     c010b186 <files_destroy+0x27>
c010b177:	8b 45 08             	mov    0x8(%ebp),%eax
c010b17a:	89 04 24             	mov    %eax,(%esp)
c010b17d:	e8 13 ff ff ff       	call   c010b095 <files_count>
c010b182:	85 c0                	test   %eax,%eax
c010b184:	74 24                	je     c010b1aa <files_destroy+0x4b>
c010b186:	c7 44 24 0c f4 80 11 	movl   $0xc01180f4,0xc(%esp)
c010b18d:	c0 
c010b18e:	c7 44 24 08 1f 81 11 	movl   $0xc011811f,0x8(%esp)
c010b195:	c0 
c010b196:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b19d:	00 
c010b19e:	c7 04 24 34 81 11 c0 	movl   $0xc0118134,(%esp)
c010b1a5:	e8 1e 5d ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
c010b1aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ad:	8b 00                	mov    (%eax),%eax
c010b1af:	85 c0                	test   %eax,%eax
c010b1b1:	74 0d                	je     c010b1c0 <files_destroy+0x61>
        vop_ref_dec(filesp->pwd);
c010b1b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b6:	8b 00                	mov    (%eax),%eax
c010b1b8:	89 04 24             	mov    %eax,(%esp)
c010b1bb:	e8 5a 40 00 00       	call   c010f21a <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b1c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1c3:	8b 40 04             	mov    0x4(%eax),%eax
c010b1c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b1c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b1d0:	eb 4a                	jmp    c010b21c <files_destroy+0xbd>
        if (file->status == FD_OPENED) {
c010b1d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1d5:	8b 00                	mov    (%eax),%eax
c010b1d7:	83 f8 02             	cmp    $0x2,%eax
c010b1da:	75 0b                	jne    c010b1e7 <files_destroy+0x88>
            fd_array_close(file);
c010b1dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1df:	89 04 24             	mov    %eax,(%esp)
c010b1e2:	e8 e1 f3 ff ff       	call   c010a5c8 <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b1e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1ea:	8b 00                	mov    (%eax),%eax
c010b1ec:	85 c0                	test   %eax,%eax
c010b1ee:	74 24                	je     c010b214 <files_destroy+0xb5>
c010b1f0:	c7 44 24 0c 41 81 11 	movl   $0xc0118141,0xc(%esp)
c010b1f7:	c0 
c010b1f8:	c7 44 24 08 1f 81 11 	movl   $0xc011811f,0x8(%esp)
c010b1ff:	c0 
c010b200:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b207:	00 
c010b208:	c7 04 24 34 81 11 c0 	movl   $0xc0118134,(%esp)
c010b20f:	e8 b4 5c ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b214:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b218:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b21c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b21f:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b224:	76 ac                	jbe    c010b1d2 <files_destroy+0x73>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b226:	8b 45 08             	mov    0x8(%ebp),%eax
c010b229:	89 04 24             	mov    %eax,(%esp)
c010b22c:	e8 e7 9a ff ff       	call   c0104d18 <kfree>
}
c010b231:	c9                   	leave  
c010b232:	c3                   	ret    

c010b233 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b233:	55                   	push   %ebp
c010b234:	89 e5                	mov    %esp,%ebp
c010b236:	83 ec 28             	sub    $0x28,%esp
    cprintf("[files_closeall]\n");
c010b239:	c7 04 24 59 81 11 c0 	movl   $0xc0118159,(%esp)
c010b240:	e8 20 51 ff ff       	call   c0100365 <cprintf>
    assert(filesp != NULL && files_count(filesp) > 0);
c010b245:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b249:	74 0f                	je     c010b25a <files_closeall+0x27>
c010b24b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b24e:	89 04 24             	mov    %eax,(%esp)
c010b251:	e8 3f fe ff ff       	call   c010b095 <files_count>
c010b256:	85 c0                	test   %eax,%eax
c010b258:	7f 24                	jg     c010b27e <files_closeall+0x4b>
c010b25a:	c7 44 24 0c 6c 81 11 	movl   $0xc011816c,0xc(%esp)
c010b261:	c0 
c010b262:	c7 44 24 08 1f 81 11 	movl   $0xc011811f,0x8(%esp)
c010b269:	c0 
c010b26a:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b271:	00 
c010b272:	c7 04 24 34 81 11 c0 	movl   $0xc0118134,(%esp)
c010b279:	e8 4a 5c ff ff       	call   c0100ec8 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b27e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b281:	8b 40 04             	mov    0x4(%eax),%eax
c010b284:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b287:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b28e:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b292:	eb 1d                	jmp    c010b2b1 <files_closeall+0x7e>
        if (file->status == FD_OPENED) {
c010b294:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b297:	8b 00                	mov    (%eax),%eax
c010b299:	83 f8 02             	cmp    $0x2,%eax
c010b29c:	75 0b                	jne    c010b2a9 <files_closeall+0x76>
            fd_array_close(file);
c010b29e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2a1:	89 04 24             	mov    %eax,(%esp)
c010b2a4:	e8 1f f3 ff ff       	call   c010a5c8 <fd_array_close>
    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b2a9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b2ad:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b2b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2b4:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b2b9:	76 d9                	jbe    c010b294 <files_closeall+0x61>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b2bb:	c9                   	leave  
c010b2bc:	c3                   	ret    

c010b2bd <dup_fs>:

int
dup_fs(struct files_struct *to, struct files_struct *from) {
c010b2bd:	55                   	push   %ebp
c010b2be:	89 e5                	mov    %esp,%ebp
c010b2c0:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dup_fs]\n");
c010b2c3:	c7 04 24 96 81 11 c0 	movl   $0xc0118196,(%esp)
c010b2ca:	e8 96 50 ff ff       	call   c0100365 <cprintf>
    assert(to != NULL && from != NULL);
c010b2cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b2d3:	74 06                	je     c010b2db <dup_fs+0x1e>
c010b2d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b2d9:	75 24                	jne    c010b2ff <dup_fs+0x42>
c010b2db:	c7 44 24 0c a0 81 11 	movl   $0xc01181a0,0xc(%esp)
c010b2e2:	c0 
c010b2e3:	c7 44 24 08 1f 81 11 	movl   $0xc011811f,0x8(%esp)
c010b2ea:	c0 
c010b2eb:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b2f2:	00 
c010b2f3:	c7 04 24 34 81 11 c0 	movl   $0xc0118134,(%esp)
c010b2fa:	e8 c9 5b ff ff       	call   c0100ec8 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b2ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b302:	89 04 24             	mov    %eax,(%esp)
c010b305:	e8 8b fd ff ff       	call   c010b095 <files_count>
c010b30a:	85 c0                	test   %eax,%eax
c010b30c:	75 0f                	jne    c010b31d <dup_fs+0x60>
c010b30e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b311:	89 04 24             	mov    %eax,(%esp)
c010b314:	e8 7c fd ff ff       	call   c010b095 <files_count>
c010b319:	85 c0                	test   %eax,%eax
c010b31b:	7f 24                	jg     c010b341 <dup_fs+0x84>
c010b31d:	c7 44 24 0c bc 81 11 	movl   $0xc01181bc,0xc(%esp)
c010b324:	c0 
c010b325:	c7 44 24 08 1f 81 11 	movl   $0xc011811f,0x8(%esp)
c010b32c:	c0 
c010b32d:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b334:	00 
c010b335:	c7 04 24 34 81 11 c0 	movl   $0xc0118134,(%esp)
c010b33c:	e8 87 5b ff ff       	call   c0100ec8 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b341:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b344:	8b 10                	mov    (%eax),%edx
c010b346:	8b 45 08             	mov    0x8(%ebp),%eax
c010b349:	89 10                	mov    %edx,(%eax)
c010b34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34e:	8b 00                	mov    (%eax),%eax
c010b350:	85 c0                	test   %eax,%eax
c010b352:	74 0d                	je     c010b361 <dup_fs+0xa4>
        vop_ref_inc(to->pwd);
c010b354:	8b 45 08             	mov    0x8(%ebp),%eax
c010b357:	8b 00                	mov    (%eax),%eax
c010b359:	89 04 24             	mov    %eax,(%esp)
c010b35c:	e8 9f 3e 00 00       	call   c010f200 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b361:	8b 45 08             	mov    0x8(%ebp),%eax
c010b364:	8b 40 04             	mov    0x4(%eax),%eax
c010b367:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b36a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b36d:	8b 40 04             	mov    0x4(%eax),%eax
c010b370:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b373:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b37a:	eb 31                	jmp    c010b3ad <dup_fs+0xf0>
        if (from_file->status == FD_OPENED) {
c010b37c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b37f:	8b 00                	mov    (%eax),%eax
c010b381:	83 f8 02             	cmp    $0x2,%eax
c010b384:	75 1b                	jne    c010b3a1 <dup_fs+0xe4>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b386:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b389:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b38f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b392:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b396:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b399:	89 04 24             	mov    %eax,(%esp)
c010b39c:	e8 b3 f2 ff ff       	call   c010a654 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b3a1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b3a5:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b3a9:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b3ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3b0:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b3b5:	76 c5                	jbe    c010b37c <dup_fs+0xbf>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b3b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b3bc:	c9                   	leave  
c010b3bd:	c3                   	ret    

c010b3be <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b3be:	55                   	push   %ebp
c010b3bf:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b3c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3c4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b3c7:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b3c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3cc:	8b 55 14             	mov    0x14(%ebp),%edx
c010b3cf:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b3d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d5:	8b 55 10             	mov    0x10(%ebp),%edx
c010b3d8:	89 50 0c             	mov    %edx,0xc(%eax)
c010b3db:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3de:	8b 50 0c             	mov    0xc(%eax),%edx
c010b3e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3e4:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b3e7:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b3ea:	5d                   	pop    %ebp
c010b3eb:	c3                   	ret    

c010b3ec <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b3ec:	55                   	push   %ebp
c010b3ed:	89 e5                	mov    %esp,%ebp
c010b3ef:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b3f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3f5:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3fe:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b401:	76 06                	jbe    c010b409 <iobuf_move+0x1d>
        alen = len;
c010b403:	8b 45 10             	mov    0x10(%ebp),%eax
c010b406:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b409:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b40d:	74 57                	je     c010b466 <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b40f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b412:	8b 00                	mov    (%eax),%eax
c010b414:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b417:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b41a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b41d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b421:	74 12                	je     c010b435 <iobuf_move+0x49>
            void *tmp = src;
c010b423:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b426:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b429:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b42c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b42f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b432:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b435:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b438:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b43c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b43f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b443:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b446:	89 04 24             	mov    %eax,(%esp)
c010b449:	e8 41 a3 00 00       	call   c011578f <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b44e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b451:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b455:	8b 45 08             	mov    0x8(%ebp),%eax
c010b458:	89 04 24             	mov    %eax,(%esp)
c010b45b:	e8 a1 00 00 00       	call   c010b501 <iobuf_skip>
c010b460:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b463:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b466:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b46a:	74 08                	je     c010b474 <iobuf_move+0x88>
        *copiedp = alen;
c010b46c:	8b 45 18             	mov    0x18(%ebp),%eax
c010b46f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b472:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b474:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b478:	75 07                	jne    c010b481 <iobuf_move+0x95>
c010b47a:	b8 00 00 00 00       	mov    $0x0,%eax
c010b47f:	eb 05                	jmp    c010b486 <iobuf_move+0x9a>
c010b481:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b486:	c9                   	leave  
c010b487:	c3                   	ret    

c010b488 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b488:	55                   	push   %ebp
c010b489:	89 e5                	mov    %esp,%ebp
c010b48b:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b48e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b491:	8b 40 0c             	mov    0xc(%eax),%eax
c010b494:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b497:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b49a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b49d:	76 06                	jbe    c010b4a5 <iobuf_move_zeros+0x1d>
        alen = len;
c010b49f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b4a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4a9:	74 34                	je     c010b4df <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b4ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4ae:	8b 00                	mov    (%eax),%eax
c010b4b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b4b3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b4b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b4be:	00 
c010b4bf:	89 04 24             	mov    %eax,(%esp)
c010b4c2:	e8 89 a2 00 00       	call   c0115750 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b4c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b4ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4d1:	89 04 24             	mov    %eax,(%esp)
c010b4d4:	e8 28 00 00 00       	call   c010b501 <iobuf_skip>
c010b4d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4dc:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b4df:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b4e3:	74 08                	je     c010b4ed <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b4e5:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b4eb:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b4ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b4f1:	75 07                	jne    c010b4fa <iobuf_move_zeros+0x72>
c010b4f3:	b8 00 00 00 00       	mov    $0x0,%eax
c010b4f8:	eb 05                	jmp    c010b4ff <iobuf_move_zeros+0x77>
c010b4fa:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b4ff:	c9                   	leave  
c010b500:	c3                   	ret    

c010b501 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b501:	55                   	push   %ebp
c010b502:	89 e5                	mov    %esp,%ebp
c010b504:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b507:	8b 45 08             	mov    0x8(%ebp),%eax
c010b50a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b50d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b510:	73 24                	jae    c010b536 <iobuf_skip+0x35>
c010b512:	c7 44 24 0c ea 81 11 	movl   $0xc01181ea,0xc(%esp)
c010b519:	c0 
c010b51a:	c7 44 24 08 fd 81 11 	movl   $0xc01181fd,0x8(%esp)
c010b521:	c0 
c010b522:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b529:	00 
c010b52a:	c7 04 24 12 82 11 c0 	movl   $0xc0118212,(%esp)
c010b531:	e8 92 59 ff ff       	call   c0100ec8 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b536:	8b 45 08             	mov    0x8(%ebp),%eax
c010b539:	8b 10                	mov    (%eax),%edx
c010b53b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b53e:	01 c2                	add    %eax,%edx
c010b540:	8b 45 08             	mov    0x8(%ebp),%eax
c010b543:	89 10                	mov    %edx,(%eax)
c010b545:	8b 45 08             	mov    0x8(%ebp),%eax
c010b548:	8b 40 04             	mov    0x4(%eax),%eax
c010b54b:	89 c2                	mov    %eax,%edx
c010b54d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b550:	01 d0                	add    %edx,%eax
c010b552:	89 c2                	mov    %eax,%edx
c010b554:	8b 45 08             	mov    0x8(%ebp),%eax
c010b557:	89 50 04             	mov    %edx,0x4(%eax)
c010b55a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b55d:	8b 40 0c             	mov    0xc(%eax),%eax
c010b560:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b563:	89 c2                	mov    %eax,%edx
c010b565:	8b 45 08             	mov    0x8(%ebp),%eax
c010b568:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b56b:	c9                   	leave  
c010b56c:	c3                   	ret    

c010b56d <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b56d:	55                   	push   %ebp
c010b56e:	89 e5                	mov    %esp,%ebp
c010b570:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b573:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b577:	74 25                	je     c010b59e <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b579:	8b 45 08             	mov    0x8(%ebp),%eax
c010b57c:	83 c0 1c             	add    $0x1c,%eax
c010b57f:	89 04 24             	mov    %eax,(%esp)
c010b582:	e8 96 e7 ff ff       	call   c0109d1d <down>
        if (current != NULL) {
c010b587:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010b58c:	85 c0                	test   %eax,%eax
c010b58e:	74 0e                	je     c010b59e <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b590:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010b595:	8b 50 04             	mov    0x4(%eax),%edx
c010b598:	8b 45 08             	mov    0x8(%ebp),%eax
c010b59b:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b59e:	c9                   	leave  
c010b59f:	c3                   	ret    

c010b5a0 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b5a0:	55                   	push   %ebp
c010b5a1:	89 e5                	mov    %esp,%ebp
c010b5a3:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b5a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5aa:	74 18                	je     c010b5c4 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b5ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5af:	83 c0 1c             	add    $0x1c,%eax
c010b5b2:	89 04 24             	mov    %eax,(%esp)
c010b5b5:	e8 48 e7 ff ff       	call   c0109d02 <up>
        mm->locked_by = 0;
c010b5ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5bd:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b5c4:	c9                   	leave  
c010b5c5:	c3                   	ret    

c010b5c6 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b5c6:	55                   	push   %ebp
c010b5c7:	89 e5                	mov    %esp,%ebp
c010b5c9:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b5cc:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010b5d1:	8b 40 18             	mov    0x18(%eax),%eax
c010b5d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b5d7:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b5de:	e8 1a 97 ff ff       	call   c0104cfd <kmalloc>
c010b5e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b5ea:	75 07                	jne    c010b5f3 <copy_path+0x2d>
        return -E_NO_MEM;
c010b5ec:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b5f1:	eb 66                	jmp    c010b659 <copy_path+0x93>
    }
    lock_mm(mm);
c010b5f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5f6:	89 04 24             	mov    %eax,(%esp)
c010b5f9:	e8 6f ff ff ff       	call   c010b56d <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b5fe:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b605:	00 
c010b606:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b609:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b60d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b610:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b617:	89 04 24             	mov    %eax,(%esp)
c010b61a:	e8 71 db ff ff       	call   c0109190 <copy_string>
c010b61f:	85 c0                	test   %eax,%eax
c010b621:	75 1e                	jne    c010b641 <copy_path+0x7b>
        unlock_mm(mm);
c010b623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b626:	89 04 24             	mov    %eax,(%esp)
c010b629:	e8 72 ff ff ff       	call   c010b5a0 <unlock_mm>
        goto failed_cleanup;
c010b62e:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b62f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b632:	89 04 24             	mov    %eax,(%esp)
c010b635:	e8 de 96 ff ff       	call   c0104d18 <kfree>
    return -E_INVAL;
c010b63a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b63f:	eb 18                	jmp    c010b659 <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b644:	89 04 24             	mov    %eax,(%esp)
c010b647:	e8 54 ff ff ff       	call   c010b5a0 <unlock_mm>
    *to = buffer;
c010b64c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b64f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b652:	89 10                	mov    %edx,(%eax)
    return 0;
c010b654:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b659:	c9                   	leave  
c010b65a:	c3                   	ret    

c010b65b <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b65b:	55                   	push   %ebp
c010b65c:	89 e5                	mov    %esp,%ebp
c010b65e:	83 ec 28             	sub    $0x28,%esp
    cprintf("%d [sysfile_open]\n", openstep++);
c010b661:	a1 a4 0f 15 c0       	mov    0xc0150fa4,%eax
c010b666:	8d 50 01             	lea    0x1(%eax),%edx
c010b669:	89 15 a4 0f 15 c0    	mov    %edx,0xc0150fa4
c010b66f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b673:	c7 04 24 22 82 11 c0 	movl   $0xc0118222,(%esp)
c010b67a:	e8 e6 4c ff ff       	call   c0100365 <cprintf>
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b682:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b686:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b689:	89 04 24             	mov    %eax,(%esp)
c010b68c:	e8 35 ff ff ff       	call   c010b5c6 <copy_path>
c010b691:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b694:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b698:	74 05                	je     c010b69f <sysfile_open+0x44>
        return ret;
c010b69a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b69d:	eb 23                	jmp    c010b6c2 <sysfile_open+0x67>
    }
    ret = file_open(path, open_flags);
c010b69f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b6a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b6a9:	89 04 24             	mov    %eax,(%esp)
c010b6ac:	e8 f5 f0 ff ff       	call   c010a7a6 <file_open>
c010b6b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b6b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6b7:	89 04 24             	mov    %eax,(%esp)
c010b6ba:	e8 59 96 ff ff       	call   c0104d18 <kfree>
    return ret;
c010b6bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b6c2:	c9                   	leave  
c010b6c3:	c3                   	ret    

c010b6c4 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b6c4:	55                   	push   %ebp
c010b6c5:	89 e5                	mov    %esp,%ebp
c010b6c7:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b6ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6cd:	89 04 24             	mov    %eax,(%esp)
c010b6d0:	e8 8c f2 ff ff       	call   c010a961 <file_close>
}
c010b6d5:	c9                   	leave  
c010b6d6:	c3                   	ret    

c010b6d7 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b6d7:	55                   	push   %ebp
c010b6d8:	89 e5                	mov    %esp,%ebp
c010b6da:	83 ec 38             	sub    $0x38,%esp
    // cprintf("%d [sysfile_read]\n", _filestep++);
    struct mm_struct *mm = current->mm;
c010b6dd:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010b6e2:	8b 40 18             	mov    0x18(%eax),%eax
c010b6e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b6e8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b6ec:	75 0a                	jne    c010b6f8 <sysfile_read+0x21>
        return 0;
c010b6ee:	b8 00 00 00 00       	mov    $0x0,%eax
c010b6f3:	e9 55 01 00 00       	jmp    c010b84d <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b6f8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b6ff:	00 
c010b700:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b707:	00 
c010b708:	8b 45 08             	mov    0x8(%ebp),%eax
c010b70b:	89 04 24             	mov    %eax,(%esp)
c010b70e:	e8 36 f0 ff ff       	call   c010a749 <file_testfd>
c010b713:	85 c0                	test   %eax,%eax
c010b715:	75 0a                	jne    c010b721 <sysfile_read+0x4a>
        return -E_INVAL;
c010b717:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b71c:	e9 2c 01 00 00       	jmp    c010b84d <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b721:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b728:	e8 d0 95 ff ff       	call   c0104cfd <kmalloc>
c010b72d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b730:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b734:	75 0a                	jne    c010b740 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b736:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b73b:	e9 0d 01 00 00       	jmp    c010b84d <sysfile_read+0x176>
    }

    int ret = 0;
c010b740:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b747:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b74e:	e9 d7 00 00 00       	jmp    c010b82a <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b753:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b75a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b75d:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b760:	76 06                	jbe    c010b768 <sysfile_read+0x91>
            alen = len;
c010b762:	8b 45 10             	mov    0x10(%ebp),%eax
c010b765:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b768:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b76b:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b76e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b772:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b776:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b779:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b77d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b780:	89 04 24             	mov    %eax,(%esp)
c010b783:	e8 11 f2 ff ff       	call   c010a999 <file_read>
c010b788:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b78b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b78e:	85 c0                	test   %eax,%eax
c010b790:	0f 84 87 00 00 00    	je     c010b81d <sysfile_read+0x146>
            lock_mm(mm);
c010b796:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b799:	89 04 24             	mov    %eax,(%esp)
c010b79c:	e8 cc fd ff ff       	call   c010b56d <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b7a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7b9:	89 04 24             	mov    %eax,(%esp)
c010b7bc:	e8 fb ce ff ff       	call   c01086bc <copy_to_user>
c010b7c1:	85 c0                	test   %eax,%eax
c010b7c3:	74 40                	je     c010b805 <sysfile_read+0x12e>
                    assert(len >= alen);
c010b7c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7c8:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b7cb:	73 24                	jae    c010b7f1 <sysfile_read+0x11a>
c010b7cd:	c7 44 24 0c 35 82 11 	movl   $0xc0118235,0xc(%esp)
c010b7d4:	c0 
c010b7d5:	c7 44 24 08 41 82 11 	movl   $0xc0118241,0x8(%esp)
c010b7dc:	c0 
c010b7dd:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c010b7e4:	00 
c010b7e5:	c7 04 24 56 82 11 c0 	movl   $0xc0118256,(%esp)
c010b7ec:	e8 d7 56 ff ff       	call   c0100ec8 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b7f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7f4:	01 45 0c             	add    %eax,0xc(%ebp)
c010b7f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7fa:	29 45 10             	sub    %eax,0x10(%ebp)
c010b7fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b800:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b803:	eb 0d                	jmp    c010b812 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b805:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b809:	75 07                	jne    c010b812 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b80b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b812:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b815:	89 04 24             	mov    %eax,(%esp)
c010b818:	e8 83 fd ff ff       	call   c010b5a0 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b81d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b821:	75 11                	jne    c010b834 <sysfile_read+0x15d>
c010b823:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b826:	85 c0                	test   %eax,%eax
c010b828:	74 0a                	je     c010b834 <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b82a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b82e:	0f 85 1f ff ff ff    	jne    c010b753 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b834:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b837:	89 04 24             	mov    %eax,(%esp)
c010b83a:	e8 d9 94 ff ff       	call   c0104d18 <kfree>
    if (copied != 0) {
c010b83f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b843:	74 05                	je     c010b84a <sysfile_read+0x173>
        return copied;
c010b845:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b848:	eb 03                	jmp    c010b84d <sysfile_read+0x176>
    }
    return ret;
c010b84a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b84d:	c9                   	leave  
c010b84e:	c3                   	ret    

c010b84f <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b84f:	55                   	push   %ebp
c010b850:	89 e5                	mov    %esp,%ebp
c010b852:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b855:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010b85a:	8b 40 18             	mov    0x18(%eax),%eax
c010b85d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b860:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b864:	75 0a                	jne    c010b870 <sysfile_write+0x21>
        return 0;
c010b866:	b8 00 00 00 00       	mov    $0x0,%eax
c010b86b:	e9 57 01 00 00       	jmp    c010b9c7 <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b870:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b877:	00 
c010b878:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b87f:	00 
c010b880:	8b 45 08             	mov    0x8(%ebp),%eax
c010b883:	89 04 24             	mov    %eax,(%esp)
c010b886:	e8 be ee ff ff       	call   c010a749 <file_testfd>
c010b88b:	85 c0                	test   %eax,%eax
c010b88d:	75 0a                	jne    c010b899 <sysfile_write+0x4a>
        return -E_INVAL;
c010b88f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b894:	e9 2e 01 00 00       	jmp    c010b9c7 <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b899:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b8a0:	e8 58 94 ff ff       	call   c0104cfd <kmalloc>
c010b8a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b8a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b8ac:	75 0a                	jne    c010b8b8 <sysfile_write+0x69>
        return -E_NO_MEM;
c010b8ae:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b8b3:	e9 0f 01 00 00       	jmp    c010b9c7 <sysfile_write+0x178>
    }

    int ret = 0;
c010b8b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b8bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b8c6:	e9 d9 00 00 00       	jmp    c010b9a4 <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b8cb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b8d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8d5:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b8d8:	76 06                	jbe    c010b8e0 <sysfile_write+0x91>
            alen = len;
c010b8da:	8b 45 10             	mov    0x10(%ebp),%eax
c010b8dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b8e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8e3:	89 04 24             	mov    %eax,(%esp)
c010b8e6:	e8 82 fc ff ff       	call   c010b56d <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b8eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8ee:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b8f5:	00 
c010b8f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b8fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b901:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b904:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b908:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b90b:	89 04 24             	mov    %eax,(%esp)
c010b90e:	e8 58 cd ff ff       	call   c010866b <copy_from_user>
c010b913:	85 c0                	test   %eax,%eax
c010b915:	75 07                	jne    c010b91e <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b917:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b91e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b921:	89 04 24             	mov    %eax,(%esp)
c010b924:	e8 77 fc ff ff       	call   c010b5a0 <unlock_mm>
        if (ret == 0) {
c010b929:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b92d:	75 68                	jne    c010b997 <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b92f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b932:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b935:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b939:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b93d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b940:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b944:	8b 45 08             	mov    0x8(%ebp),%eax
c010b947:	89 04 24             	mov    %eax,(%esp)
c010b94a:	e8 84 f1 ff ff       	call   c010aad3 <file_write>
c010b94f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b952:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b955:	85 c0                	test   %eax,%eax
c010b957:	74 3e                	je     c010b997 <sysfile_write+0x148>
                assert(len >= alen);
c010b959:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b95c:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b95f:	73 24                	jae    c010b985 <sysfile_write+0x136>
c010b961:	c7 44 24 0c 35 82 11 	movl   $0xc0118235,0xc(%esp)
c010b968:	c0 
c010b969:	c7 44 24 08 41 82 11 	movl   $0xc0118241,0x8(%esp)
c010b970:	c0 
c010b971:	c7 44 24 04 8c 00 00 	movl   $0x8c,0x4(%esp)
c010b978:	00 
c010b979:	c7 04 24 56 82 11 c0 	movl   $0xc0118256,(%esp)
c010b980:	e8 43 55 ff ff       	call   c0100ec8 <__panic>
                base += alen, len -= alen, copied += alen;
c010b985:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b988:	01 45 0c             	add    %eax,0xc(%ebp)
c010b98b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b98e:	29 45 10             	sub    %eax,0x10(%ebp)
c010b991:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b994:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b997:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b99b:	75 11                	jne    c010b9ae <sysfile_write+0x15f>
c010b99d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9a0:	85 c0                	test   %eax,%eax
c010b9a2:	74 0a                	je     c010b9ae <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b9a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b9a8:	0f 85 1d ff ff ff    	jne    c010b8cb <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b9ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b9b1:	89 04 24             	mov    %eax,(%esp)
c010b9b4:	e8 5f 93 ff ff       	call   c0104d18 <kfree>
    if (copied != 0) {
c010b9b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b9bd:	74 05                	je     c010b9c4 <sysfile_write+0x175>
        return copied;
c010b9bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9c2:	eb 03                	jmp    c010b9c7 <sysfile_write+0x178>
    }
    return ret;
c010b9c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9c7:	c9                   	leave  
c010b9c8:	c3                   	ret    

c010b9c9 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b9c9:	55                   	push   %ebp
c010b9ca:	89 e5                	mov    %esp,%ebp
c010b9cc:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b9cf:	8b 45 10             	mov    0x10(%ebp),%eax
c010b9d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b9d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b9d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9e0:	89 04 24             	mov    %eax,(%esp)
c010b9e3:	e8 25 f2 ff ff       	call   c010ac0d <file_seek>
}
c010b9e8:	c9                   	leave  
c010b9e9:	c3                   	ret    

c010b9ea <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b9ea:	55                   	push   %ebp
c010b9eb:	89 e5                	mov    %esp,%ebp
c010b9ed:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b9f0:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010b9f5:	8b 40 18             	mov    0x18(%eax),%eax
c010b9f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b9fb:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b9fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010ba01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba04:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba08:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba0b:	89 04 24             	mov    %eax,(%esp)
c010ba0e:	e8 9d f3 ff ff       	call   c010adb0 <file_fstat>
c010ba13:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba1a:	74 05                	je     c010ba21 <sysfile_fstat+0x37>
        return ret;
c010ba1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba1f:	eb 45                	jmp    c010ba66 <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010ba21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba24:	89 04 24             	mov    %eax,(%esp)
c010ba27:	e8 41 fb ff ff       	call   c010b56d <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010ba2c:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010ba33:	00 
c010ba34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba37:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba45:	89 04 24             	mov    %eax,(%esp)
c010ba48:	e8 6f cc ff ff       	call   c01086bc <copy_to_user>
c010ba4d:	85 c0                	test   %eax,%eax
c010ba4f:	75 07                	jne    c010ba58 <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010ba51:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010ba58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba5b:	89 04 24             	mov    %eax,(%esp)
c010ba5e:	e8 3d fb ff ff       	call   c010b5a0 <unlock_mm>
    return ret;
c010ba63:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba66:	c9                   	leave  
c010ba67:	c3                   	ret    

c010ba68 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010ba68:	55                   	push   %ebp
c010ba69:	89 e5                	mov    %esp,%ebp
c010ba6b:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010ba6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba71:	89 04 24             	mov    %eax,(%esp)
c010ba74:	e8 f6 f3 ff ff       	call   c010ae6f <file_fsync>
}
c010ba79:	c9                   	leave  
c010ba7a:	c3                   	ret    

c010ba7b <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010ba7b:	55                   	push   %ebp
c010ba7c:	89 e5                	mov    %esp,%ebp
c010ba7e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010ba81:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba84:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba88:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba8b:	89 04 24             	mov    %eax,(%esp)
c010ba8e:	e8 33 fb ff ff       	call   c010b5c6 <copy_path>
c010ba93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba9a:	74 05                	je     c010baa1 <sysfile_chdir+0x26>
        return ret;
c010ba9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba9f:	eb 1c                	jmp    c010babd <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010baa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baa4:	89 04 24             	mov    %eax,(%esp)
c010baa7:	e8 7d 4c 00 00       	call   c0110729 <vfs_chdir>
c010baac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010baaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bab2:	89 04 24             	mov    %eax,(%esp)
c010bab5:	e8 5e 92 ff ff       	call   c0104d18 <kfree>
    return ret;
c010baba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010babd:	c9                   	leave  
c010babe:	c3                   	ret    

c010babf <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010babf:	55                   	push   %ebp
c010bac0:	89 e5                	mov    %esp,%ebp
c010bac2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bac5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bac8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bacc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bacf:	89 04 24             	mov    %eax,(%esp)
c010bad2:	e8 ef fa ff ff       	call   c010b5c6 <copy_path>
c010bad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bada:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bade:	74 05                	je     c010bae5 <sysfile_link+0x26>
        return ret;
c010bae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bae3:	eb 59                	jmp    c010bb3e <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bae5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bae8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010baec:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010baef:	89 04 24             	mov    %eax,(%esp)
c010baf2:	e8 cf fa ff ff       	call   c010b5c6 <copy_path>
c010baf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bafa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bafe:	74 10                	je     c010bb10 <sysfile_link+0x51>
        kfree(old_path);
c010bb00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb03:	89 04 24             	mov    %eax,(%esp)
c010bb06:	e8 0d 92 ff ff       	call   c0104d18 <kfree>
        return ret;
c010bb0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb0e:	eb 2e                	jmp    c010bb3e <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010bb10:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb16:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb1a:	89 04 24             	mov    %eax,(%esp)
c010bb1d:	e8 70 47 00 00       	call   c0110292 <vfs_link>
c010bb22:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bb25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb28:	89 04 24             	mov    %eax,(%esp)
c010bb2b:	e8 e8 91 ff ff       	call   c0104d18 <kfree>
c010bb30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb33:	89 04 24             	mov    %eax,(%esp)
c010bb36:	e8 dd 91 ff ff       	call   c0104d18 <kfree>
    return ret;
c010bb3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb3e:	c9                   	leave  
c010bb3f:	c3                   	ret    

c010bb40 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010bb40:	55                   	push   %ebp
c010bb41:	89 e5                	mov    %esp,%ebp
c010bb43:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010bb46:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb49:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb4d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bb50:	89 04 24             	mov    %eax,(%esp)
c010bb53:	e8 6e fa ff ff       	call   c010b5c6 <copy_path>
c010bb58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb5f:	74 05                	je     c010bb66 <sysfile_rename+0x26>
        return ret;
c010bb61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb64:	eb 59                	jmp    c010bbbf <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010bb66:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb69:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb6d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bb70:	89 04 24             	mov    %eax,(%esp)
c010bb73:	e8 4e fa ff ff       	call   c010b5c6 <copy_path>
c010bb78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb7f:	74 10                	je     c010bb91 <sysfile_rename+0x51>
        kfree(old_path);
c010bb81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb84:	89 04 24             	mov    %eax,(%esp)
c010bb87:	e8 8c 91 ff ff       	call   c0104d18 <kfree>
        return ret;
c010bb8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb8f:	eb 2e                	jmp    c010bbbf <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010bb91:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb97:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb9b:	89 04 24             	mov    %eax,(%esp)
c010bb9e:	e8 e5 46 00 00       	call   c0110288 <vfs_rename>
c010bba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010bba6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bba9:	89 04 24             	mov    %eax,(%esp)
c010bbac:	e8 67 91 ff ff       	call   c0104d18 <kfree>
c010bbb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbb4:	89 04 24             	mov    %eax,(%esp)
c010bbb7:	e8 5c 91 ff ff       	call   c0104d18 <kfree>
    return ret;
c010bbbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bbbf:	c9                   	leave  
c010bbc0:	c3                   	ret    

c010bbc1 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010bbc1:	55                   	push   %ebp
c010bbc2:	89 e5                	mov    %esp,%ebp
c010bbc4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010bbc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbce:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bbd1:	89 04 24             	mov    %eax,(%esp)
c010bbd4:	e8 ed f9 ff ff       	call   c010b5c6 <copy_path>
c010bbd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbe0:	74 05                	je     c010bbe7 <sysfile_unlink+0x26>
        return ret;
c010bbe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbe5:	eb 1c                	jmp    c010bc03 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010bbe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbea:	89 04 24             	mov    %eax,(%esp)
c010bbed:	e8 8c 46 00 00       	call   c011027e <vfs_unlink>
c010bbf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010bbf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbf8:	89 04 24             	mov    %eax,(%esp)
c010bbfb:	e8 18 91 ff ff       	call   c0104d18 <kfree>
    return ret;
c010bc00:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc03:	c9                   	leave  
c010bc04:	c3                   	ret    

c010bc05 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010bc05:	55                   	push   %ebp
c010bc06:	89 e5                	mov    %esp,%ebp
c010bc08:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bc0b:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010bc10:	8b 40 18             	mov    0x18(%eax),%eax
c010bc13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010bc16:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bc1a:	75 07                	jne    c010bc23 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010bc1c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bc21:	eb 77                	jmp    c010bc9a <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010bc23:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010bc2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc2d:	89 04 24             	mov    %eax,(%esp)
c010bc30:	e8 38 f9 ff ff       	call   c010b56d <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bc35:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc38:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bc3f:	00 
c010bc40:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc43:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc4e:	89 04 24             	mov    %eax,(%esp)
c010bc51:	e8 17 d4 ff ff       	call   c010906d <user_mem_check>
c010bc56:	85 c0                	test   %eax,%eax
c010bc58:	74 32                	je     c010bc8c <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010bc5a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bc61:	00 
c010bc62:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc65:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc69:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc70:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bc73:	89 04 24             	mov    %eax,(%esp)
c010bc76:	e8 43 f7 ff ff       	call   c010b3be <iobuf_init>
c010bc7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bc7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc81:	89 04 24             	mov    %eax,(%esp)
c010bc84:	e8 df 4a 00 00       	call   c0110768 <vfs_getcwd>
c010bc89:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bc8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc8f:	89 04 24             	mov    %eax,(%esp)
c010bc92:	e8 09 f9 ff ff       	call   c010b5a0 <unlock_mm>
    return ret;
c010bc97:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc9a:	c9                   	leave  
c010bc9b:	c3                   	ret    

c010bc9c <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bc9c:	55                   	push   %ebp
c010bc9d:	89 e5                	mov    %esp,%ebp
c010bc9f:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bca2:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010bca7:	8b 40 18             	mov    0x18(%eax),%eax
c010bcaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bcad:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bcb4:	e8 44 90 ff ff       	call   c0104cfd <kmalloc>
c010bcb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bcbc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bcc0:	75 0a                	jne    c010bccc <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bcc2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bcc7:	e9 c2 00 00 00       	jmp    c010bd8e <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bccc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bcd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcd6:	89 04 24             	mov    %eax,(%esp)
c010bcd9:	e8 8f f8 ff ff       	call   c010b56d <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bcde:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bce1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bce4:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bceb:	00 
c010bcec:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bcf3:	00 
c010bcf4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bcf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcff:	89 04 24             	mov    %eax,(%esp)
c010bd02:	e8 64 c9 ff ff       	call   c010866b <copy_from_user>
c010bd07:	85 c0                	test   %eax,%eax
c010bd09:	75 07                	jne    c010bd12 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bd0b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bd12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd15:	89 04 24             	mov    %eax,(%esp)
c010bd18:	e8 83 f8 ff ff       	call   c010b5a0 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bd1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd21:	75 5d                	jne    c010bd80 <sysfile_getdirentry+0xe4>
c010bd23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd26:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd2d:	89 04 24             	mov    %eax,(%esp)
c010bd30:	e8 f2 f1 ff ff       	call   c010af27 <file_getdirentry>
c010bd35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd3c:	75 42                	jne    c010bd80 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bd3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd41:	89 04 24             	mov    %eax,(%esp)
c010bd44:	e8 24 f8 ff ff       	call   c010b56d <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bd49:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bd50:	00 
c010bd51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd54:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bd58:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd62:	89 04 24             	mov    %eax,(%esp)
c010bd65:	e8 52 c9 ff ff       	call   c01086bc <copy_to_user>
c010bd6a:	85 c0                	test   %eax,%eax
c010bd6c:	75 07                	jne    c010bd75 <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bd6e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bd75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd78:	89 04 24             	mov    %eax,(%esp)
c010bd7b:	e8 20 f8 ff ff       	call   c010b5a0 <unlock_mm>

out:
    kfree(direntp);
c010bd80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd83:	89 04 24             	mov    %eax,(%esp)
c010bd86:	e8 8d 8f ff ff       	call   c0104d18 <kfree>
    return ret;
c010bd8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bd8e:	c9                   	leave  
c010bd8f:	c3                   	ret    

c010bd90 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bd90:	55                   	push   %ebp
c010bd91:	89 e5                	mov    %esp,%ebp
c010bd93:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bd96:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd99:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bda0:	89 04 24             	mov    %eax,(%esp)
c010bda3:	e8 8d f2 ff ff       	call   c010b035 <file_dup>
}
c010bda8:	c9                   	leave  
c010bda9:	c3                   	ret    

c010bdaa <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010bdaa:	55                   	push   %ebp
c010bdab:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bdad:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bdb2:	5d                   	pop    %ebp
c010bdb3:	c3                   	ret    

c010bdb4 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010bdb4:	55                   	push   %ebp
c010bdb5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bdb7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bdbc:	5d                   	pop    %ebp
c010bdbd:	c3                   	ret    

c010bdbe <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bdbe:	52                   	push   %edx
    call *%ebx              # call fn
c010bdbf:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bdc1:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bdc2:	e8 2e 0e 00 00       	call   c010cbf5 <do_exit>

c010bdc7 <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bdc7:	55                   	push   %ebp
c010bdc8:	89 e5                	mov    %esp,%ebp
c010bdca:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bdcd:	8b 55 10             	mov    0x10(%ebp),%edx
c010bdd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd3:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bdd5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bddb:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bdde:	8b 45 08             	mov    0x8(%ebp),%eax
c010bde1:	83 c0 08             	add    $0x8,%eax
c010bde4:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bde7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdea:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bded:	89 50 04             	mov    %edx,0x4(%eax)
c010bdf0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdf3:	8b 50 04             	mov    0x4(%eax),%edx
c010bdf6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bdf9:	89 10                	mov    %edx,(%eax)
    return timer;
c010bdfb:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bdfe:	c9                   	leave  
c010bdff:	c3                   	ret    

c010be00 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010be00:	55                   	push   %ebp
c010be01:	89 e5                	mov    %esp,%ebp
c010be03:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010be06:	9c                   	pushf  
c010be07:	58                   	pop    %eax
c010be08:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010be0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010be0e:	25 00 02 00 00       	and    $0x200,%eax
c010be13:	85 c0                	test   %eax,%eax
c010be15:	74 0c                	je     c010be23 <__intr_save+0x23>
        intr_disable();
c010be17:	e8 2c 63 ff ff       	call   c0102148 <intr_disable>
        return 1;
c010be1c:	b8 01 00 00 00       	mov    $0x1,%eax
c010be21:	eb 05                	jmp    c010be28 <__intr_save+0x28>
    }
    return 0;
c010be23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be28:	c9                   	leave  
c010be29:	c3                   	ret    

c010be2a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010be2a:	55                   	push   %ebp
c010be2b:	89 e5                	mov    %esp,%ebp
c010be2d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010be30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be34:	74 05                	je     c010be3b <__intr_restore+0x11>
        intr_enable();
c010be36:	e8 07 63 ff ff       	call   c0102142 <intr_enable>
    }
}
c010be3b:	c9                   	leave  
c010be3c:	c3                   	ret    

c010be3d <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010be3d:	55                   	push   %ebp
c010be3e:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010be40:	8b 55 08             	mov    0x8(%ebp),%edx
c010be43:	a1 34 41 15 c0       	mov    0xc0154134,%eax
c010be48:	29 c2                	sub    %eax,%edx
c010be4a:	89 d0                	mov    %edx,%eax
c010be4c:	c1 f8 02             	sar    $0x2,%eax
c010be4f:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010be55:	5d                   	pop    %ebp
c010be56:	c3                   	ret    

c010be57 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010be57:	55                   	push   %ebp
c010be58:	89 e5                	mov    %esp,%ebp
c010be5a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010be5d:	8b 45 08             	mov    0x8(%ebp),%eax
c010be60:	89 04 24             	mov    %eax,(%esp)
c010be63:	e8 d5 ff ff ff       	call   c010be3d <page2ppn>
c010be68:	c1 e0 0c             	shl    $0xc,%eax
}
c010be6b:	c9                   	leave  
c010be6c:	c3                   	ret    

c010be6d <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010be6d:	55                   	push   %ebp
c010be6e:	89 e5                	mov    %esp,%ebp
c010be70:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010be73:	8b 45 08             	mov    0x8(%ebp),%eax
c010be76:	c1 e8 0c             	shr    $0xc,%eax
c010be79:	89 c2                	mov    %eax,%edx
c010be7b:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010be80:	39 c2                	cmp    %eax,%edx
c010be82:	72 1c                	jb     c010bea0 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010be84:	c7 44 24 08 68 82 11 	movl   $0xc0118268,0x8(%esp)
c010be8b:	c0 
c010be8c:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010be93:	00 
c010be94:	c7 04 24 87 82 11 c0 	movl   $0xc0118287,(%esp)
c010be9b:	e8 28 50 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010bea0:	8b 0d 34 41 15 c0    	mov    0xc0154134,%ecx
c010bea6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea9:	c1 e8 0c             	shr    $0xc,%eax
c010beac:	89 c2                	mov    %eax,%edx
c010beae:	89 d0                	mov    %edx,%eax
c010beb0:	c1 e0 03             	shl    $0x3,%eax
c010beb3:	01 d0                	add    %edx,%eax
c010beb5:	c1 e0 02             	shl    $0x2,%eax
c010beb8:	01 c8                	add    %ecx,%eax
}
c010beba:	c9                   	leave  
c010bebb:	c3                   	ret    

c010bebc <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bebc:	55                   	push   %ebp
c010bebd:	89 e5                	mov    %esp,%ebp
c010bebf:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bec2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec5:	89 04 24             	mov    %eax,(%esp)
c010bec8:	e8 8a ff ff ff       	call   c010be57 <page2pa>
c010becd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bed0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed3:	c1 e8 0c             	shr    $0xc,%eax
c010bed6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bed9:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010bede:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bee1:	72 23                	jb     c010bf06 <page2kva+0x4a>
c010bee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bee6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010beea:	c7 44 24 08 98 82 11 	movl   $0xc0118298,0x8(%esp)
c010bef1:	c0 
c010bef2:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bef9:	00 
c010befa:	c7 04 24 87 82 11 c0 	movl   $0xc0118287,(%esp)
c010bf01:	e8 c2 4f ff ff       	call   c0100ec8 <__panic>
c010bf06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf09:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bf0e:	c9                   	leave  
c010bf0f:	c3                   	ret    

c010bf10 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bf10:	55                   	push   %ebp
c010bf11:	89 e5                	mov    %esp,%ebp
c010bf13:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bf16:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf1c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bf23:	77 23                	ja     c010bf48 <kva2page+0x38>
c010bf25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf28:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf2c:	c7 44 24 08 bc 82 11 	movl   $0xc01182bc,0x8(%esp)
c010bf33:	c0 
c010bf34:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010bf3b:	00 
c010bf3c:	c7 04 24 87 82 11 c0 	movl   $0xc0118287,(%esp)
c010bf43:	e8 80 4f ff ff       	call   c0100ec8 <__panic>
c010bf48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf4b:	05 00 00 00 40       	add    $0x40000000,%eax
c010bf50:	89 04 24             	mov    %eax,(%esp)
c010bf53:	e8 15 ff ff ff       	call   c010be6d <pa2page>
}
c010bf58:	c9                   	leave  
c010bf59:	c3                   	ret    

c010bf5a <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010bf5a:	55                   	push   %ebp
c010bf5b:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010bf5d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf60:	8b 40 18             	mov    0x18(%eax),%eax
c010bf63:	8d 50 01             	lea    0x1(%eax),%edx
c010bf66:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf69:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bf6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf6f:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bf72:	5d                   	pop    %ebp
c010bf73:	c3                   	ret    

c010bf74 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010bf74:	55                   	push   %ebp
c010bf75:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010bf77:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf7a:	8b 40 18             	mov    0x18(%eax),%eax
c010bf7d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bf80:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf83:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010bf86:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf89:	8b 40 18             	mov    0x18(%eax),%eax
}
c010bf8c:	5d                   	pop    %ebp
c010bf8d:	c3                   	ret    

c010bf8e <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010bf8e:	55                   	push   %ebp
c010bf8f:	89 e5                	mov    %esp,%ebp
c010bf91:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bf94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf98:	74 25                	je     c010bfbf <lock_mm+0x31>
        down(&(mm->mm_sem));
c010bf9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf9d:	83 c0 1c             	add    $0x1c,%eax
c010bfa0:	89 04 24             	mov    %eax,(%esp)
c010bfa3:	e8 75 dd ff ff       	call   c0109d1d <down>
        if (current != NULL) {
c010bfa8:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010bfad:	85 c0                	test   %eax,%eax
c010bfaf:	74 0e                	je     c010bfbf <lock_mm+0x31>
            mm->locked_by = current->pid;
c010bfb1:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010bfb6:	8b 50 04             	mov    0x4(%eax),%edx
c010bfb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfbc:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010bfbf:	c9                   	leave  
c010bfc0:	c3                   	ret    

c010bfc1 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010bfc1:	55                   	push   %ebp
c010bfc2:	89 e5                	mov    %esp,%ebp
c010bfc4:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010bfc7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bfcb:	74 18                	je     c010bfe5 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010bfcd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd0:	83 c0 1c             	add    $0x1c,%eax
c010bfd3:	89 04 24             	mov    %eax,(%esp)
c010bfd6:	e8 27 dd ff ff       	call   c0109d02 <up>
        mm->locked_by = 0;
c010bfdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfde:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010bfe5:	c9                   	leave  
c010bfe6:	c3                   	ret    

c010bfe7 <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010bfe7:	55                   	push   %ebp
c010bfe8:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010bfea:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfed:	8b 40 08             	mov    0x8(%eax),%eax
c010bff0:	8d 50 01             	lea    0x1(%eax),%edx
c010bff3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bff6:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bff9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bffc:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bfff:	5d                   	pop    %ebp
c010c000:	c3                   	ret    

c010c001 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010c001:	55                   	push   %ebp
c010c002:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010c004:	8b 45 08             	mov    0x8(%ebp),%eax
c010c007:	8b 40 08             	mov    0x8(%eax),%eax
c010c00a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c00d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c010:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010c013:	8b 45 08             	mov    0x8(%ebp),%eax
c010c016:	8b 40 08             	mov    0x8(%eax),%eax
}
c010c019:	5d                   	pop    %ebp
c010c01a:	c3                   	ret    

c010c01b <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010c01b:	55                   	push   %ebp
c010c01c:	89 e5                	mov    %esp,%ebp
c010c01e:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010c021:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010c028:	e8 d0 8c ff ff       	call   c0104cfd <kmalloc>
c010c02d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010c030:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c034:	0f 84 70 01 00 00    	je     c010c1aa <alloc_proc+0x18f>
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c010c03a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c03d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010c043:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c046:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010c04d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c050:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010c057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c05a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010c061:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c064:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010c06b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c06e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010c075:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c078:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010c07f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c082:	83 c0 1c             	add    $0x1c,%eax
c010c085:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010c08c:	00 
c010c08d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c094:	00 
c010c095:	89 04 24             	mov    %eax,(%esp)
c010c098:	e8 b3 96 00 00       	call   c0115750 <memset>
        proc->tf = NULL;
c010c09d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0a0:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010c0a7:	8b 15 30 41 15 c0    	mov    0xc0154130,%edx
c010c0ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0b0:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010c0b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0b6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010c0bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0c0:	83 c0 48             	add    $0x48,%eax
c010c0c3:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c0ca:	00 
c010c0cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0d2:	00 
c010c0d3:	89 04 24             	mov    %eax,(%esp)
c010c0d6:	e8 75 96 00 00       	call   c0115750 <memset>
        proc->wait_state = 0;
c010c0db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0de:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c0e5:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010c0e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0eb:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c0f2:	00 00 00 
c010c0f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0f8:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010c0fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c101:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c10a:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010c110:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c113:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c010c119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c11c:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010c123:	00 00 00 
        proc->run_link.prev = proc->run_link.next = NULL;
c010c126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c129:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
c010c130:	00 00 00 
c010c133:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c136:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
c010c13c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c13f:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
        proc->time_slice = 0;
c010c145:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c148:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010c14f:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010c152:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c155:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010c15c:	00 00 00 
c010c15f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c162:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010c168:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c16b:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010c171:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c174:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010c17a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c17d:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010c183:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c186:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010c18d:	00 00 00 
        proc->lab6_priority = 0;
c010c190:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c193:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c19a:	00 00 00 
        proc->filesp = NULL;
c010c19d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1a0:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c1a7:	00 00 00 
    }
    return proc;
c010c1aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c1ad:	c9                   	leave  
c010c1ae:	c3                   	ret    

c010c1af <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c1af:	55                   	push   %ebp
c010c1b0:	89 e5                	mov    %esp,%ebp
c010c1b2:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c1b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b8:	83 c0 48             	add    $0x48,%eax
c010c1bb:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c1c2:	00 
c010c1c3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c1ca:	00 
c010c1cb:	89 04 24             	mov    %eax,(%esp)
c010c1ce:	e8 7d 95 00 00       	call   c0115750 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d6:	8d 50 48             	lea    0x48(%eax),%edx
c010c1d9:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c1e0:	00 
c010c1e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1e8:	89 14 24             	mov    %edx,(%esp)
c010c1eb:	e8 42 96 00 00       	call   c0115832 <memcpy>
}
c010c1f0:	c9                   	leave  
c010c1f1:	c3                   	ret    

c010c1f2 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c1f2:	55                   	push   %ebp
c010c1f3:	89 e5                	mov    %esp,%ebp
c010c1f5:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c1f8:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c1ff:	00 
c010c200:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c207:	00 
c010c208:	c7 04 24 00 30 15 c0 	movl   $0xc0153000,(%esp)
c010c20f:	e8 3c 95 00 00       	call   c0115750 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c214:	8b 45 08             	mov    0x8(%ebp),%eax
c010c217:	83 c0 48             	add    $0x48,%eax
c010c21a:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c221:	00 
c010c222:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c226:	c7 04 24 00 30 15 c0 	movl   $0xc0153000,(%esp)
c010c22d:	e8 00 96 00 00       	call   c0115832 <memcpy>
}
c010c232:	c9                   	leave  
c010c233:	c3                   	ret    

c010c234 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c234:	55                   	push   %ebp
c010c235:	89 e5                	mov    %esp,%ebp
c010c237:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c23a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c23d:	83 c0 7c             	add    $0x7c,%eax
c010c240:	c7 45 fc fc 42 15 c0 	movl   $0xc01542fc,-0x4(%ebp)
c010c247:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c24a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c24d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c250:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c253:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c256:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c259:	8b 40 04             	mov    0x4(%eax),%eax
c010c25c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c25f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c262:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c265:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c268:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c26b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c26e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c271:	89 10                	mov    %edx,(%eax)
c010c273:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c276:	8b 10                	mov    (%eax),%edx
c010c278:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c27b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c27e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c281:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c284:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c287:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c28a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c28d:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c28f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c292:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c299:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c29c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c29f:	8b 40 14             	mov    0x14(%eax),%eax
c010c2a2:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c2a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ab:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c2b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2b4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c2ba:	85 c0                	test   %eax,%eax
c010c2bc:	74 12                	je     c010c2d0 <set_links+0x9c>
        proc->optr->yptr = proc;
c010c2be:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2c1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c2c7:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2ca:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c2d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2d3:	8b 40 14             	mov    0x14(%eax),%eax
c010c2d6:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2d9:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c2df:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c010c2e4:	83 c0 01             	add    $0x1,%eax
c010c2e7:	a3 e0 2f 15 c0       	mov    %eax,0xc0152fe0
}
c010c2ec:	c9                   	leave  
c010c2ed:	c3                   	ret    

c010c2ee <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c2ee:	55                   	push   %ebp
c010c2ef:	89 e5                	mov    %esp,%ebp
c010c2f1:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c2f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f7:	83 c0 7c             	add    $0x7c,%eax
c010c2fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c2fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c300:	8b 40 04             	mov    0x4(%eax),%eax
c010c303:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c306:	8b 12                	mov    (%edx),%edx
c010c308:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c30b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c30e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c311:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c314:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c317:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c31a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c31d:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c31f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c322:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c328:	85 c0                	test   %eax,%eax
c010c32a:	74 18                	je     c010c344 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c32c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c32f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c335:	8b 55 08             	mov    0x8(%ebp),%edx
c010c338:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c33e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c344:	8b 45 08             	mov    0x8(%ebp),%eax
c010c347:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c34d:	85 c0                	test   %eax,%eax
c010c34f:	74 1a                	je     c010c36b <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c351:	8b 45 08             	mov    0x8(%ebp),%eax
c010c354:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c35a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c35d:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c363:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c369:	eb 15                	jmp    c010c380 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c36b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c36e:	8b 40 14             	mov    0x14(%eax),%eax
c010c371:	8b 55 08             	mov    0x8(%ebp),%edx
c010c374:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c37a:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c380:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c010c385:	83 e8 01             	sub    $0x1,%eax
c010c388:	a3 e0 2f 15 c0       	mov    %eax,0xc0152fe0
}
c010c38d:	c9                   	leave  
c010c38e:	c3                   	ret    

c010c38f <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c38f:	55                   	push   %ebp
c010c390:	89 e5                	mov    %esp,%ebp
c010c392:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c395:	c7 45 f8 fc 42 15 c0 	movl   $0xc01542fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c39c:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3a1:	83 c0 01             	add    $0x1,%eax
c010c3a4:	a3 84 fa 14 c0       	mov    %eax,0xc014fa84
c010c3a9:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3ae:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c3b3:	7e 0c                	jle    c010c3c1 <get_pid+0x32>
        last_pid = 1;
c010c3b5:	c7 05 84 fa 14 c0 01 	movl   $0x1,0xc014fa84
c010c3bc:	00 00 00 
        goto inside;
c010c3bf:	eb 13                	jmp    c010c3d4 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c3c1:	8b 15 84 fa 14 c0    	mov    0xc014fa84,%edx
c010c3c7:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c3cc:	39 c2                	cmp    %eax,%edx
c010c3ce:	0f 8c ac 00 00 00    	jl     c010c480 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c3d4:	c7 05 88 fa 14 c0 00 	movl   $0x2000,0xc014fa88
c010c3db:	20 00 00 
    repeat:
        le = list;
c010c3de:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c3e4:	eb 7f                	jmp    c010c465 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c3e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3e9:	83 e8 7c             	sub    $0x7c,%eax
c010c3ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c3ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3f2:	8b 50 04             	mov    0x4(%eax),%edx
c010c3f5:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c3fa:	39 c2                	cmp    %eax,%edx
c010c3fc:	75 3e                	jne    c010c43c <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c3fe:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c403:	83 c0 01             	add    $0x1,%eax
c010c406:	a3 84 fa 14 c0       	mov    %eax,0xc014fa84
c010c40b:	8b 15 84 fa 14 c0    	mov    0xc014fa84,%edx
c010c411:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c416:	39 c2                	cmp    %eax,%edx
c010c418:	7c 4b                	jl     c010c465 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c41a:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c41f:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c424:	7e 0a                	jle    c010c430 <get_pid+0xa1>
                        last_pid = 1;
c010c426:	c7 05 84 fa 14 c0 01 	movl   $0x1,0xc014fa84
c010c42d:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c430:	c7 05 88 fa 14 c0 00 	movl   $0x2000,0xc014fa88
c010c437:	20 00 00 
                    goto repeat;
c010c43a:	eb a2                	jmp    c010c3de <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c43c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c43f:	8b 50 04             	mov    0x4(%eax),%edx
c010c442:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
c010c447:	39 c2                	cmp    %eax,%edx
c010c449:	7e 1a                	jle    c010c465 <get_pid+0xd6>
c010c44b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c44e:	8b 50 04             	mov    0x4(%eax),%edx
c010c451:	a1 88 fa 14 c0       	mov    0xc014fa88,%eax
c010c456:	39 c2                	cmp    %eax,%edx
c010c458:	7d 0b                	jge    c010c465 <get_pid+0xd6>
                next_safe = proc->pid;
c010c45a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c45d:	8b 40 04             	mov    0x4(%eax),%eax
c010c460:	a3 88 fa 14 c0       	mov    %eax,0xc014fa88
c010c465:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c468:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c46b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c46e:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c471:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c474:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c477:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c47a:	0f 85 66 ff ff ff    	jne    c010c3e6 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c480:	a1 84 fa 14 c0       	mov    0xc014fa84,%eax
}
c010c485:	c9                   	leave  
c010c486:	c3                   	ret    

c010c487 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c487:	55                   	push   %ebp
c010c488:	89 e5                	mov    %esp,%ebp
c010c48a:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c48d:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010c492:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c495:	74 63                	je     c010c4fa <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c497:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010c49c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c49f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c4a5:	e8 56 f9 ff ff       	call   c010be00 <__intr_save>
c010c4aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c4ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4b0:	a3 c8 0f 15 c0       	mov    %eax,0xc0150fc8
            load_esp0(next->kstack + KSTACKSIZE);
c010c4b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4b8:	8b 40 0c             	mov    0xc(%eax),%eax
c010c4bb:	05 00 20 00 00       	add    $0x2000,%eax
c010c4c0:	89 04 24             	mov    %eax,(%esp)
c010c4c3:	e8 6c 8b ff ff       	call   c0105034 <load_esp0>
            lcr3(next->cr3);
c010c4c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4cb:	8b 40 40             	mov    0x40(%eax),%eax
c010c4ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c4d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4d4:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c4d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4da:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c4dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4e0:	83 c0 1c             	add    $0x1c,%eax
c010c4e3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c4e7:	89 04 24             	mov    %eax,(%esp)
c010c4ea:	e8 bc 1c 00 00       	call   c010e1ab <switch_to>
        }
        local_intr_restore(intr_flag);
c010c4ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f2:	89 04 24             	mov    %eax,(%esp)
c010c4f5:	e8 30 f9 ff ff       	call   c010be2a <__intr_restore>
    }
}
c010c4fa:	c9                   	leave  
c010c4fb:	c3                   	ret    

c010c4fc <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c4fc:	55                   	push   %ebp
c010c4fd:	89 e5                	mov    %esp,%ebp
c010c4ff:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c502:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010c507:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c50a:	89 04 24             	mov    %eax,(%esp)
c010c50d:	e8 2e 66 ff ff       	call   c0102b40 <forkrets>
}
c010c512:	c9                   	leave  
c010c513:	c3                   	ret    

c010c514 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c514:	55                   	push   %ebp
c010c515:	89 e5                	mov    %esp,%ebp
c010c517:	53                   	push   %ebx
c010c518:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c51b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c51e:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c524:	8b 45 08             	mov    0x8(%ebp),%eax
c010c527:	8b 40 04             	mov    0x4(%eax),%eax
c010c52a:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c531:	00 
c010c532:	89 04 24             	mov    %eax,(%esp)
c010c535:	e8 bc 86 00 00       	call   c0114bf6 <hash32>
c010c53a:	c1 e0 03             	shl    $0x3,%eax
c010c53d:	05 e0 0f 15 c0       	add    $0xc0150fe0,%eax
c010c542:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c545:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c548:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c54b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c54e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c551:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c554:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c557:	8b 40 04             	mov    0x4(%eax),%eax
c010c55a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c55d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c560:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c563:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c566:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c569:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c56c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c56f:	89 10                	mov    %edx,(%eax)
c010c571:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c574:	8b 10                	mov    (%eax),%edx
c010c576:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c579:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c57c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c57f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c582:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c585:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c588:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c58b:	89 10                	mov    %edx,(%eax)
}
c010c58d:	83 c4 34             	add    $0x34,%esp
c010c590:	5b                   	pop    %ebx
c010c591:	5d                   	pop    %ebp
c010c592:	c3                   	ret    

c010c593 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c593:	55                   	push   %ebp
c010c594:	89 e5                	mov    %esp,%ebp
c010c596:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c599:	8b 45 08             	mov    0x8(%ebp),%eax
c010c59c:	05 84 00 00 00       	add    $0x84,%eax
c010c5a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c5a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5a7:	8b 40 04             	mov    0x4(%eax),%eax
c010c5aa:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c5ad:	8b 12                	mov    (%edx),%edx
c010c5af:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c5b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c5b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c5b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c5bb:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c5be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5c1:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c5c4:	89 10                	mov    %edx,(%eax)
}
c010c5c6:	c9                   	leave  
c010c5c7:	c3                   	ret    

c010c5c8 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c5c8:	55                   	push   %ebp
c010c5c9:	89 e5                	mov    %esp,%ebp
c010c5cb:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c5ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c5d2:	7e 61                	jle    c010c635 <find_proc+0x6d>
c010c5d4:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c5db:	7f 58                	jg     c010c635 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c5dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e0:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c5e7:	00 
c010c5e8:	89 04 24             	mov    %eax,(%esp)
c010c5eb:	e8 06 86 00 00       	call   c0114bf6 <hash32>
c010c5f0:	c1 e0 03             	shl    $0x3,%eax
c010c5f3:	05 e0 0f 15 c0       	add    $0xc0150fe0,%eax
c010c5f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c5fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c601:	eb 1b                	jmp    c010c61e <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c606:	2d 84 00 00 00       	sub    $0x84,%eax
c010c60b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c60e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c611:	8b 40 04             	mov    0x4(%eax),%eax
c010c614:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c617:	75 05                	jne    c010c61e <find_proc+0x56>
                return proc;
c010c619:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c61c:	eb 1c                	jmp    c010c63a <find_proc+0x72>
c010c61e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c621:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c624:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c627:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c62a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c62d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c630:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c633:	75 ce                	jne    c010c603 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c635:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c63a:	c9                   	leave  
c010c63b:	c3                   	ret    

c010c63c <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c63c:	55                   	push   %ebp
c010c63d:	89 e5                	mov    %esp,%ebp
c010c63f:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c642:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c649:	00 
c010c64a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c651:	00 
c010c652:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c655:	89 04 24             	mov    %eax,(%esp)
c010c658:	e8 f3 90 00 00       	call   c0115750 <memset>
    tf.tf_cs = KERNEL_CS;
c010c65d:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c663:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c669:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c66d:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c671:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c675:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c679:	8b 45 08             	mov    0x8(%ebp),%eax
c010c67c:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c67f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c682:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c685:	b8 be bd 10 c0       	mov    $0xc010bdbe,%eax
c010c68a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c68d:	8b 45 10             	mov    0x10(%ebp),%eax
c010c690:	80 cc 01             	or     $0x1,%ah
c010c693:	89 c2                	mov    %eax,%edx
c010c695:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c698:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c69c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c6a3:	00 
c010c6a4:	89 14 24             	mov    %edx,(%esp)
c010c6a7:	e8 0e 04 00 00       	call   c010caba <do_fork>
}
c010c6ac:	c9                   	leave  
c010c6ad:	c3                   	ret    

c010c6ae <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c6ae:	55                   	push   %ebp
c010c6af:	89 e5                	mov    %esp,%ebp
c010c6b1:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c6b4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c6bb:	e8 c2 8a ff ff       	call   c0105182 <alloc_pages>
c010c6c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c6c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c6c7:	74 1a                	je     c010c6e3 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c6c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6cc:	89 04 24             	mov    %eax,(%esp)
c010c6cf:	e8 e8 f7 ff ff       	call   c010bebc <page2kva>
c010c6d4:	89 c2                	mov    %eax,%edx
c010c6d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d9:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c6dc:	b8 00 00 00 00       	mov    $0x0,%eax
c010c6e1:	eb 05                	jmp    c010c6e8 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c6e3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c6e8:	c9                   	leave  
c010c6e9:	c3                   	ret    

c010c6ea <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c6ea:	55                   	push   %ebp
c010c6eb:	89 e5                	mov    %esp,%ebp
c010c6ed:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c6f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6f3:	8b 40 0c             	mov    0xc(%eax),%eax
c010c6f6:	89 04 24             	mov    %eax,(%esp)
c010c6f9:	e8 12 f8 ff ff       	call   c010bf10 <kva2page>
c010c6fe:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c705:	00 
c010c706:	89 04 24             	mov    %eax,(%esp)
c010c709:	e8 df 8a ff ff       	call   c01051ed <free_pages>
}
c010c70e:	c9                   	leave  
c010c70f:	c3                   	ret    

c010c710 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c710:	55                   	push   %ebp
c010c711:	89 e5                	mov    %esp,%ebp
c010c713:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c716:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c71d:	e8 60 8a ff ff       	call   c0105182 <alloc_pages>
c010c722:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c725:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c729:	75 0a                	jne    c010c735 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c72b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c730:	e9 80 00 00 00       	jmp    c010c7b5 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c738:	89 04 24             	mov    %eax,(%esp)
c010c73b:	e8 7c f7 ff ff       	call   c010bebc <page2kva>
c010c740:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c743:	a1 e4 0e 15 c0       	mov    0xc0150ee4,%eax
c010c748:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c74f:	00 
c010c750:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c754:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c757:	89 04 24             	mov    %eax,(%esp)
c010c75a:	e8 d3 90 00 00       	call   c0115832 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c75f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c762:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c768:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c76b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c76e:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c775:	77 23                	ja     c010c79a <setup_pgdir+0x8a>
c010c777:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c77a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c77e:	c7 44 24 08 bc 82 11 	movl   $0xc01182bc,0x8(%esp)
c010c785:	c0 
c010c786:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010c78d:	00 
c010c78e:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010c795:	e8 2e 47 ff ff       	call   c0100ec8 <__panic>
c010c79a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c79d:	05 00 00 00 40       	add    $0x40000000,%eax
c010c7a2:	83 c8 03             	or     $0x3,%eax
c010c7a5:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c7a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c7ad:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c7b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c7b5:	c9                   	leave  
c010c7b6:	c3                   	ret    

c010c7b7 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c7b7:	55                   	push   %ebp
c010c7b8:	89 e5                	mov    %esp,%ebp
c010c7ba:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c7bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7c0:	8b 40 0c             	mov    0xc(%eax),%eax
c010c7c3:	89 04 24             	mov    %eax,(%esp)
c010c7c6:	e8 45 f7 ff ff       	call   c010bf10 <kva2page>
c010c7cb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c7d2:	00 
c010c7d3:	89 04 24             	mov    %eax,(%esp)
c010c7d6:	e8 12 8a ff ff       	call   c01051ed <free_pages>
}
c010c7db:	c9                   	leave  
c010c7dc:	c3                   	ret    

c010c7dd <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c7dd:	55                   	push   %ebp
c010c7de:	89 e5                	mov    %esp,%ebp
c010c7e0:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c7e3:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010c7e8:	8b 40 18             	mov    0x18(%eax),%eax
c010c7eb:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c7ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c7f2:	75 0a                	jne    c010c7fe <copy_mm+0x21>
        return 0;
c010c7f4:	b8 00 00 00 00       	mov    $0x0,%eax
c010c7f9:	e9 f9 00 00 00       	jmp    c010c8f7 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c7fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010c801:	25 00 01 00 00       	and    $0x100,%eax
c010c806:	85 c0                	test   %eax,%eax
c010c808:	74 08                	je     c010c812 <copy_mm+0x35>
        mm = oldmm;
c010c80a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c80d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c810:	eb 78                	jmp    c010c88a <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c812:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c819:	e8 51 b7 ff ff       	call   c0107f6f <mm_create>
c010c81e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c821:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c825:	75 05                	jne    c010c82c <copy_mm+0x4f>
        goto bad_mm;
c010c827:	e9 c8 00 00 00       	jmp    c010c8f4 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c82c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c82f:	89 04 24             	mov    %eax,(%esp)
c010c832:	e8 d9 fe ff ff       	call   c010c710 <setup_pgdir>
c010c837:	85 c0                	test   %eax,%eax
c010c839:	74 05                	je     c010c840 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c83b:	e9 a9 00 00 00       	jmp    c010c8e9 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c840:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c843:	89 04 24             	mov    %eax,(%esp)
c010c846:	e8 43 f7 ff ff       	call   c010bf8e <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c84b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c84e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c855:	89 04 24             	mov    %eax,(%esp)
c010c858:	e8 35 bc ff ff       	call   c0108492 <dup_mmap>
c010c85d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c860:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c863:	89 04 24             	mov    %eax,(%esp)
c010c866:	e8 56 f7 ff ff       	call   c010bfc1 <unlock_mm>

    if (ret != 0) {
c010c86b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c86f:	74 19                	je     c010c88a <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c871:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c872:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c875:	89 04 24             	mov    %eax,(%esp)
c010c878:	e8 16 bd ff ff       	call   c0108593 <exit_mmap>
    put_pgdir(mm);
c010c87d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c880:	89 04 24             	mov    %eax,(%esp)
c010c883:	e8 2f ff ff ff       	call   c010c7b7 <put_pgdir>
c010c888:	eb 5f                	jmp    c010c8e9 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c88a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c88d:	89 04 24             	mov    %eax,(%esp)
c010c890:	e8 c5 f6 ff ff       	call   c010bf5a <mm_count_inc>
    proc->mm = mm;
c010c895:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c898:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c89b:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c89e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8a1:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c8a7:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c8ae:	77 23                	ja     c010c8d3 <copy_mm+0xf6>
c010c8b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c8b7:	c7 44 24 08 bc 82 11 	movl   $0xc01182bc,0x8(%esp)
c010c8be:	c0 
c010c8bf:	c7 44 24 04 68 01 00 	movl   $0x168,0x4(%esp)
c010c8c6:	00 
c010c8c7:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010c8ce:	e8 f5 45 ff ff       	call   c0100ec8 <__panic>
c010c8d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8d6:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c8dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8df:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c8e2:	b8 00 00 00 00       	mov    $0x0,%eax
c010c8e7:	eb 0e                	jmp    c010c8f7 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c8e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8ec:	89 04 24             	mov    %eax,(%esp)
c010c8ef:	e8 e0 b9 ff ff       	call   c01082d4 <mm_destroy>
bad_mm:
    return ret;
c010c8f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c8f7:	c9                   	leave  
c010c8f8:	c3                   	ret    

c010c8f9 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c8f9:	55                   	push   %ebp
c010c8fa:	89 e5                	mov    %esp,%ebp
c010c8fc:	57                   	push   %edi
c010c8fd:	56                   	push   %esi
c010c8fe:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c8ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010c902:	8b 40 0c             	mov    0xc(%eax),%eax
c010c905:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c90a:	89 c2                	mov    %eax,%edx
c010c90c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c90f:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c912:	8b 45 08             	mov    0x8(%ebp),%eax
c010c915:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c918:	8b 55 10             	mov    0x10(%ebp),%edx
c010c91b:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c920:	89 c1                	mov    %eax,%ecx
c010c922:	83 e1 01             	and    $0x1,%ecx
c010c925:	85 c9                	test   %ecx,%ecx
c010c927:	74 0e                	je     c010c937 <copy_thread+0x3e>
c010c929:	0f b6 0a             	movzbl (%edx),%ecx
c010c92c:	88 08                	mov    %cl,(%eax)
c010c92e:	83 c0 01             	add    $0x1,%eax
c010c931:	83 c2 01             	add    $0x1,%edx
c010c934:	83 eb 01             	sub    $0x1,%ebx
c010c937:	89 c1                	mov    %eax,%ecx
c010c939:	83 e1 02             	and    $0x2,%ecx
c010c93c:	85 c9                	test   %ecx,%ecx
c010c93e:	74 0f                	je     c010c94f <copy_thread+0x56>
c010c940:	0f b7 0a             	movzwl (%edx),%ecx
c010c943:	66 89 08             	mov    %cx,(%eax)
c010c946:	83 c0 02             	add    $0x2,%eax
c010c949:	83 c2 02             	add    $0x2,%edx
c010c94c:	83 eb 02             	sub    $0x2,%ebx
c010c94f:	89 d9                	mov    %ebx,%ecx
c010c951:	c1 e9 02             	shr    $0x2,%ecx
c010c954:	89 c7                	mov    %eax,%edi
c010c956:	89 d6                	mov    %edx,%esi
c010c958:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c95a:	89 f2                	mov    %esi,%edx
c010c95c:	89 f8                	mov    %edi,%eax
c010c95e:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c963:	89 de                	mov    %ebx,%esi
c010c965:	83 e6 02             	and    $0x2,%esi
c010c968:	85 f6                	test   %esi,%esi
c010c96a:	74 0b                	je     c010c977 <copy_thread+0x7e>
c010c96c:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c970:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c974:	83 c1 02             	add    $0x2,%ecx
c010c977:	83 e3 01             	and    $0x1,%ebx
c010c97a:	85 db                	test   %ebx,%ebx
c010c97c:	74 07                	je     c010c985 <copy_thread+0x8c>
c010c97e:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c982:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c985:	8b 45 08             	mov    0x8(%ebp),%eax
c010c988:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c98b:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c992:	8b 45 08             	mov    0x8(%ebp),%eax
c010c995:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c998:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c99b:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c99e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9a1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c9a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010c9a7:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c9aa:	8b 52 40             	mov    0x40(%edx),%edx
c010c9ad:	80 ce 02             	or     $0x2,%dh
c010c9b0:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c9b3:	ba fc c4 10 c0       	mov    $0xc010c4fc,%edx
c010c9b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9bb:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c9be:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9c1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c9c4:	89 c2                	mov    %eax,%edx
c010c9c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9c9:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c9cc:	5b                   	pop    %ebx
c010c9cd:	5e                   	pop    %esi
c010c9ce:	5f                   	pop    %edi
c010c9cf:	5d                   	pop    %ebp
c010c9d0:	c3                   	ret    

c010c9d1 <copy_fs>:

//copy_fs&put_fs function used by do_fork in LAB8
static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
c010c9d1:	55                   	push   %ebp
c010c9d2:	89 e5                	mov    %esp,%ebp
c010c9d4:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c9d7:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010c9dc:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c9e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c9e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c9e9:	75 24                	jne    c010ca0f <copy_fs+0x3e>
c010c9eb:	c7 44 24 0c f4 82 11 	movl   $0xc01182f4,0xc(%esp)
c010c9f2:	c0 
c010c9f3:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010c9fa:	c0 
c010c9fb:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c010ca02:	00 
c010ca03:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010ca0a:	e8 b9 44 ff ff       	call   c0100ec8 <__panic>

    if (clone_flags & CLONE_FS) {
c010ca0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca12:	25 00 08 00 00       	and    $0x800,%eax
c010ca17:	85 c0                	test   %eax,%eax
c010ca19:	74 08                	je     c010ca23 <copy_fs+0x52>
        filesp = old_filesp;
c010ca1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010ca21:	eb 40                	jmp    c010ca63 <copy_fs+0x92>
    }

    int ret = -E_NO_MEM;
c010ca23:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010ca2a:	e8 c1 e6 ff ff       	call   c010b0f0 <files_create>
c010ca2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ca32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca36:	75 02                	jne    c010ca3a <copy_fs+0x69>
        goto bad_files_struct;
c010ca38:	eb 47                	jmp    c010ca81 <copy_fs+0xb0>
    }

    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
c010ca3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca44:	89 04 24             	mov    %eax,(%esp)
c010ca47:	e8 71 e8 ff ff       	call   c010b2bd <dup_fs>
c010ca4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ca53:	74 0e                	je     c010ca63 <copy_fs+0x92>
        goto bad_dup_cleanup_fs;
c010ca55:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010ca56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca59:	89 04 24             	mov    %eax,(%esp)
c010ca5c:	e8 fe e6 ff ff       	call   c010b15f <files_destroy>
c010ca61:	eb 1e                	jmp    c010ca81 <copy_fs+0xb0>
    if ((ret = dup_fs(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010ca63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca66:	89 04 24             	mov    %eax,(%esp)
c010ca69:	e8 79 f5 ff ff       	call   c010bfe7 <files_count_inc>
    proc->filesp = filesp;
c010ca6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca71:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca74:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010ca7a:	b8 00 00 00 00       	mov    $0x0,%eax
c010ca7f:	eb 03                	jmp    c010ca84 <copy_fs+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010ca81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ca84:	c9                   	leave  
c010ca85:	c3                   	ret    

c010ca86 <put_fs>:

static void
put_fs(struct proc_struct *proc) {
c010ca86:	55                   	push   %ebp
c010ca87:	89 e5                	mov    %esp,%ebp
c010ca89:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010ca8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca8f:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ca95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010ca98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ca9c:	74 1a                	je     c010cab8 <put_fs+0x32>
        if (files_count_dec(filesp) == 0) {
c010ca9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caa1:	89 04 24             	mov    %eax,(%esp)
c010caa4:	e8 58 f5 ff ff       	call   c010c001 <files_count_dec>
c010caa9:	85 c0                	test   %eax,%eax
c010caab:	75 0b                	jne    c010cab8 <put_fs+0x32>
            files_destroy(filesp);
c010caad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cab0:	89 04 24             	mov    %eax,(%esp)
c010cab3:	e8 a7 e6 ff ff       	call   c010b15f <files_destroy>
        }
    }
}
c010cab8:	c9                   	leave  
c010cab9:	c3                   	ret    

c010caba <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010caba:	55                   	push   %ebp
c010cabb:	89 e5                	mov    %esp,%ebp
c010cabd:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010cac0:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010cac7:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c010cacc:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010cad1:	7e 05                	jle    c010cad8 <do_fork+0x1e>
        goto fork_out;
c010cad3:	e9 fe 00 00 00       	jmp    c010cbd6 <do_fork+0x11c>
    }
    ret = -E_NO_MEM;
c010cad8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010cadf:	e8 37 f5 ff ff       	call   c010c01b <alloc_proc>
c010cae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cae7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010caeb:	75 05                	jne    c010caf2 <do_fork+0x38>
        goto fork_out;
c010caed:	e9 e4 00 00 00       	jmp    c010cbd6 <do_fork+0x11c>
    }

    proc->parent = current;
c010caf2:	8b 15 c8 0f 15 c0    	mov    0xc0150fc8,%edx
c010caf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cafb:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010cafe:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cb03:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cb09:	85 c0                	test   %eax,%eax
c010cb0b:	74 24                	je     c010cb31 <do_fork+0x77>
c010cb0d:	c7 44 24 0c 1c 83 11 	movl   $0xc011831c,0xc(%esp)
c010cb14:	c0 
c010cb15:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010cb1c:	c0 
c010cb1d:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
c010cb24:	00 
c010cb25:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010cb2c:	e8 97 43 ff ff       	call   c0100ec8 <__panic>

    if (setup_kstack(proc) != 0) {
c010cb31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb34:	89 04 24             	mov    %eax,(%esp)
c010cb37:	e8 72 fb ff ff       	call   c010c6ae <setup_kstack>
c010cb3c:	85 c0                	test   %eax,%eax
c010cb3e:	74 05                	je     c010cb45 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010cb40:	e9 a1 00 00 00       	jmp    c010cbe6 <do_fork+0x12c>
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
c010cb45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb48:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb4f:	89 04 24             	mov    %eax,(%esp)
c010cb52:	e8 7a fe ff ff       	call   c010c9d1 <copy_fs>
c010cb57:	85 c0                	test   %eax,%eax
c010cb59:	74 02                	je     c010cb5d <do_fork+0xa3>
        goto bad_fork_cleanup_kstack;
c010cb5b:	eb 7e                	jmp    c010cbdb <do_fork+0x121>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010cb5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb60:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb64:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb67:	89 04 24             	mov    %eax,(%esp)
c010cb6a:	e8 6e fc ff ff       	call   c010c7dd <copy_mm>
c010cb6f:	85 c0                	test   %eax,%eax
c010cb71:	74 02                	je     c010cb75 <do_fork+0xbb>
        goto bad_fork_cleanup_kstack;
c010cb73:	eb 66                	jmp    c010cbdb <do_fork+0x121>
    }
    copy_thread(proc, stack, tf);
c010cb75:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb78:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cb7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb86:	89 04 24             	mov    %eax,(%esp)
c010cb89:	e8 6b fd ff ff       	call   c010c8f9 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010cb8e:	e8 6d f2 ff ff       	call   c010be00 <__intr_save>
c010cb93:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010cb96:	e8 f4 f7 ff ff       	call   c010c38f <get_pid>
c010cb9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cb9e:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010cba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cba4:	89 04 24             	mov    %eax,(%esp)
c010cba7:	e8 68 f9 ff ff       	call   c010c514 <hash_proc>
        set_links(proc);
c010cbac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbaf:	89 04 24             	mov    %eax,(%esp)
c010cbb2:	e8 7d f6 ff ff       	call   c010c234 <set_links>

    }
    local_intr_restore(intr_flag);
c010cbb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbba:	89 04 24             	mov    %eax,(%esp)
c010cbbd:	e8 68 f2 ff ff       	call   c010be2a <__intr_restore>

    wakeup_proc(proc);
c010cbc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbc5:	89 04 24             	mov    %eax,(%esp)
c010cbc8:	e8 d2 1a 00 00       	call   c010e69f <wakeup_proc>

    ret = proc->pid;
c010cbcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbd0:	8b 40 04             	mov    0x4(%eax),%eax
c010cbd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010cbd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbd9:	eb 18                	jmp    c010cbf3 <do_fork+0x139>

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010cbdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbde:	89 04 24             	mov    %eax,(%esp)
c010cbe1:	e8 04 fb ff ff       	call   c010c6ea <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010cbe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbe9:	89 04 24             	mov    %eax,(%esp)
c010cbec:	e8 27 81 ff ff       	call   c0104d18 <kfree>
    goto fork_out;
c010cbf1:	eb e3                	jmp    c010cbd6 <do_fork+0x11c>
}
c010cbf3:	c9                   	leave  
c010cbf4:	c3                   	ret    

c010cbf5 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cbf5:	55                   	push   %ebp
c010cbf6:	89 e5                	mov    %esp,%ebp
c010cbf8:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cbfb:	8b 15 c8 0f 15 c0    	mov    0xc0150fc8,%edx
c010cc01:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010cc06:	39 c2                	cmp    %eax,%edx
c010cc08:	75 1c                	jne    c010cc26 <do_exit+0x31>
        panic("idleproc exit.\n");
c010cc0a:	c7 44 24 08 35 83 11 	movl   $0xc0118335,0x8(%esp)
c010cc11:	c0 
c010cc12:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
c010cc19:	00 
c010cc1a:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010cc21:	e8 a2 42 ff ff       	call   c0100ec8 <__panic>
    }
    if (current == initproc) {
c010cc26:	8b 15 c8 0f 15 c0    	mov    0xc0150fc8,%edx
c010cc2c:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010cc31:	39 c2                	cmp    %eax,%edx
c010cc33:	75 1c                	jne    c010cc51 <do_exit+0x5c>
        panic("initproc exit.\n");
c010cc35:	c7 44 24 08 45 83 11 	movl   $0xc0118345,0x8(%esp)
c010cc3c:	c0 
c010cc3d:	c7 44 24 04 0e 02 00 	movl   $0x20e,0x4(%esp)
c010cc44:	00 
c010cc45:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010cc4c:	e8 77 42 ff ff       	call   c0100ec8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cc51:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cc56:	8b 40 18             	mov    0x18(%eax),%eax
c010cc59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cc5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cc60:	74 4a                	je     c010ccac <do_exit+0xb7>
        lcr3(boot_cr3);
c010cc62:	a1 30 41 15 c0       	mov    0xc0154130,%eax
c010cc67:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cc6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc6d:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cc70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc73:	89 04 24             	mov    %eax,(%esp)
c010cc76:	e8 f9 f2 ff ff       	call   c010bf74 <mm_count_dec>
c010cc7b:	85 c0                	test   %eax,%eax
c010cc7d:	75 21                	jne    c010cca0 <do_exit+0xab>
            exit_mmap(mm);
c010cc7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc82:	89 04 24             	mov    %eax,(%esp)
c010cc85:	e8 09 b9 ff ff       	call   c0108593 <exit_mmap>
            put_pgdir(mm);
c010cc8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc8d:	89 04 24             	mov    %eax,(%esp)
c010cc90:	e8 22 fb ff ff       	call   c010c7b7 <put_pgdir>
            mm_destroy(mm);
c010cc95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc98:	89 04 24             	mov    %eax,(%esp)
c010cc9b:	e8 34 b6 ff ff       	call   c01082d4 <mm_destroy>
        }
        current->mm = NULL;
c010cca0:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cca5:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_fs(current); //for LAB8
c010ccac:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010ccb1:	89 04 24             	mov    %eax,(%esp)
c010ccb4:	e8 cd fd ff ff       	call   c010ca86 <put_fs>
    current->state = PROC_ZOMBIE;
c010ccb9:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010ccbe:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010ccc4:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010ccc9:	8b 55 08             	mov    0x8(%ebp),%edx
c010cccc:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010ccd2:	e8 29 f1 ff ff       	call   c010be00 <__intr_save>
c010ccd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010ccda:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010ccdf:	8b 40 14             	mov    0x14(%eax),%eax
c010cce2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cce8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ccee:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ccf3:	75 10                	jne    c010cd05 <do_exit+0x110>
            wakeup_proc(proc);
c010ccf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccf8:	89 04 24             	mov    %eax,(%esp)
c010ccfb:	e8 9f 19 00 00       	call   c010e69f <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010cd00:	e9 ac 00 00 00       	jmp    c010cdb1 <do_exit+0x1bc>
c010cd05:	e9 a7 00 00 00       	jmp    c010cdb1 <do_exit+0x1bc>
            proc = current->cptr;
c010cd0a:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cd0f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd15:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010cd18:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cd1d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd20:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010cd26:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010cd2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd2f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cd36:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cd39:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010cd3e:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cd44:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd47:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cd4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd50:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cd56:	85 c0                	test   %eax,%eax
c010cd58:	74 14                	je     c010cd6e <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010cd5a:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010cd5f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cd65:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd68:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cd6e:	8b 15 c4 0f 15 c0    	mov    0xc0150fc4,%edx
c010cd74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd77:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cd7a:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010cd7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd82:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cd88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd8b:	8b 00                	mov    (%eax),%eax
c010cd8d:	83 f8 03             	cmp    $0x3,%eax
c010cd90:	75 1f                	jne    c010cdb1 <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010cd92:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010cd97:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cd9d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cda2:	75 0d                	jne    c010cdb1 <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010cda4:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010cda9:	89 04 24             	mov    %eax,(%esp)
c010cdac:	e8 ee 18 00 00       	call   c010e69f <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010cdb1:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cdb6:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cdbc:	85 c0                	test   %eax,%eax
c010cdbe:	0f 85 46 ff ff ff    	jne    c010cd0a <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010cdc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cdc7:	89 04 24             	mov    %eax,(%esp)
c010cdca:	e8 5b f0 ff ff       	call   c010be2a <__intr_restore>
    
    schedule();
c010cdcf:	e8 67 19 00 00       	call   c010e73b <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010cdd4:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cdd9:	8b 40 04             	mov    0x4(%eax),%eax
c010cddc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cde0:	c7 44 24 08 58 83 11 	movl   $0xc0118358,0x8(%esp)
c010cde7:	c0 
c010cde8:	c7 44 24 04 3b 02 00 	movl   $0x23b,0x4(%esp)
c010cdef:	00 
c010cdf0:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010cdf7:	e8 cc 40 ff ff       	call   c0100ec8 <__panic>

c010cdfc <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cdfc:	55                   	push   %ebp
c010cdfd:	89 e5                	mov    %esp,%ebp
c010cdff:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010ce02:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ce09:	00 
c010ce0a:	8b 45 14             	mov    0x14(%ebp),%eax
c010ce0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce11:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce14:	89 04 24             	mov    %eax,(%esp)
c010ce17:	e8 ad eb ff ff       	call   c010b9c9 <sysfile_seek>
c010ce1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce23:	74 05                	je     c010ce2a <load_icode_read+0x2e>
        return ret;
c010ce25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce28:	eb 38                	jmp    c010ce62 <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010ce2a:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce2d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ce31:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce34:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce38:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce3b:	89 04 24             	mov    %eax,(%esp)
c010ce3e:	e8 94 e8 ff ff       	call   c010b6d7 <sysfile_read>
c010ce43:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce49:	3b 45 10             	cmp    0x10(%ebp),%eax
c010ce4c:	74 0f                	je     c010ce5d <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010ce4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010ce53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce57:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010ce5b:	eb 05                	jmp    c010ce62 <load_icode_read+0x66>
    }
    return 0;
c010ce5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ce62:	c9                   	leave  
c010ce63:	c3                   	ret    

c010ce64 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010ce64:	55                   	push   %ebp
c010ce65:	89 e5                	mov    %esp,%ebp
c010ce67:	53                   	push   %ebx
c010ce68:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010ce6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ce72:	78 06                	js     c010ce7a <load_icode+0x16>
c010ce74:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010ce78:	7e 24                	jle    c010ce9e <load_icode+0x3a>
c010ce7a:	c7 44 24 0c 78 83 11 	movl   $0xc0118378,0xc(%esp)
c010ce81:	c0 
c010ce82:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010ce89:	c0 
c010ce8a:	c7 44 24 04 67 02 00 	movl   $0x267,0x4(%esp)
c010ce91:	00 
c010ce92:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010ce99:	e8 2a 40 ff ff       	call   c0100ec8 <__panic>

    if (current->mm != NULL) {
c010ce9e:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010cea3:	8b 40 18             	mov    0x18(%eax),%eax
c010cea6:	85 c0                	test   %eax,%eax
c010cea8:	74 1c                	je     c010cec6 <load_icode+0x62>
        panic("load_icode: current->mm must be empty.\n");
c010ceaa:	c7 44 24 08 a0 83 11 	movl   $0xc01183a0,0x8(%esp)
c010ceb1:	c0 
c010ceb2:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c010ceb9:	00 
c010ceba:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010cec1:	e8 02 40 ff ff       	call   c0100ec8 <__panic>
    }

    int ret = -E_NO_MEM;
c010cec6:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c010cecd:	e8 9d b0 ff ff       	call   c0107f6f <mm_create>
c010ced2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ced5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010ced9:	75 06                	jne    c010cee1 <load_icode+0x7d>
        goto bad_mm;
c010cedb:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010cedc:	e9 85 07 00 00       	jmp    c010d666 <load_icode+0x802>
    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010cee1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cee4:	89 04 24             	mov    %eax,(%esp)
c010cee7:	e8 24 f8 ff ff       	call   c010c710 <setup_pgdir>
c010ceec:	85 c0                	test   %eax,%eax
c010ceee:	74 05                	je     c010cef5 <load_icode+0x91>
        goto bad_pgdir_cleanup_mm;
c010cef0:	e9 8c 07 00 00       	jmp    c010d681 <load_icode+0x81d>
    }

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
c010cef5:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010cefb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010cefe:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cf05:	00 
c010cf06:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010cf0d:	00 
c010cf0e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf11:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf15:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf18:	89 04 24             	mov    %eax,(%esp)
c010cf1b:	e8 dc fe ff ff       	call   c010cdfc <load_icode_read>
c010cf20:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf27:	74 05                	je     c010cf2e <load_icode+0xca>
        goto bad_elf_cleanup_pgdir;
c010cf29:	e9 48 07 00 00       	jmp    c010d676 <load_icode+0x812>
    }

    if (elf->e_magic != ELF_MAGIC) {
c010cf2e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf31:	8b 00                	mov    (%eax),%eax
c010cf33:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cf38:	74 0c                	je     c010cf46 <load_icode+0xe2>
        ret = -E_INVAL_ELF;
c010cf3a:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010cf41:	e9 30 07 00 00       	jmp    c010d676 <load_icode+0x812>
    }

    struct proghdr __ph, *ph = &__ph;
c010cf46:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010cf4c:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010cf4f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010cf56:	e9 76 03 00 00       	jmp    c010d2d1 <load_icode+0x46d>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010cf5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cf5e:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cf61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cf64:	c1 e2 05             	shl    $0x5,%edx
c010cf67:	01 d0                	add    %edx,%eax
c010cf69:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010cf6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cf6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cf73:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010cf7a:	00 
c010cf7b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf82:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf85:	89 04 24             	mov    %eax,(%esp)
c010cf88:	e8 6f fe ff ff       	call   c010cdfc <load_icode_read>
c010cf8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf94:	74 05                	je     c010cf9b <load_icode+0x137>
            goto bad_cleanup_mmap;
c010cf96:	e9 d0 06 00 00       	jmp    c010d66b <load_icode+0x807>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010cf9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf9e:	8b 00                	mov    (%eax),%eax
c010cfa0:	83 f8 01             	cmp    $0x1,%eax
c010cfa3:	74 05                	je     c010cfaa <load_icode+0x146>
            continue ;
c010cfa5:	e9 23 03 00 00       	jmp    c010d2cd <load_icode+0x469>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010cfaa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfad:	8b 50 10             	mov    0x10(%eax),%edx
c010cfb0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfb3:	8b 40 14             	mov    0x14(%eax),%eax
c010cfb6:	39 c2                	cmp    %eax,%edx
c010cfb8:	76 0c                	jbe    c010cfc6 <load_icode+0x162>
            ret = -E_INVAL_ELF;
c010cfba:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010cfc1:	e9 a5 06 00 00       	jmp    c010d66b <load_icode+0x807>
        }
        if (ph->p_filesz == 0) {
c010cfc6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfc9:	8b 40 10             	mov    0x10(%eax),%eax
c010cfcc:	85 c0                	test   %eax,%eax
c010cfce:	75 05                	jne    c010cfd5 <load_icode+0x171>
            continue ;
c010cfd0:	e9 f8 02 00 00       	jmp    c010d2cd <load_icode+0x469>
        }
        vm_flags = 0, perm = PTE_U;
c010cfd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010cfdc:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010cfe3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cfe6:	8b 40 18             	mov    0x18(%eax),%eax
c010cfe9:	83 e0 01             	and    $0x1,%eax
c010cfec:	85 c0                	test   %eax,%eax
c010cfee:	74 04                	je     c010cff4 <load_icode+0x190>
c010cff0:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010cff4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cff7:	8b 40 18             	mov    0x18(%eax),%eax
c010cffa:	83 e0 02             	and    $0x2,%eax
c010cffd:	85 c0                	test   %eax,%eax
c010cfff:	74 04                	je     c010d005 <load_icode+0x1a1>
c010d001:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010d005:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d008:	8b 40 18             	mov    0x18(%eax),%eax
c010d00b:	83 e0 04             	and    $0x4,%eax
c010d00e:	85 c0                	test   %eax,%eax
c010d010:	74 04                	je     c010d016 <load_icode+0x1b2>
c010d012:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010d016:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d019:	83 e0 02             	and    $0x2,%eax
c010d01c:	85 c0                	test   %eax,%eax
c010d01e:	74 04                	je     c010d024 <load_icode+0x1c0>
c010d020:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010d024:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d027:	8b 50 14             	mov    0x14(%eax),%edx
c010d02a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d02d:	8b 40 08             	mov    0x8(%eax),%eax
c010d030:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d037:	00 
c010d038:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d03b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010d03f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d043:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d047:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d04a:	89 04 24             	mov    %eax,(%esp)
c010d04d:	e8 24 b3 ff ff       	call   c0108376 <mm_map>
c010d052:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d055:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d059:	74 05                	je     c010d060 <load_icode+0x1fc>
            goto bad_cleanup_mmap;
c010d05b:	e9 0b 06 00 00       	jmp    c010d66b <load_icode+0x807>
        }
        off_t offset = ph->p_offset;
c010d060:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d063:	8b 40 04             	mov    0x4(%eax),%eax
c010d066:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010d069:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d06c:	8b 40 08             	mov    0x8(%eax),%eax
c010d06f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d072:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d075:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010d078:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010d07b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d080:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010d083:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c010d08a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d08d:	8b 50 08             	mov    0x8(%eax),%edx
c010d090:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d093:	8b 40 10             	mov    0x10(%eax),%eax
c010d096:	01 d0                	add    %edx,%eax
c010d098:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010d09b:	e9 b1 00 00 00       	jmp    c010d151 <load_icode+0x2ed>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d0a0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d0a3:	8b 40 0c             	mov    0xc(%eax),%eax
c010d0a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d0a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0ad:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d0b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d0b4:	89 04 24             	mov    %eax,(%esp)
c010d0b7:	e8 a7 8f ff ff       	call   c0106063 <pgdir_alloc_page>
c010d0bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d0bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d0c3:	75 0c                	jne    c010d0d1 <load_icode+0x26d>
                ret = -E_NO_MEM;
c010d0c5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d0cc:	e9 9a 05 00 00       	jmp    c010d66b <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d0d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0d4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d0d7:	29 c2                	sub    %eax,%edx
c010d0d9:	89 d0                	mov    %edx,%eax
c010d0db:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d0de:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d0e3:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d0e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d0e9:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d0f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d0f3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0f6:	73 0d                	jae    c010d105 <load_icode+0x2a1>
                size -= la - end;
c010d0f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d0fb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d0fe:	29 c2                	sub    %eax,%edx
c010d100:	89 d0                	mov    %edx,%eax
c010d102:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010d105:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d108:	89 04 24             	mov    %eax,(%esp)
c010d10b:	e8 ac ed ff ff       	call   c010bebc <page2kva>
c010d110:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d113:	01 c2                	add    %eax,%edx
c010d115:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d118:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d11c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d11f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d123:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d127:	8b 45 08             	mov    0x8(%ebp),%eax
c010d12a:	89 04 24             	mov    %eax,(%esp)
c010d12d:	e8 ca fc ff ff       	call   c010cdfc <load_icode_read>
c010d132:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d135:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d139:	74 05                	je     c010d140 <load_icode+0x2dc>
                goto bad_cleanup_mmap;
c010d13b:	e9 2b 05 00 00       	jmp    c010d66b <load_icode+0x807>
            }
            start += size, offset += size;
c010d140:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d143:	01 45 d8             	add    %eax,-0x28(%ebp)
c010d146:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d149:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d14c:	01 d0                	add    %edx,%eax
c010d14e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010d151:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d154:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d157:	0f 82 43 ff ff ff    	jb     c010d0a0 <load_icode+0x23c>
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
        }
        end = ph->p_va + ph->p_memsz;
c010d15d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d160:	8b 50 08             	mov    0x8(%eax),%edx
c010d163:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d166:	8b 40 14             	mov    0x14(%eax),%eax
c010d169:	01 d0                	add    %edx,%eax
c010d16b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        if (start < la) {
c010d16e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d171:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d174:	0f 83 b0 00 00 00    	jae    c010d22a <load_icode+0x3c6>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010d17a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d17d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d180:	75 05                	jne    c010d187 <load_icode+0x323>
                continue ;
c010d182:	e9 46 01 00 00       	jmp    c010d2cd <load_icode+0x469>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d187:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d18a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d18d:	29 c2                	sub    %eax,%edx
c010d18f:	89 d0                	mov    %edx,%eax
c010d191:	05 00 10 00 00       	add    $0x1000,%eax
c010d196:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d199:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d19e:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d1a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010d1a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1a7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1aa:	73 0d                	jae    c010d1b9 <load_icode+0x355>
                size -= la - end;
c010d1ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d1af:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d1b2:	29 c2                	sub    %eax,%edx
c010d1b4:	89 d0                	mov    %edx,%eax
c010d1b6:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d1b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1bc:	89 04 24             	mov    %eax,(%esp)
c010d1bf:	e8 f8 ec ff ff       	call   c010bebc <page2kva>
c010d1c4:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d1c7:	01 c2                	add    %eax,%edx
c010d1c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1cc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d1d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d1d7:	00 
c010d1d8:	89 14 24             	mov    %edx,(%esp)
c010d1db:	e8 70 85 00 00       	call   c0115750 <memset>
            start += size;
c010d1e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d1e3:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d1e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1e9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1ec:	73 08                	jae    c010d1f6 <load_icode+0x392>
c010d1ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1f1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d1f4:	74 34                	je     c010d22a <load_icode+0x3c6>
c010d1f6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d1f9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d1fc:	72 08                	jb     c010d206 <load_icode+0x3a2>
c010d1fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d201:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d204:	74 24                	je     c010d22a <load_icode+0x3c6>
c010d206:	c7 44 24 0c c8 83 11 	movl   $0xc01183c8,0xc(%esp)
c010d20d:	c0 
c010d20e:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010d215:	c0 
c010d216:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c010d21d:	00 
c010d21e:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d225:	e8 9e 3c ff ff       	call   c0100ec8 <__panic>
        }
        while (start < end) {
c010d22a:	e9 92 00 00 00       	jmp    c010d2c1 <load_icode+0x45d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d22f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d232:	8b 40 0c             	mov    0xc(%eax),%eax
c010d235:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d238:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d23c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d23f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d243:	89 04 24             	mov    %eax,(%esp)
c010d246:	e8 18 8e ff ff       	call   c0106063 <pgdir_alloc_page>
c010d24b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d24e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d252:	75 0c                	jne    c010d260 <load_icode+0x3fc>
                ret = -E_NO_MEM;
c010d254:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d25b:	e9 0b 04 00 00       	jmp    c010d66b <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d260:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d263:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d266:	29 c2                	sub    %eax,%edx
c010d268:	89 d0                	mov    %edx,%eax
c010d26a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d26d:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d272:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d275:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010d278:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d27f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d282:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d285:	73 0d                	jae    c010d294 <load_icode+0x430>
                size -= la - end;
c010d287:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d28a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d28d:	29 c2                	sub    %eax,%edx
c010d28f:	89 d0                	mov    %edx,%eax
c010d291:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d294:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d297:	89 04 24             	mov    %eax,(%esp)
c010d29a:	e8 1d ec ff ff       	call   c010bebc <page2kva>
c010d29f:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d2a2:	01 c2                	add    %eax,%edx
c010d2a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d2a7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d2ab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d2b2:	00 
c010d2b3:	89 14 24             	mov    %edx,(%esp)
c010d2b6:	e8 95 84 00 00       	call   c0115750 <memset>
            start += size;
c010d2bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d2be:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d2c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d2c4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d2c7:	0f 82 62 ff ff ff    	jb     c010d22f <load_icode+0x3cb>
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010d2cd:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d2d1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d2d4:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d2d8:	0f b7 c0             	movzwl %ax,%eax
c010d2db:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d2de:	0f 87 77 fc ff ff    	ja     c010cf5b <load_icode+0xf7>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010d2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2e7:	89 04 24             	mov    %eax,(%esp)
c010d2ea:	e8 d5 e3 ff ff       	call   c010b6c4 <sysfile_close>

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d2ef:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d2f6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d2fd:	00 
c010d2fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d301:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d305:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d30c:	00 
c010d30d:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d314:	af 
c010d315:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d318:	89 04 24             	mov    %eax,(%esp)
c010d31b:	e8 56 b0 ff ff       	call   c0108376 <mm_map>
c010d320:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d327:	74 05                	je     c010d32e <load_icode+0x4ca>
        goto bad_cleanup_mmap;
c010d329:	e9 3d 03 00 00       	jmp    c010d66b <load_icode+0x807>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d32e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d331:	8b 40 0c             	mov    0xc(%eax),%eax
c010d334:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d33b:	00 
c010d33c:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d343:	af 
c010d344:	89 04 24             	mov    %eax,(%esp)
c010d347:	e8 17 8d ff ff       	call   c0106063 <pgdir_alloc_page>
c010d34c:	85 c0                	test   %eax,%eax
c010d34e:	75 24                	jne    c010d374 <load_icode+0x510>
c010d350:	c7 44 24 0c 04 84 11 	movl   $0xc0118404,0xc(%esp)
c010d357:	c0 
c010d358:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010d35f:	c0 
c010d360:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
c010d367:	00 
c010d368:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d36f:	e8 54 3b ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d374:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d377:	8b 40 0c             	mov    0xc(%eax),%eax
c010d37a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d381:	00 
c010d382:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d389:	af 
c010d38a:	89 04 24             	mov    %eax,(%esp)
c010d38d:	e8 d1 8c ff ff       	call   c0106063 <pgdir_alloc_page>
c010d392:	85 c0                	test   %eax,%eax
c010d394:	75 24                	jne    c010d3ba <load_icode+0x556>
c010d396:	c7 44 24 0c 48 84 11 	movl   $0xc0118448,0xc(%esp)
c010d39d:	c0 
c010d39e:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010d3a5:	c0 
c010d3a6:	c7 44 24 04 d3 02 00 	movl   $0x2d3,0x4(%esp)
c010d3ad:	00 
c010d3ae:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d3b5:	e8 0e 3b ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d3ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d3bd:	8b 40 0c             	mov    0xc(%eax),%eax
c010d3c0:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d3c7:	00 
c010d3c8:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d3cf:	af 
c010d3d0:	89 04 24             	mov    %eax,(%esp)
c010d3d3:	e8 8b 8c ff ff       	call   c0106063 <pgdir_alloc_page>
c010d3d8:	85 c0                	test   %eax,%eax
c010d3da:	75 24                	jne    c010d400 <load_icode+0x59c>
c010d3dc:	c7 44 24 0c 8c 84 11 	movl   $0xc011848c,0xc(%esp)
c010d3e3:	c0 
c010d3e4:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010d3eb:	c0 
c010d3ec:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
c010d3f3:	00 
c010d3f4:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d3fb:	e8 c8 3a ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d400:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d403:	8b 40 0c             	mov    0xc(%eax),%eax
c010d406:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d40d:	00 
c010d40e:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d415:	af 
c010d416:	89 04 24             	mov    %eax,(%esp)
c010d419:	e8 45 8c ff ff       	call   c0106063 <pgdir_alloc_page>
c010d41e:	85 c0                	test   %eax,%eax
c010d420:	75 24                	jne    c010d446 <load_icode+0x5e2>
c010d422:	c7 44 24 0c d0 84 11 	movl   $0xc01184d0,0xc(%esp)
c010d429:	c0 
c010d42a:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010d431:	c0 
c010d432:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
c010d439:	00 
c010d43a:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d441:	e8 82 3a ff ff       	call   c0100ec8 <__panic>
    
    mm_count_inc(mm);
c010d446:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d449:	89 04 24             	mov    %eax,(%esp)
c010d44c:	e8 09 eb ff ff       	call   c010bf5a <mm_count_inc>
    current->mm = mm;
c010d451:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d456:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d459:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d45c:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d461:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d464:	8b 52 0c             	mov    0xc(%edx),%edx
c010d467:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d46a:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d471:	77 23                	ja     c010d496 <load_icode+0x632>
c010d473:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d476:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d47a:	c7 44 24 08 bc 82 11 	movl   $0xc01182bc,0x8(%esp)
c010d481:	c0 
c010d482:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c010d489:	00 
c010d48a:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d491:	e8 32 3a ff ff       	call   c0100ec8 <__panic>
c010d496:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d499:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d49f:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d4a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d4a5:	8b 40 0c             	mov    0xc(%eax),%eax
c010d4a8:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d4ab:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d4b2:	77 23                	ja     c010d4d7 <load_icode+0x673>
c010d4b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d4b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d4bb:	c7 44 24 08 bc 82 11 	movl   $0xc01182bc,0x8(%esp)
c010d4c2:	c0 
c010d4c3:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c010d4ca:	00 
c010d4cb:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d4d2:	e8 f1 39 ff ff       	call   c0100ec8 <__panic>
c010d4d7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d4da:	05 00 00 00 40       	add    $0x40000000,%eax
c010d4df:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d4e2:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d4e5:	0f 22 d8             	mov    %eax,%cr3

    //setup argc, argv
    uint32_t argv_size=0, i;
c010d4e8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d4ef:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d4f6:	eb 30                	jmp    c010d528 <load_icode+0x6c4>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d4f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d4fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d502:	8b 45 10             	mov    0x10(%ebp),%eax
c010d505:	01 d0                	add    %edx,%eax
c010d507:	8b 00                	mov    (%eax),%eax
c010d509:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d510:	00 
c010d511:	89 04 24             	mov    %eax,(%esp)
c010d514:	e8 09 7f 00 00       	call   c0115422 <strnlen>
c010d519:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d51c:	01 d0                	add    %edx,%eax
c010d51e:	83 c0 01             	add    $0x1,%eax
c010d521:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //setup argc, argv
    uint32_t argv_size=0, i;
    for (i = 0; i < argc; i ++) {
c010d524:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d528:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d52b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d52e:	77 c8                	ja     c010d4f8 <load_icode+0x694>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c010d530:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d533:	c1 e8 02             	shr    $0x2,%eax
c010d536:	89 c2                	mov    %eax,%edx
c010d538:	b8 00 00 00 00       	mov    $0x0,%eax
c010d53d:	29 d0                	sub    %edx,%eax
c010d53f:	c1 e0 02             	shl    $0x2,%eax
c010d542:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d547:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c010d54a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d54d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d554:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d557:	29 d0                	sub    %edx,%eax
c010d559:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    argv_size = 0;
c010d55c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010d563:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d56a:	eb 67                	jmp    c010d5d3 <load_icode+0x76f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c010d56c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d56f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d576:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d579:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d57c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d57f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d586:	8b 45 10             	mov    0x10(%ebp),%eax
c010d589:	01 d0                	add    %edx,%eax
c010d58b:	8b 10                	mov    (%eax),%edx
c010d58d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d590:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d593:	01 c8                	add    %ecx,%eax
c010d595:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d599:	89 04 24             	mov    %eax,(%esp)
c010d59c:	e8 d8 7e 00 00       	call   c0115479 <strcpy>
c010d5a1:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c010d5a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d5a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5ad:	8b 45 10             	mov    0x10(%ebp),%eax
c010d5b0:	01 d0                	add    %edx,%eax
c010d5b2:	8b 00                	mov    (%eax),%eax
c010d5b4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d5bb:	00 
c010d5bc:	89 04 24             	mov    %eax,(%esp)
c010d5bf:	e8 5e 7e 00 00       	call   c0115422 <strnlen>
c010d5c4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d5c7:	01 d0                	add    %edx,%eax
c010d5c9:	83 c0 01             	add    $0x1,%eax
c010d5cc:	89 45 d0             	mov    %eax,-0x30(%ebp)

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
    
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c010d5cf:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d5d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d5d9:	77 91                	ja     c010d56c <load_icode+0x708>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }
    
    stacktop = (uintptr_t)uargv - sizeof(int);
c010d5db:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d5de:	83 e8 04             	sub    $0x4,%eax
c010d5e1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010d5e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d5e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d5ea:	89 10                	mov    %edx,(%eax)
    
    struct trapframe *tf = current->tf;
c010d5ec:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d5f1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d5f4:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d5f7:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d5fe:	00 
c010d5ff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d606:	00 
c010d607:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d60a:	89 04 24             	mov    %eax,(%esp)
c010d60d:	e8 3e 81 00 00       	call   c0115750 <memset>
    tf->tf_cs = USER_CS;
c010d612:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d615:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d61b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d61e:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d624:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d627:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d62b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d62e:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d632:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d635:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d639:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d63c:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c010d640:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d643:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d646:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d649:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d64c:	8b 50 18             	mov    0x18(%eax),%edx
c010d64f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d652:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d655:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d658:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d65f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010d666:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d669:	eb 23                	jmp    c010d68e <load_icode+0x82a>
bad_cleanup_mmap:
    exit_mmap(mm);
c010d66b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d66e:	89 04 24             	mov    %eax,(%esp)
c010d671:	e8 1d af ff ff       	call   c0108593 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010d676:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d679:	89 04 24             	mov    %eax,(%esp)
c010d67c:	e8 36 f1 ff ff       	call   c010c7b7 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010d681:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d684:	89 04 24             	mov    %eax,(%esp)
c010d687:	e8 48 ac ff ff       	call   c01082d4 <mm_destroy>
bad_mm:
    goto out;
c010d68c:	eb d8                	jmp    c010d666 <load_icode+0x802>
}
c010d68e:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d694:	5b                   	pop    %ebx
c010d695:	5d                   	pop    %ebp
c010d696:	c3                   	ret    

c010d697 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d697:	55                   	push   %ebp
c010d698:	89 e5                	mov    %esp,%ebp
c010d69a:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d69d:	eb 1d                	jmp    c010d6bc <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d69f:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d6a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d6ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6b0:	01 d0                	add    %edx,%eax
c010d6b2:	8b 00                	mov    (%eax),%eax
c010d6b4:	89 04 24             	mov    %eax,(%esp)
c010d6b7:	e8 5c 76 ff ff       	call   c0104d18 <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d6bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d6c0:	7f dd                	jg     c010d69f <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d6c2:	c9                   	leave  
c010d6c3:	c3                   	ret    

c010d6c4 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d6c4:	55                   	push   %ebp
c010d6c5:	89 e5                	mov    %esp,%ebp
c010d6c7:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d6ca:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d6d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6d4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d6db:	8b 45 14             	mov    0x14(%ebp),%eax
c010d6de:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d6e5:	00 
c010d6e6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d6ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6f1:	89 04 24             	mov    %eax,(%esp)
c010d6f4:	e8 74 b9 ff ff       	call   c010906d <user_mem_check>
c010d6f9:	85 c0                	test   %eax,%eax
c010d6fb:	75 08                	jne    c010d705 <copy_kargv+0x41>
        return ret;
c010d6fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d700:	e9 a4 00 00 00       	jmp    c010d7a9 <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d705:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d70c:	eb 77                	jmp    c010d785 <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d70e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d715:	e8 e3 75 ff ff       	call   c0104cfd <kmalloc>
c010d71a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d71d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d721:	75 0a                	jne    c010d72d <copy_kargv+0x69>
            goto failed_nomem;
c010d723:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d724:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d72b:	eb 67                	jmp    c010d794 <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d72d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d730:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d737:	8b 45 14             	mov    0x14(%ebp),%eax
c010d73a:	01 d0                	add    %edx,%eax
c010d73c:	8b 00                	mov    (%eax),%eax
c010d73e:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d745:	00 
c010d746:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d74a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d74d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d751:	8b 45 08             	mov    0x8(%ebp),%eax
c010d754:	89 04 24             	mov    %eax,(%esp)
c010d757:	e8 34 ba ff ff       	call   c0109190 <copy_string>
c010d75c:	85 c0                	test   %eax,%eax
c010d75e:	75 0d                	jne    c010d76d <copy_kargv+0xa9>
            kfree(buffer);
c010d760:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d763:	89 04 24             	mov    %eax,(%esp)
c010d766:	e8 ad 75 ff ff       	call   c0104d18 <kfree>
            goto failed_cleanup;
c010d76b:	eb 27                	jmp    c010d794 <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d76d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d770:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d777:	8b 45 10             	mov    0x10(%ebp),%eax
c010d77a:	01 c2                	add    %eax,%edx
c010d77c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d77f:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d781:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d785:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d788:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d78b:	7c 81                	jl     c010d70e <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d78d:	b8 00 00 00 00       	mov    $0x0,%eax
c010d792:	eb 15                	jmp    c010d7a9 <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d794:	8b 45 10             	mov    0x10(%ebp),%eax
c010d797:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d79b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d79e:	89 04 24             	mov    %eax,(%esp)
c010d7a1:	e8 f1 fe ff ff       	call   c010d697 <put_kargv>
    return ret;
c010d7a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d7a9:	c9                   	leave  
c010d7aa:	c3                   	ret    

c010d7ab <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d7ab:	55                   	push   %ebp
c010d7ac:	89 e5                	mov    %esp,%ebp
c010d7ae:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d7b4:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d7b9:	8b 40 18             	mov    0x18(%eax),%eax
c010d7bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d7bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d7c3:	7e 06                	jle    c010d7cb <do_execve+0x20>
c010d7c5:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d7c9:	7e 0a                	jle    c010d7d5 <do_execve+0x2a>
        return -E_INVAL;
c010d7cb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d7d0:	e9 11 02 00 00       	jmp    c010d9e6 <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d7d5:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d7dc:	00 
c010d7dd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d7e4:	00 
c010d7e5:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d7e8:	89 04 24             	mov    %eax,(%esp)
c010d7eb:	e8 60 7f 00 00       	call   c0115750 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d7f0:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d7f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7fa:	89 04 24             	mov    %eax,(%esp)
c010d7fd:	e8 8c e7 ff ff       	call   c010bf8e <lock_mm>
    if (name == NULL) {
c010d802:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d806:	75 29                	jne    c010d831 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d808:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d80d:	8b 40 04             	mov    0x4(%eax),%eax
c010d810:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d814:	c7 44 24 08 13 85 11 	movl   $0xc0118513,0x8(%esp)
c010d81b:	c0 
c010d81c:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d823:	00 
c010d824:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d827:	89 04 24             	mov    %eax,(%esp)
c010d82a:	e8 53 7a 00 00       	call   c0115282 <snprintf>
c010d82f:	eb 38                	jmp    c010d869 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d831:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d838:	00 
c010d839:	8b 45 08             	mov    0x8(%ebp),%eax
c010d83c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d840:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d843:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d847:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d84a:	89 04 24             	mov    %eax,(%esp)
c010d84d:	e8 3e b9 ff ff       	call   c0109190 <copy_string>
c010d852:	85 c0                	test   %eax,%eax
c010d854:	75 13                	jne    c010d869 <do_execve+0xbe>
            unlock_mm(mm);
c010d856:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d859:	89 04 24             	mov    %eax,(%esp)
c010d85c:	e8 60 e7 ff ff       	call   c010bfc1 <unlock_mm>
            return ret;
c010d861:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d864:	e9 7d 01 00 00       	jmp    c010d9e6 <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d869:	8b 45 10             	mov    0x10(%ebp),%eax
c010d86c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d870:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d876:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d87a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d87d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d881:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d884:	89 04 24             	mov    %eax,(%esp)
c010d887:	e8 38 fe ff ff       	call   c010d6c4 <copy_kargv>
c010d88c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d88f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d893:	74 13                	je     c010d8a8 <do_execve+0xfd>
        unlock_mm(mm);
c010d895:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d898:	89 04 24             	mov    %eax,(%esp)
c010d89b:	e8 21 e7 ff ff       	call   c010bfc1 <unlock_mm>
        return ret;
c010d8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8a3:	e9 3e 01 00 00       	jmp    c010d9e6 <do_execve+0x23b>
    }
    path = argv[0];
c010d8a8:	8b 45 10             	mov    0x10(%ebp),%eax
c010d8ab:	8b 00                	mov    (%eax),%eax
c010d8ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d8b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d8b3:	89 04 24             	mov    %eax,(%esp)
c010d8b6:	e8 06 e7 ff ff       	call   c010bfc1 <unlock_mm>
    files_closeall(current->filesp);
c010d8bb:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d8c0:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d8c6:	89 04 24             	mov    %eax,(%esp)
c010d8c9:	e8 65 d9 ff ff       	call   c010b233 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d8ce:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d8d5:	00 
c010d8d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8d9:	89 04 24             	mov    %eax,(%esp)
c010d8dc:	e8 7a dd ff ff       	call   c010b65b <sysfile_open>
c010d8e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d8e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d8e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8ee:	79 05                	jns    c010d8f5 <do_execve+0x14a>
        goto execve_exit;
c010d8f0:	e9 ae 00 00 00       	jmp    c010d9a3 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d8f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d8f9:	74 4a                	je     c010d945 <do_execve+0x19a>
        lcr3(boot_cr3);
c010d8fb:	a1 30 41 15 c0       	mov    0xc0154130,%eax
c010d900:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d903:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d906:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d90c:	89 04 24             	mov    %eax,(%esp)
c010d90f:	e8 60 e6 ff ff       	call   c010bf74 <mm_count_dec>
c010d914:	85 c0                	test   %eax,%eax
c010d916:	75 21                	jne    c010d939 <do_execve+0x18e>
            exit_mmap(mm);
c010d918:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d91b:	89 04 24             	mov    %eax,(%esp)
c010d91e:	e8 70 ac ff ff       	call   c0108593 <exit_mmap>
            put_pgdir(mm);
c010d923:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d926:	89 04 24             	mov    %eax,(%esp)
c010d929:	e8 89 ee ff ff       	call   c010c7b7 <put_pgdir>
            mm_destroy(mm);
c010d92e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d931:	89 04 24             	mov    %eax,(%esp)
c010d934:	e8 9b a9 ff ff       	call   c01082d4 <mm_destroy>
        }
        current->mm = NULL;
c010d939:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d93e:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d945:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d94c:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d952:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d956:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d959:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d95d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d960:	89 04 24             	mov    %eax,(%esp)
c010d963:	e8 fc f4 ff ff       	call   c010ce64 <load_icode>
c010d968:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d96b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d96f:	74 02                	je     c010d973 <do_execve+0x1c8>
        goto execve_exit;
c010d971:	eb 30                	jmp    c010d9a3 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d973:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d979:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d97d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d980:	89 04 24             	mov    %eax,(%esp)
c010d983:	e8 0f fd ff ff       	call   c010d697 <put_kargv>
    set_proc_name(current, local_name);
c010d988:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d98d:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d990:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d994:	89 04 24             	mov    %eax,(%esp)
c010d997:	e8 13 e8 ff ff       	call   c010c1af <set_proc_name>
    return 0;
c010d99c:	b8 00 00 00 00       	mov    $0x0,%eax
c010d9a1:	eb 43                	jmp    c010d9e6 <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d9a3:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d9a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d9ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9b0:	89 04 24             	mov    %eax,(%esp)
c010d9b3:	e8 df fc ff ff       	call   c010d697 <put_kargv>
    do_exit(ret);
c010d9b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9bb:	89 04 24             	mov    %eax,(%esp)
c010d9be:	e8 32 f2 ff ff       	call   c010cbf5 <do_exit>
    panic("already exit: %e.\n", ret);
c010d9c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d9ca:	c7 44 24 08 1d 85 11 	movl   $0xc011851d,0x8(%esp)
c010d9d1:	c0 
c010d9d2:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010d9d9:	00 
c010d9da:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010d9e1:	e8 e2 34 ff ff       	call   c0100ec8 <__panic>
}
c010d9e6:	c9                   	leave  
c010d9e7:	c3                   	ret    

c010d9e8 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d9e8:	55                   	push   %ebp
c010d9e9:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d9eb:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010d9f0:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d9f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d9fc:	5d                   	pop    %ebp
c010d9fd:	c3                   	ret    

c010d9fe <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d9fe:	55                   	push   %ebp
c010d9ff:	89 e5                	mov    %esp,%ebp
c010da01:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010da04:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010da09:	8b 40 18             	mov    0x18(%eax),%eax
c010da0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010da0f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010da13:	74 30                	je     c010da45 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010da15:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da18:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010da1f:	00 
c010da20:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010da27:	00 
c010da28:	89 44 24 04          	mov    %eax,0x4(%esp)
c010da2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da2f:	89 04 24             	mov    %eax,(%esp)
c010da32:	e8 36 b6 ff ff       	call   c010906d <user_mem_check>
c010da37:	85 c0                	test   %eax,%eax
c010da39:	75 0a                	jne    c010da45 <do_wait+0x47>
            return -E_INVAL;
c010da3b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010da40:	e9 57 01 00 00       	jmp    c010db9c <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010da45:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010da4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010da50:	74 39                	je     c010da8b <do_wait+0x8d>
        proc = find_proc(pid);
c010da52:	8b 45 08             	mov    0x8(%ebp),%eax
c010da55:	89 04 24             	mov    %eax,(%esp)
c010da58:	e8 6b eb ff ff       	call   c010c5c8 <find_proc>
c010da5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010da60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da64:	74 5a                	je     c010dac0 <do_wait+0xc2>
c010da66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da69:	8b 50 14             	mov    0x14(%eax),%edx
c010da6c:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010da71:	39 c2                	cmp    %eax,%edx
c010da73:	75 4b                	jne    c010dac0 <do_wait+0xc2>
            haskid = 1;
c010da75:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010da7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da7f:	8b 00                	mov    (%eax),%eax
c010da81:	83 f8 03             	cmp    $0x3,%eax
c010da84:	75 3a                	jne    c010dac0 <do_wait+0xc2>
                goto found;
c010da86:	e9 89 00 00 00       	jmp    c010db14 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010da8b:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010da90:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010da96:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010da99:	eb 1f                	jmp    c010daba <do_wait+0xbc>
            haskid = 1;
c010da9b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010daa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daa5:	8b 00                	mov    (%eax),%eax
c010daa7:	83 f8 03             	cmp    $0x3,%eax
c010daaa:	75 02                	jne    c010daae <do_wait+0xb0>
                goto found;
c010daac:	eb 66                	jmp    c010db14 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010daae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dab1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dab7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010daba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dabe:	75 db                	jne    c010da9b <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010dac0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dac4:	74 44                	je     c010db0a <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010dac6:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010dacb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010dad1:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010dad6:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010dadd:	00 00 80 
        schedule();
c010dae0:	e8 56 0c 00 00       	call   c010e73b <schedule>
        if (current->flags & PF_EXITING) {
c010dae5:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010daea:	8b 40 44             	mov    0x44(%eax),%eax
c010daed:	83 e0 01             	and    $0x1,%eax
c010daf0:	85 c0                	test   %eax,%eax
c010daf2:	74 11                	je     c010db05 <do_wait+0x107>
            do_exit(-E_KILLED);
c010daf4:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010dafb:	e8 f5 f0 ff ff       	call   c010cbf5 <do_exit>
        }
        goto repeat;
c010db00:	e9 40 ff ff ff       	jmp    c010da45 <do_wait+0x47>
c010db05:	e9 3b ff ff ff       	jmp    c010da45 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010db0a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010db0f:	e9 88 00 00 00       	jmp    c010db9c <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010db14:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010db19:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010db1c:	74 0a                	je     c010db28 <do_wait+0x12a>
c010db1e:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010db23:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010db26:	75 1c                	jne    c010db44 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010db28:	c7 44 24 08 30 85 11 	movl   $0xc0118530,0x8(%esp)
c010db2f:	c0 
c010db30:	c7 44 24 04 9a 03 00 	movl   $0x39a,0x4(%esp)
c010db37:	00 
c010db38:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010db3f:	e8 84 33 ff ff       	call   c0100ec8 <__panic>
    }
    if (code_store != NULL) {
c010db44:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010db48:	74 0e                	je     c010db58 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010db4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db4d:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010db53:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db56:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010db58:	e8 a3 e2 ff ff       	call   c010be00 <__intr_save>
c010db5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010db60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db63:	89 04 24             	mov    %eax,(%esp)
c010db66:	e8 28 ea ff ff       	call   c010c593 <unhash_proc>
        remove_links(proc);
c010db6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db6e:	89 04 24             	mov    %eax,(%esp)
c010db71:	e8 78 e7 ff ff       	call   c010c2ee <remove_links>
    }
    local_intr_restore(intr_flag);
c010db76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010db79:	89 04 24             	mov    %eax,(%esp)
c010db7c:	e8 a9 e2 ff ff       	call   c010be2a <__intr_restore>
    put_kstack(proc);
c010db81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db84:	89 04 24             	mov    %eax,(%esp)
c010db87:	e8 5e eb ff ff       	call   c010c6ea <put_kstack>
    kfree(proc);
c010db8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db8f:	89 04 24             	mov    %eax,(%esp)
c010db92:	e8 81 71 ff ff       	call   c0104d18 <kfree>
    return 0;
c010db97:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010db9c:	c9                   	leave  
c010db9d:	c3                   	ret    

c010db9e <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010db9e:	55                   	push   %ebp
c010db9f:	89 e5                	mov    %esp,%ebp
c010dba1:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010dba4:	8b 45 08             	mov    0x8(%ebp),%eax
c010dba7:	89 04 24             	mov    %eax,(%esp)
c010dbaa:	e8 19 ea ff ff       	call   c010c5c8 <find_proc>
c010dbaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dbb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dbb6:	74 44                	je     c010dbfc <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010dbb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbbb:	8b 40 44             	mov    0x44(%eax),%eax
c010dbbe:	83 e0 01             	and    $0x1,%eax
c010dbc1:	85 c0                	test   %eax,%eax
c010dbc3:	75 30                	jne    c010dbf5 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010dbc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbc8:	8b 40 44             	mov    0x44(%eax),%eax
c010dbcb:	83 c8 01             	or     $0x1,%eax
c010dbce:	89 c2                	mov    %eax,%edx
c010dbd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbd3:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010dbd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbd9:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010dbdf:	85 c0                	test   %eax,%eax
c010dbe1:	79 0b                	jns    c010dbee <do_kill+0x50>
                wakeup_proc(proc);
c010dbe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbe6:	89 04 24             	mov    %eax,(%esp)
c010dbe9:	e8 b1 0a 00 00       	call   c010e69f <wakeup_proc>
            }
            return 0;
c010dbee:	b8 00 00 00 00       	mov    $0x0,%eax
c010dbf3:	eb 0c                	jmp    c010dc01 <do_kill+0x63>
        }
        return -E_KILLED;
c010dbf5:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010dbfa:	eb 05                	jmp    c010dc01 <do_kill+0x63>
    }
    return -E_INVAL;
c010dbfc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010dc01:	c9                   	leave  
c010dc02:	c3                   	ret    

c010dc03 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010dc03:	55                   	push   %ebp
c010dc04:	89 e5                	mov    %esp,%ebp
c010dc06:	53                   	push   %ebx
c010dc07:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010dc0a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010dc11:	eb 04                	jmp    c010dc17 <kernel_execve+0x14>
        argc ++;
c010dc13:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010dc17:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dc1a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dc21:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc24:	01 d0                	add    %edx,%eax
c010dc26:	8b 00                	mov    (%eax),%eax
c010dc28:	85 c0                	test   %eax,%eax
c010dc2a:	75 e7                	jne    c010dc13 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010dc2c:	b8 04 00 00 00       	mov    $0x4,%eax
c010dc31:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc34:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010dc37:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010dc3a:	cd 80                	int    $0x80
c010dc3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010dc3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dc42:	83 c4 10             	add    $0x10,%esp
c010dc45:	5b                   	pop    %ebx
c010dc46:	5d                   	pop    %ebp
c010dc47:	c3                   	ret    

c010dc48 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010dc48:	55                   	push   %ebp
c010dc49:	89 e5                	mov    %esp,%ebp
c010dc4b:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010dc4e:	c7 45 f0 4c 85 11 c0 	movl   $0xc011854c,-0x10(%ebp)
c010dc55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dc5c:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010dc61:	8b 40 04             	mov    0x4(%eax),%eax
c010dc64:	c7 44 24 08 4c 85 11 	movl   $0xc011854c,0x8(%esp)
c010dc6b:	c0 
c010dc6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dc70:	c7 04 24 50 85 11 c0 	movl   $0xc0118550,(%esp)
c010dc77:	e8 e9 26 ff ff       	call   c0100365 <cprintf>
c010dc7c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010dc7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dc83:	c7 04 24 4c 85 11 c0 	movl   $0xc011854c,(%esp)
c010dc8a:	e8 74 ff ff ff       	call   c010dc03 <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010dc8f:	c7 44 24 08 77 85 11 	movl   $0xc0118577,0x8(%esp)
c010dc96:	c0 
c010dc97:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
c010dc9e:	00 
c010dc9f:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010dca6:	e8 1d 32 ff ff       	call   c0100ec8 <__panic>

c010dcab <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010dcab:	55                   	push   %ebp
c010dcac:	89 e5                	mov    %esp,%ebp
c010dcae:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010dcb1:	c7 04 24 91 85 11 c0 	movl   $0xc0118591,(%esp)
c010dcb8:	e8 e3 18 00 00       	call   c010f5a0 <vfs_set_bootfs>
c010dcbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dcc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dcc4:	74 23                	je     c010dce9 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010dcc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcc9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dccd:	c7 44 24 08 98 85 11 	movl   $0xc0118598,0x8(%esp)
c010dcd4:	c0 
c010dcd5:	c7 44 24 04 ed 03 00 	movl   $0x3ed,0x4(%esp)
c010dcdc:	00 
c010dcdd:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010dce4:	e8 df 31 ff ff       	call   c0100ec8 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010dce9:	e8 31 75 ff ff       	call   c010521f <nr_free_pages>
c010dcee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010dcf1:	e8 ea 6e ff ff       	call   c0104be0 <kallocated>
c010dcf6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010dcf9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dd00:	00 
c010dd01:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dd08:	00 
c010dd09:	c7 04 24 48 dc 10 c0 	movl   $0xc010dc48,(%esp)
c010dd10:	e8 27 e9 ff ff       	call   c010c63c <kernel_thread>
c010dd15:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010dd18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dd1c:	7f 1c                	jg     c010dd3a <init_main+0x8f>
        panic("create user_main failed.\n");
c010dd1e:	c7 44 24 08 b1 85 11 	movl   $0xc01185b1,0x8(%esp)
c010dd25:	c0 
c010dd26:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
c010dd2d:	00 
c010dd2e:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010dd35:	e8 8e 31 ff ff       	call   c0100ec8 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dd3a:	e8 25 ba ff ff       	call   c0109764 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dd3f:	eb 05                	jmp    c010dd46 <init_main+0x9b>
        schedule();
c010dd41:	e8 f5 09 00 00       	call   c010e73b <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010dd46:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dd4d:	00 
c010dd4e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dd55:	e8 a4 fc ff ff       	call   c010d9fe <do_wait>
c010dd5a:	85 c0                	test   %eax,%eax
c010dd5c:	74 e3                	je     c010dd41 <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dd5e:	e8 54 d3 ff ff       	call   c010b0b7 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dd63:	c7 04 24 cc 85 11 c0 	movl   $0xc01185cc,(%esp)
c010dd6a:	e8 f6 25 ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dd6f:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010dd74:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dd7a:	85 c0                	test   %eax,%eax
c010dd7c:	75 1e                	jne    c010dd9c <init_main+0xf1>
c010dd7e:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010dd83:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dd89:	85 c0                	test   %eax,%eax
c010dd8b:	75 0f                	jne    c010dd9c <init_main+0xf1>
c010dd8d:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010dd92:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dd98:	85 c0                	test   %eax,%eax
c010dd9a:	74 24                	je     c010ddc0 <init_main+0x115>
c010dd9c:	c7 44 24 0c f0 85 11 	movl   $0xc01185f0,0xc(%esp)
c010dda3:	c0 
c010dda4:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010ddab:	c0 
c010ddac:	c7 44 24 04 01 04 00 	movl   $0x401,0x4(%esp)
c010ddb3:	00 
c010ddb4:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010ddbb:	e8 08 31 ff ff       	call   c0100ec8 <__panic>
    assert(nr_process == 2);
c010ddc0:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c010ddc5:	83 f8 02             	cmp    $0x2,%eax
c010ddc8:	74 24                	je     c010ddee <init_main+0x143>
c010ddca:	c7 44 24 0c 3b 86 11 	movl   $0xc011863b,0xc(%esp)
c010ddd1:	c0 
c010ddd2:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010ddd9:	c0 
c010ddda:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c010dde1:	00 
c010dde2:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010dde9:	e8 da 30 ff ff       	call   c0100ec8 <__panic>
c010ddee:	c7 45 e4 fc 42 15 c0 	movl   $0xc01542fc,-0x1c(%ebp)
c010ddf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ddf8:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010ddfb:	8b 15 c4 0f 15 c0    	mov    0xc0150fc4,%edx
c010de01:	83 c2 7c             	add    $0x7c,%edx
c010de04:	39 d0                	cmp    %edx,%eax
c010de06:	74 24                	je     c010de2c <init_main+0x181>
c010de08:	c7 44 24 0c 4c 86 11 	movl   $0xc011864c,0xc(%esp)
c010de0f:	c0 
c010de10:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010de17:	c0 
c010de18:	c7 44 24 04 03 04 00 	movl   $0x403,0x4(%esp)
c010de1f:	00 
c010de20:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010de27:	e8 9c 30 ff ff       	call   c0100ec8 <__panic>
c010de2c:	c7 45 e0 fc 42 15 c0 	movl   $0xc01542fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010de33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010de36:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010de38:	8b 15 c4 0f 15 c0    	mov    0xc0150fc4,%edx
c010de3e:	83 c2 7c             	add    $0x7c,%edx
c010de41:	39 d0                	cmp    %edx,%eax
c010de43:	74 24                	je     c010de69 <init_main+0x1be>
c010de45:	c7 44 24 0c 7c 86 11 	movl   $0xc011867c,0xc(%esp)
c010de4c:	c0 
c010de4d:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010de54:	c0 
c010de55:	c7 44 24 04 04 04 00 	movl   $0x404,0x4(%esp)
c010de5c:	00 
c010de5d:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010de64:	e8 5f 30 ff ff       	call   c0100ec8 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010de69:	e8 b1 73 ff ff       	call   c010521f <nr_free_pages>
c010de6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010de71:	74 24                	je     c010de97 <init_main+0x1ec>
c010de73:	c7 44 24 0c ac 86 11 	movl   $0xc01186ac,0xc(%esp)
c010de7a:	c0 
c010de7b:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010de82:	c0 
c010de83:	c7 44 24 04 05 04 00 	movl   $0x405,0x4(%esp)
c010de8a:	00 
c010de8b:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010de92:	e8 31 30 ff ff       	call   c0100ec8 <__panic>
    assert(kernel_allocated_store == kallocated());
c010de97:	e8 44 6d ff ff       	call   c0104be0 <kallocated>
c010de9c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010de9f:	74 24                	je     c010dec5 <init_main+0x21a>
c010dea1:	c7 44 24 0c d4 86 11 	movl   $0xc01186d4,0xc(%esp)
c010dea8:	c0 
c010dea9:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010deb0:	c0 
c010deb1:	c7 44 24 04 06 04 00 	movl   $0x406,0x4(%esp)
c010deb8:	00 
c010deb9:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010dec0:	e8 03 30 ff ff       	call   c0100ec8 <__panic>
    cprintf("init check memory pass.\n");
c010dec5:	c7 04 24 fb 86 11 c0 	movl   $0xc01186fb,(%esp)
c010decc:	e8 94 24 ff ff       	call   c0100365 <cprintf>
    return 0;
c010ded1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ded6:	c9                   	leave  
c010ded7:	c3                   	ret    

c010ded8 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010ded8:	55                   	push   %ebp
c010ded9:	89 e5                	mov    %esp,%ebp
c010dedb:	53                   	push   %ebx
c010dedc:	83 ec 24             	sub    $0x24,%esp
c010dedf:	c7 45 ec fc 42 15 c0 	movl   $0xc01542fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dee6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dee9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010deec:	89 50 04             	mov    %edx,0x4(%eax)
c010deef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010def2:	8b 50 04             	mov    0x4(%eax),%edx
c010def5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010def8:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010defa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010df01:	eb 26                	jmp    c010df29 <proc_init+0x51>
        list_init(hash_list + i);
c010df03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df06:	c1 e0 03             	shl    $0x3,%eax
c010df09:	05 e0 0f 15 c0       	add    $0xc0150fe0,%eax
c010df0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010df11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df14:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010df17:	89 50 04             	mov    %edx,0x4(%eax)
c010df1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df1d:	8b 50 04             	mov    0x4(%eax),%edx
c010df20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df23:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010df25:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010df29:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010df30:	7e d1                	jle    c010df03 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010df32:	e8 e4 e0 ff ff       	call   c010c01b <alloc_proc>
c010df37:	a3 c0 0f 15 c0       	mov    %eax,0xc0150fc0
c010df3c:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010df41:	85 c0                	test   %eax,%eax
c010df43:	75 1c                	jne    c010df61 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010df45:	c7 44 24 08 14 87 11 	movl   $0xc0118714,0x8(%esp)
c010df4c:	c0 
c010df4d:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
c010df54:	00 
c010df55:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010df5c:	e8 67 2f ff ff       	call   c0100ec8 <__panic>
    }

    idleproc->pid = 0;
c010df61:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010df66:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010df6d:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010df72:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010df78:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010df7d:	ba 00 d0 14 c0       	mov    $0xc014d000,%edx
c010df82:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010df85:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010df8a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010df91:	8b 1d c0 0f 15 c0    	mov    0xc0150fc0,%ebx
c010df97:	e8 54 d1 ff ff       	call   c010b0f0 <files_create>
c010df9c:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010dfa2:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010dfa8:	85 c0                	test   %eax,%eax
c010dfaa:	75 1c                	jne    c010dfc8 <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010dfac:	c7 44 24 08 2c 87 11 	movl   $0xc011872c,0x8(%esp)
c010dfb3:	c0 
c010dfb4:	c7 44 24 04 20 04 00 	movl   $0x420,0x4(%esp)
c010dfbb:	00 
c010dfbc:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010dfc3:	e8 00 2f ff ff       	call   c0100ec8 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010dfc8:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010dfcd:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010dfd3:	89 04 24             	mov    %eax,(%esp)
c010dfd6:	e8 0c e0 ff ff       	call   c010bfe7 <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010dfdb:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010dfe0:	c7 44 24 04 4e 87 11 	movl   $0xc011874e,0x4(%esp)
c010dfe7:	c0 
c010dfe8:	89 04 24             	mov    %eax,(%esp)
c010dfeb:	e8 bf e1 ff ff       	call   c010c1af <set_proc_name>
    nr_process ++;
c010dff0:	a1 e0 2f 15 c0       	mov    0xc0152fe0,%eax
c010dff5:	83 c0 01             	add    $0x1,%eax
c010dff8:	a3 e0 2f 15 c0       	mov    %eax,0xc0152fe0

    current = idleproc;
c010dffd:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010e002:	a3 c8 0f 15 c0       	mov    %eax,0xc0150fc8

    int pid = kernel_thread(init_main, NULL, 0);
c010e007:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e00e:	00 
c010e00f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e016:	00 
c010e017:	c7 04 24 ab dc 10 c0 	movl   $0xc010dcab,(%esp)
c010e01e:	e8 19 e6 ff ff       	call   c010c63c <kernel_thread>
c010e023:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010e026:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e02a:	7f 1c                	jg     c010e048 <proc_init+0x170>
        panic("create init_main failed.\n");
c010e02c:	c7 44 24 08 53 87 11 	movl   $0xc0118753,0x8(%esp)
c010e033:	c0 
c010e034:	c7 44 24 04 2b 04 00 	movl   $0x42b,0x4(%esp)
c010e03b:	00 
c010e03c:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010e043:	e8 80 2e ff ff       	call   c0100ec8 <__panic>
    }

    initproc = find_proc(pid);
c010e048:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e04b:	89 04 24             	mov    %eax,(%esp)
c010e04e:	e8 75 e5 ff ff       	call   c010c5c8 <find_proc>
c010e053:	a3 c4 0f 15 c0       	mov    %eax,0xc0150fc4
    set_proc_name(initproc, "init");
c010e058:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010e05d:	c7 44 24 04 6d 87 11 	movl   $0xc011876d,0x4(%esp)
c010e064:	c0 
c010e065:	89 04 24             	mov    %eax,(%esp)
c010e068:	e8 42 e1 ff ff       	call   c010c1af <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010e06d:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010e072:	85 c0                	test   %eax,%eax
c010e074:	74 0c                	je     c010e082 <proc_init+0x1aa>
c010e076:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010e07b:	8b 40 04             	mov    0x4(%eax),%eax
c010e07e:	85 c0                	test   %eax,%eax
c010e080:	74 24                	je     c010e0a6 <proc_init+0x1ce>
c010e082:	c7 44 24 0c 74 87 11 	movl   $0xc0118774,0xc(%esp)
c010e089:	c0 
c010e08a:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010e091:	c0 
c010e092:	c7 44 24 04 31 04 00 	movl   $0x431,0x4(%esp)
c010e099:	00 
c010e09a:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010e0a1:	e8 22 2e ff ff       	call   c0100ec8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010e0a6:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010e0ab:	85 c0                	test   %eax,%eax
c010e0ad:	74 0d                	je     c010e0bc <proc_init+0x1e4>
c010e0af:	a1 c4 0f 15 c0       	mov    0xc0150fc4,%eax
c010e0b4:	8b 40 04             	mov    0x4(%eax),%eax
c010e0b7:	83 f8 01             	cmp    $0x1,%eax
c010e0ba:	74 24                	je     c010e0e0 <proc_init+0x208>
c010e0bc:	c7 44 24 0c 9c 87 11 	movl   $0xc011879c,0xc(%esp)
c010e0c3:	c0 
c010e0c4:	c7 44 24 08 07 83 11 	movl   $0xc0118307,0x8(%esp)
c010e0cb:	c0 
c010e0cc:	c7 44 24 04 32 04 00 	movl   $0x432,0x4(%esp)
c010e0d3:	00 
c010e0d4:	c7 04 24 e0 82 11 c0 	movl   $0xc01182e0,(%esp)
c010e0db:	e8 e8 2d ff ff       	call   c0100ec8 <__panic>
}
c010e0e0:	83 c4 24             	add    $0x24,%esp
c010e0e3:	5b                   	pop    %ebx
c010e0e4:	5d                   	pop    %ebp
c010e0e5:	c3                   	ret    

c010e0e6 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010e0e6:	55                   	push   %ebp
c010e0e7:	89 e5                	mov    %esp,%ebp
c010e0e9:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010e0ec:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e0f1:	8b 40 10             	mov    0x10(%eax),%eax
c010e0f4:	85 c0                	test   %eax,%eax
c010e0f6:	74 07                	je     c010e0ff <cpu_idle+0x19>
            schedule();
c010e0f8:	e8 3e 06 00 00       	call   c010e73b <schedule>
        }
    }
c010e0fd:	eb ed                	jmp    c010e0ec <cpu_idle+0x6>
c010e0ff:	eb eb                	jmp    c010e0ec <cpu_idle+0x6>

c010e101 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010e101:	55                   	push   %ebp
c010e102:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010e104:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e108:	75 11                	jne    c010e11b <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010e10a:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e10f:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010e116:	00 00 00 
c010e119:	eb 0e                	jmp    c010e129 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010e11b:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e120:	8b 55 08             	mov    0x8(%ebp),%edx
c010e123:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010e129:	5d                   	pop    %ebp
c010e12a:	c3                   	ret    

c010e12b <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010e12b:	55                   	push   %ebp
c010e12c:	89 e5                	mov    %esp,%ebp
c010e12e:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010e131:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e135:	75 07                	jne    c010e13e <do_sleep+0x13>
        return 0;
c010e137:	b8 00 00 00 00       	mov    $0x0,%eax
c010e13c:	eb 6b                	jmp    c010e1a9 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010e13e:	e8 bd dc ff ff       	call   c010be00 <__intr_save>
c010e143:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010e146:	8b 55 08             	mov    0x8(%ebp),%edx
c010e149:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e14e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e152:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e156:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010e159:	89 04 24             	mov    %eax,(%esp)
c010e15c:	e8 66 dc ff ff       	call   c010bdc7 <timer_init>
c010e161:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010e164:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e169:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010e16f:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e174:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010e17b:	00 00 80 
    add_timer(timer);
c010e17e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e181:	89 04 24             	mov    %eax,(%esp)
c010e184:	e8 3d 06 00 00       	call   c010e7c6 <add_timer>
    local_intr_restore(intr_flag);
c010e189:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e18c:	89 04 24             	mov    %eax,(%esp)
c010e18f:	e8 96 dc ff ff       	call   c010be2a <__intr_restore>

    schedule();
c010e194:	e8 a2 05 00 00       	call   c010e73b <schedule>

    del_timer(timer);
c010e199:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e19c:	89 04 24             	mov    %eax,(%esp)
c010e19f:	e8 60 07 00 00       	call   c010e904 <del_timer>
    return 0;
c010e1a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e1a9:	c9                   	leave  
c010e1aa:	c3                   	ret    

c010e1ab <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010e1ab:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010e1af:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010e1b1:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010e1b4:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010e1b7:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010e1ba:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010e1bd:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010e1c0:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010e1c3:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010e1c6:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010e1ca:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010e1cd:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010e1d0:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010e1d3:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010e1d6:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010e1d9:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010e1dc:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e1df:	ff 30                	pushl  (%eax)

    ret
c010e1e1:	c3                   	ret    

c010e1e2 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e1e2:	55                   	push   %ebp
c010e1e3:	89 e5                	mov    %esp,%ebp
c010e1e5:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e1e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e1ec:	75 08                	jne    c010e1f6 <skew_heap_merge+0x14>
c010e1ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1f1:	e9 bd 00 00 00       	jmp    c010e2b3 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e1f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e1fa:	75 08                	jne    c010e204 <skew_heap_merge+0x22>
c010e1fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1ff:	e9 af 00 00 00       	jmp    c010e2b3 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e204:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e207:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e20b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e20e:	89 04 24             	mov    %eax,(%esp)
c010e211:	8b 45 10             	mov    0x10(%ebp),%eax
c010e214:	ff d0                	call   *%eax
c010e216:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e219:	75 4d                	jne    c010e268 <skew_heap_merge+0x86>
     {
          r = a->left;
c010e21b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e21e:	8b 40 04             	mov    0x4(%eax),%eax
c010e221:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e224:	8b 45 08             	mov    0x8(%ebp),%eax
c010e227:	8b 40 08             	mov    0x8(%eax),%eax
c010e22a:	8b 55 10             	mov    0x10(%ebp),%edx
c010e22d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e231:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e234:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e238:	89 04 24             	mov    %eax,(%esp)
c010e23b:	e8 a2 ff ff ff       	call   c010e1e2 <skew_heap_merge>
c010e240:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e243:	8b 45 08             	mov    0x8(%ebp),%eax
c010e246:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e249:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e24c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e24f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e252:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e255:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e259:	74 08                	je     c010e263 <skew_heap_merge+0x81>
c010e25b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e25e:	8b 55 08             	mov    0x8(%ebp),%edx
c010e261:	89 10                	mov    %edx,(%eax)

          return a;
c010e263:	8b 45 08             	mov    0x8(%ebp),%eax
c010e266:	eb 4b                	jmp    c010e2b3 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e268:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e26b:	8b 40 04             	mov    0x4(%eax),%eax
c010e26e:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e271:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e274:	8b 40 08             	mov    0x8(%eax),%eax
c010e277:	8b 55 10             	mov    0x10(%ebp),%edx
c010e27a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e27e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e282:	8b 45 08             	mov    0x8(%ebp),%eax
c010e285:	89 04 24             	mov    %eax,(%esp)
c010e288:	e8 55 ff ff ff       	call   c010e1e2 <skew_heap_merge>
c010e28d:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e290:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e293:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e296:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e299:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e29c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e29f:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e2a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e2a6:	74 08                	je     c010e2b0 <skew_heap_merge+0xce>
c010e2a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2ab:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e2ae:	89 10                	mov    %edx,(%eax)

          return b;
c010e2b0:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e2b3:	c9                   	leave  
c010e2b4:	c3                   	ret    

c010e2b5 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e2b5:	55                   	push   %ebp
c010e2b6:	89 e5                	mov    %esp,%ebp
c010e2b8:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2be:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e2c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e2c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e2c9:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e2ce:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e2d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2d4:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e2da:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e2dd:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e2e3:	29 c2                	sub    %eax,%edx
c010e2e5:	89 d0                	mov    %edx,%eax
c010e2e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e2ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e2ee:	7e 07                	jle    c010e2f7 <proc_stride_comp_f+0x42>
c010e2f0:	b8 01 00 00 00       	mov    $0x1,%eax
c010e2f5:	eb 12                	jmp    c010e309 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e2f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e2fb:	75 07                	jne    c010e304 <proc_stride_comp_f+0x4f>
c010e2fd:	b8 00 00 00 00       	mov    $0x0,%eax
c010e302:	eb 05                	jmp    c010e309 <proc_stride_comp_f+0x54>
     else return -1;
c010e304:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e309:	c9                   	leave  
c010e30a:	c3                   	ret    

c010e30b <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e30b:	55                   	push   %ebp
c010e30c:	89 e5                	mov    %esp,%ebp
c010e30e:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010e311:	8b 45 08             	mov    0x8(%ebp),%eax
c010e314:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e317:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e31a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e31d:	89 50 04             	mov    %edx,0x4(%eax)
c010e320:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e323:	8b 50 04             	mov    0x4(%eax),%edx
c010e326:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e329:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010e32b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e32e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010e335:	8b 45 08             	mov    0x8(%ebp),%eax
c010e338:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e33f:	c9                   	leave  
c010e340:	c3                   	ret    

c010e341 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e341:	55                   	push   %ebp
c010e342:	89 e5                	mov    %esp,%ebp
c010e344:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e347:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e34a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e350:	8b 45 08             	mov    0x8(%ebp),%eax
c010e353:	8b 40 10             	mov    0x10(%eax),%eax
c010e356:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e359:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e35c:	c7 45 ec b5 e2 10 c0 	movl   $0xc010e2b5,-0x14(%ebp)
c010e363:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e366:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e369:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e36c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e372:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e375:	8b 10                	mov    (%eax),%edx
c010e377:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e37a:	89 50 08             	mov    %edx,0x8(%eax)
c010e37d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e380:	8b 50 08             	mov    0x8(%eax),%edx
c010e383:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e386:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e389:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e38c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e390:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e393:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e397:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e39a:	89 04 24             	mov    %eax,(%esp)
c010e39d:	e8 40 fe ff ff       	call   c010e1e2 <skew_heap_merge>
c010e3a2:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e3a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3a7:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e3aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3ad:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e3b3:	85 c0                	test   %eax,%eax
c010e3b5:	74 13                	je     c010e3ca <stride_enqueue+0x89>
c010e3b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3ba:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e3c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3c3:	8b 40 0c             	mov    0xc(%eax),%eax
c010e3c6:	39 c2                	cmp    %eax,%edx
c010e3c8:	7e 0f                	jle    c010e3d9 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010e3ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3cd:	8b 50 0c             	mov    0xc(%eax),%edx
c010e3d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3d3:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010e3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3dc:	8b 55 08             	mov    0x8(%ebp),%edx
c010e3df:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010e3e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3e8:	8b 40 08             	mov    0x8(%eax),%eax
c010e3eb:	8d 50 01             	lea    0x1(%eax),%edx
c010e3ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3f1:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e3f4:	c9                   	leave  
c010e3f5:	c3                   	ret    

c010e3f6 <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e3f6:	55                   	push   %ebp
c010e3f7:	89 e5                	mov    %esp,%ebp
c010e3f9:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e3fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3ff:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e405:	8b 45 08             	mov    0x8(%ebp),%eax
c010e408:	8b 40 10             	mov    0x10(%eax),%eax
c010e40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e40e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e411:	c7 45 ec b5 e2 10 c0 	movl   $0xc010e2b5,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e418:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e41b:	8b 00                	mov    (%eax),%eax
c010e41d:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e420:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e423:	8b 50 08             	mov    0x8(%eax),%edx
c010e426:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e429:	8b 40 04             	mov    0x4(%eax),%eax
c010e42c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e42f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e433:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e437:	89 04 24             	mov    %eax,(%esp)
c010e43a:	e8 a3 fd ff ff       	call   c010e1e2 <skew_heap_merge>
c010e43f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e442:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e446:	74 08                	je     c010e450 <stride_dequeue+0x5a>
c010e448:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e44b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e44e:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e450:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e454:	74 24                	je     c010e47a <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e456:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e459:	8b 40 04             	mov    0x4(%eax),%eax
c010e45c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e45f:	75 0b                	jne    c010e46c <stride_dequeue+0x76>
               p->left = rep;
c010e461:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e464:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e467:	89 50 04             	mov    %edx,0x4(%eax)
c010e46a:	eb 09                	jmp    c010e475 <stride_dequeue+0x7f>
          else p->right = rep;
c010e46c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e46f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e472:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e475:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e478:	eb 03                	jmp    c010e47d <stride_dequeue+0x87>
     }
     else return rep;
c010e47a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e47d:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e47f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e482:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010e485:	8b 45 08             	mov    0x8(%ebp),%eax
c010e488:	8b 40 08             	mov    0x8(%eax),%eax
c010e48b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e48e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e491:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e494:	c9                   	leave  
c010e495:	c3                   	ret    

c010e496 <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e496:	55                   	push   %ebp
c010e497:	89 e5                	mov    %esp,%ebp
c010e499:	53                   	push   %ebx
c010e49a:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010e49d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4a0:	8b 40 10             	mov    0x10(%eax),%eax
c010e4a3:	85 c0                	test   %eax,%eax
c010e4a5:	75 07                	jne    c010e4ae <stride_pick_next+0x18>
c010e4a7:	b8 00 00 00 00       	mov    $0x0,%eax
c010e4ac:	eb 62                	jmp    c010e510 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e4ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4b1:	8b 40 10             	mov    0x10(%eax),%eax
c010e4b4:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e4b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010e4bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4bf:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e4c5:	85 c0                	test   %eax,%eax
c010e4c7:	75 1a                	jne    c010e4e3 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010e4c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4cc:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e4d2:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e4d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4db:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e4e1:	eb 2a                	jmp    c010e50d <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010e4e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4e6:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e4ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e4ef:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e4f5:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e4fa:	ba 00 00 00 00       	mov    $0x0,%edx
c010e4ff:	f7 f3                	div    %ebx
c010e501:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e504:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e507:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010e50d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010e510:	83 c4 10             	add    $0x10,%esp
c010e513:	5b                   	pop    %ebx
c010e514:	5d                   	pop    %ebp
c010e515:	c3                   	ret    

c010e516 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e516:	55                   	push   %ebp
c010e517:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010e519:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e51c:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e522:	85 c0                	test   %eax,%eax
c010e524:	7e 15                	jle    c010e53b <stride_proc_tick+0x25>
          proc->time_slice --;
c010e526:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e529:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e52f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e532:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e535:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010e53b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e53e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e544:	85 c0                	test   %eax,%eax
c010e546:	75 0a                	jne    c010e552 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010e548:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e54b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010e552:	5d                   	pop    %ebp
c010e553:	c3                   	ret    

c010e554 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e554:	55                   	push   %ebp
c010e555:	89 e5                	mov    %esp,%ebp
c010e557:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e55a:	9c                   	pushf  
c010e55b:	58                   	pop    %eax
c010e55c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e55f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e562:	25 00 02 00 00       	and    $0x200,%eax
c010e567:	85 c0                	test   %eax,%eax
c010e569:	74 0c                	je     c010e577 <__intr_save+0x23>
        intr_disable();
c010e56b:	e8 d8 3b ff ff       	call   c0102148 <intr_disable>
        return 1;
c010e570:	b8 01 00 00 00       	mov    $0x1,%eax
c010e575:	eb 05                	jmp    c010e57c <__intr_save+0x28>
    }
    return 0;
c010e577:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e57c:	c9                   	leave  
c010e57d:	c3                   	ret    

c010e57e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e57e:	55                   	push   %ebp
c010e57f:	89 e5                	mov    %esp,%ebp
c010e581:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e584:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e588:	74 05                	je     c010e58f <__intr_restore+0x11>
        intr_enable();
c010e58a:	e8 b3 3b ff ff       	call   c0102142 <intr_enable>
    }
}
c010e58f:	c9                   	leave  
c010e590:	c3                   	ret    

c010e591 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e591:	55                   	push   %ebp
c010e592:	89 e5                	mov    %esp,%ebp
c010e594:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e597:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010e59c:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e59f:	74 1a                	je     c010e5bb <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e5a1:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e5a6:	8b 40 08             	mov    0x8(%eax),%eax
c010e5a9:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010e5af:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e5b2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e5b6:	89 14 24             	mov    %edx,(%esp)
c010e5b9:	ff d0                	call   *%eax
    }
}
c010e5bb:	c9                   	leave  
c010e5bc:	c3                   	ret    

c010e5bd <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e5bd:	55                   	push   %ebp
c010e5be:	89 e5                	mov    %esp,%ebp
c010e5c0:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e5c3:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e5c8:	8b 40 0c             	mov    0xc(%eax),%eax
c010e5cb:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010e5d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e5d4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e5d8:	89 14 24             	mov    %edx,(%esp)
c010e5db:	ff d0                	call   *%eax
}
c010e5dd:	c9                   	leave  
c010e5de:	c3                   	ret    

c010e5df <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e5df:	55                   	push   %ebp
c010e5e0:	89 e5                	mov    %esp,%ebp
c010e5e2:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e5e5:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e5ea:	8b 40 10             	mov    0x10(%eax),%eax
c010e5ed:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010e5f3:	89 14 24             	mov    %edx,(%esp)
c010e5f6:	ff d0                	call   *%eax
}
c010e5f8:	c9                   	leave  
c010e5f9:	c3                   	ret    

c010e5fa <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e5fa:	55                   	push   %ebp
c010e5fb:	89 e5                	mov    %esp,%ebp
c010e5fd:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e600:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010e605:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e608:	74 1c                	je     c010e626 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e60a:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e60f:	8b 40 14             	mov    0x14(%eax),%eax
c010e612:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010e618:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e61b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e61f:	89 14 24             	mov    %edx,(%esp)
c010e622:	ff d0                	call   *%eax
c010e624:	eb 0a                	jmp    c010e630 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e626:	8b 45 08             	mov    0x8(%ebp),%eax
c010e629:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e630:	c9                   	leave  
c010e631:	c3                   	ret    

c010e632 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e632:	55                   	push   %ebp
c010e633:	89 e5                	mov    %esp,%ebp
c010e635:	83 ec 28             	sub    $0x28,%esp
c010e638:	c7 45 f4 3c 30 15 c0 	movl   $0xc015303c,-0xc(%ebp)
c010e63f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e642:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e645:	89 50 04             	mov    %edx,0x4(%eax)
c010e648:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e64b:	8b 50 04             	mov    0x4(%eax),%edx
c010e64e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e651:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e653:	c7 05 44 30 15 c0 8c 	movl   $0xc014fa8c,0xc0153044
c010e65a:	fa 14 c0 

    rq = &__rq;
c010e65d:	c7 05 48 30 15 c0 4c 	movl   $0xc015304c,0xc0153048
c010e664:	30 15 c0 
    rq->max_time_slice = 5;
c010e667:	a1 48 30 15 c0       	mov    0xc0153048,%eax
c010e66c:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010e673:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e678:	8b 40 04             	mov    0x4(%eax),%eax
c010e67b:	8b 15 48 30 15 c0    	mov    0xc0153048,%edx
c010e681:	89 14 24             	mov    %edx,(%esp)
c010e684:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e686:	a1 44 30 15 c0       	mov    0xc0153044,%eax
c010e68b:	8b 00                	mov    (%eax),%eax
c010e68d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e691:	c7 04 24 d4 87 11 c0 	movl   $0xc01187d4,(%esp)
c010e698:	e8 c8 1c ff ff       	call   c0100365 <cprintf>
}
c010e69d:	c9                   	leave  
c010e69e:	c3                   	ret    

c010e69f <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e69f:	55                   	push   %ebp
c010e6a0:	89 e5                	mov    %esp,%ebp
c010e6a2:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e6a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6a8:	8b 00                	mov    (%eax),%eax
c010e6aa:	83 f8 03             	cmp    $0x3,%eax
c010e6ad:	75 24                	jne    c010e6d3 <wakeup_proc+0x34>
c010e6af:	c7 44 24 0c e5 87 11 	movl   $0xc01187e5,0xc(%esp)
c010e6b6:	c0 
c010e6b7:	c7 44 24 08 00 88 11 	movl   $0xc0118800,0x8(%esp)
c010e6be:	c0 
c010e6bf:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010e6c6:	00 
c010e6c7:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010e6ce:	e8 f5 27 ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e6d3:	e8 7c fe ff ff       	call   c010e554 <__intr_save>
c010e6d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e6db:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6de:	8b 00                	mov    (%eax),%eax
c010e6e0:	83 f8 02             	cmp    $0x2,%eax
c010e6e3:	74 2d                	je     c010e712 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e6e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6e8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e6ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6f1:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e6f8:	00 00 00 
            if (proc != current) {
c010e6fb:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e700:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e703:	74 29                	je     c010e72e <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e705:	8b 45 08             	mov    0x8(%ebp),%eax
c010e708:	89 04 24             	mov    %eax,(%esp)
c010e70b:	e8 81 fe ff ff       	call   c010e591 <sched_class_enqueue>
c010e710:	eb 1c                	jmp    c010e72e <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e712:	c7 44 24 08 2b 88 11 	movl   $0xc011882b,0x8(%esp)
c010e719:	c0 
c010e71a:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010e721:	00 
c010e722:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010e729:	e8 06 28 ff ff       	call   c0100f34 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e72e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e731:	89 04 24             	mov    %eax,(%esp)
c010e734:	e8 45 fe ff ff       	call   c010e57e <__intr_restore>
}
c010e739:	c9                   	leave  
c010e73a:	c3                   	ret    

c010e73b <schedule>:

void
schedule(void) {
c010e73b:	55                   	push   %ebp
c010e73c:	89 e5                	mov    %esp,%ebp
c010e73e:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e741:	e8 0e fe ff ff       	call   c010e554 <__intr_save>
c010e746:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e749:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e74e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e755:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e75a:	8b 00                	mov    (%eax),%eax
c010e75c:	83 f8 02             	cmp    $0x2,%eax
c010e75f:	75 0d                	jne    c010e76e <schedule+0x33>
            sched_class_enqueue(current);
c010e761:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e766:	89 04 24             	mov    %eax,(%esp)
c010e769:	e8 23 fe ff ff       	call   c010e591 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e76e:	e8 6c fe ff ff       	call   c010e5df <sched_class_pick_next>
c010e773:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e776:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e77a:	74 0b                	je     c010e787 <schedule+0x4c>
            sched_class_dequeue(next);
c010e77c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e77f:	89 04 24             	mov    %eax,(%esp)
c010e782:	e8 36 fe ff ff       	call   c010e5bd <sched_class_dequeue>
        }
        if (next == NULL) {
c010e787:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e78b:	75 08                	jne    c010e795 <schedule+0x5a>
            next = idleproc;
c010e78d:	a1 c0 0f 15 c0       	mov    0xc0150fc0,%eax
c010e792:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e798:	8b 40 08             	mov    0x8(%eax),%eax
c010e79b:	8d 50 01             	lea    0x1(%eax),%edx
c010e79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7a1:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e7a4:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010e7a9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e7ac:	74 0b                	je     c010e7b9 <schedule+0x7e>
            proc_run(next);
c010e7ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7b1:	89 04 24             	mov    %eax,(%esp)
c010e7b4:	e8 ce dc ff ff       	call   c010c487 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e7b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7bc:	89 04 24             	mov    %eax,(%esp)
c010e7bf:	e8 ba fd ff ff       	call   c010e57e <__intr_restore>
}
c010e7c4:	c9                   	leave  
c010e7c5:	c3                   	ret    

c010e7c6 <add_timer>:

void
add_timer(timer_t *timer) {
c010e7c6:	55                   	push   %ebp
c010e7c7:	89 e5                	mov    %esp,%ebp
c010e7c9:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e7cc:	e8 83 fd ff ff       	call   c010e554 <__intr_save>
c010e7d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e7d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7d7:	8b 00                	mov    (%eax),%eax
c010e7d9:	85 c0                	test   %eax,%eax
c010e7db:	74 0a                	je     c010e7e7 <add_timer+0x21>
c010e7dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7e0:	8b 40 04             	mov    0x4(%eax),%eax
c010e7e3:	85 c0                	test   %eax,%eax
c010e7e5:	75 24                	jne    c010e80b <add_timer+0x45>
c010e7e7:	c7 44 24 0c 48 88 11 	movl   $0xc0118848,0xc(%esp)
c010e7ee:	c0 
c010e7ef:	c7 44 24 08 00 88 11 	movl   $0xc0118800,0x8(%esp)
c010e7f6:	c0 
c010e7f7:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010e7fe:	00 
c010e7ff:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010e806:	e8 bd 26 ff ff       	call   c0100ec8 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e80b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e80e:	83 c0 08             	add    $0x8,%eax
c010e811:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e814:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e817:	8b 40 04             	mov    0x4(%eax),%eax
c010e81a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e81d:	0f 94 c0             	sete   %al
c010e820:	0f b6 c0             	movzbl %al,%eax
c010e823:	85 c0                	test   %eax,%eax
c010e825:	75 24                	jne    c010e84b <add_timer+0x85>
c010e827:	c7 44 24 0c 74 88 11 	movl   $0xc0118874,0xc(%esp)
c010e82e:	c0 
c010e82f:	c7 44 24 08 00 88 11 	movl   $0xc0118800,0x8(%esp)
c010e836:	c0 
c010e837:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e83e:	00 
c010e83f:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010e846:	e8 7d 26 ff ff       	call   c0100ec8 <__panic>
c010e84b:	c7 45 e4 3c 30 15 c0 	movl   $0xc015303c,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e852:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e855:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e858:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e85b:	eb 4a                	jmp    c010e8a7 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e85d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e860:	83 e8 08             	sub    $0x8,%eax
c010e863:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e866:	8b 45 08             	mov    0x8(%ebp),%eax
c010e869:	8b 10                	mov    (%eax),%edx
c010e86b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e86e:	8b 00                	mov    (%eax),%eax
c010e870:	39 c2                	cmp    %eax,%edx
c010e872:	73 13                	jae    c010e887 <add_timer+0xc1>
                next->expires -= timer->expires;
c010e874:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e877:	8b 10                	mov    (%eax),%edx
c010e879:	8b 45 08             	mov    0x8(%ebp),%eax
c010e87c:	8b 00                	mov    (%eax),%eax
c010e87e:	29 c2                	sub    %eax,%edx
c010e880:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e883:	89 10                	mov    %edx,(%eax)
                break;
c010e885:	eb 29                	jmp    c010e8b0 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e887:	8b 45 08             	mov    0x8(%ebp),%eax
c010e88a:	8b 10                	mov    (%eax),%edx
c010e88c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e88f:	8b 00                	mov    (%eax),%eax
c010e891:	29 c2                	sub    %eax,%edx
c010e893:	8b 45 08             	mov    0x8(%ebp),%eax
c010e896:	89 10                	mov    %edx,(%eax)
c010e898:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e89b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e89e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e8a1:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e8a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e8a7:	81 7d f4 3c 30 15 c0 	cmpl   $0xc015303c,-0xc(%ebp)
c010e8ae:	75 ad                	jne    c010e85d <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e8b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e8b3:	8d 50 08             	lea    0x8(%eax),%edx
c010e8b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e8bc:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e8bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e8c2:	8b 00                	mov    (%eax),%eax
c010e8c4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e8c7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e8ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e8cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e8d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e8d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e8d6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e8d9:	89 10                	mov    %edx,(%eax)
c010e8db:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e8de:	8b 10                	mov    (%eax),%edx
c010e8e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8e3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e8e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e8e9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e8ec:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e8ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e8f2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e8f5:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8fa:	89 04 24             	mov    %eax,(%esp)
c010e8fd:	e8 7c fc ff ff       	call   c010e57e <__intr_restore>
}
c010e902:	c9                   	leave  
c010e903:	c3                   	ret    

c010e904 <del_timer>:

void
del_timer(timer_t *timer) {
c010e904:	55                   	push   %ebp
c010e905:	89 e5                	mov    %esp,%ebp
c010e907:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e90a:	e8 45 fc ff ff       	call   c010e554 <__intr_save>
c010e90f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e912:	8b 45 08             	mov    0x8(%ebp),%eax
c010e915:	83 c0 08             	add    $0x8,%eax
c010e918:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e91b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e91e:	8b 40 04             	mov    0x4(%eax),%eax
c010e921:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e924:	0f 94 c0             	sete   %al
c010e927:	0f b6 c0             	movzbl %al,%eax
c010e92a:	85 c0                	test   %eax,%eax
c010e92c:	0f 85 89 00 00 00    	jne    c010e9bb <del_timer+0xb7>
            if (timer->expires != 0) {
c010e932:	8b 45 08             	mov    0x8(%ebp),%eax
c010e935:	8b 00                	mov    (%eax),%eax
c010e937:	85 c0                	test   %eax,%eax
c010e939:	74 35                	je     c010e970 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e93b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e93e:	83 c0 08             	add    $0x8,%eax
c010e941:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e944:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e947:	8b 40 04             	mov    0x4(%eax),%eax
c010e94a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e94d:	81 7d f0 3c 30 15 c0 	cmpl   $0xc015303c,-0x10(%ebp)
c010e954:	74 1a                	je     c010e970 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e959:	83 e8 08             	sub    $0x8,%eax
c010e95c:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e95f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e962:	8b 10                	mov    (%eax),%edx
c010e964:	8b 45 08             	mov    0x8(%ebp),%eax
c010e967:	8b 00                	mov    (%eax),%eax
c010e969:	01 c2                	add    %eax,%edx
c010e96b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e96e:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e970:	8b 45 08             	mov    0x8(%ebp),%eax
c010e973:	83 c0 08             	add    $0x8,%eax
c010e976:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e979:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e97c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e97f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e982:	8b 40 04             	mov    0x4(%eax),%eax
c010e985:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e988:	8b 12                	mov    (%edx),%edx
c010e98a:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e98d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e990:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e993:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e996:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e999:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e99c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e99f:	89 10                	mov    %edx,(%eax)
c010e9a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e9a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e9a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e9aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e9ad:	89 50 04             	mov    %edx,0x4(%eax)
c010e9b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e9b3:	8b 50 04             	mov    0x4(%eax),%edx
c010e9b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e9b9:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e9bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9be:	89 04 24             	mov    %eax,(%esp)
c010e9c1:	e8 b8 fb ff ff       	call   c010e57e <__intr_restore>
}
c010e9c6:	c9                   	leave  
c010e9c7:	c3                   	ret    

c010e9c8 <run_timer_list>:

void
run_timer_list(void) {
c010e9c8:	55                   	push   %ebp
c010e9c9:	89 e5                	mov    %esp,%ebp
c010e9cb:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e9ce:	e8 81 fb ff ff       	call   c010e554 <__intr_save>
c010e9d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e9d6:	c7 45 e4 3c 30 15 c0 	movl   $0xc015303c,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e9dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e9e0:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e9e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e9e6:	81 7d f4 3c 30 15 c0 	cmpl   $0xc015303c,-0xc(%ebp)
c010e9ed:	0f 84 fb 00 00 00    	je     c010eaee <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e9f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9f6:	83 e8 08             	sub    $0x8,%eax
c010e9f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e9fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9ff:	8b 00                	mov    (%eax),%eax
c010ea01:	85 c0                	test   %eax,%eax
c010ea03:	75 24                	jne    c010ea29 <run_timer_list+0x61>
c010ea05:	c7 44 24 0c 95 88 11 	movl   $0xc0118895,0xc(%esp)
c010ea0c:	c0 
c010ea0d:	c7 44 24 08 00 88 11 	movl   $0xc0118800,0x8(%esp)
c010ea14:	c0 
c010ea15:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010ea1c:	00 
c010ea1d:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010ea24:	e8 9f 24 ff ff       	call   c0100ec8 <__panic>
            timer->expires --;
c010ea29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea2c:	8b 00                	mov    (%eax),%eax
c010ea2e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ea31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea34:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010ea36:	e9 a6 00 00 00       	jmp    c010eae1 <run_timer_list+0x119>
c010ea3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ea41:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ea44:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010ea47:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010ea4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea4d:	8b 40 04             	mov    0x4(%eax),%eax
c010ea50:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010ea53:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea56:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ea5c:	85 c0                	test   %eax,%eax
c010ea5e:	74 31                	je     c010ea91 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010ea60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea63:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ea69:	85 c0                	test   %eax,%eax
c010ea6b:	78 4a                	js     c010eab7 <run_timer_list+0xef>
c010ea6d:	c7 44 24 0c ac 88 11 	movl   $0xc01188ac,0xc(%esp)
c010ea74:	c0 
c010ea75:	c7 44 24 08 00 88 11 	movl   $0xc0118800,0x8(%esp)
c010ea7c:	c0 
c010ea7d:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010ea84:	00 
c010ea85:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010ea8c:	e8 37 24 ff ff       	call   c0100ec8 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010ea91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea94:	8b 40 04             	mov    0x4(%eax),%eax
c010ea97:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ea9b:	c7 44 24 08 d0 88 11 	movl   $0xc01188d0,0x8(%esp)
c010eaa2:	c0 
c010eaa3:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010eaaa:	00 
c010eaab:	c7 04 24 15 88 11 c0 	movl   $0xc0118815,(%esp)
c010eab2:	e8 7d 24 ff ff       	call   c0100f34 <__warn>
                }
                wakeup_proc(proc);
c010eab7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eaba:	89 04 24             	mov    %eax,(%esp)
c010eabd:	e8 dd fb ff ff       	call   c010e69f <wakeup_proc>
                del_timer(timer);
c010eac2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eac5:	89 04 24             	mov    %eax,(%esp)
c010eac8:	e8 37 fe ff ff       	call   c010e904 <del_timer>
                if (le == &timer_list) {
c010eacd:	81 7d f4 3c 30 15 c0 	cmpl   $0xc015303c,-0xc(%ebp)
c010ead4:	75 02                	jne    c010ead8 <run_timer_list+0x110>
                    break;
c010ead6:	eb 16                	jmp    c010eaee <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010ead8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eadb:	83 e8 08             	sub    $0x8,%eax
c010eade:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010eae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eae4:	8b 00                	mov    (%eax),%eax
c010eae6:	85 c0                	test   %eax,%eax
c010eae8:	0f 84 4d ff ff ff    	je     c010ea3b <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010eaee:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010eaf3:	89 04 24             	mov    %eax,(%esp)
c010eaf6:	e8 ff fa ff ff       	call   c010e5fa <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010eafb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eafe:	89 04 24             	mov    %eax,(%esp)
c010eb01:	e8 78 fa ff ff       	call   c010e57e <__intr_restore>
}
c010eb06:	c9                   	leave  
c010eb07:	c3                   	ret    

c010eb08 <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010eb08:	55                   	push   %ebp
c010eb09:	89 e5                	mov    %esp,%ebp
c010eb0b:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010eb0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb11:	8b 00                	mov    (%eax),%eax
c010eb13:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010eb16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb19:	89 04 24             	mov    %eax,(%esp)
c010eb1c:	e8 d4 e0 ff ff       	call   c010cbf5 <do_exit>
}
c010eb21:	c9                   	leave  
c010eb22:	c3                   	ret    

c010eb23 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010eb23:	55                   	push   %ebp
c010eb24:	89 e5                	mov    %esp,%ebp
c010eb26:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010eb29:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010eb2e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010eb31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010eb34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb37:	8b 40 44             	mov    0x44(%eax),%eax
c010eb3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010eb3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb40:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb4b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010eb52:	e8 63 df ff ff       	call   c010caba <do_fork>
}
c010eb57:	c9                   	leave  
c010eb58:	c3                   	ret    

c010eb59 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010eb59:	55                   	push   %ebp
c010eb5a:	89 e5                	mov    %esp,%ebp
c010eb5c:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010eb5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb62:	8b 00                	mov    (%eax),%eax
c010eb64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010eb67:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb6a:	83 c0 04             	add    $0x4,%eax
c010eb6d:	8b 00                	mov    (%eax),%eax
c010eb6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010eb72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb75:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb7c:	89 04 24             	mov    %eax,(%esp)
c010eb7f:	e8 7a ee ff ff       	call   c010d9fe <do_wait>
}
c010eb84:	c9                   	leave  
c010eb85:	c3                   	ret    

c010eb86 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010eb86:	55                   	push   %ebp
c010eb87:	89 e5                	mov    %esp,%ebp
c010eb89:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010eb8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb8f:	8b 00                	mov    (%eax),%eax
c010eb91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010eb94:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb97:	83 c0 04             	add    $0x4,%eax
c010eb9a:	8b 00                	mov    (%eax),%eax
c010eb9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010eb9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eba2:	83 c0 08             	add    $0x8,%eax
c010eba5:	8b 00                	mov    (%eax),%eax
c010eba7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010ebaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ebad:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebbb:	89 04 24             	mov    %eax,(%esp)
c010ebbe:	e8 e8 eb ff ff       	call   c010d7ab <do_execve>
}
c010ebc3:	c9                   	leave  
c010ebc4:	c3                   	ret    

c010ebc5 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ebc5:	55                   	push   %ebp
c010ebc6:	89 e5                	mov    %esp,%ebp
c010ebc8:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ebcb:	e8 18 ee ff ff       	call   c010d9e8 <do_yield>
}
c010ebd0:	c9                   	leave  
c010ebd1:	c3                   	ret    

c010ebd2 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ebd2:	55                   	push   %ebp
c010ebd3:	89 e5                	mov    %esp,%ebp
c010ebd5:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ebd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebdb:	8b 00                	mov    (%eax),%eax
c010ebdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ebe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebe3:	89 04 24             	mov    %eax,(%esp)
c010ebe6:	e8 b3 ef ff ff       	call   c010db9e <do_kill>
}
c010ebeb:	c9                   	leave  
c010ebec:	c3                   	ret    

c010ebed <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ebed:	55                   	push   %ebp
c010ebee:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ebf0:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010ebf5:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ebf8:	5d                   	pop    %ebp
c010ebf9:	c3                   	ret    

c010ebfa <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ebfa:	55                   	push   %ebp
c010ebfb:	89 e5                	mov    %esp,%ebp
c010ebfd:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ec00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec03:	8b 00                	mov    (%eax),%eax
c010ec05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ec08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec0b:	89 04 24             	mov    %eax,(%esp)
c010ec0e:	e8 78 17 ff ff       	call   c010038b <cputchar>
    return 0;
c010ec13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec18:	c9                   	leave  
c010ec19:	c3                   	ret    

c010ec1a <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ec1a:	55                   	push   %ebp
c010ec1b:	89 e5                	mov    %esp,%ebp
c010ec1d:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ec20:	e8 58 80 ff ff       	call   c0106c7d <print_pgdir>
    return 0;
c010ec25:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec2a:	c9                   	leave  
c010ec2b:	c3                   	ret    

c010ec2c <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010ec2c:	55                   	push   %ebp
c010ec2d:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ec2f:	a1 1c 41 15 c0       	mov    0xc015411c,%eax
}
c010ec34:	5d                   	pop    %ebp
c010ec35:	c3                   	ret    

c010ec36 <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010ec36:	55                   	push   %ebp
c010ec37:	89 e5                	mov    %esp,%ebp
c010ec39:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ec3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec3f:	8b 00                	mov    (%eax),%eax
c010ec41:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ec44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec47:	89 04 24             	mov    %eax,(%esp)
c010ec4a:	e8 b2 f4 ff ff       	call   c010e101 <lab6_set_priority>
    return 0;
c010ec4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ec54:	c9                   	leave  
c010ec55:	c3                   	ret    

c010ec56 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010ec56:	55                   	push   %ebp
c010ec57:	89 e5                	mov    %esp,%ebp
c010ec59:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010ec5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec5f:	8b 00                	mov    (%eax),%eax
c010ec61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010ec64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec67:	89 04 24             	mov    %eax,(%esp)
c010ec6a:	e8 bc f4 ff ff       	call   c010e12b <do_sleep>
}
c010ec6f:	c9                   	leave  
c010ec70:	c3                   	ret    

c010ec71 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ec71:	55                   	push   %ebp
c010ec72:	89 e5                	mov    %esp,%ebp
c010ec74:	83 ec 28             	sub    $0x28,%esp
    cprintf("%d [sys_open]\n", openstep++);
c010ec77:	a1 60 30 15 c0       	mov    0xc0153060,%eax
c010ec7c:	8d 50 01             	lea    0x1(%eax),%edx
c010ec7f:	89 15 60 30 15 c0    	mov    %edx,0xc0153060
c010ec85:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec89:	c7 04 24 f0 88 11 c0 	movl   $0xc01188f0,(%esp)
c010ec90:	e8 d0 16 ff ff       	call   c0100365 <cprintf>
    const char *path = (const char *)arg[0];
c010ec95:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec98:	8b 00                	mov    (%eax),%eax
c010ec9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010ec9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010eca0:	8b 40 04             	mov    0x4(%eax),%eax
c010eca3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010eca6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ecad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb0:	89 04 24             	mov    %eax,(%esp)
c010ecb3:	e8 a3 c9 ff ff       	call   c010b65b <sysfile_open>
}
c010ecb8:	c9                   	leave  
c010ecb9:	c3                   	ret    

c010ecba <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010ecba:	55                   	push   %ebp
c010ecbb:	89 e5                	mov    %esp,%ebp
c010ecbd:	83 ec 28             	sub    $0x28,%esp
    // cprintf("%d [sys_close]\n", _filestep++);
    int fd = (int)arg[0];
c010ecc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecc3:	8b 00                	mov    (%eax),%eax
c010ecc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010ecc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eccb:	89 04 24             	mov    %eax,(%esp)
c010ecce:	e8 f1 c9 ff ff       	call   c010b6c4 <sysfile_close>
}
c010ecd3:	c9                   	leave  
c010ecd4:	c3                   	ret    

c010ecd5 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010ecd5:	55                   	push   %ebp
c010ecd6:	89 e5                	mov    %esp,%ebp
c010ecd8:	83 ec 28             	sub    $0x28,%esp
    // cprintf("%d [sys_read]\n", _filestep++);
    int fd = (int)arg[0];
c010ecdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecde:	8b 00                	mov    (%eax),%eax
c010ece0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ece3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ece6:	83 c0 04             	add    $0x4,%eax
c010ece9:	8b 00                	mov    (%eax),%eax
c010eceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ecee:	8b 45 08             	mov    0x8(%ebp),%eax
c010ecf1:	8b 40 08             	mov    0x8(%eax),%eax
c010ecf4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010ecf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ecfa:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ecfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed01:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed08:	89 04 24             	mov    %eax,(%esp)
c010ed0b:	e8 c7 c9 ff ff       	call   c010b6d7 <sysfile_read>
}
c010ed10:	c9                   	leave  
c010ed11:	c3                   	ret    

c010ed12 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010ed12:	55                   	push   %ebp
c010ed13:	89 e5                	mov    %esp,%ebp
c010ed15:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed18:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed1b:	8b 00                	mov    (%eax),%eax
c010ed1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010ed20:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed23:	83 c0 04             	add    $0x4,%eax
c010ed26:	8b 00                	mov    (%eax),%eax
c010ed28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010ed2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed2e:	8b 40 08             	mov    0x8(%eax),%eax
c010ed31:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010ed34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed37:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed45:	89 04 24             	mov    %eax,(%esp)
c010ed48:	e8 02 cb ff ff       	call   c010b84f <sysfile_write>
}
c010ed4d:	c9                   	leave  
c010ed4e:	c3                   	ret    

c010ed4f <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010ed4f:	55                   	push   %ebp
c010ed50:	89 e5                	mov    %esp,%ebp
c010ed52:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed55:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed58:	8b 00                	mov    (%eax),%eax
c010ed5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010ed5d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed60:	83 c0 04             	add    $0x4,%eax
c010ed63:	8b 00                	mov    (%eax),%eax
c010ed65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010ed68:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed6b:	83 c0 08             	add    $0x8,%eax
c010ed6e:	8b 00                	mov    (%eax),%eax
c010ed70:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010ed73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed76:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ed7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed84:	89 04 24             	mov    %eax,(%esp)
c010ed87:	e8 3d cc ff ff       	call   c010b9c9 <sysfile_seek>
}
c010ed8c:	c9                   	leave  
c010ed8d:	c3                   	ret    

c010ed8e <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010ed8e:	55                   	push   %ebp
c010ed8f:	89 e5                	mov    %esp,%ebp
c010ed91:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ed94:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed97:	8b 00                	mov    (%eax),%eax
c010ed99:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010ed9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed9f:	83 c0 04             	add    $0x4,%eax
c010eda2:	8b 00                	mov    (%eax),%eax
c010eda4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010eda7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edb1:	89 04 24             	mov    %eax,(%esp)
c010edb4:	e8 31 cc ff ff       	call   c010b9ea <sysfile_fstat>
}
c010edb9:	c9                   	leave  
c010edba:	c3                   	ret    

c010edbb <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010edbb:	55                   	push   %ebp
c010edbc:	89 e5                	mov    %esp,%ebp
c010edbe:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010edc1:	8b 45 08             	mov    0x8(%ebp),%eax
c010edc4:	8b 00                	mov    (%eax),%eax
c010edc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010edc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edcc:	89 04 24             	mov    %eax,(%esp)
c010edcf:	e8 94 cc ff ff       	call   c010ba68 <sysfile_fsync>
}
c010edd4:	c9                   	leave  
c010edd5:	c3                   	ret    

c010edd6 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010edd6:	55                   	push   %ebp
c010edd7:	89 e5                	mov    %esp,%ebp
c010edd9:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010eddc:	8b 45 08             	mov    0x8(%ebp),%eax
c010eddf:	8b 00                	mov    (%eax),%eax
c010ede1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ede4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ede7:	8b 40 04             	mov    0x4(%eax),%eax
c010edea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010eded:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edf7:	89 04 24             	mov    %eax,(%esp)
c010edfa:	e8 06 ce ff ff       	call   c010bc05 <sysfile_getcwd>
}
c010edff:	c9                   	leave  
c010ee00:	c3                   	ret    

c010ee01 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ee01:	55                   	push   %ebp
c010ee02:	89 e5                	mov    %esp,%ebp
c010ee04:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ee07:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee0a:	8b 00                	mov    (%eax),%eax
c010ee0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ee0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee12:	83 c0 04             	add    $0x4,%eax
c010ee15:	8b 00                	mov    (%eax),%eax
c010ee17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ee1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee24:	89 04 24             	mov    %eax,(%esp)
c010ee27:	e8 70 ce ff ff       	call   c010bc9c <sysfile_getdirentry>
}
c010ee2c:	c9                   	leave  
c010ee2d:	c3                   	ret    

c010ee2e <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ee2e:	55                   	push   %ebp
c010ee2f:	89 e5                	mov    %esp,%ebp
c010ee31:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ee34:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee37:	8b 00                	mov    (%eax),%eax
c010ee39:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ee3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee3f:	83 c0 04             	add    $0x4,%eax
c010ee42:	8b 00                	mov    (%eax),%eax
c010ee44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ee47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee51:	89 04 24             	mov    %eax,(%esp)
c010ee54:	e8 37 cf ff ff       	call   c010bd90 <sysfile_dup>
}
c010ee59:	c9                   	leave  
c010ee5a:	c3                   	ret    

c010ee5b <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ee5b:	55                   	push   %ebp
c010ee5c:	89 e5                	mov    %esp,%ebp
c010ee5e:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010ee61:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010ee66:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ee69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ee6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee6f:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ee72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ee75:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ee79:	78 60                	js     c010eedb <syscall+0x80>
c010ee7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee7e:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ee83:	77 56                	ja     c010eedb <syscall+0x80>
        if (syscalls[num] != NULL) {
c010ee85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee88:	8b 04 85 c0 fa 14 c0 	mov    -0x3feb0540(,%eax,4),%eax
c010ee8f:	85 c0                	test   %eax,%eax
c010ee91:	74 48                	je     c010eedb <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ee93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee96:	8b 40 14             	mov    0x14(%eax),%eax
c010ee99:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ee9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee9f:	8b 40 18             	mov    0x18(%eax),%eax
c010eea2:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010eea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eea8:	8b 40 10             	mov    0x10(%eax),%eax
c010eeab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010eeae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb1:	8b 00                	mov    (%eax),%eax
c010eeb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010eeb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb9:	8b 40 04             	mov    0x4(%eax),%eax
c010eebc:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010eebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eec2:	8b 04 85 c0 fa 14 c0 	mov    -0x3feb0540(,%eax,4),%eax
c010eec9:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010eecc:	89 14 24             	mov    %edx,(%esp)
c010eecf:	ff d0                	call   *%eax
c010eed1:	89 c2                	mov    %eax,%edx
c010eed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eed6:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010eed9:	eb 46                	jmp    c010ef21 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010eedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eede:	89 04 24             	mov    %eax,(%esp)
c010eee1:	e8 fa 35 ff ff       	call   c01024e0 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010eee6:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010eeeb:	8d 50 48             	lea    0x48(%eax),%edx
c010eeee:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c010eef3:	8b 40 04             	mov    0x4(%eax),%eax
c010eef6:	89 54 24 14          	mov    %edx,0x14(%esp)
c010eefa:	89 44 24 10          	mov    %eax,0x10(%esp)
c010eefe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef01:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef05:	c7 44 24 08 00 89 11 	movl   $0xc0118900,0x8(%esp)
c010ef0c:	c0 
c010ef0d:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010ef14:	00 
c010ef15:	c7 04 24 2c 89 11 c0 	movl   $0xc011892c,(%esp)
c010ef1c:	e8 a7 1f ff ff       	call   c0100ec8 <__panic>
            num, current->pid, current->name);
}
c010ef21:	c9                   	leave  
c010ef22:	c3                   	ret    

c010ef23 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ef23:	55                   	push   %ebp
c010ef24:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ef26:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef29:	a1 34 41 15 c0       	mov    0xc0154134,%eax
c010ef2e:	29 c2                	sub    %eax,%edx
c010ef30:	89 d0                	mov    %edx,%eax
c010ef32:	c1 f8 02             	sar    $0x2,%eax
c010ef35:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010ef3b:	5d                   	pop    %ebp
c010ef3c:	c3                   	ret    

c010ef3d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ef3d:	55                   	push   %ebp
c010ef3e:	89 e5                	mov    %esp,%ebp
c010ef40:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ef43:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef46:	89 04 24             	mov    %eax,(%esp)
c010ef49:	e8 d5 ff ff ff       	call   c010ef23 <page2ppn>
c010ef4e:	c1 e0 0c             	shl    $0xc,%eax
}
c010ef51:	c9                   	leave  
c010ef52:	c3                   	ret    

c010ef53 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ef53:	55                   	push   %ebp
c010ef54:	89 e5                	mov    %esp,%ebp
c010ef56:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ef59:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef5c:	89 04 24             	mov    %eax,(%esp)
c010ef5f:	e8 d9 ff ff ff       	call   c010ef3d <page2pa>
c010ef64:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef6a:	c1 e8 0c             	shr    $0xc,%eax
c010ef6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ef70:	a1 e0 0e 15 c0       	mov    0xc0150ee0,%eax
c010ef75:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ef78:	72 23                	jb     c010ef9d <page2kva+0x4a>
c010ef7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef7d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef81:	c7 44 24 08 44 89 11 	movl   $0xc0118944,0x8(%esp)
c010ef88:	c0 
c010ef89:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010ef90:	00 
c010ef91:	c7 04 24 67 89 11 c0 	movl   $0xc0118967,(%esp)
c010ef98:	e8 2b 1f ff ff       	call   c0100ec8 <__panic>
c010ef9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efa0:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010efa5:	c9                   	leave  
c010efa6:	c3                   	ret    

c010efa7 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010efa7:	55                   	push   %ebp
c010efa8:	89 e5                	mov    %esp,%ebp
c010efaa:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010efad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010efb4:	e8 69 2c ff ff       	call   c0101c22 <ide_device_valid>
c010efb9:	85 c0                	test   %eax,%eax
c010efbb:	75 1c                	jne    c010efd9 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010efbd:	c7 44 24 08 75 89 11 	movl   $0xc0118975,0x8(%esp)
c010efc4:	c0 
c010efc5:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010efcc:	00 
c010efcd:	c7 04 24 8f 89 11 c0 	movl   $0xc011898f,(%esp)
c010efd4:	e8 ef 1e ff ff       	call   c0100ec8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010efd9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010efe0:	e8 7c 2c ff ff       	call   c0101c61 <ide_device_size>
c010efe5:	c1 e8 03             	shr    $0x3,%eax
c010efe8:	a3 dc 41 15 c0       	mov    %eax,0xc01541dc
}
c010efed:	c9                   	leave  
c010efee:	c3                   	ret    

c010efef <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010efef:	55                   	push   %ebp
c010eff0:	89 e5                	mov    %esp,%ebp
c010eff2:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010eff5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eff8:	89 04 24             	mov    %eax,(%esp)
c010effb:	e8 53 ff ff ff       	call   c010ef53 <page2kva>
c010f000:	8b 55 08             	mov    0x8(%ebp),%edx
c010f003:	c1 ea 08             	shr    $0x8,%edx
c010f006:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f009:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f00d:	74 0b                	je     c010f01a <swapfs_read+0x2b>
c010f00f:	8b 15 dc 41 15 c0    	mov    0xc01541dc,%edx
c010f015:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f018:	72 23                	jb     c010f03d <swapfs_read+0x4e>
c010f01a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f01d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f021:	c7 44 24 08 a5 89 11 	movl   $0xc01189a5,0x8(%esp)
c010f028:	c0 
c010f029:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010f030:	00 
c010f031:	c7 04 24 8f 89 11 c0 	movl   $0xc011898f,(%esp)
c010f038:	e8 8b 1e ff ff       	call   c0100ec8 <__panic>
c010f03d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f040:	c1 e2 03             	shl    $0x3,%edx
c010f043:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f04a:	00 
c010f04b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f04f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f053:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f05a:	e8 41 2c ff ff       	call   c0101ca0 <ide_read_secs>
}
c010f05f:	c9                   	leave  
c010f060:	c3                   	ret    

c010f061 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010f061:	55                   	push   %ebp
c010f062:	89 e5                	mov    %esp,%ebp
c010f064:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010f067:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f06a:	89 04 24             	mov    %eax,(%esp)
c010f06d:	e8 e1 fe ff ff       	call   c010ef53 <page2kva>
c010f072:	8b 55 08             	mov    0x8(%ebp),%edx
c010f075:	c1 ea 08             	shr    $0x8,%edx
c010f078:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f07b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f07f:	74 0b                	je     c010f08c <swapfs_write+0x2b>
c010f081:	8b 15 dc 41 15 c0    	mov    0xc01541dc,%edx
c010f087:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010f08a:	72 23                	jb     c010f0af <swapfs_write+0x4e>
c010f08c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f08f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f093:	c7 44 24 08 a5 89 11 	movl   $0xc01189a5,0x8(%esp)
c010f09a:	c0 
c010f09b:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010f0a2:	00 
c010f0a3:	c7 04 24 8f 89 11 c0 	movl   $0xc011898f,(%esp)
c010f0aa:	e8 19 1e ff ff       	call   c0100ec8 <__panic>
c010f0af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f0b2:	c1 e2 03             	shl    $0x3,%edx
c010f0b5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010f0bc:	00 
c010f0bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f0c1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f0c5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010f0cc:	e8 2f 2e ff ff       	call   c0101f00 <ide_write_secs>
}
c010f0d1:	c9                   	leave  
c010f0d2:	c3                   	ret    

c010f0d3 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f0d3:	55                   	push   %ebp
c010f0d4:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f0d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0d9:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f0dc:	5d                   	pop    %ebp
c010f0dd:	c3                   	ret    

c010f0de <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010f0de:	55                   	push   %ebp
c010f0df:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f0e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0e4:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f0e7:	5d                   	pop    %ebp
c010f0e8:	c3                   	ret    

c010f0e9 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f0e9:	55                   	push   %ebp
c010f0ea:	89 e5                	mov    %esp,%ebp
c010f0ec:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f0ef:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010f0f6:	e8 02 5c ff ff       	call   c0104cfd <kmalloc>
c010f0fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f0fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f102:	74 09                	je     c010f10d <__alloc_inode+0x24>
        node->in_type = type;
c010f104:	8b 55 08             	mov    0x8(%ebp),%edx
c010f107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f10a:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f10d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f110:	c9                   	leave  
c010f111:	c3                   	ret    

c010f112 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f112:	55                   	push   %ebp
c010f113:	89 e5                	mov    %esp,%ebp
c010f115:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d [inode_init]\n", openstep++);
c010f118:	a1 68 30 15 c0       	mov    0xc0153068,%eax
c010f11d:	8d 50 01             	lea    0x1(%eax),%edx
c010f120:	89 15 68 30 15 c0    	mov    %edx,0xc0153068
c010f126:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f12a:	c7 04 24 c4 89 11 c0 	movl   $0xc01189c4,(%esp)
c010f131:	e8 2f 12 ff ff       	call   c0100365 <cprintf>
    node->ref_count = 0;
c010f136:	8b 45 08             	mov    0x8(%ebp),%eax
c010f139:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f140:	8b 45 08             	mov    0x8(%ebp),%eax
c010f143:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f14a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f14d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f150:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f153:	8b 45 08             	mov    0x8(%ebp),%eax
c010f156:	8b 55 10             	mov    0x10(%ebp),%edx
c010f159:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f15c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f15f:	89 04 24             	mov    %eax,(%esp)
c010f162:	e8 99 00 00 00       	call   c010f200 <inode_ref_inc>
}
c010f167:	c9                   	leave  
c010f168:	c3                   	ret    

c010f169 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f169:	55                   	push   %ebp
c010f16a:	89 e5                	mov    %esp,%ebp
c010f16c:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d [inode_kill]\n", openstep++);
c010f16f:	a1 68 30 15 c0       	mov    0xc0153068,%eax
c010f174:	8d 50 01             	lea    0x1(%eax),%edx
c010f177:	89 15 68 30 15 c0    	mov    %edx,0xc0153068
c010f17d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f181:	c7 04 24 d5 89 11 c0 	movl   $0xc01189d5,(%esp)
c010f188:	e8 d8 11 ff ff       	call   c0100365 <cprintf>
    assert(inode_ref_count(node) == 0);
c010f18d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f190:	89 04 24             	mov    %eax,(%esp)
c010f193:	e8 3b ff ff ff       	call   c010f0d3 <inode_ref_count>
c010f198:	85 c0                	test   %eax,%eax
c010f19a:	74 24                	je     c010f1c0 <inode_kill+0x57>
c010f19c:	c7 44 24 0c e6 89 11 	movl   $0xc01189e6,0xc(%esp)
c010f1a3:	c0 
c010f1a4:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f1ab:	c0 
c010f1ac:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c010f1b3:	00 
c010f1b4:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f1bb:	e8 08 1d ff ff       	call   c0100ec8 <__panic>
    assert(inode_open_count(node) == 0);
c010f1c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1c3:	89 04 24             	mov    %eax,(%esp)
c010f1c6:	e8 13 ff ff ff       	call   c010f0de <inode_open_count>
c010f1cb:	85 c0                	test   %eax,%eax
c010f1cd:	74 24                	je     c010f1f3 <inode_kill+0x8a>
c010f1cf:	c7 44 24 0c 2a 8a 11 	movl   $0xc0118a2a,0xc(%esp)
c010f1d6:	c0 
c010f1d7:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f1de:	c0 
c010f1df:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010f1e6:	00 
c010f1e7:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f1ee:	e8 d5 1c ff ff       	call   c0100ec8 <__panic>
    kfree(node);
c010f1f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1f6:	89 04 24             	mov    %eax,(%esp)
c010f1f9:	e8 1a 5b ff ff       	call   c0104d18 <kfree>
}
c010f1fe:	c9                   	leave  
c010f1ff:	c3                   	ret    

c010f200 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f200:	55                   	push   %ebp
c010f201:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f203:	8b 45 08             	mov    0x8(%ebp),%eax
c010f206:	8b 40 30             	mov    0x30(%eax),%eax
c010f209:	8d 50 01             	lea    0x1(%eax),%edx
c010f20c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f20f:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f212:	8b 45 08             	mov    0x8(%ebp),%eax
c010f215:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f218:	5d                   	pop    %ebp
c010f219:	c3                   	ret    

c010f21a <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f21a:	55                   	push   %ebp
c010f21b:	89 e5                	mov    %esp,%ebp
c010f21d:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010f220:	8b 45 08             	mov    0x8(%ebp),%eax
c010f223:	89 04 24             	mov    %eax,(%esp)
c010f226:	e8 a8 fe ff ff       	call   c010f0d3 <inode_ref_count>
c010f22b:	85 c0                	test   %eax,%eax
c010f22d:	7f 24                	jg     c010f253 <inode_ref_dec+0x39>
c010f22f:	c7 44 24 0c 46 8a 11 	movl   $0xc0118a46,0xc(%esp)
c010f236:	c0 
c010f237:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f23e:	c0 
c010f23f:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c010f246:	00 
c010f247:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f24e:	e8 75 1c ff ff       	call   c0100ec8 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f253:	8b 45 08             	mov    0x8(%ebp),%eax
c010f256:	8b 40 30             	mov    0x30(%eax),%eax
c010f259:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f25c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f25f:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f262:	8b 45 08             	mov    0x8(%ebp),%eax
c010f265:	8b 40 30             	mov    0x30(%eax),%eax
c010f268:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f26b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f26f:	0f 85 8d 00 00 00    	jne    c010f302 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f275:	8b 45 08             	mov    0x8(%ebp),%eax
c010f278:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f27b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f27f:	74 17                	je     c010f298 <inode_ref_dec+0x7e>
c010f281:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f284:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f287:	85 c0                	test   %eax,%eax
c010f289:	74 0d                	je     c010f298 <inode_ref_dec+0x7e>
c010f28b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f28e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f291:	8b 40 24             	mov    0x24(%eax),%eax
c010f294:	85 c0                	test   %eax,%eax
c010f296:	75 24                	jne    c010f2bc <inode_ref_dec+0xa2>
c010f298:	c7 44 24 0c 60 8a 11 	movl   $0xc0118a60,0xc(%esp)
c010f29f:	c0 
c010f2a0:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f2a7:	c0 
c010f2a8:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010f2af:	00 
c010f2b0:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f2b7:	e8 0c 1c ff ff       	call   c0100ec8 <__panic>
c010f2bc:	c7 44 24 04 b0 8a 11 	movl   $0xc0118ab0,0x4(%esp)
c010f2c3:	c0 
c010f2c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2c7:	89 04 24             	mov    %eax,(%esp)
c010f2ca:	e8 39 01 00 00       	call   c010f408 <inode_check>
c010f2cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f2d2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f2d5:	8b 40 24             	mov    0x24(%eax),%eax
c010f2d8:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2db:	89 14 24             	mov    %edx,(%esp)
c010f2de:	ff d0                	call   *%eax
c010f2e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f2e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f2e7:	74 19                	je     c010f302 <inode_ref_dec+0xe8>
c010f2e9:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f2ed:	74 13                	je     c010f302 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f2ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f2f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f2f6:	c7 04 24 b8 8a 11 c0 	movl   $0xc0118ab8,(%esp)
c010f2fd:	e8 63 10 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010f302:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f305:	c9                   	leave  
c010f306:	c3                   	ret    

c010f307 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f307:	55                   	push   %ebp
c010f308:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f30a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f30d:	8b 40 34             	mov    0x34(%eax),%eax
c010f310:	8d 50 01             	lea    0x1(%eax),%edx
c010f313:	8b 45 08             	mov    0x8(%ebp),%eax
c010f316:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f319:	8b 45 08             	mov    0x8(%ebp),%eax
c010f31c:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f31f:	5d                   	pop    %ebp
c010f320:	c3                   	ret    

c010f321 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f321:	55                   	push   %ebp
c010f322:	89 e5                	mov    %esp,%ebp
c010f324:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f327:	8b 45 08             	mov    0x8(%ebp),%eax
c010f32a:	89 04 24             	mov    %eax,(%esp)
c010f32d:	e8 ac fd ff ff       	call   c010f0de <inode_open_count>
c010f332:	85 c0                	test   %eax,%eax
c010f334:	7f 24                	jg     c010f35a <inode_open_dec+0x39>
c010f336:	c7 44 24 0c d8 8a 11 	movl   $0xc0118ad8,0xc(%esp)
c010f33d:	c0 
c010f33e:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f345:	c0 
c010f346:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010f34d:	00 
c010f34e:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f355:	e8 6e 1b ff ff       	call   c0100ec8 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f35a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f35d:	8b 40 34             	mov    0x34(%eax),%eax
c010f360:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f363:	8b 45 08             	mov    0x8(%ebp),%eax
c010f366:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f369:	8b 45 08             	mov    0x8(%ebp),%eax
c010f36c:	8b 40 34             	mov    0x34(%eax),%eax
c010f36f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f372:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f376:	0f 85 87 00 00 00    	jne    c010f403 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f37c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f37f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f382:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f386:	74 17                	je     c010f39f <inode_open_dec+0x7e>
c010f388:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f38b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f38e:	85 c0                	test   %eax,%eax
c010f390:	74 0d                	je     c010f39f <inode_open_dec+0x7e>
c010f392:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f395:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f398:	8b 40 08             	mov    0x8(%eax),%eax
c010f39b:	85 c0                	test   %eax,%eax
c010f39d:	75 24                	jne    c010f3c3 <inode_open_dec+0xa2>
c010f39f:	c7 44 24 0c f4 8a 11 	movl   $0xc0118af4,0xc(%esp)
c010f3a6:	c0 
c010f3a7:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f3ae:	c0 
c010f3af:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c010f3b6:	00 
c010f3b7:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f3be:	e8 05 1b ff ff       	call   c0100ec8 <__panic>
c010f3c3:	c7 44 24 04 42 8b 11 	movl   $0xc0118b42,0x4(%esp)
c010f3ca:	c0 
c010f3cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3ce:	89 04 24             	mov    %eax,(%esp)
c010f3d1:	e8 32 00 00 00       	call   c010f408 <inode_check>
c010f3d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3d9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3dc:	8b 40 08             	mov    0x8(%eax),%eax
c010f3df:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3e2:	89 14 24             	mov    %edx,(%esp)
c010f3e5:	ff d0                	call   *%eax
c010f3e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f3ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f3ee:	74 13                	je     c010f403 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f3f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f3f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f3f7:	c7 04 24 48 8b 11 c0 	movl   $0xc0118b48,(%esp)
c010f3fe:	e8 62 0f ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010f403:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f406:	c9                   	leave  
c010f407:	c3                   	ret    

c010f408 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f408:	55                   	push   %ebp
c010f409:	89 e5                	mov    %esp,%ebp
c010f40b:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f40e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f412:	74 0a                	je     c010f41e <inode_check+0x16>
c010f414:	8b 45 08             	mov    0x8(%ebp),%eax
c010f417:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f41a:	85 c0                	test   %eax,%eax
c010f41c:	75 24                	jne    c010f442 <inode_check+0x3a>
c010f41e:	c7 44 24 0c 68 8b 11 	movl   $0xc0118b68,0xc(%esp)
c010f425:	c0 
c010f426:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f42d:	c0 
c010f42e:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010f435:	00 
c010f436:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f43d:	e8 86 1a ff ff       	call   c0100ec8 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f442:	8b 45 08             	mov    0x8(%ebp),%eax
c010f445:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f448:	8b 00                	mov    (%eax),%eax
c010f44a:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f44f:	74 24                	je     c010f475 <inode_check+0x6d>
c010f451:	c7 44 24 0c 90 8b 11 	movl   $0xc0118b90,0xc(%esp)
c010f458:	c0 
c010f459:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f460:	c0 
c010f461:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f468:	00 
c010f469:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f470:	e8 53 1a ff ff       	call   c0100ec8 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f475:	8b 45 08             	mov    0x8(%ebp),%eax
c010f478:	89 04 24             	mov    %eax,(%esp)
c010f47b:	e8 53 fc ff ff       	call   c010f0d3 <inode_ref_count>
c010f480:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f483:	8b 45 08             	mov    0x8(%ebp),%eax
c010f486:	89 04 24             	mov    %eax,(%esp)
c010f489:	e8 50 fc ff ff       	call   c010f0de <inode_open_count>
c010f48e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f491:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f494:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f497:	7c 06                	jl     c010f49f <inode_check+0x97>
c010f499:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f49d:	79 24                	jns    c010f4c3 <inode_check+0xbb>
c010f49f:	c7 44 24 0c b8 8b 11 	movl   $0xc0118bb8,0xc(%esp)
c010f4a6:	c0 
c010f4a7:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f4ae:	c0 
c010f4af:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010f4b6:	00 
c010f4b7:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f4be:	e8 05 1a ff ff       	call   c0100ec8 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f4c3:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f4ca:	7f 09                	jg     c010f4d5 <inode_check+0xcd>
c010f4cc:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f4d3:	7e 24                	jle    c010f4f9 <inode_check+0xf1>
c010f4d5:	c7 44 24 0c e4 8b 11 	movl   $0xc0118be4,0xc(%esp)
c010f4dc:	c0 
c010f4dd:	c7 44 24 08 01 8a 11 	movl   $0xc0118a01,0x8(%esp)
c010f4e4:	c0 
c010f4e5:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010f4ec:	00 
c010f4ed:	c7 04 24 16 8a 11 c0 	movl   $0xc0118a16,(%esp)
c010f4f4:	e8 cf 19 ff ff       	call   c0100ec8 <__panic>
}
c010f4f9:	c9                   	leave  
c010f4fa:	c3                   	ret    

c010f4fb <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f4fb:	55                   	push   %ebp
c010f4fc:	89 e5                	mov    %esp,%ebp
c010f4fe:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f501:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f508:	e8 f0 57 ff ff       	call   c0104cfd <kmalloc>
c010f50d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f510:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f514:	74 09                	je     c010f51f <__alloc_fs+0x24>
        fs->fs_type = type;
c010f516:	8b 55 08             	mov    0x8(%ebp),%edx
c010f519:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f51c:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f51f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f522:	c9                   	leave  
c010f523:	c3                   	ret    

c010f524 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f524:	55                   	push   %ebp
c010f525:	89 e5                	mov    %esp,%ebp
c010f527:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f52a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f531:	00 
c010f532:	c7 04 24 70 30 15 c0 	movl   $0xc0153070,(%esp)
c010f539:	e8 51 a6 ff ff       	call   c0109b8f <sem_init>
    vfs_devlist_init();
c010f53e:	e8 63 01 00 00       	call   c010f6a6 <vfs_devlist_init>
}
c010f543:	c9                   	leave  
c010f544:	c3                   	ret    

c010f545 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f545:	55                   	push   %ebp
c010f546:	89 e5                	mov    %esp,%ebp
c010f548:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f54b:	c7 04 24 70 30 15 c0 	movl   $0xc0153070,(%esp)
c010f552:	e8 c6 a7 ff ff       	call   c0109d1d <down>
}
c010f557:	c9                   	leave  
c010f558:	c3                   	ret    

c010f559 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f559:	55                   	push   %ebp
c010f55a:	89 e5                	mov    %esp,%ebp
c010f55c:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f55f:	c7 04 24 70 30 15 c0 	movl   $0xc0153070,(%esp)
c010f566:	e8 97 a7 ff ff       	call   c0109d02 <up>
}
c010f56b:	c9                   	leave  
c010f56c:	c3                   	ret    

c010f56d <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f56d:	55                   	push   %ebp
c010f56e:	89 e5                	mov    %esp,%ebp
c010f570:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f573:	e8 cd ff ff ff       	call   c010f545 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f578:	a1 7c 30 15 c0       	mov    0xc015307c,%eax
c010f57d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f580:	8b 45 08             	mov    0x8(%ebp),%eax
c010f583:	a3 7c 30 15 c0       	mov    %eax,0xc015307c
    }
    unlock_bootfs();
c010f588:	e8 cc ff ff ff       	call   c010f559 <unlock_bootfs>
    if (old != NULL) {
c010f58d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f591:	74 0b                	je     c010f59e <change_bootfs+0x31>
        vop_ref_dec(old);
c010f593:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f596:	89 04 24             	mov    %eax,(%esp)
c010f599:	e8 7c fc ff ff       	call   c010f21a <inode_ref_dec>
    }
}
c010f59e:	c9                   	leave  
c010f59f:	c3                   	ret    

c010f5a0 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f5a0:	55                   	push   %ebp
c010f5a1:	89 e5                	mov    %esp,%ebp
c010f5a3:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f5a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f5ad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f5b1:	74 62                	je     c010f615 <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f5b3:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f5ba:	00 
c010f5bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5be:	89 04 24             	mov    %eax,(%esp)
c010f5c1:	e8 cb 5f 00 00       	call   c0115591 <strchr>
c010f5c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f5c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f5cd:	74 0d                	je     c010f5dc <vfs_set_bootfs+0x3c>
c010f5cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5d2:	83 c0 01             	add    $0x1,%eax
c010f5d5:	0f b6 00             	movzbl (%eax),%eax
c010f5d8:	84 c0                	test   %al,%al
c010f5da:	74 07                	je     c010f5e3 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f5dc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f5e1:	eb 42                	jmp    c010f625 <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f5e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5e6:	89 04 24             	mov    %eax,(%esp)
c010f5e9:	e8 3b 11 00 00       	call   c0110729 <vfs_chdir>
c010f5ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f5f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f5f5:	74 05                	je     c010f5fc <vfs_set_bootfs+0x5c>
            return ret;
c010f5f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5fa:	eb 29                	jmp    c010f625 <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f5fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f5ff:	89 04 24             	mov    %eax,(%esp)
c010f602:	e8 f6 0f 00 00       	call   c01105fd <vfs_get_curdir>
c010f607:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f60a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f60e:	74 05                	je     c010f615 <vfs_set_bootfs+0x75>
            return ret;
c010f610:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f613:	eb 10                	jmp    c010f625 <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f615:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f618:	89 04 24             	mov    %eax,(%esp)
c010f61b:	e8 4d ff ff ff       	call   c010f56d <change_bootfs>
    return 0;
c010f620:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f625:	c9                   	leave  
c010f626:	c3                   	ret    

c010f627 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f627:	55                   	push   %ebp
c010f628:	89 e5                	mov    %esp,%ebp
c010f62a:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f62d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f634:	a1 7c 30 15 c0       	mov    0xc015307c,%eax
c010f639:	85 c0                	test   %eax,%eax
c010f63b:	74 25                	je     c010f662 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f63d:	e8 03 ff ff ff       	call   c010f545 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f642:	a1 7c 30 15 c0       	mov    0xc015307c,%eax
c010f647:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f64a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f64e:	74 0d                	je     c010f65d <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f650:	a1 7c 30 15 c0       	mov    0xc015307c,%eax
c010f655:	89 04 24             	mov    %eax,(%esp)
c010f658:	e8 a3 fb ff ff       	call   c010f200 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f65d:	e8 f7 fe ff ff       	call   c010f559 <unlock_bootfs>
    }
    if (node == NULL) {
c010f662:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f666:	75 07                	jne    c010f66f <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f668:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f66d:	eb 0d                	jmp    c010f67c <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f66f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f672:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f675:	89 10                	mov    %edx,(%eax)
    return 0;
c010f677:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f67c:	c9                   	leave  
c010f67d:	c3                   	ret    

c010f67e <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f67e:	55                   	push   %ebp
c010f67f:	89 e5                	mov    %esp,%ebp
c010f681:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f684:	c7 04 24 8c 30 15 c0 	movl   $0xc015308c,(%esp)
c010f68b:	e8 8d a6 ff ff       	call   c0109d1d <down>
}
c010f690:	c9                   	leave  
c010f691:	c3                   	ret    

c010f692 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f692:	55                   	push   %ebp
c010f693:	89 e5                	mov    %esp,%ebp
c010f695:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f698:	c7 04 24 8c 30 15 c0 	movl   $0xc015308c,(%esp)
c010f69f:	e8 5e a6 ff ff       	call   c0109d02 <up>
}
c010f6a4:	c9                   	leave  
c010f6a5:	c3                   	ret    

c010f6a6 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f6a6:	55                   	push   %ebp
c010f6a7:	89 e5                	mov    %esp,%ebp
c010f6a9:	83 ec 28             	sub    $0x28,%esp
c010f6ac:	c7 45 f4 84 30 15 c0 	movl   $0xc0153084,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f6b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f6b9:	89 50 04             	mov    %edx,0x4(%eax)
c010f6bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6bf:	8b 50 04             	mov    0x4(%eax),%edx
c010f6c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6c5:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f6c7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f6ce:	00 
c010f6cf:	c7 04 24 8c 30 15 c0 	movl   $0xc015308c,(%esp)
c010f6d6:	e8 b4 a4 ff ff       	call   c0109b8f <sem_init>
}
c010f6db:	c9                   	leave  
c010f6dc:	c3                   	ret    

c010f6dd <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f6dd:	55                   	push   %ebp
c010f6de:	89 e5                	mov    %esp,%ebp
c010f6e0:	83 ec 38             	sub    $0x38,%esp
c010f6e3:	c7 45 e8 84 30 15 c0 	movl   $0xc0153084,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f6ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6ed:	8b 40 04             	mov    0x4(%eax),%eax
c010f6f0:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f6f3:	0f 94 c0             	sete   %al
c010f6f6:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f6f9:	85 c0                	test   %eax,%eax
c010f6fb:	75 57                	jne    c010f754 <vfs_cleanup+0x77>
        lock_vdev_list();
c010f6fd:	e8 7c ff ff ff       	call   c010f67e <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f702:	c7 45 f0 84 30 15 c0 	movl   $0xc0153084,-0x10(%ebp)
c010f709:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f70c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f70f:	eb 27                	jmp    c010f738 <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f711:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f714:	83 e8 10             	sub    $0x10,%eax
c010f717:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f71a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f71d:	8b 40 08             	mov    0x8(%eax),%eax
c010f720:	85 c0                	test   %eax,%eax
c010f722:	74 14                	je     c010f738 <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f724:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f727:	8b 40 08             	mov    0x8(%eax),%eax
c010f72a:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f72d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f730:	8b 52 08             	mov    0x8(%edx),%edx
c010f733:	89 14 24             	mov    %edx,(%esp)
c010f736:	ff d0                	call   *%eax
c010f738:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f73b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f73e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f741:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f744:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f747:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f74a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f74d:	75 c2                	jne    c010f711 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f74f:	e8 3e ff ff ff       	call   c010f692 <unlock_vdev_list>
    }
}
c010f754:	c9                   	leave  
c010f755:	c3                   	ret    

c010f756 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f756:	55                   	push   %ebp
c010f757:	89 e5                	mov    %esp,%ebp
c010f759:	83 ec 38             	sub    $0x38,%esp
    cprintf("[vfs_get_root]\n");
c010f75c:	c7 04 24 20 8c 11 c0 	movl   $0xc0118c20,(%esp)
c010f763:	e8 fd 0b ff ff       	call   c0100365 <cprintf>
    assert(devname != NULL);
c010f768:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f76c:	75 24                	jne    c010f792 <vfs_get_root+0x3c>
c010f76e:	c7 44 24 0c 30 8c 11 	movl   $0xc0118c30,0xc(%esp)
c010f775:	c0 
c010f776:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010f77d:	c0 
c010f77e:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010f785:	00 
c010f786:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010f78d:	e8 36 17 ff ff       	call   c0100ec8 <__panic>
    int ret = -E_NO_DEV;
c010f792:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f799:	c7 45 e0 84 30 15 c0 	movl   $0xc0153084,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f7a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f7a3:	8b 40 04             	mov    0x4(%eax),%eax
c010f7a6:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f7a9:	0f 94 c0             	sete   %al
c010f7ac:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f7af:	85 c0                	test   %eax,%eax
c010f7b1:	0f 85 c3 00 00 00    	jne    c010f87a <vfs_get_root+0x124>
        lock_vdev_list();
c010f7b7:	e8 c2 fe ff ff       	call   c010f67e <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f7bc:	c7 45 e8 84 30 15 c0 	movl   $0xc0153084,-0x18(%ebp)
c010f7c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f7c9:	e9 8c 00 00 00       	jmp    c010f85a <vfs_get_root+0x104>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f7ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f7d1:	83 e8 10             	sub    $0x10,%eax
c010f7d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f7d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7da:	8b 00                	mov    (%eax),%eax
c010f7dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7e3:	89 04 24             	mov    %eax,(%esp)
c010f7e6:	e8 07 5d 00 00       	call   c01154f2 <strcmp>
c010f7eb:	85 c0                	test   %eax,%eax
c010f7ed:	75 6b                	jne    c010f85a <vfs_get_root+0x104>
                    struct inode *found = NULL;
c010f7ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f7f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7f9:	8b 40 08             	mov    0x8(%eax),%eax
c010f7fc:	85 c0                	test   %eax,%eax
c010f7fe:	74 19                	je     c010f819 <vfs_get_root+0xc3>
                        found = fsop_get_root(vdev->fs);
c010f800:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f803:	8b 40 08             	mov    0x8(%eax),%eax
c010f806:	8b 40 74             	mov    0x74(%eax),%eax
c010f809:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f80c:	8b 52 08             	mov    0x8(%edx),%edx
c010f80f:	89 14 24             	mov    %edx,(%esp)
c010f812:	ff d0                	call   *%eax
c010f814:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f817:	eb 21                	jmp    c010f83a <vfs_get_root+0xe4>
                    }
                    else if (!vdev->mountable) {
c010f819:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f81c:	8b 40 0c             	mov    0xc(%eax),%eax
c010f81f:	85 c0                	test   %eax,%eax
c010f821:	75 17                	jne    c010f83a <vfs_get_root+0xe4>
                        vop_ref_inc(vdev->devnode);
c010f823:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f826:	8b 40 04             	mov    0x4(%eax),%eax
c010f829:	89 04 24             	mov    %eax,(%esp)
c010f82c:	e8 cf f9 ff ff       	call   c010f200 <inode_ref_inc>
                        found = vdev->devnode;
c010f831:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f834:	8b 40 04             	mov    0x4(%eax),%eax
c010f837:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f83a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f83e:	74 11                	je     c010f851 <vfs_get_root+0xfb>
                        ret = 0, *node_store = found;
c010f840:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f847:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f84a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f84d:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f84f:	eb 24                	jmp    c010f875 <vfs_get_root+0x11f>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f851:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f858:	eb 1b                	jmp    c010f875 <vfs_get_root+0x11f>
c010f85a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f85d:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f860:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f863:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f866:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f869:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f86c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f86f:	0f 85 59 ff ff ff    	jne    c010f7ce <vfs_get_root+0x78>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f875:	e8 18 fe ff ff       	call   c010f692 <unlock_vdev_list>
    }
    return ret;
c010f87a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f87d:	c9                   	leave  
c010f87e:	c3                   	ret    

c010f87f <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f87f:	55                   	push   %ebp
c010f880:	89 e5                	mov    %esp,%ebp
c010f882:	83 ec 28             	sub    $0x28,%esp
    cprintf("[vfs_get_devname]\n");
c010f885:	c7 04 24 6a 8c 11 c0 	movl   $0xc0118c6a,(%esp)
c010f88c:	e8 d4 0a ff ff       	call   c0100365 <cprintf>
    assert(fs != NULL);
c010f891:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f895:	75 24                	jne    c010f8bb <vfs_get_devname+0x3c>
c010f897:	c7 44 24 0c 7d 8c 11 	movl   $0xc0118c7d,0xc(%esp)
c010f89e:	c0 
c010f89f:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010f8a6:	c0 
c010f8a7:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010f8ae:	00 
c010f8af:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010f8b6:	e8 0d 16 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f8bb:	c7 45 f0 84 30 15 c0 	movl   $0xc0153084,-0x10(%ebp)
c010f8c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f8c8:	eb 1b                	jmp    c010f8e5 <vfs_get_devname+0x66>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f8ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8cd:	83 e8 10             	sub    $0x10,%eax
c010f8d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f8d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8d6:	8b 40 08             	mov    0x8(%eax),%eax
c010f8d9:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f8dc:	75 07                	jne    c010f8e5 <vfs_get_devname+0x66>
            return vdev->devname;
c010f8de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8e1:	8b 00                	mov    (%eax),%eax
c010f8e3:	eb 1c                	jmp    c010f901 <vfs_get_devname+0x82>
c010f8e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f8eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f8ee:	8b 40 04             	mov    0x4(%eax),%eax
const char *
vfs_get_devname(struct fs *fs) {
    cprintf("[vfs_get_devname]\n");
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f8f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f8f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f8fa:	75 ce                	jne    c010f8ca <vfs_get_devname+0x4b>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f8fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f901:	c9                   	leave  
c010f902:	c3                   	ret    

c010f903 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f903:	55                   	push   %ebp
c010f904:	89 e5                	mov    %esp,%ebp
c010f906:	83 ec 28             	sub    $0x28,%esp
    cprintf("[check_devname_conflict]\n");
c010f909:	c7 04 24 88 8c 11 c0 	movl   $0xc0118c88,(%esp)
c010f910:	e8 50 0a ff ff       	call   c0100365 <cprintf>
    list_entry_t *list = &vdev_list, *le = list;
c010f915:	c7 45 f0 84 30 15 c0 	movl   $0xc0153084,-0x10(%ebp)
c010f91c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f91f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f922:	eb 28                	jmp    c010f94c <check_devname_conflict+0x49>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f924:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f927:	83 e8 10             	sub    $0x10,%eax
c010f92a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f92d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f930:	8b 00                	mov    (%eax),%eax
c010f932:	8b 55 08             	mov    0x8(%ebp),%edx
c010f935:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f939:	89 04 24             	mov    %eax,(%esp)
c010f93c:	e8 b1 5b 00 00       	call   c01154f2 <strcmp>
c010f941:	85 c0                	test   %eax,%eax
c010f943:	75 07                	jne    c010f94c <check_devname_conflict+0x49>
            return 0;
c010f945:	b8 00 00 00 00       	mov    $0x0,%eax
c010f94a:	eb 1c                	jmp    c010f968 <check_devname_conflict+0x65>
c010f94c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f94f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f952:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f955:	8b 40 04             	mov    0x4(%eax),%eax
 */
static bool
check_devname_conflict(const char *devname) {
    cprintf("[check_devname_conflict]\n");
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f958:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f95b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f95e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f961:	75 c1                	jne    c010f924 <check_devname_conflict+0x21>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f963:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f968:	c9                   	leave  
c010f969:	c3                   	ret    

c010f96a <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f96a:	55                   	push   %ebp
c010f96b:	89 e5                	mov    %esp,%ebp
c010f96d:	83 ec 48             	sub    $0x48,%esp
    cprintf("[vfs_do_add] Add a new device to the VFS layer's device table\n");
c010f970:	c7 04 24 a4 8c 11 c0 	movl   $0xc0118ca4,(%esp)
c010f977:	e8 e9 09 ff ff       	call   c0100365 <cprintf>
    assert(devname != NULL);
c010f97c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f980:	75 24                	jne    c010f9a6 <vfs_do_add+0x3c>
c010f982:	c7 44 24 0c 30 8c 11 	movl   $0xc0118c30,0xc(%esp)
c010f989:	c0 
c010f98a:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010f991:	c0 
c010f992:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c010f999:	00 
c010f99a:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010f9a1:	e8 22 15 ff ff       	call   c0100ec8 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f9a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f9aa:	75 06                	jne    c010f9b2 <vfs_do_add+0x48>
c010f9ac:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f9b0:	74 37                	je     c010f9e9 <vfs_do_add+0x7f>
c010f9b2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f9b6:	74 0d                	je     c010f9c5 <vfs_do_add+0x5b>
c010f9b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f9bb:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f9be:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f9c3:	74 24                	je     c010f9e9 <vfs_do_add+0x7f>
c010f9c5:	c7 44 24 0c e4 8c 11 	movl   $0xc0118ce4,0xc(%esp)
c010f9cc:	c0 
c010f9cd:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010f9d4:	c0 
c010f9d5:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
c010f9dc:	00 
c010f9dd:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010f9e4:	e8 df 14 ff ff       	call   c0100ec8 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f9e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9ec:	89 04 24             	mov    %eax,(%esp)
c010f9ef:	e8 06 5a 00 00       	call   c01153fa <strlen>
c010f9f4:	83 f8 1f             	cmp    $0x1f,%eax
c010f9f7:	76 0a                	jbe    c010fa03 <vfs_do_add+0x99>
        return -E_TOO_BIG;
c010f9f9:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f9fe:	e9 00 01 00 00       	jmp    c010fb03 <vfs_do_add+0x199>
    }

    int ret = -E_NO_MEM;
c010fa03:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010fa0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa0d:	89 04 24             	mov    %eax,(%esp)
c010fa10:	e8 f1 09 ff ff       	call   c0100406 <strdup>
c010fa15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa1c:	75 08                	jne    c010fa26 <vfs_do_add+0xbc>
        return ret;
c010fa1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa21:	e9 dd 00 00 00       	jmp    c010fb03 <vfs_do_add+0x199>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010fa26:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010fa2d:	e8 cb 52 ff ff       	call   c0104cfd <kmalloc>
c010fa32:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fa35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fa39:	75 05                	jne    c010fa40 <vfs_do_add+0xd6>
        goto failed_cleanup_name;
c010fa3b:	e9 b5 00 00 00       	jmp    c010faf5 <vfs_do_add+0x18b>
    }

    ret = -E_EXISTS;
c010fa40:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010fa47:	e8 32 fc ff ff       	call   c010f67e <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010fa4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa4f:	89 04 24             	mov    %eax,(%esp)
c010fa52:	e8 ac fe ff ff       	call   c010f903 <check_devname_conflict>
c010fa57:	85 c0                	test   %eax,%eax
c010fa59:	75 16                	jne    c010fa71 <vfs_do_add+0x107>
        unlock_vdev_list();
c010fa5b:	e8 32 fc ff ff       	call   c010f692 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010fa60:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010fa61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa64:	89 04 24             	mov    %eax,(%esp)
c010fa67:	e8 ac 52 ff ff       	call   c0104d18 <kfree>
c010fa6c:	e9 84 00 00 00       	jmp    c010faf5 <vfs_do_add+0x18b>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010fa71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa74:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fa77:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010fa79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa7c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010fa7f:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010fa82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa85:	8b 55 14             	mov    0x14(%ebp),%edx
c010fa88:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010fa8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa8e:	8b 55 10             	mov    0x10(%ebp),%edx
c010fa91:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010fa94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa97:	83 c0 10             	add    $0x10,%eax
c010fa9a:	c7 45 e8 84 30 15 c0 	movl   $0xc0153084,-0x18(%ebp)
c010faa1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010faa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010faa7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010faaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010faad:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010fab0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fab3:	8b 40 04             	mov    0x4(%eax),%eax
c010fab6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010fab9:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010fabc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010fabf:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010fac2:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010fac5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fac8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010facb:	89 10                	mov    %edx,(%eax)
c010facd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fad0:	8b 10                	mov    (%eax),%edx
c010fad2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010fad5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010fad8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fadb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fade:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010fae1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fae4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fae7:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010fae9:	e8 a4 fb ff ff       	call   c010f692 <unlock_vdev_list>
    return 0;
c010faee:	b8 00 00 00 00       	mov    $0x0,%eax
c010faf3:	eb 0e                	jmp    c010fb03 <vfs_do_add+0x199>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010faf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010faf8:	89 04 24             	mov    %eax,(%esp)
c010fafb:	e8 18 52 ff ff       	call   c0104d18 <kfree>
    return ret;
c010fb00:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fb03:	c9                   	leave  
c010fb04:	c3                   	ret    

c010fb05 <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010fb05:	55                   	push   %ebp
c010fb06:	89 e5                	mov    %esp,%ebp
c010fb08:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010fb0b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010fb12:	00 
c010fb13:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb16:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fb1a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010fb21:	00 
c010fb22:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb25:	89 04 24             	mov    %eax,(%esp)
c010fb28:	e8 3d fe ff ff       	call   c010f96a <vfs_do_add>
}
c010fb2d:	c9                   	leave  
c010fb2e:	c3                   	ret    

c010fb2f <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010fb2f:	55                   	push   %ebp
c010fb30:	89 e5                	mov    %esp,%ebp
c010fb32:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010fb35:	8b 45 10             	mov    0x10(%ebp),%eax
c010fb38:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010fb3c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010fb43:	00 
c010fb44:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb4e:	89 04 24             	mov    %eax,(%esp)
c010fb51:	e8 14 fe ff ff       	call   c010f96a <vfs_do_add>
}
c010fb56:	c9                   	leave  
c010fb57:	c3                   	ret    

c010fb58 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010fb58:	55                   	push   %ebp
c010fb59:	89 e5                	mov    %esp,%ebp
c010fb5b:	83 ec 28             	sub    $0x28,%esp
        cprintf("[find_mount] Look for a mountable device named DEVNAME\n");
c010fb5e:	c7 04 24 40 8d 11 c0 	movl   $0xc0118d40,(%esp)
c010fb65:	e8 fb 07 ff ff       	call   c0100365 <cprintf>

    assert(devname != NULL);
c010fb6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fb6e:	75 24                	jne    c010fb94 <find_mount+0x3c>
c010fb70:	c7 44 24 0c 30 8c 11 	movl   $0xc0118c30,0xc(%esp)
c010fb77:	c0 
c010fb78:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010fb7f:	c0 
c010fb80:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010fb87:	00 
c010fb88:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010fb8f:	e8 34 13 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010fb94:	c7 45 f0 84 30 15 c0 	movl   $0xc0153084,-0x10(%ebp)
c010fb9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010fba1:	eb 3a                	jmp    c010fbdd <find_mount+0x85>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fba6:	83 e8 10             	sub    $0x10,%eax
c010fba9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010fbac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbaf:	8b 40 0c             	mov    0xc(%eax),%eax
c010fbb2:	85 c0                	test   %eax,%eax
c010fbb4:	74 27                	je     c010fbdd <find_mount+0x85>
c010fbb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fbb9:	8b 00                	mov    (%eax),%eax
c010fbbb:	8b 55 08             	mov    0x8(%ebp),%edx
c010fbbe:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fbc2:	89 04 24             	mov    %eax,(%esp)
c010fbc5:	e8 28 59 00 00       	call   c01154f2 <strcmp>
c010fbca:	85 c0                	test   %eax,%eax
c010fbcc:	75 0f                	jne    c010fbdd <find_mount+0x85>
            *vdev_store = vdev;
c010fbce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fbd1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fbd4:	89 10                	mov    %edx,(%eax)
            return 0;
c010fbd6:	b8 00 00 00 00       	mov    $0x0,%eax
c010fbdb:	eb 1c                	jmp    c010fbf9 <find_mount+0xa1>
c010fbdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbe0:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fbe3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fbe6:	8b 40 04             	mov    0x4(%eax),%eax
find_mount(const char *devname, vfs_dev_t **vdev_store) {
        cprintf("[find_mount] Look for a mountable device named DEVNAME\n");

    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010fbe9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fbec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fbef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fbf2:	75 af                	jne    c010fba3 <find_mount+0x4b>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010fbf4:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010fbf9:	c9                   	leave  
c010fbfa:	c3                   	ret    

c010fbfb <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010fbfb:	55                   	push   %ebp
c010fbfc:	89 e5                	mov    %esp,%ebp
c010fbfe:	83 ec 28             	sub    $0x28,%esp
    cprintf("[vfs_mount] Mount a filesystem\n");
c010fc01:	c7 04 24 78 8d 11 c0 	movl   $0xc0118d78,(%esp)
c010fc08:	e8 58 07 ff ff       	call   c0100365 <cprintf>
    int ret;
    lock_vdev_list();
c010fc0d:	e8 6c fa ff ff       	call   c010f67e <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fc12:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fc15:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc19:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc1c:	89 04 24             	mov    %eax,(%esp)
c010fc1f:	e8 34 ff ff ff       	call   c010fb58 <find_mount>
c010fc24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fc27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fc2b:	74 05                	je     c010fc32 <vfs_mount+0x37>
        goto out;
c010fc2d:	e9 f4 00 00 00       	jmp    c010fd26 <vfs_mount+0x12b>
    }
    if (vdev->fs != NULL) {
c010fc32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc35:	8b 40 08             	mov    0x8(%eax),%eax
c010fc38:	85 c0                	test   %eax,%eax
c010fc3a:	74 0c                	je     c010fc48 <vfs_mount+0x4d>
        ret = -E_BUSY;
c010fc3c:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010fc43:	e9 de 00 00 00       	jmp    c010fd26 <vfs_mount+0x12b>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fc48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc4b:	8b 00                	mov    (%eax),%eax
c010fc4d:	85 c0                	test   %eax,%eax
c010fc4f:	74 0a                	je     c010fc5b <vfs_mount+0x60>
c010fc51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc54:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc57:	85 c0                	test   %eax,%eax
c010fc59:	75 24                	jne    c010fc7f <vfs_mount+0x84>
c010fc5b:	c7 44 24 0c 98 8d 11 	movl   $0xc0118d98,0xc(%esp)
c010fc62:	c0 
c010fc63:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010fc6a:	c0 
c010fc6b:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010fc72:	00 
c010fc73:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010fc7a:	e8 49 12 ff ff       	call   c0100ec8 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010fc7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fc82:	8b 40 04             	mov    0x4(%eax),%eax
c010fc85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fc88:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc8c:	74 0d                	je     c010fc9b <vfs_mount+0xa0>
c010fc8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc91:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fc94:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fc99:	74 24                	je     c010fcbf <vfs_mount+0xc4>
c010fc9b:	c7 44 24 0c c4 8d 11 	movl   $0xc0118dc4,0xc(%esp)
c010fca2:	c0 
c010fca3:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010fcaa:	c0 
c010fcab:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c010fcb2:	00 
c010fcb3:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010fcba:	e8 09 12 ff ff       	call   c0100ec8 <__panic>
c010fcbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fcc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fcc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcc8:	83 c0 08             	add    $0x8,%eax
c010fccb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fccf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fcd2:	89 04 24             	mov    %eax,(%esp)
c010fcd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcd8:	ff d0                	call   *%eax
c010fcda:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fcdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fce1:	75 43                	jne    c010fd26 <vfs_mount+0x12b>
        assert(vdev->fs != NULL);
c010fce3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fce6:	8b 40 08             	mov    0x8(%eax),%eax
c010fce9:	85 c0                	test   %eax,%eax
c010fceb:	75 24                	jne    c010fd11 <vfs_mount+0x116>
c010fced:	c7 44 24 0c f7 8d 11 	movl   $0xc0118df7,0xc(%esp)
c010fcf4:	c0 
c010fcf5:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010fcfc:	c0 
c010fcfd:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c010fd04:	00 
c010fd05:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010fd0c:	e8 b7 11 ff ff       	call   c0100ec8 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010fd11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd14:	8b 00                	mov    (%eax),%eax
c010fd16:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd1a:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c010fd21:	e8 3f 06 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fd26:	e8 67 f9 ff ff       	call   c010f692 <unlock_vdev_list>
    return ret;
c010fd2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fd2e:	c9                   	leave  
c010fd2f:	c3                   	ret    

c010fd30 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010fd30:	55                   	push   %ebp
c010fd31:	89 e5                	mov    %esp,%ebp
c010fd33:	83 ec 28             	sub    $0x28,%esp
    cprintf("[vfs_unmount] Unmount a filesystem/device by name\n");
c010fd36:	c7 04 24 18 8e 11 c0 	movl   $0xc0118e18,(%esp)
c010fd3d:	e8 23 06 ff ff       	call   c0100365 <cprintf>
    int ret;
    lock_vdev_list();
c010fd42:	e8 37 f9 ff ff       	call   c010f67e <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010fd47:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fd4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd51:	89 04 24             	mov    %eax,(%esp)
c010fd54:	e8 ff fd ff ff       	call   c010fb58 <find_mount>
c010fd59:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd60:	74 05                	je     c010fd67 <vfs_unmount+0x37>
        goto out;
c010fd62:	e9 a8 00 00 00       	jmp    c010fe0f <vfs_unmount+0xdf>
    }
    if (vdev->fs == NULL) {
c010fd67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd6a:	8b 40 08             	mov    0x8(%eax),%eax
c010fd6d:	85 c0                	test   %eax,%eax
c010fd6f:	75 0c                	jne    c010fd7d <vfs_unmount+0x4d>
        ret = -E_INVAL;
c010fd71:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fd78:	e9 92 00 00 00       	jmp    c010fe0f <vfs_unmount+0xdf>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fd7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd80:	8b 00                	mov    (%eax),%eax
c010fd82:	85 c0                	test   %eax,%eax
c010fd84:	74 0a                	je     c010fd90 <vfs_unmount+0x60>
c010fd86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd89:	8b 40 0c             	mov    0xc(%eax),%eax
c010fd8c:	85 c0                	test   %eax,%eax
c010fd8e:	75 24                	jne    c010fdb4 <vfs_unmount+0x84>
c010fd90:	c7 44 24 0c 98 8d 11 	movl   $0xc0118d98,0xc(%esp)
c010fd97:	c0 
c010fd98:	c7 44 24 08 40 8c 11 	movl   $0xc0118c40,0x8(%esp)
c010fd9f:	c0 
c010fda0:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c010fda7:	00 
c010fda8:	c7 04 24 55 8c 11 c0 	movl   $0xc0118c55,(%esp)
c010fdaf:	e8 14 11 ff ff       	call   c0100ec8 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fdb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdb7:	8b 40 08             	mov    0x8(%eax),%eax
c010fdba:	8b 40 70             	mov    0x70(%eax),%eax
c010fdbd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fdc0:	8b 52 08             	mov    0x8(%edx),%edx
c010fdc3:	89 14 24             	mov    %edx,(%esp)
c010fdc6:	ff d0                	call   *%eax
c010fdc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fdcf:	74 02                	je     c010fdd3 <vfs_unmount+0xa3>
        goto out;
c010fdd1:	eb 3c                	jmp    c010fe0f <vfs_unmount+0xdf>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fdd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdd6:	8b 40 08             	mov    0x8(%eax),%eax
c010fdd9:	8b 40 78             	mov    0x78(%eax),%eax
c010fddc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fddf:	8b 52 08             	mov    0x8(%edx),%edx
c010fde2:	89 14 24             	mov    %edx,(%esp)
c010fde5:	ff d0                	call   *%eax
c010fde7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fdea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fdee:	75 1f                	jne    c010fe0f <vfs_unmount+0xdf>
        vdev->fs = NULL;
c010fdf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdf3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fdfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdfd:	8b 00                	mov    (%eax),%eax
c010fdff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe03:	c7 04 24 4b 8e 11 c0 	movl   $0xc0118e4b,(%esp)
c010fe0a:	e8 56 05 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fe0f:	e8 7e f8 ff ff       	call   c010f692 <unlock_vdev_list>
    return ret;
c010fe14:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fe17:	c9                   	leave  
c010fe18:	c3                   	ret    

c010fe19 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fe19:	55                   	push   %ebp
c010fe1a:	89 e5                	mov    %esp,%ebp
c010fe1c:	83 ec 38             	sub    $0x38,%esp
    cprintf("[vfs_unmount_all] Global unmount function\n");
c010fe1f:	c7 04 24 60 8e 11 c0 	movl   $0xc0118e60,(%esp)
c010fe26:	e8 3a 05 ff ff       	call   c0100365 <cprintf>
c010fe2b:	c7 45 e4 84 30 15 c0 	movl   $0xc0153084,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fe32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe35:	8b 40 04             	mov    0x4(%eax),%eax
c010fe38:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fe3b:	0f 94 c0             	sete   %al
c010fe3e:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fe41:	85 c0                	test   %eax,%eax
c010fe43:	0f 85 f1 00 00 00    	jne    c010ff3a <vfs_unmount_all+0x121>
        lock_vdev_list();
c010fe49:	e8 30 f8 ff ff       	call   c010f67e <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fe4e:	c7 45 f0 84 30 15 c0 	movl   $0xc0153084,-0x10(%ebp)
c010fe55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe58:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fe5b:	e9 ba 00 00 00       	jmp    c010ff1a <vfs_unmount_all+0x101>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fe60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe63:	83 e8 10             	sub    $0x10,%eax
c010fe66:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fe69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe6c:	8b 40 0c             	mov    0xc(%eax),%eax
c010fe6f:	85 c0                	test   %eax,%eax
c010fe71:	0f 84 a3 00 00 00    	je     c010ff1a <vfs_unmount_all+0x101>
c010fe77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe7a:	8b 40 08             	mov    0x8(%eax),%eax
c010fe7d:	85 c0                	test   %eax,%eax
c010fe7f:	0f 84 95 00 00 00    	je     c010ff1a <vfs_unmount_all+0x101>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fe85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fe88:	8b 40 08             	mov    0x8(%eax),%eax
c010fe8b:	8b 40 70             	mov    0x70(%eax),%eax
c010fe8e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fe91:	8b 52 08             	mov    0x8(%edx),%edx
c010fe94:	89 14 24             	mov    %edx,(%esp)
c010fe97:	ff d0                	call   *%eax
c010fe99:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fe9c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fea0:	74 1e                	je     c010fec0 <vfs_unmount_all+0xa7>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fea5:	8b 00                	mov    (%eax),%eax
c010fea7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010feaa:	89 54 24 08          	mov    %edx,0x8(%esp)
c010feae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010feb2:	c7 04 24 8c 8e 11 c0 	movl   $0xc0118e8c,(%esp)
c010feb9:	e8 a7 04 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010febe:	eb 5a                	jmp    c010ff1a <vfs_unmount_all+0x101>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fec0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fec3:	8b 40 08             	mov    0x8(%eax),%eax
c010fec6:	8b 40 78             	mov    0x78(%eax),%eax
c010fec9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fecc:	8b 52 08             	mov    0x8(%edx),%edx
c010fecf:	89 14 24             	mov    %edx,(%esp)
c010fed2:	ff d0                	call   *%eax
c010fed4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fed7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fedb:	74 1e                	je     c010fefb <vfs_unmount_all+0xe2>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fedd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fee0:	8b 00                	mov    (%eax),%eax
c010fee2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fee5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fee9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010feed:	c7 04 24 b4 8e 11 c0 	movl   $0xc0118eb4,(%esp)
c010fef4:	e8 6c 04 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fef9:	eb 1f                	jmp    c010ff1a <vfs_unmount_all+0x101>
                    }
                    vdev->fs = NULL;
c010fefb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fefe:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010ff05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff08:	8b 00                	mov    (%eax),%eax
c010ff0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff0e:	c7 04 24 4b 8e 11 c0 	movl   $0xc0118e4b,(%esp)
c010ff15:	e8 4b 04 ff ff       	call   c0100365 <cprintf>
c010ff1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ff20:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ff23:	8b 40 04             	mov    0x4(%eax),%eax
    cprintf("[vfs_unmount_all] Global unmount function\n");
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010ff26:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ff29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff2c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ff2f:	0f 85 2b ff ff ff    	jne    c010fe60 <vfs_unmount_all+0x47>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010ff35:	e8 58 f7 ff ff       	call   c010f692 <unlock_vdev_list>
    }
    return 0;
c010ff3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff3f:	c9                   	leave  
c010ff40:	c3                   	ret    

c010ff41 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010ff41:	55                   	push   %ebp
c010ff42:	89 e5                	mov    %esp,%ebp
c010ff44:	53                   	push   %ebx
c010ff45:	83 ec 44             	sub    $0x44,%esp
    cprintf("%d [vfs_open]\n", openstep++);
c010ff48:	a1 98 30 15 c0       	mov    0xc0153098,%eax
c010ff4d:	8d 50 01             	lea    0x1(%eax),%edx
c010ff50:	89 15 98 30 15 c0    	mov    %edx,0xc0153098
c010ff56:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff5a:	c7 04 24 e0 8e 11 c0 	movl   $0xc0118ee0,(%esp)
c010ff61:	e8 ff 03 ff ff       	call   c0100365 <cprintf>
    bool can_write = 0;
c010ff66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010ff6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff70:	83 e0 03             	and    $0x3,%eax
c010ff73:	85 c0                	test   %eax,%eax
c010ff75:	74 18                	je     c010ff8f <vfs_open+0x4e>
c010ff77:	83 f8 02             	cmp    $0x2,%eax
c010ff7a:	77 09                	ja     c010ff85 <vfs_open+0x44>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010ff7c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010ff83:	eb 0b                	jmp    c010ff90 <vfs_open+0x4f>
    default:
        return -E_INVAL;
c010ff85:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff8a:	e9 ba 02 00 00       	jmp    c0110249 <vfs_open+0x308>
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    cprintf("%d [vfs_open]\n", openstep++);
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010ff8f:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010ff90:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff93:	83 e0 10             	and    $0x10,%eax
c010ff96:	85 c0                	test   %eax,%eax
c010ff98:	74 10                	je     c010ffaa <vfs_open+0x69>
        if (!can_write) {
c010ff9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff9e:	75 0a                	jne    c010ffaa <vfs_open+0x69>
            return -E_INVAL;
c010ffa0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ffa5:	e9 9f 02 00 00       	jmp    c0110249 <vfs_open+0x308>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010ffaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffad:	83 e0 08             	and    $0x8,%eax
c010ffb0:	85 c0                	test   %eax,%eax
c010ffb2:	0f 95 c0             	setne  %al
c010ffb5:	0f b6 c0             	movzbl %al,%eax
c010ffb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010ffbb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffbe:	83 e0 04             	and    $0x4,%eax
c010ffc1:	85 c0                	test   %eax,%eax
c010ffc3:	0f 95 c0             	setne  %al
c010ffc6:	0f b6 c0             	movzbl %al,%eax
c010ffc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010ffcc:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ffcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ffd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffd6:	89 04 24             	mov    %eax,(%esp)
c010ffd9:	e8 92 04 00 00       	call   c0110470 <vfs_lookup>
c010ffde:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010ffe1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ffe5:	0f 84 cc 00 00 00    	je     c01100b7 <vfs_open+0x176>
        if (ret == -16 && (create)) {
c010ffeb:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010ffef:	0f 85 ba 00 00 00    	jne    c01100af <vfs_open+0x16e>
c010fff5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fff9:	0f 84 b0 00 00 00    	je     c01100af <vfs_open+0x16e>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010ffff:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0110002:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110006:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0110009:	89 44 24 04          	mov    %eax,0x4(%esp)
c011000d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110010:	89 04 24             	mov    %eax,(%esp)
c0110013:	e8 44 05 00 00       	call   c011055c <vfs_lookup_parent>
c0110018:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011001b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011001f:	74 08                	je     c0110029 <vfs_open+0xe8>
                return ret;
c0110021:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110024:	e9 20 02 00 00       	jmp    c0110249 <vfs_open+0x308>
            }
            ret = vop_create(dir, name, excl, &node);
c0110029:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011002c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011002f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0110033:	74 17                	je     c011004c <vfs_open+0x10b>
c0110035:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110038:	8b 40 3c             	mov    0x3c(%eax),%eax
c011003b:	85 c0                	test   %eax,%eax
c011003d:	74 0d                	je     c011004c <vfs_open+0x10b>
c011003f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110042:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110045:	8b 40 34             	mov    0x34(%eax),%eax
c0110048:	85 c0                	test   %eax,%eax
c011004a:	75 24                	jne    c0110070 <vfs_open+0x12f>
c011004c:	c7 44 24 0c f0 8e 11 	movl   $0xc0118ef0,0xc(%esp)
c0110053:	c0 
c0110054:	c7 44 24 08 3f 8f 11 	movl   $0xc0118f3f,0x8(%esp)
c011005b:	c0 
c011005c:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%esp)
c0110063:	00 
c0110064:	c7 04 24 54 8f 11 c0 	movl   $0xc0118f54,(%esp)
c011006b:	e8 58 0e ff ff       	call   c0100ec8 <__panic>
c0110070:	c7 44 24 04 6a 8f 11 	movl   $0xc0118f6a,0x4(%esp)
c0110077:	c0 
c0110078:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011007b:	89 04 24             	mov    %eax,(%esp)
c011007e:	e8 85 f3 ff ff       	call   c010f408 <inode_check>
c0110083:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110086:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110089:	8b 40 34             	mov    0x34(%eax),%eax
c011008c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c011008f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0110092:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c0110095:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0110099:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c011009c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01100a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01100a4:	89 14 24             	mov    %edx,(%esp)
c01100a7:	ff d0                	call   *%eax
c01100a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c01100ac:	90                   	nop
c01100ad:	eb 1e                	jmp    c01100cd <vfs_open+0x18c>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c01100af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01100b2:	e9 92 01 00 00       	jmp    c0110249 <vfs_open+0x308>
    } else if (excl && create) {
c01100b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01100bb:	74 10                	je     c01100cd <vfs_open+0x18c>
c01100bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01100c1:	74 0a                	je     c01100cd <vfs_open+0x18c>
        return -E_EXISTS;
c01100c3:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c01100c8:	e9 7c 01 00 00       	jmp    c0110249 <vfs_open+0x308>
    }
    assert(node != NULL);
c01100cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100d0:	85 c0                	test   %eax,%eax
c01100d2:	75 24                	jne    c01100f8 <vfs_open+0x1b7>
c01100d4:	c7 44 24 0c 71 8f 11 	movl   $0xc0118f71,0xc(%esp)
c01100db:	c0 
c01100dc:	c7 44 24 08 3f 8f 11 	movl   $0xc0118f3f,0x8(%esp)
c01100e3:	c0 
c01100e4:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c01100eb:	00 
c01100ec:	c7 04 24 54 8f 11 c0 	movl   $0xc0118f54,(%esp)
c01100f3:	e8 d0 0d ff ff       	call   c0100ec8 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c01100f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01100fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01100fe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0110102:	74 17                	je     c011011b <vfs_open+0x1da>
c0110104:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110107:	8b 40 3c             	mov    0x3c(%eax),%eax
c011010a:	85 c0                	test   %eax,%eax
c011010c:	74 0d                	je     c011011b <vfs_open+0x1da>
c011010e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110111:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110114:	8b 40 04             	mov    0x4(%eax),%eax
c0110117:	85 c0                	test   %eax,%eax
c0110119:	75 24                	jne    c011013f <vfs_open+0x1fe>
c011011b:	c7 44 24 0c 80 8f 11 	movl   $0xc0118f80,0xc(%esp)
c0110122:	c0 
c0110123:	c7 44 24 08 3f 8f 11 	movl   $0xc0118f3f,0x8(%esp)
c011012a:	c0 
c011012b:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c0110132:	00 
c0110133:	c7 04 24 54 8f 11 c0 	movl   $0xc0118f54,(%esp)
c011013a:	e8 89 0d ff ff       	call   c0100ec8 <__panic>
c011013f:	c7 44 24 04 cd 8f 11 	movl   $0xc0118fcd,0x4(%esp)
c0110146:	c0 
c0110147:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011014a:	89 04 24             	mov    %eax,(%esp)
c011014d:	e8 b6 f2 ff ff       	call   c010f408 <inode_check>
c0110152:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110155:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110158:	8b 40 04             	mov    0x4(%eax),%eax
c011015b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011015e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0110161:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110165:	89 14 24             	mov    %edx,(%esp)
c0110168:	ff d0                	call   *%eax
c011016a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011016d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110171:	74 13                	je     c0110186 <vfs_open+0x245>
        vop_ref_dec(node);
c0110173:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110176:	89 04 24             	mov    %eax,(%esp)
c0110179:	e8 9c f0 ff ff       	call   c010f21a <inode_ref_dec>
        return ret;
c011017e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110181:	e9 c3 00 00 00       	jmp    c0110249 <vfs_open+0x308>
    }

    vop_open_inc(node);
c0110186:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110189:	89 04 24             	mov    %eax,(%esp)
c011018c:	e8 76 f1 ff ff       	call   c010f307 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c0110191:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110194:	83 e0 10             	and    $0x10,%eax
c0110197:	85 c0                	test   %eax,%eax
c0110199:	75 0a                	jne    c01101a5 <vfs_open+0x264>
c011019b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011019f:	0f 84 97 00 00 00    	je     c011023c <vfs_open+0x2fb>
        if ((ret = vop_truncate(node, 0)) != 0) {
c01101a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01101a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01101ab:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01101af:	74 17                	je     c01101c8 <vfs_open+0x287>
c01101b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101b4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101b7:	85 c0                	test   %eax,%eax
c01101b9:	74 0d                	je     c01101c8 <vfs_open+0x287>
c01101bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101be:	8b 40 3c             	mov    0x3c(%eax),%eax
c01101c1:	8b 40 30             	mov    0x30(%eax),%eax
c01101c4:	85 c0                	test   %eax,%eax
c01101c6:	75 24                	jne    c01101ec <vfs_open+0x2ab>
c01101c8:	c7 44 24 0c d4 8f 11 	movl   $0xc0118fd4,0xc(%esp)
c01101cf:	c0 
c01101d0:	c7 44 24 08 3f 8f 11 	movl   $0xc0118f3f,0x8(%esp)
c01101d7:	c0 
c01101d8:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c01101df:	00 
c01101e0:	c7 04 24 54 8f 11 c0 	movl   $0xc0118f54,(%esp)
c01101e7:	e8 dc 0c ff ff       	call   c0100ec8 <__panic>
c01101ec:	c7 44 24 04 25 90 11 	movl   $0xc0119025,0x4(%esp)
c01101f3:	c0 
c01101f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01101f7:	89 04 24             	mov    %eax,(%esp)
c01101fa:	e8 09 f2 ff ff       	call   c010f408 <inode_check>
c01101ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110202:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110205:	8b 40 30             	mov    0x30(%eax),%eax
c0110208:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011020b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110212:	00 
c0110213:	89 14 24             	mov    %edx,(%esp)
c0110216:	ff d0                	call   *%eax
c0110218:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011021b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011021f:	74 1b                	je     c011023c <vfs_open+0x2fb>
            vop_open_dec(node);
c0110221:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110224:	89 04 24             	mov    %eax,(%esp)
c0110227:	e8 f5 f0 ff ff       	call   c010f321 <inode_open_dec>
            vop_ref_dec(node);
c011022c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011022f:	89 04 24             	mov    %eax,(%esp)
c0110232:	e8 e3 ef ff ff       	call   c010f21a <inode_ref_dec>
            return ret;
c0110237:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011023a:	eb 0d                	jmp    c0110249 <vfs_open+0x308>
        }
    }
    *node_store = node;
c011023c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011023f:	8b 45 10             	mov    0x10(%ebp),%eax
c0110242:	89 10                	mov    %edx,(%eax)
    return 0;
c0110244:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110249:	83 c4 44             	add    $0x44,%esp
c011024c:	5b                   	pop    %ebx
c011024d:	5d                   	pop    %ebp
c011024e:	c3                   	ret    

c011024f <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c011024f:	55                   	push   %ebp
c0110250:	89 e5                	mov    %esp,%ebp
c0110252:	83 ec 18             	sub    $0x18,%esp
    cprintf("[vfs_close]\n");
c0110255:	c7 04 24 2e 90 11 c0 	movl   $0xc011902e,(%esp)
c011025c:	e8 04 01 ff ff       	call   c0100365 <cprintf>
    vop_open_dec(node);
c0110261:	8b 45 08             	mov    0x8(%ebp),%eax
c0110264:	89 04 24             	mov    %eax,(%esp)
c0110267:	e8 b5 f0 ff ff       	call   c010f321 <inode_open_dec>
    vop_ref_dec(node);
c011026c:	8b 45 08             	mov    0x8(%ebp),%eax
c011026f:	89 04 24             	mov    %eax,(%esp)
c0110272:	e8 a3 ef ff ff       	call   c010f21a <inode_ref_dec>
    return 0;
c0110277:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011027c:	c9                   	leave  
c011027d:	c3                   	ret    

c011027e <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c011027e:	55                   	push   %ebp
c011027f:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110281:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110286:	5d                   	pop    %ebp
c0110287:	c3                   	ret    

c0110288 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c0110288:	55                   	push   %ebp
c0110289:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011028b:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110290:	5d                   	pop    %ebp
c0110291:	c3                   	ret    

c0110292 <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c0110292:	55                   	push   %ebp
c0110293:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110295:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011029a:	5d                   	pop    %ebp
c011029b:	c3                   	ret    

c011029c <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c011029c:	55                   	push   %ebp
c011029d:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011029f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102a4:	5d                   	pop    %ebp
c01102a5:	c3                   	ret    

c01102a6 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c01102a6:	55                   	push   %ebp
c01102a7:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102a9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102ae:	5d                   	pop    %ebp
c01102af:	c3                   	ret    

c01102b0 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c01102b0:	55                   	push   %ebp
c01102b1:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01102b3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01102b8:	5d                   	pop    %ebp
c01102b9:	c3                   	ret    

c01102ba <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c01102ba:	55                   	push   %ebp
c01102bb:	89 e5                	mov    %esp,%ebp
c01102bd:	83 ec 38             	sub    $0x38,%esp
    cprintf("[get_device] pull the device name, if any, off the front of a path and choose the inode to begin the name lookup relative to\n");
c01102c0:	c7 04 24 3c 90 11 c0 	movl   $0xc011903c,(%esp)
c01102c7:	e8 99 00 ff ff       	call   c0100365 <cprintf>
    int i, slash = -1, colon = -1;
c01102cc:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c01102d3:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c01102da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01102e1:	eb 32                	jmp    c0110315 <get_device+0x5b>
        if (path[i] == ':') { colon = i; break; }
c01102e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01102e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01102e9:	01 d0                	add    %edx,%eax
c01102eb:	0f b6 00             	movzbl (%eax),%eax
c01102ee:	3c 3a                	cmp    $0x3a,%al
c01102f0:	75 08                	jne    c01102fa <get_device+0x40>
c01102f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01102f8:	eb 2a                	jmp    c0110324 <get_device+0x6a>
        if (path[i] == '/') { slash = i; break; }
c01102fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01102fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0110300:	01 d0                	add    %edx,%eax
c0110302:	0f b6 00             	movzbl (%eax),%eax
c0110305:	3c 2f                	cmp    $0x2f,%al
c0110307:	75 08                	jne    c0110311 <get_device+0x57>
c0110309:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011030c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011030f:	eb 13                	jmp    c0110324 <get_device+0x6a>

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    cprintf("[get_device] pull the device name, if any, off the front of a path and choose the inode to begin the name lookup relative to\n");
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c0110311:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110315:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110318:	8b 45 08             	mov    0x8(%ebp),%eax
c011031b:	01 d0                	add    %edx,%eax
c011031d:	0f b6 00             	movzbl (%eax),%eax
c0110320:	84 c0                	test   %al,%al
c0110322:	75 bf                	jne    c01102e3 <get_device+0x29>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110324:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110328:	79 1e                	jns    c0110348 <get_device+0x8e>
c011032a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011032e:	74 18                	je     c0110348 <get_device+0x8e>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c0110330:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110333:	8b 55 08             	mov    0x8(%ebp),%edx
c0110336:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c0110338:	8b 45 10             	mov    0x10(%ebp),%eax
c011033b:	89 04 24             	mov    %eax,(%esp)
c011033e:	e8 ba 02 00 00       	call   c01105fd <vfs_get_curdir>
c0110343:	e9 26 01 00 00       	jmp    c011046e <get_device+0x1b4>
    }
    if (colon > 0) {
c0110348:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011034c:	7e 42                	jle    c0110390 <get_device+0xd6>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c011034e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110351:	8b 45 08             	mov    0x8(%ebp),%eax
c0110354:	01 d0                	add    %edx,%eax
c0110356:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c0110359:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c011035d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110360:	8b 45 08             	mov    0x8(%ebp),%eax
c0110363:	01 d0                	add    %edx,%eax
c0110365:	0f b6 00             	movzbl (%eax),%eax
c0110368:	3c 2f                	cmp    $0x2f,%al
c011036a:	74 ed                	je     c0110359 <get_device+0x9f>
        *subpath = path + colon;
c011036c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011036f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110372:	01 c2                	add    %eax,%edx
c0110374:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110377:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c0110379:	8b 45 10             	mov    0x10(%ebp),%eax
c011037c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110380:	8b 45 08             	mov    0x8(%ebp),%eax
c0110383:	89 04 24             	mov    %eax,(%esp)
c0110386:	e8 cb f3 ff ff       	call   c010f756 <vfs_get_root>
c011038b:	e9 de 00 00 00       	jmp    c011046e <get_device+0x1b4>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c0110390:	8b 45 08             	mov    0x8(%ebp),%eax
c0110393:	0f b6 00             	movzbl (%eax),%eax
c0110396:	3c 2f                	cmp    $0x2f,%al
c0110398:	75 20                	jne    c01103ba <get_device+0x100>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c011039a:	8b 45 10             	mov    0x10(%ebp),%eax
c011039d:	89 04 24             	mov    %eax,(%esp)
c01103a0:	e8 82 f2 ff ff       	call   c010f627 <vfs_get_bootfs>
c01103a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01103a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01103ac:	0f 84 a1 00 00 00    	je     c0110453 <get_device+0x199>
            return ret;
c01103b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01103b5:	e9 b4 00 00 00       	jmp    c011046e <get_device+0x1b4>
        }
    }
    else {
        assert(*path == ':');
c01103ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01103bd:	0f b6 00             	movzbl (%eax),%eax
c01103c0:	3c 3a                	cmp    $0x3a,%al
c01103c2:	74 24                	je     c01103e8 <get_device+0x12e>
c01103c4:	c7 44 24 0c ba 90 11 	movl   $0xc01190ba,0xc(%esp)
c01103cb:	c0 
c01103cc:	c7 44 24 08 c7 90 11 	movl   $0xc01190c7,0x8(%esp)
c01103d3:	c0 
c01103d4:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c01103db:	00 
c01103dc:	c7 04 24 dc 90 11 c0 	movl   $0xc01190dc,(%esp)
c01103e3:	e8 e0 0a ff ff       	call   c0100ec8 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c01103e8:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01103eb:	89 04 24             	mov    %eax,(%esp)
c01103ee:	e8 0a 02 00 00       	call   c01105fd <vfs_get_curdir>
c01103f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01103f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01103fa:	74 05                	je     c0110401 <get_device+0x147>
            return ret;
c01103fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01103ff:	eb 6d                	jmp    c011046e <get_device+0x1b4>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c0110401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110404:	8b 40 38             	mov    0x38(%eax),%eax
c0110407:	85 c0                	test   %eax,%eax
c0110409:	75 24                	jne    c011042f <get_device+0x175>
c011040b:	c7 44 24 0c f4 90 11 	movl   $0xc01190f4,0xc(%esp)
c0110412:	c0 
c0110413:	c7 44 24 08 c7 90 11 	movl   $0xc01190c7,0x8(%esp)
c011041a:	c0 
c011041b:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0110422:	00 
c0110423:	c7 04 24 dc 90 11 c0 	movl   $0xc01190dc,(%esp)
c011042a:	e8 99 0a ff ff       	call   c0100ec8 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011042f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110432:	8b 40 38             	mov    0x38(%eax),%eax
c0110435:	8b 40 74             	mov    0x74(%eax),%eax
c0110438:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011043b:	8b 52 38             	mov    0x38(%edx),%edx
c011043e:	89 14 24             	mov    %edx,(%esp)
c0110441:	ff d0                	call   *%eax
c0110443:	8b 55 10             	mov    0x10(%ebp),%edx
c0110446:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c0110448:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011044b:	89 04 24             	mov    %eax,(%esp)
c011044e:	e8 c7 ed ff ff       	call   c010f21a <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c0110453:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0110457:	8b 45 08             	mov    0x8(%ebp),%eax
c011045a:	0f b6 00             	movzbl (%eax),%eax
c011045d:	3c 2f                	cmp    $0x2f,%al
c011045f:	74 f2                	je     c0110453 <get_device+0x199>
    *subpath = path;
c0110461:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110464:	8b 55 08             	mov    0x8(%ebp),%edx
c0110467:	89 10                	mov    %edx,(%eax)
    return 0;
c0110469:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011046e:	c9                   	leave  
c011046f:	c3                   	ret    

c0110470 <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c0110470:	55                   	push   %ebp
c0110471:	89 e5                	mov    %esp,%ebp
c0110473:	56                   	push   %esi
c0110474:	53                   	push   %ebx
c0110475:	83 ec 20             	sub    $0x20,%esp
    cprintf("[vfs_lookup] get the inode according to the path filename\n");
c0110478:	c7 04 24 08 91 11 c0 	movl   $0xc0119108,(%esp)
c011047f:	e8 e1 fe fe ff       	call   c0100365 <cprintf>
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110484:	8b 45 08             	mov    0x8(%ebp),%eax
c0110487:	8d 55 ec             	lea    -0x14(%ebp),%edx
c011048a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011048e:	8d 75 08             	lea    0x8(%ebp),%esi
c0110491:	89 74 24 04          	mov    %esi,0x4(%esp)
c0110495:	89 04 24             	mov    %eax,(%esp)
c0110498:	e8 1d fe ff ff       	call   c01102ba <get_device>
c011049d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104a4:	74 08                	je     c01104ae <vfs_lookup+0x3e>
        return ret;
c01104a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104a9:	e9 a7 00 00 00       	jmp    c0110555 <vfs_lookup+0xe5>
    }
    if (*path != '\0') {
c01104ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01104b1:	0f b6 00             	movzbl (%eax),%eax
c01104b4:	84 c0                	test   %al,%al
c01104b6:	0f 84 8c 00 00 00    	je     c0110548 <vfs_lookup+0xd8>
        ret = vop_lookup(node, path, node_store);
c01104bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01104c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01104c6:	74 17                	je     c01104df <vfs_lookup+0x6f>
c01104c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104cb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104ce:	85 c0                	test   %eax,%eax
c01104d0:	74 0d                	je     c01104df <vfs_lookup+0x6f>
c01104d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104d5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01104d8:	8b 40 38             	mov    0x38(%eax),%eax
c01104db:	85 c0                	test   %eax,%eax
c01104dd:	75 24                	jne    c0110503 <vfs_lookup+0x93>
c01104df:	c7 44 24 0c 44 91 11 	movl   $0xc0119144,0xc(%esp)
c01104e6:	c0 
c01104e7:	c7 44 24 08 c7 90 11 	movl   $0xc01190c7,0x8(%esp)
c01104ee:	c0 
c01104ef:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
c01104f6:	00 
c01104f7:	c7 04 24 dc 90 11 c0 	movl   $0xc01190dc,(%esp)
c01104fe:	e8 c5 09 ff ff       	call   c0100ec8 <__panic>
c0110503:	c7 44 24 04 93 91 11 	movl   $0xc0119193,0x4(%esp)
c011050a:	c0 
c011050b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011050e:	89 04 24             	mov    %eax,(%esp)
c0110511:	e8 f2 ee ff ff       	call   c010f408 <inode_check>
c0110516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110519:	8b 40 3c             	mov    0x3c(%eax),%eax
c011051c:	8b 40 38             	mov    0x38(%eax),%eax
c011051f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110522:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110525:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0110528:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011052c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110530:	89 14 24             	mov    %edx,(%esp)
c0110533:	ff d0                	call   *%eax
c0110535:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110538:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011053b:	89 04 24             	mov    %eax,(%esp)
c011053e:	e8 d7 ec ff ff       	call   c010f21a <inode_ref_dec>
        return ret;
c0110543:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110546:	eb 0d                	jmp    c0110555 <vfs_lookup+0xe5>
    }
    *node_store = node;
c0110548:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011054b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011054e:	89 10                	mov    %edx,(%eax)
    return 0;
c0110550:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110555:	83 c4 20             	add    $0x20,%esp
c0110558:	5b                   	pop    %ebx
c0110559:	5e                   	pop    %esi
c011055a:	5d                   	pop    %ebp
c011055b:	c3                   	ret    

c011055c <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c011055c:	55                   	push   %ebp
c011055d:	89 e5                	mov    %esp,%ebp
c011055f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c0110562:	8b 45 08             	mov    0x8(%ebp),%eax
c0110565:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0110568:	89 54 24 08          	mov    %edx,0x8(%esp)
c011056c:	8d 4d 08             	lea    0x8(%ebp),%ecx
c011056f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110573:	89 04 24             	mov    %eax,(%esp)
c0110576:	e8 3f fd ff ff       	call   c01102ba <get_device>
c011057b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011057e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110582:	74 05                	je     c0110589 <vfs_lookup_parent+0x2d>
        return ret;
c0110584:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110587:	eb 15                	jmp    c011059e <vfs_lookup_parent+0x42>
    }
    *endp = path;
c0110589:	8b 55 08             	mov    0x8(%ebp),%edx
c011058c:	8b 45 10             	mov    0x10(%ebp),%eax
c011058f:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c0110591:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110594:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110597:	89 10                	mov    %edx,(%eax)
    return 0;
c0110599:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011059e:	c9                   	leave  
c011059f:	c3                   	ret    

c01105a0 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c01105a0:	55                   	push   %ebp
c01105a1:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c01105a3:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01105a8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105ae:	8b 00                	mov    (%eax),%eax
}
c01105b0:	5d                   	pop    %ebp
c01105b1:	c3                   	ret    

c01105b2 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c01105b2:	55                   	push   %ebp
c01105b3:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c01105b5:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01105ba:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105c0:	8b 55 08             	mov    0x8(%ebp),%edx
c01105c3:	89 10                	mov    %edx,(%eax)
}
c01105c5:	5d                   	pop    %ebp
c01105c6:	c3                   	ret    

c01105c7 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c01105c7:	55                   	push   %ebp
c01105c8:	89 e5                	mov    %esp,%ebp
c01105ca:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c01105cd:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01105d2:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105d8:	89 04 24             	mov    %eax,(%esp)
c01105db:	e8 e4 aa ff ff       	call   c010b0c4 <lock_files>
}
c01105e0:	c9                   	leave  
c01105e1:	c3                   	ret    

c01105e2 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c01105e2:	55                   	push   %ebp
c01105e3:	89 e5                	mov    %esp,%ebp
c01105e5:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c01105e8:	a1 c8 0f 15 c0       	mov    0xc0150fc8,%eax
c01105ed:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01105f3:	89 04 24             	mov    %eax,(%esp)
c01105f6:	e8 df aa ff ff       	call   c010b0da <unlock_files>
}
c01105fb:	c9                   	leave  
c01105fc:	c3                   	ret    

c01105fd <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c01105fd:	55                   	push   %ebp
c01105fe:	89 e5                	mov    %esp,%ebp
c0110600:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c0110603:	e8 98 ff ff ff       	call   c01105a0 <get_cwd_nolock>
c0110608:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011060b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011060f:	74 1a                	je     c011062b <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c0110611:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110614:	89 04 24             	mov    %eax,(%esp)
c0110617:	e8 e4 eb ff ff       	call   c010f200 <inode_ref_inc>
        *dir_store = node;
c011061c:	8b 45 08             	mov    0x8(%ebp),%eax
c011061f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110622:	89 10                	mov    %edx,(%eax)
        return 0;
c0110624:	b8 00 00 00 00       	mov    $0x0,%eax
c0110629:	eb 05                	jmp    c0110630 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c011062b:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110630:	c9                   	leave  
c0110631:	c3                   	ret    

c0110632 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110632:	55                   	push   %ebp
c0110633:	89 e5                	mov    %esp,%ebp
c0110635:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c0110638:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c011063f:	e8 83 ff ff ff       	call   c01105c7 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c0110644:	e8 57 ff ff ff       	call   c01105a0 <get_cwd_nolock>
c0110649:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011064c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011064f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0110652:	0f 84 c7 00 00 00    	je     c011071f <vfs_set_curdir+0xed>
        if (dir != NULL) {
c0110658:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011065c:	0f 84 a1 00 00 00    	je     c0110703 <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c0110662:	8b 45 08             	mov    0x8(%ebp),%eax
c0110665:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110668:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011066c:	74 17                	je     c0110685 <vfs_set_curdir+0x53>
c011066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110671:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110674:	85 c0                	test   %eax,%eax
c0110676:	74 0d                	je     c0110685 <vfs_set_curdir+0x53>
c0110678:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011067b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011067e:	8b 40 28             	mov    0x28(%eax),%eax
c0110681:	85 c0                	test   %eax,%eax
c0110683:	75 24                	jne    c01106a9 <vfs_set_curdir+0x77>
c0110685:	c7 44 24 0c 9c 91 11 	movl   $0xc011919c,0xc(%esp)
c011068c:	c0 
c011068d:	c7 44 24 08 ec 91 11 	movl   $0xc01191ec,0x8(%esp)
c0110694:	c0 
c0110695:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011069c:	00 
c011069d:	c7 04 24 01 92 11 c0 	movl   $0xc0119201,(%esp)
c01106a4:	e8 1f 08 ff ff       	call   c0100ec8 <__panic>
c01106a9:	c7 44 24 04 17 92 11 	movl   $0xc0119217,0x4(%esp)
c01106b0:	c0 
c01106b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01106b4:	89 04 24             	mov    %eax,(%esp)
c01106b7:	e8 4c ed ff ff       	call   c010f408 <inode_check>
c01106bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01106bf:	8b 40 3c             	mov    0x3c(%eax),%eax
c01106c2:	8b 40 28             	mov    0x28(%eax),%eax
c01106c5:	8d 55 e8             	lea    -0x18(%ebp),%edx
c01106c8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01106cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01106cf:	89 14 24             	mov    %edx,(%esp)
c01106d2:	ff d0                	call   *%eax
c01106d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106db:	74 02                	je     c01106df <vfs_set_curdir+0xad>
                goto out;
c01106dd:	eb 40                	jmp    c011071f <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c01106df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01106e2:	25 00 70 00 00       	and    $0x7000,%eax
c01106e7:	3d 00 20 00 00       	cmp    $0x2000,%eax
c01106ec:	74 0a                	je     c01106f8 <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c01106ee:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c01106f5:	90                   	nop
c01106f6:	eb 27                	jmp    c011071f <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c01106f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01106fb:	89 04 24             	mov    %eax,(%esp)
c01106fe:	e8 fd ea ff ff       	call   c010f200 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c0110703:	8b 45 08             	mov    0x8(%ebp),%eax
c0110706:	89 04 24             	mov    %eax,(%esp)
c0110709:	e8 a4 fe ff ff       	call   c01105b2 <set_cwd_nolock>
        if (old_dir != NULL) {
c011070e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110712:	74 0b                	je     c011071f <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c0110714:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110717:	89 04 24             	mov    %eax,(%esp)
c011071a:	e8 fb ea ff ff       	call   c010f21a <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c011071f:	e8 be fe ff ff       	call   c01105e2 <unlock_cfs>
    return ret;
c0110724:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110727:	c9                   	leave  
c0110728:	c3                   	ret    

c0110729 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c0110729:	55                   	push   %ebp
c011072a:	89 e5                	mov    %esp,%ebp
c011072c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c011072f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110732:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110736:	8b 45 08             	mov    0x8(%ebp),%eax
c0110739:	89 04 24             	mov    %eax,(%esp)
c011073c:	e8 2f fd ff ff       	call   c0110470 <vfs_lookup>
c0110741:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110744:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110748:	75 19                	jne    c0110763 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c011074a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011074d:	89 04 24             	mov    %eax,(%esp)
c0110750:	e8 dd fe ff ff       	call   c0110632 <vfs_set_curdir>
c0110755:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c0110758:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011075b:	89 04 24             	mov    %eax,(%esp)
c011075e:	e8 b7 ea ff ff       	call   c010f21a <inode_ref_dec>
    }
    return ret;
c0110763:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110766:	c9                   	leave  
c0110767:	c3                   	ret    

c0110768 <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c0110768:	55                   	push   %ebp
c0110769:	89 e5                	mov    %esp,%ebp
c011076b:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c011076e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0110771:	89 04 24             	mov    %eax,(%esp)
c0110774:	e8 84 fe ff ff       	call   c01105fd <vfs_get_curdir>
c0110779:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011077c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110780:	74 08                	je     c011078a <vfs_getcwd+0x22>
        return ret;
c0110782:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110785:	e9 3a 01 00 00       	jmp    c01108c4 <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c011078a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011078d:	8b 40 38             	mov    0x38(%eax),%eax
c0110790:	85 c0                	test   %eax,%eax
c0110792:	75 24                	jne    c01107b8 <vfs_getcwd+0x50>
c0110794:	c7 44 24 0c 1f 92 11 	movl   $0xc011921f,0xc(%esp)
c011079b:	c0 
c011079c:	c7 44 24 08 ec 91 11 	movl   $0xc01191ec,0x8(%esp)
c01107a3:	c0 
c01107a4:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c01107ab:	00 
c01107ac:	c7 04 24 01 92 11 c0 	movl   $0xc0119201,(%esp)
c01107b3:	e8 10 07 ff ff       	call   c0100ec8 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c01107b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01107bb:	8b 40 38             	mov    0x38(%eax),%eax
c01107be:	89 04 24             	mov    %eax,(%esp)
c01107c1:	e8 b9 f0 ff ff       	call   c010f87f <vfs_get_devname>
c01107c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c01107c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107cc:	89 04 24             	mov    %eax,(%esp)
c01107cf:	e8 26 4c 00 00       	call   c01153fa <strlen>
c01107d4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01107db:	00 
c01107dc:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01107e3:	00 
c01107e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01107e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01107ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01107f2:	89 04 24             	mov    %eax,(%esp)
c01107f5:	e8 f2 ab ff ff       	call   c010b3ec <iobuf_move>
c01107fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01107fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110801:	74 05                	je     c0110808 <vfs_getcwd+0xa0>
        goto out;
c0110803:	e9 ae 00 00 00       	jmp    c01108b6 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c0110808:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c011080c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110813:	00 
c0110814:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011081b:	00 
c011081c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110823:	00 
c0110824:	8d 45 e7             	lea    -0x19(%ebp),%eax
c0110827:	89 44 24 04          	mov    %eax,0x4(%esp)
c011082b:	8b 45 08             	mov    0x8(%ebp),%eax
c011082e:	89 04 24             	mov    %eax,(%esp)
c0110831:	e8 b6 ab ff ff       	call   c010b3ec <iobuf_move>
c0110836:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110839:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011083d:	74 02                	je     c0110841 <vfs_getcwd+0xd9>
        goto out;
c011083f:	eb 75                	jmp    c01108b6 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c0110841:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110844:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110847:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011084b:	74 17                	je     c0110864 <vfs_getcwd+0xfc>
c011084d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110850:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110853:	85 c0                	test   %eax,%eax
c0110855:	74 0d                	je     c0110864 <vfs_getcwd+0xfc>
c0110857:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011085a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011085d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0110860:	85 c0                	test   %eax,%eax
c0110862:	75 24                	jne    c0110888 <vfs_getcwd+0x120>
c0110864:	c7 44 24 0c 34 92 11 	movl   $0xc0119234,0xc(%esp)
c011086b:	c0 
c011086c:	c7 44 24 08 ec 91 11 	movl   $0xc01191ec,0x8(%esp)
c0110873:	c0 
c0110874:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c011087b:	00 
c011087c:	c7 04 24 01 92 11 c0 	movl   $0xc0119201,(%esp)
c0110883:	e8 40 06 ff ff       	call   c0100ec8 <__panic>
c0110888:	c7 44 24 04 85 92 11 	movl   $0xc0119285,0x4(%esp)
c011088f:	c0 
c0110890:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110893:	89 04 24             	mov    %eax,(%esp)
c0110896:	e8 6d eb ff ff       	call   c010f408 <inode_check>
c011089b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011089e:	8b 40 3c             	mov    0x3c(%eax),%eax
c01108a1:	8b 40 1c             	mov    0x1c(%eax),%eax
c01108a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01108a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01108aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01108ae:	89 14 24             	mov    %edx,(%esp)
c01108b1:	ff d0                	call   *%eax
c01108b3:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c01108b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01108b9:	89 04 24             	mov    %eax,(%esp)
c01108bc:	e8 59 e9 ff ff       	call   c010f21a <inode_ref_dec>
    return ret;
c01108c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01108c4:	c9                   	leave  
c01108c5:	c3                   	ret    

c01108c6 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c01108c6:	55                   	push   %ebp
c01108c7:	89 e5                	mov    %esp,%ebp
c01108c9:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_open]\n");
c01108cc:	c7 04 24 a0 92 11 c0 	movl   $0xc01192a0,(%esp)
c01108d3:	e8 8d fa fe ff       	call   c0100365 <cprintf>
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c01108d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108db:	83 e0 3c             	and    $0x3c,%eax
c01108de:	85 c0                	test   %eax,%eax
c01108e0:	74 07                	je     c01108e9 <dev_open+0x23>
        return -E_INVAL;
c01108e2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01108e7:	eb 58                	jmp    c0110941 <dev_open+0x7b>
    }
    struct device *dev = vop_info(node, device);
c01108e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01108ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01108f3:	74 0d                	je     c0110902 <dev_open+0x3c>
c01108f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108f8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108fb:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110900:	74 24                	je     c0110926 <dev_open+0x60>
c0110902:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110909:	c0 
c011090a:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110911:	c0 
c0110912:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
c0110919:	00 
c011091a:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110921:	e8 a2 05 ff ff       	call   c0100ec8 <__panic>
c0110926:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110929:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c011092c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011092f:	8b 40 08             	mov    0x8(%eax),%eax
c0110932:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110935:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110939:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011093c:	89 14 24             	mov    %edx,(%esp)
c011093f:	ff d0                	call   *%eax
}
c0110941:	c9                   	leave  
c0110942:	c3                   	ret    

c0110943 <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c0110943:	55                   	push   %ebp
c0110944:	89 e5                	mov    %esp,%ebp
c0110946:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_close]\n");
c0110949:	c7 04 24 07 93 11 c0 	movl   $0xc0119307,(%esp)
c0110950:	e8 10 fa fe ff       	call   c0100365 <cprintf>
    struct device *dev = vop_info(node, device);
c0110955:	8b 45 08             	mov    0x8(%ebp),%eax
c0110958:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011095b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011095f:	74 0d                	je     c011096e <dev_close+0x2b>
c0110961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110964:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110967:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011096c:	74 24                	je     c0110992 <dev_close+0x4f>
c011096e:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110975:	c0 
c0110976:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c011097d:	c0 
c011097e:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0110985:	00 
c0110986:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c011098d:	e8 36 05 ff ff       	call   c0100ec8 <__panic>
c0110992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110995:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c0110998:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011099b:	8b 40 0c             	mov    0xc(%eax),%eax
c011099e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01109a1:	89 14 24             	mov    %edx,(%esp)
c01109a4:	ff d0                	call   *%eax
}
c01109a6:	c9                   	leave  
c01109a7:	c3                   	ret    

c01109a8 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01109a8:	55                   	push   %ebp
c01109a9:	89 e5                	mov    %esp,%ebp
c01109ab:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_read]\n");
c01109ae:	c7 04 24 14 93 11 c0 	movl   $0xc0119314,(%esp)
c01109b5:	e8 ab f9 fe ff       	call   c0100365 <cprintf>
    struct device *dev = vop_info(node, device);
c01109ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01109bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01109c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109c4:	74 0d                	je     c01109d3 <dev_read+0x2b>
c01109c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109c9:	8b 40 2c             	mov    0x2c(%eax),%eax
c01109cc:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01109d1:	74 24                	je     c01109f7 <dev_read+0x4f>
c01109d3:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c01109da:	c0 
c01109db:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c01109e2:	c0 
c01109e3:	c7 44 24 04 26 00 00 	movl   $0x26,0x4(%esp)
c01109ea:	00 
c01109eb:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c01109f2:	e8 d1 04 ff ff       	call   c0100ec8 <__panic>
c01109f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c01109fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a00:	8b 40 10             	mov    0x10(%eax),%eax
c0110a03:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110a0a:	00 
c0110a0b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110a0e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110a12:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110a15:	89 14 24             	mov    %edx,(%esp)
c0110a18:	ff d0                	call   *%eax
}
c0110a1a:	c9                   	leave  
c0110a1b:	c3                   	ret    

c0110a1c <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c0110a1c:	55                   	push   %ebp
c0110a1d:	89 e5                	mov    %esp,%ebp
c0110a1f:	83 ec 28             	sub    $0x28,%esp
    cprintf("[dev_write]\n");
c0110a22:	c7 04 24 20 93 11 c0 	movl   $0xc0119320,(%esp)
c0110a29:	e8 37 f9 fe ff       	call   c0100365 <cprintf>
    struct device *dev = vop_info(node, device);
c0110a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a38:	74 0d                	je     c0110a47 <dev_write+0x2b>
c0110a3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a3d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110a40:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110a45:	74 24                	je     c0110a6b <dev_write+0x4f>
c0110a47:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110a4e:	c0 
c0110a4f:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110a56:	c0 
c0110a57:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
c0110a5e:	00 
c0110a5f:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110a66:	e8 5d 04 ff ff       	call   c0100ec8 <__panic>
c0110a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110a6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c0110a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a74:	8b 40 10             	mov    0x10(%eax),%eax
c0110a77:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110a7e:	00 
c0110a7f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110a82:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110a86:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110a89:	89 14 24             	mov    %edx,(%esp)
c0110a8c:	ff d0                	call   *%eax
}
c0110a8e:	c9                   	leave  
c0110a8f:	c3                   	ret    

c0110a90 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c0110a90:	55                   	push   %ebp
c0110a91:	89 e5                	mov    %esp,%ebp
c0110a93:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a99:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110aa0:	74 0d                	je     c0110aaf <dev_ioctl+0x1f>
c0110aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110aa5:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110aa8:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110aad:	74 24                	je     c0110ad3 <dev_ioctl+0x43>
c0110aaf:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110ab6:	c0 
c0110ab7:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110abe:	c0 
c0110abf:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110ac6:	00 
c0110ac7:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110ace:	e8 f5 03 ff ff       	call   c0100ec8 <__panic>
c0110ad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ad6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c0110ad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110adc:	8b 40 14             	mov    0x14(%eax),%eax
c0110adf:	8b 55 10             	mov    0x10(%ebp),%edx
c0110ae2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110ae6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110ae9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110aed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110af0:	89 14 24             	mov    %edx,(%esp)
c0110af3:	ff d0                	call   *%eax
}
c0110af5:	c9                   	leave  
c0110af6:	c3                   	ret    

c0110af7 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c0110af7:	55                   	push   %ebp
c0110af8:	89 e5                	mov    %esp,%ebp
c0110afa:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110afd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0110b04:	00 
c0110b05:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110b0c:	00 
c0110b0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b10:	89 04 24             	mov    %eax,(%esp)
c0110b13:	e8 38 4c 00 00       	call   c0115750 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0110b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110b22:	74 17                	je     c0110b3b <dev_fstat+0x44>
c0110b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b27:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b2a:	85 c0                	test   %eax,%eax
c0110b2c:	74 0d                	je     c0110b3b <dev_fstat+0x44>
c0110b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b31:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b34:	8b 40 28             	mov    0x28(%eax),%eax
c0110b37:	85 c0                	test   %eax,%eax
c0110b39:	75 24                	jne    c0110b5f <dev_fstat+0x68>
c0110b3b:	c7 44 24 0c 30 93 11 	movl   $0xc0119330,0xc(%esp)
c0110b42:	c0 
c0110b43:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110b4a:	c0 
c0110b4b:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0110b52:	00 
c0110b53:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110b5a:	e8 69 03 ff ff       	call   c0100ec8 <__panic>
c0110b5f:	c7 44 24 04 80 93 11 	movl   $0xc0119380,0x4(%esp)
c0110b66:	c0 
c0110b67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b6a:	89 04 24             	mov    %eax,(%esp)
c0110b6d:	e8 96 e8 ff ff       	call   c010f408 <inode_check>
c0110b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b75:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b78:	8b 40 28             	mov    0x28(%eax),%eax
c0110b7b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110b7e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110b82:	8b 55 08             	mov    0x8(%ebp),%edx
c0110b85:	89 14 24             	mov    %edx,(%esp)
c0110b88:	ff d0                	call   *%eax
c0110b8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110b8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110b91:	74 05                	je     c0110b98 <dev_fstat+0xa1>
        return ret;
c0110b93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b96:	eb 72                	jmp    c0110c0a <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c0110b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110ba2:	74 0d                	je     c0110bb1 <dev_fstat+0xba>
c0110ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ba7:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110baa:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110baf:	74 24                	je     c0110bd5 <dev_fstat+0xde>
c0110bb1:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110bb8:	c0 
c0110bb9:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110bc0:	c0 
c0110bc1:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0110bc8:	00 
c0110bc9:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110bd0:	e8 f3 02 ff ff       	call   c0100ec8 <__panic>
c0110bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c0110bdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bde:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110be5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110be8:	8b 10                	mov    (%eax),%edx
c0110bea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bed:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c0110bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bf3:	8b 50 08             	mov    0x8(%eax),%edx
c0110bf6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110bf9:	8b 40 04             	mov    0x4(%eax),%eax
c0110bfc:	0f af d0             	imul   %eax,%edx
c0110bff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c02:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110c05:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110c0a:	c9                   	leave  
c0110c0b:	c3                   	ret    

c0110c0c <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c0110c0c:	55                   	push   %ebp
c0110c0d:	89 e5                	mov    %esp,%ebp
c0110c0f:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110c12:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110c1c:	74 0d                	je     c0110c2b <dev_gettype+0x1f>
c0110c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c21:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110c24:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110c29:	74 24                	je     c0110c4f <dev_gettype+0x43>
c0110c2b:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110c32:	c0 
c0110c33:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110c3a:	c0 
c0110c3b:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110c42:	00 
c0110c43:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110c4a:	e8 79 02 ff ff       	call   c0100ec8 <__panic>
c0110c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c52:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110c58:	8b 00                	mov    (%eax),%eax
c0110c5a:	85 c0                	test   %eax,%eax
c0110c5c:	74 07                	je     c0110c65 <dev_gettype+0x59>
c0110c5e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110c63:	eb 05                	jmp    c0110c6a <dev_gettype+0x5e>
c0110c65:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110c6a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110c6d:	89 02                	mov    %eax,(%edx)
    return 0;
c0110c6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110c74:	c9                   	leave  
c0110c75:	c3                   	ret    

c0110c76 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110c76:	55                   	push   %ebp
c0110c77:	89 e5                	mov    %esp,%ebp
c0110c79:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110c7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110c86:	74 0d                	je     c0110c95 <dev_tryseek+0x1f>
c0110c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c8b:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110c8e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110c93:	74 24                	je     c0110cb9 <dev_tryseek+0x43>
c0110c95:	c7 44 24 0c ac 92 11 	movl   $0xc01192ac,0xc(%esp)
c0110c9c:	c0 
c0110c9d:	c7 44 24 08 df 92 11 	movl   $0xc01192df,0x8(%esp)
c0110ca4:	c0 
c0110ca5:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0110cac:	00 
c0110cad:	c7 04 24 f4 92 11 c0 	movl   $0xc01192f4,(%esp)
c0110cb4:	e8 0f 02 ff ff       	call   c0100ec8 <__panic>
c0110cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110cbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cc2:	8b 00                	mov    (%eax),%eax
c0110cc4:	85 c0                	test   %eax,%eax
c0110cc6:	74 38                	je     c0110d00 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c0110cc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ccb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110cce:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110cd1:	ba 00 00 00 00       	mov    $0x0,%edx
c0110cd6:	f7 f1                	div    %ecx
c0110cd8:	89 d0                	mov    %edx,%eax
c0110cda:	85 c0                	test   %eax,%eax
c0110cdc:	75 22                	jne    c0110d00 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110cde:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110ce2:	78 1c                	js     c0110d00 <dev_tryseek+0x8a>
c0110ce4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110ce7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cea:	8b 08                	mov    (%eax),%ecx
c0110cec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110cef:	8b 40 04             	mov    0x4(%eax),%eax
c0110cf2:	0f af c1             	imul   %ecx,%eax
c0110cf5:	39 c2                	cmp    %eax,%edx
c0110cf7:	73 07                	jae    c0110d00 <dev_tryseek+0x8a>
                return 0;
c0110cf9:	b8 00 00 00 00       	mov    $0x0,%eax
c0110cfe:	eb 05                	jmp    c0110d05 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c0110d00:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110d05:	c9                   	leave  
c0110d06:	c3                   	ret    

c0110d07 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110d07:	55                   	push   %ebp
c0110d08:	89 e5                	mov    %esp,%ebp
c0110d0a:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c0110d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d10:	0f b6 00             	movzbl (%eax),%eax
c0110d13:	84 c0                	test   %al,%al
c0110d15:	74 07                	je     c0110d1e <dev_lookup+0x17>
        return -E_NOENT;
c0110d17:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110d1c:	eb 18                	jmp    c0110d36 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110d1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d21:	89 04 24             	mov    %eax,(%esp)
c0110d24:	e8 d7 e4 ff ff       	call   c010f200 <inode_ref_inc>
    *node_store = node;
c0110d29:	8b 45 10             	mov    0x10(%ebp),%eax
c0110d2c:	8b 55 08             	mov    0x8(%ebp),%edx
c0110d2f:	89 10                	mov    %edx,(%eax)
    return 0;
c0110d31:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d36:	c9                   	leave  
c0110d37:	c3                   	ret    

c0110d38 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110d38:	55                   	push   %ebp
c0110d39:	89 e5                	mov    %esp,%ebp
c0110d3b:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110d3e:	e8 ad 07 00 00       	call   c01114f0 <dev_init_stdin>
    init_device(stdout);
c0110d43:	e8 28 09 00 00       	call   c0111670 <dev_init_stdout>
    init_device(disk0);
c0110d48:	e8 44 04 00 00       	call   c0111191 <dev_init_disk0>
}
c0110d4d:	c9                   	leave  
c0110d4e:	c3                   	ret    

c0110d4f <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110d4f:	55                   	push   %ebp
c0110d50:	89 e5                	mov    %esp,%ebp
c0110d52:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110d55:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110d5c:	e8 88 e3 ff ff       	call   c010f0e9 <__alloc_inode>
c0110d61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d68:	74 1b                	je     c0110d85 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110d6a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110d71:	00 
c0110d72:	c7 44 24 04 a0 93 11 	movl   $0xc01193a0,0x4(%esp)
c0110d79:	c0 
c0110d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d7d:	89 04 24             	mov    %eax,(%esp)
c0110d80:	e8 8d e3 ff ff       	call   c010f112 <inode_init>
    }
    return node;
c0110d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110d88:	c9                   	leave  
c0110d89:	c3                   	ret    

c0110d8a <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110d8a:	55                   	push   %ebp
c0110d8b:	89 e5                	mov    %esp,%ebp
c0110d8d:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110d90:	c7 04 24 b0 30 15 c0 	movl   $0xc01530b0,(%esp)
c0110d97:	e8 81 8f ff ff       	call   c0109d1d <down>
}
c0110d9c:	c9                   	leave  
c0110d9d:	c3                   	ret    

c0110d9e <unlock_disk0>:

static void
unlock_disk0(void) {
c0110d9e:	55                   	push   %ebp
c0110d9f:	89 e5                	mov    %esp,%ebp
c0110da1:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110da4:	c7 04 24 b0 30 15 c0 	movl   $0xc01530b0,(%esp)
c0110dab:	e8 52 8f ff ff       	call   c0109d02 <up>
}
c0110db0:	c9                   	leave  
c0110db1:	c3                   	ret    

c0110db2 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110db2:	55                   	push   %ebp
c0110db3:	89 e5                	mov    %esp,%ebp
    return 0;
c0110db5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110dba:	5d                   	pop    %ebp
c0110dbb:	c3                   	ret    

c0110dbc <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110dbc:	55                   	push   %ebp
c0110dbd:	89 e5                	mov    %esp,%ebp
    return 0;
c0110dbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110dc4:	5d                   	pop    %ebp
c0110dc5:	c3                   	ret    

c0110dc6 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110dc6:	55                   	push   %ebp
c0110dc7:	89 e5                	mov    %esp,%ebp
c0110dc9:	83 ec 38             	sub    $0x38,%esp
    cprintf("%d [disk0_read_blks_nolock]\n", openstep++);
c0110dcc:	a1 a8 30 15 c0       	mov    0xc01530a8,%eax
c0110dd1:	8d 50 01             	lea    0x1(%eax),%edx
c0110dd4:	89 15 a8 30 15 c0    	mov    %edx,0xc01530a8
c0110dda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110dde:	c7 04 24 e0 93 11 c0 	movl   $0xc01193e0,(%esp)
c0110de5:	e8 7b f5 fe ff       	call   c0100365 <cprintf>
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110dea:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ded:	c1 e0 03             	shl    $0x3,%eax
c0110df0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110df3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110df6:	c1 e0 03             	shl    $0x3,%eax
c0110df9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110dfc:	a1 ac 30 15 c0       	mov    0xc01530ac,%eax
c0110e01:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110e04:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110e08:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e0f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e13:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110e1a:	e8 81 0e ff ff       	call   c0101ca0 <ide_read_secs>
c0110e1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110e22:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110e26:	74 3f                	je     c0110e67 <disk0_read_blks_nolock+0xa1>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110e28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e2b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110e2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e32:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110e36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e39:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e40:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110e44:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e47:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110e4b:	c7 44 24 08 00 94 11 	movl   $0xc0119400,0x8(%esp)
c0110e52:	c0 
c0110e53:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%esp)
c0110e5a:	00 
c0110e5b:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c0110e62:	e8 61 00 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110e67:	c9                   	leave  
c0110e68:	c3                   	ret    

c0110e69 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110e69:	55                   	push   %ebp
c0110e6a:	89 e5                	mov    %esp,%ebp
c0110e6c:	83 ec 38             	sub    $0x38,%esp
    // cprintf("[disk0_write_blks_nolock]\n");
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e72:	c1 e0 03             	shl    $0x3,%eax
c0110e75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e78:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e7b:	c1 e0 03             	shl    $0x3,%eax
c0110e7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110e81:	a1 ac 30 15 c0       	mov    0xc01530ac,%eax
c0110e86:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110e89:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110e8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110e98:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110e9f:	e8 5c 10 ff ff       	call   c0101f00 <ide_write_secs>
c0110ea4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110ea7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110eab:	74 3f                	je     c0110eec <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110ead:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110eb0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110eb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110eb7:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ebe:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ec5:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ecc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110ed0:	c7 44 24 08 64 94 11 	movl   $0xc0119464,0x8(%esp)
c0110ed7:	c0 
c0110ed8:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0110edf:	00 
c0110ee0:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c0110ee7:	e8 dc ff fe ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110eec:	c9                   	leave  
c0110eed:	c3                   	ret    

c0110eee <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110eee:	55                   	push   %ebp
c0110eef:	89 e5                	mov    %esp,%ebp
c0110ef1:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110ef4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ef7:	8b 40 04             	mov    0x4(%eax),%eax
c0110efa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110efd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f00:	8b 40 0c             	mov    0xc(%eax),%eax
c0110f03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110f06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110f09:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110f0f:	85 c0                	test   %eax,%eax
c0110f11:	0f 48 c2             	cmovs  %edx,%eax
c0110f14:	c1 f8 0c             	sar    $0xc,%eax
c0110f17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f1d:	c1 e8 0c             	shr    $0xc,%eax
c0110f20:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110f23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110f26:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f2b:	85 c0                	test   %eax,%eax
c0110f2d:	75 0c                	jne    c0110f3b <disk0_io+0x4d>
c0110f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f32:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110f37:	85 c0                	test   %eax,%eax
c0110f39:	74 0a                	je     c0110f45 <disk0_io+0x57>
        return -E_INVAL;
c0110f3b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110f40:	e9 7a 01 00 00       	jmp    c01110bf <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110f45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110f4b:	01 c2                	add    %eax,%edx
c0110f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f50:	8b 00                	mov    (%eax),%eax
c0110f52:	39 c2                	cmp    %eax,%edx
c0110f54:	76 0a                	jbe    c0110f60 <disk0_io+0x72>
        return -E_INVAL;
c0110f56:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110f5b:	e9 5f 01 00 00       	jmp    c01110bf <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110f60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110f64:	75 0a                	jne    c0110f70 <disk0_io+0x82>
        return 0;
c0110f66:	b8 00 00 00 00       	mov    $0x0,%eax
c0110f6b:	e9 4f 01 00 00       	jmp    c01110bf <disk0_io+0x1d1>
    }

    lock_disk0();
c0110f70:	e8 15 fe ff ff       	call   c0110d8a <lock_disk0>
    while (resid != 0) {
c0110f75:	e9 31 01 00 00       	jmp    c01110ab <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110f7a:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110f81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110f85:	0f 84 89 00 00 00    	je     c0111014 <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110f8b:	a1 ac 30 15 c0       	mov    0xc01530ac,%eax
c0110f90:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110f93:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110f97:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110f9e:	00 
c0110f9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110fa2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110fa6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110faa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110fad:	89 04 24             	mov    %eax,(%esp)
c0110fb0:	e8 37 a4 ff ff       	call   c010b3ec <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110fb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110fb8:	85 c0                	test   %eax,%eax
c0110fba:	74 14                	je     c0110fd0 <disk0_io+0xe2>
c0110fbc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110fbf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110fc2:	77 0c                	ja     c0110fd0 <disk0_io+0xe2>
c0110fc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110fc7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110fcc:	85 c0                	test   %eax,%eax
c0110fce:	74 24                	je     c0110ff4 <disk0_io+0x106>
c0110fd0:	c7 44 24 0c b0 94 11 	movl   $0xc01194b0,0xc(%esp)
c0110fd7:	c0 
c0110fd8:	c7 44 24 08 ee 94 11 	movl   $0xc01194ee,0x8(%esp)
c0110fdf:	c0 
c0110fe0:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
c0110fe7:	00 
c0110fe8:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c0110fef:	e8 d4 fe fe ff       	call   c0100ec8 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110ff4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ff7:	c1 e8 0c             	shr    $0xc,%eax
c0110ffa:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110ffd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111000:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111004:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111007:	89 04 24             	mov    %eax,(%esp)
c011100a:	e8 5a fe ff ff       	call   c0110e69 <disk0_write_blks_nolock>
c011100f:	e9 8b 00 00 00       	jmp    c011109f <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0111014:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111017:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011101a:	76 06                	jbe    c0111022 <disk0_io+0x134>
                alen = resid;
c011101c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011101f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0111022:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111025:	c1 e8 0c             	shr    $0xc,%eax
c0111028:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c011102b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011102e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111032:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111035:	89 04 24             	mov    %eax,(%esp)
c0111038:	e8 89 fd ff ff       	call   c0110dc6 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c011103d:	a1 ac 30 15 c0       	mov    0xc01530ac,%eax
c0111042:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0111045:	89 54 24 10          	mov    %edx,0x10(%esp)
c0111049:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0111050:	00 
c0111051:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111054:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111058:	89 44 24 04          	mov    %eax,0x4(%esp)
c011105c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011105f:	89 04 24             	mov    %eax,(%esp)
c0111062:	e8 85 a3 ff ff       	call   c010b3ec <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0111067:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011106a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011106d:	75 0c                	jne    c011107b <disk0_io+0x18d>
c011106f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111072:	25 ff 0f 00 00       	and    $0xfff,%eax
c0111077:	85 c0                	test   %eax,%eax
c0111079:	74 24                	je     c011109f <disk0_io+0x1b1>
c011107b:	c7 44 24 0c 04 95 11 	movl   $0xc0119504,0xc(%esp)
c0111082:	c0 
c0111083:	c7 44 24 08 ee 94 11 	movl   $0xc01194ee,0x8(%esp)
c011108a:	c0 
c011108b:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0111092:	00 
c0111093:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c011109a:	e8 29 fe fe ff       	call   c0100ec8 <__panic>
        }
        resid -= copied, blkno += nblks;
c011109f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01110a2:	29 45 f4             	sub    %eax,-0xc(%ebp)
c01110a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110a8:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c01110ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01110af:	0f 85 c5 fe ff ff    	jne    c0110f7a <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c01110b5:	e8 e4 fc ff ff       	call   c0110d9e <unlock_disk0>
    return 0;
c01110ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01110bf:	c9                   	leave  
c01110c0:	c3                   	ret    

c01110c1 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c01110c1:	55                   	push   %ebp
c01110c2:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01110c4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01110c9:	5d                   	pop    %ebp
c01110ca:	c3                   	ret    

c01110cb <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c01110cb:	55                   	push   %ebp
c01110cc:	89 e5                	mov    %esp,%ebp
c01110ce:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c01110d1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01110d8:	e8 45 0b ff ff       	call   c0101c22 <ide_device_valid>
c01110dd:	85 c0                	test   %eax,%eax
c01110df:	75 1c                	jne    c01110fd <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c01110e1:	c7 44 24 08 34 95 11 	movl   $0xc0119534,0x8(%esp)
c01110e8:	c0 
c01110e9:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c01110f0:	00 
c01110f1:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c01110f8:	e8 cb fd fe ff       	call   c0100ec8 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c01110fd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0111104:	e8 58 0b ff ff       	call   c0101c61 <ide_device_size>
c0111109:	c1 e8 03             	shr    $0x3,%eax
c011110c:	89 c2                	mov    %eax,%edx
c011110e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111111:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0111113:	8b 45 08             	mov    0x8(%ebp),%eax
c0111116:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c011111d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111120:	c7 40 08 b2 0d 11 c0 	movl   $0xc0110db2,0x8(%eax)
    dev->d_close = disk0_close;
c0111127:	8b 45 08             	mov    0x8(%ebp),%eax
c011112a:	c7 40 0c bc 0d 11 c0 	movl   $0xc0110dbc,0xc(%eax)
    dev->d_io = disk0_io;
c0111131:	8b 45 08             	mov    0x8(%ebp),%eax
c0111134:	c7 40 10 ee 0e 11 c0 	movl   $0xc0110eee,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c011113b:	8b 45 08             	mov    0x8(%ebp),%eax
c011113e:	c7 40 14 c1 10 11 c0 	movl   $0xc01110c1,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0111145:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011114c:	00 
c011114d:	c7 04 24 b0 30 15 c0 	movl   $0xc01530b0,(%esp)
c0111154:	e8 36 8a ff ff       	call   c0109b8f <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0111159:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0111160:	e8 98 3b ff ff       	call   c0104cfd <kmalloc>
c0111165:	a3 ac 30 15 c0       	mov    %eax,0xc01530ac
c011116a:	a1 ac 30 15 c0       	mov    0xc01530ac,%eax
c011116f:	85 c0                	test   %eax,%eax
c0111171:	75 1c                	jne    c011118f <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0111173:	c7 44 24 08 53 95 11 	movl   $0xc0119553,0x8(%esp)
c011117a:	c0 
c011117b:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
c0111182:	00 
c0111183:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c011118a:	e8 39 fd fe ff       	call   c0100ec8 <__panic>
    }
}
c011118f:	c9                   	leave  
c0111190:	c3                   	ret    

c0111191 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0111191:	55                   	push   %ebp
c0111192:	89 e5                	mov    %esp,%ebp
c0111194:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0111197:	e8 b3 fb ff ff       	call   c0110d4f <dev_create_inode>
c011119c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011119f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01111a3:	75 1c                	jne    c01111c1 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c01111a5:	c7 44 24 08 6f 95 11 	movl   $0xc011956f,0x8(%esp)
c01111ac:	c0 
c01111ad:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c01111b4:	00 
c01111b5:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c01111bc:	e8 07 fd fe ff       	call   c0100ec8 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c01111c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01111c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01111cb:	74 0d                	je     c01111da <dev_init_disk0+0x49>
c01111cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111d0:	8b 40 2c             	mov    0x2c(%eax),%eax
c01111d3:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01111d8:	74 24                	je     c01111fe <dev_init_disk0+0x6d>
c01111da:	c7 44 24 0c 88 95 11 	movl   $0xc0119588,0xc(%esp)
c01111e1:	c0 
c01111e2:	c7 44 24 08 ee 94 11 	movl   $0xc01194ee,0x8(%esp)
c01111e9:	c0 
c01111ea:	c7 44 24 04 8b 00 00 	movl   $0x8b,0x4(%esp)
c01111f1:	00 
c01111f2:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c01111f9:	e8 ca fc fe ff       	call   c0100ec8 <__panic>
c01111fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111201:	89 04 24             	mov    %eax,(%esp)
c0111204:	e8 c2 fe ff ff       	call   c01110cb <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0111209:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111210:	00 
c0111211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111214:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111218:	c7 04 24 bb 95 11 c0 	movl   $0xc01195bb,(%esp)
c011121f:	e8 0b e9 ff ff       	call   c010fb2f <vfs_add_dev>
c0111224:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111227:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011122b:	74 23                	je     c0111250 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c011122d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111230:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111234:	c7 44 24 08 c1 95 11 	movl   $0xc01195c1,0x8(%esp)
c011123b:	c0 
c011123c:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c0111243:	00 
c0111244:	c7 04 24 48 94 11 c0 	movl   $0xc0119448,(%esp)
c011124b:	e8 78 fc fe ff       	call   c0100ec8 <__panic>
    }
}
c0111250:	c9                   	leave  
c0111251:	c3                   	ret    

c0111252 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0111252:	55                   	push   %ebp
c0111253:	89 e5                	mov    %esp,%ebp
c0111255:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0111258:	9c                   	pushf  
c0111259:	58                   	pop    %eax
c011125a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c011125d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0111260:	25 00 02 00 00       	and    $0x200,%eax
c0111265:	85 c0                	test   %eax,%eax
c0111267:	74 0c                	je     c0111275 <__intr_save+0x23>
        intr_disable();
c0111269:	e8 da 0e ff ff       	call   c0102148 <intr_disable>
        return 1;
c011126e:	b8 01 00 00 00       	mov    $0x1,%eax
c0111273:	eb 05                	jmp    c011127a <__intr_save+0x28>
    }
    return 0;
c0111275:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011127a:	c9                   	leave  
c011127b:	c3                   	ret    

c011127c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c011127c:	55                   	push   %ebp
c011127d:	89 e5                	mov    %esp,%ebp
c011127f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0111282:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111286:	74 05                	je     c011128d <__intr_restore+0x11>
        intr_enable();
c0111288:	e8 b5 0e ff ff       	call   c0102142 <intr_enable>
    }
}
c011128d:	c9                   	leave  
c011128e:	c3                   	ret    

c011128f <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c011128f:	55                   	push   %ebp
c0111290:	89 e5                	mov    %esp,%ebp
c0111292:	83 ec 28             	sub    $0x28,%esp
c0111295:	8b 45 08             	mov    0x8(%ebp),%eax
c0111298:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c011129b:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c011129f:	0f 84 80 00 00 00    	je     c0111325 <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c01112a5:	e8 a8 ff ff ff       	call   c0111252 <__intr_save>
c01112aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c01112ad:	a1 e4 40 15 c0       	mov    0xc01540e4,%eax
c01112b2:	99                   	cltd   
c01112b3:	c1 ea 14             	shr    $0x14,%edx
c01112b6:	01 d0                	add    %edx,%eax
c01112b8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01112bd:	29 d0                	sub    %edx,%eax
c01112bf:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c01112c3:	88 90 e0 30 15 c0    	mov    %dl,-0x3feacf20(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c01112c9:	8b 15 e4 40 15 c0    	mov    0xc01540e4,%edx
c01112cf:	a1 e0 40 15 c0       	mov    0xc01540e0,%eax
c01112d4:	29 c2                	sub    %eax,%edx
c01112d6:	89 d0                	mov    %edx,%eax
c01112d8:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01112dd:	7f 0d                	jg     c01112ec <dev_stdin_write+0x5d>
                p_wpos ++;
c01112df:	a1 e4 40 15 c0       	mov    0xc01540e4,%eax
c01112e4:	83 c0 01             	add    $0x1,%eax
c01112e7:	a3 e4 40 15 c0       	mov    %eax,0xc01540e4
            }
            if (!wait_queue_empty(wait_queue)) {
c01112ec:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01112f1:	89 04 24             	mov    %eax,(%esp)
c01112f4:	e8 90 8d ff ff       	call   c010a089 <wait_queue_empty>
c01112f9:	85 c0                	test   %eax,%eax
c01112fb:	75 1d                	jne    c011131a <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c01112fd:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c0111302:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111309:	00 
c011130a:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0111311:	80 
c0111312:	89 04 24             	mov    %eax,(%esp)
c0111315:	e8 26 8e ff ff       	call   c010a140 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c011131a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011131d:	89 04 24             	mov    %eax,(%esp)
c0111320:	e8 57 ff ff ff       	call   c011127c <__intr_restore>
    }
}
c0111325:	c9                   	leave  
c0111326:	c3                   	ret    

c0111327 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c0111327:	55                   	push   %ebp
c0111328:	89 e5                	mov    %esp,%ebp
c011132a:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c011132d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0111334:	e8 19 ff ff ff       	call   c0111252 <__intr_save>
c0111339:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011133c:	e9 bb 00 00 00       	jmp    c01113fc <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0111341:	8b 15 e0 40 15 c0    	mov    0xc01540e0,%edx
c0111347:	a1 e4 40 15 c0       	mov    0xc01540e4,%eax
c011134c:	39 c2                	cmp    %eax,%edx
c011134e:	7d 3d                	jge    c011138d <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0111350:	8b 45 08             	mov    0x8(%ebp),%eax
c0111353:	8d 50 01             	lea    0x1(%eax),%edx
c0111356:	89 55 08             	mov    %edx,0x8(%ebp)
c0111359:	8b 15 e0 40 15 c0    	mov    0xc01540e0,%edx
c011135f:	89 d1                	mov    %edx,%ecx
c0111361:	c1 f9 1f             	sar    $0x1f,%ecx
c0111364:	c1 e9 14             	shr    $0x14,%ecx
c0111367:	01 ca                	add    %ecx,%edx
c0111369:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c011136f:	29 ca                	sub    %ecx,%edx
c0111371:	0f b6 92 e0 30 15 c0 	movzbl -0x3feacf20(%edx),%edx
c0111378:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011137a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011137e:	a1 e0 40 15 c0       	mov    0xc01540e0,%eax
c0111383:	83 c0 01             	add    $0x1,%eax
c0111386:	a3 e0 40 15 c0       	mov    %eax,0xc01540e0
c011138b:	eb 6f                	jmp    c01113fc <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c011138d:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0111390:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c0111393:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c0111398:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c011139f:	80 
c01113a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01113a3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01113a7:	89 04 24             	mov    %eax,(%esp)
c01113aa:	e8 26 8e ff ff       	call   c010a1d5 <wait_current_set>
                local_intr_restore(intr_flag);
c01113af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113b2:	89 04 24             	mov    %eax,(%esp)
c01113b5:	e8 c2 fe ff ff       	call   c011127c <__intr_restore>

                schedule();
c01113ba:	e8 7c d3 ff ff       	call   c010e73b <schedule>

                local_intr_save(intr_flag);
c01113bf:	e8 8e fe ff ff       	call   c0111252 <__intr_save>
c01113c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c01113c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113ca:	89 04 24             	mov    %eax,(%esp)
c01113cd:	e8 d4 8c ff ff       	call   c010a0a6 <wait_in_queue>
c01113d2:	85 c0                	test   %eax,%eax
c01113d4:	74 14                	je     c01113ea <dev_stdin_read+0xc3>
c01113d6:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01113db:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01113de:	89 54 24 04          	mov    %edx,0x4(%esp)
c01113e2:	89 04 24             	mov    %eax,(%esp)
c01113e5:	e8 b7 8a ff ff       	call   c0109ea1 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c01113ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113ed:	8b 40 04             	mov    0x4(%eax),%eax
c01113f0:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c01113f5:	75 11                	jne    c0111408 <dev_stdin_read+0xe1>
c01113f7:	e9 45 ff ff ff       	jmp    c0111341 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c01113fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113ff:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111402:	0f 82 39 ff ff ff    	jb     c0111341 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c0111408:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011140b:	89 04 24             	mov    %eax,(%esp)
c011140e:	e8 69 fe ff ff       	call   c011127c <__intr_restore>
    return ret;
c0111413:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111416:	c9                   	leave  
c0111417:	c3                   	ret    

c0111418 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c0111418:	55                   	push   %ebp
c0111419:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c011141b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011141f:	74 07                	je     c0111428 <stdin_open+0x10>
        return -E_INVAL;
c0111421:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111426:	eb 05                	jmp    c011142d <stdin_open+0x15>
    }
    return 0;
c0111428:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011142d:	5d                   	pop    %ebp
c011142e:	c3                   	ret    

c011142f <stdin_close>:

static int
stdin_close(struct device *dev) {
c011142f:	55                   	push   %ebp
c0111430:	89 e5                	mov    %esp,%ebp
    return 0;
c0111432:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111437:	5d                   	pop    %ebp
c0111438:	c3                   	ret    

c0111439 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c0111439:	55                   	push   %ebp
c011143a:	89 e5                	mov    %esp,%ebp
c011143c:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c011143f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111443:	75 36                	jne    c011147b <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c0111445:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111448:	8b 50 0c             	mov    0xc(%eax),%edx
c011144b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011144e:	8b 00                	mov    (%eax),%eax
c0111450:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111454:	89 04 24             	mov    %eax,(%esp)
c0111457:	e8 cb fe ff ff       	call   c0111327 <dev_stdin_read>
c011145c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011145f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111463:	7e 11                	jle    c0111476 <stdin_io+0x3d>
            iob->io_resid -= ret;
c0111465:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111468:	8b 50 0c             	mov    0xc(%eax),%edx
c011146b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011146e:	29 c2                	sub    %eax,%edx
c0111470:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111473:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c0111476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111479:	eb 05                	jmp    c0111480 <stdin_io+0x47>
    }
    return -E_INVAL;
c011147b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111480:	c9                   	leave  
c0111481:	c3                   	ret    

c0111482 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111482:	55                   	push   %ebp
c0111483:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0111485:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011148a:	5d                   	pop    %ebp
c011148b:	c3                   	ret    

c011148c <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c011148c:	55                   	push   %ebp
c011148d:	89 e5                	mov    %esp,%ebp
c011148f:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c0111492:	8b 45 08             	mov    0x8(%ebp),%eax
c0111495:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011149b:	8b 45 08             	mov    0x8(%ebp),%eax
c011149e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c01114a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01114a8:	c7 40 08 18 14 11 c0 	movl   $0xc0111418,0x8(%eax)
    dev->d_close = stdin_close;
c01114af:	8b 45 08             	mov    0x8(%ebp),%eax
c01114b2:	c7 40 0c 2f 14 11 c0 	movl   $0xc011142f,0xc(%eax)
    dev->d_io = stdin_io;
c01114b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01114bc:	c7 40 10 39 14 11 c0 	movl   $0xc0111439,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c01114c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01114c6:	c7 40 14 82 14 11 c0 	movl   $0xc0111482,0x14(%eax)

    p_rpos = p_wpos = 0;
c01114cd:	c7 05 e4 40 15 c0 00 	movl   $0x0,0xc01540e4
c01114d4:	00 00 00 
c01114d7:	a1 e4 40 15 c0       	mov    0xc01540e4,%eax
c01114dc:	a3 e0 40 15 c0       	mov    %eax,0xc01540e0
    wait_queue_init(wait_queue);
c01114e1:	a1 c0 fe 14 c0       	mov    0xc014fec0,%eax
c01114e6:	89 04 24             	mov    %eax,(%esp)
c01114e9:	e8 f0 88 ff ff       	call   c0109dde <wait_queue_init>
}
c01114ee:	c9                   	leave  
c01114ef:	c3                   	ret    

c01114f0 <dev_init_stdin>:

void
dev_init_stdin(void) {
c01114f0:	55                   	push   %ebp
c01114f1:	89 e5                	mov    %esp,%ebp
c01114f3:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c01114f6:	e8 54 f8 ff ff       	call   c0110d4f <dev_create_inode>
c01114fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01114fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111502:	75 1c                	jne    c0111520 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c0111504:	c7 44 24 08 dc 95 11 	movl   $0xc01195dc,0x8(%esp)
c011150b:	c0 
c011150c:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0111513:	00 
c0111514:	c7 04 24 f5 95 11 c0 	movl   $0xc01195f5,(%esp)
c011151b:	e8 a8 f9 fe ff       	call   c0100ec8 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c0111520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111523:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111526:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011152a:	74 0d                	je     c0111539 <dev_init_stdin+0x49>
c011152c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011152f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111532:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0111537:	74 24                	je     c011155d <dev_init_stdin+0x6d>
c0111539:	c7 44 24 0c 10 96 11 	movl   $0xc0119610,0xc(%esp)
c0111540:	c0 
c0111541:	c7 44 24 08 43 96 11 	movl   $0xc0119643,0x8(%esp)
c0111548:	c0 
c0111549:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111550:	00 
c0111551:	c7 04 24 f5 95 11 c0 	movl   $0xc01195f5,(%esp)
c0111558:	e8 6b f9 fe ff       	call   c0100ec8 <__panic>
c011155d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111560:	89 04 24             	mov    %eax,(%esp)
c0111563:	e8 24 ff ff ff       	call   c011148c <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c0111568:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011156f:	00 
c0111570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111573:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111577:	c7 04 24 58 96 11 c0 	movl   $0xc0119658,(%esp)
c011157e:	e8 ac e5 ff ff       	call   c010fb2f <vfs_add_dev>
c0111583:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111586:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011158a:	74 23                	je     c01115af <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c011158c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011158f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111593:	c7 44 24 08 5e 96 11 	movl   $0xc011965e,0x8(%esp)
c011159a:	c0 
c011159b:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c01115a2:	00 
c01115a3:	c7 04 24 f5 95 11 c0 	movl   $0xc01195f5,(%esp)
c01115aa:	e8 19 f9 fe ff       	call   c0100ec8 <__panic>
    }
}
c01115af:	c9                   	leave  
c01115b0:	c3                   	ret    

c01115b1 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c01115b1:	55                   	push   %ebp
c01115b2:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c01115b4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01115b8:	74 07                	je     c01115c1 <stdout_open+0x10>
        return -E_INVAL;
c01115ba:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01115bf:	eb 05                	jmp    c01115c6 <stdout_open+0x15>
    }
    return 0;
c01115c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01115c6:	5d                   	pop    %ebp
c01115c7:	c3                   	ret    

c01115c8 <stdout_close>:

static int
stdout_close(struct device *dev) {
c01115c8:	55                   	push   %ebp
c01115c9:	89 e5                	mov    %esp,%ebp
    return 0;
c01115cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01115d0:	5d                   	pop    %ebp
c01115d1:	c3                   	ret    

c01115d2 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01115d2:	55                   	push   %ebp
c01115d3:	89 e5                	mov    %esp,%ebp
c01115d5:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c01115d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01115dc:	74 41                	je     c011161f <stdout_io+0x4d>
        char *data = iob->io_base;
c01115de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115e1:	8b 00                	mov    (%eax),%eax
c01115e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01115e6:	eb 26                	jmp    c011160e <stdout_io+0x3c>
            cputchar(*data ++);
c01115e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115eb:	8d 50 01             	lea    0x1(%eax),%edx
c01115ee:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01115f1:	0f b6 00             	movzbl (%eax),%eax
c01115f4:	0f be c0             	movsbl %al,%eax
c01115f7:	89 04 24             	mov    %eax,(%esp)
c01115fa:	e8 8c ed fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c01115ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111602:	8b 40 0c             	mov    0xc(%eax),%eax
c0111605:	8d 50 ff             	lea    -0x1(%eax),%edx
c0111608:	8b 45 0c             	mov    0xc(%ebp),%eax
c011160b:	89 50 0c             	mov    %edx,0xc(%eax)
c011160e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111611:	8b 40 0c             	mov    0xc(%eax),%eax
c0111614:	85 c0                	test   %eax,%eax
c0111616:	75 d0                	jne    c01115e8 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c0111618:	b8 00 00 00 00       	mov    $0x0,%eax
c011161d:	eb 05                	jmp    c0111624 <stdout_io+0x52>
    }
    return -E_INVAL;
c011161f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111624:	c9                   	leave  
c0111625:	c3                   	ret    

c0111626 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c0111626:	55                   	push   %ebp
c0111627:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c0111629:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011162e:	5d                   	pop    %ebp
c011162f:	c3                   	ret    

c0111630 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0111630:	55                   	push   %ebp
c0111631:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0111633:	8b 45 08             	mov    0x8(%ebp),%eax
c0111636:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011163c:	8b 45 08             	mov    0x8(%ebp),%eax
c011163f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c0111646:	8b 45 08             	mov    0x8(%ebp),%eax
c0111649:	c7 40 08 b1 15 11 c0 	movl   $0xc01115b1,0x8(%eax)
    dev->d_close = stdout_close;
c0111650:	8b 45 08             	mov    0x8(%ebp),%eax
c0111653:	c7 40 0c c8 15 11 c0 	movl   $0xc01115c8,0xc(%eax)
    dev->d_io = stdout_io;
c011165a:	8b 45 08             	mov    0x8(%ebp),%eax
c011165d:	c7 40 10 d2 15 11 c0 	movl   $0xc01115d2,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0111664:	8b 45 08             	mov    0x8(%ebp),%eax
c0111667:	c7 40 14 26 16 11 c0 	movl   $0xc0111626,0x14(%eax)
}
c011166e:	5d                   	pop    %ebp
c011166f:	c3                   	ret    

c0111670 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111670:	55                   	push   %ebp
c0111671:	89 e5                	mov    %esp,%ebp
c0111673:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0111676:	e8 d4 f6 ff ff       	call   c0110d4f <dev_create_inode>
c011167b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011167e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111682:	75 1c                	jne    c01116a0 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0111684:	c7 44 24 08 78 96 11 	movl   $0xc0119678,0x8(%esp)
c011168b:	c0 
c011168c:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111693:	00 
c0111694:	c7 04 24 92 96 11 c0 	movl   $0xc0119692,(%esp)
c011169b:	e8 28 f8 fe ff       	call   c0100ec8 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c01116a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01116a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01116aa:	74 0d                	je     c01116b9 <dev_init_stdout+0x49>
c01116ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116af:	8b 40 2c             	mov    0x2c(%eax),%eax
c01116b2:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01116b7:	74 24                	je     c01116dd <dev_init_stdout+0x6d>
c01116b9:	c7 44 24 0c ac 96 11 	movl   $0xc01196ac,0xc(%esp)
c01116c0:	c0 
c01116c1:	c7 44 24 08 df 96 11 	movl   $0xc01196df,0x8(%esp)
c01116c8:	c0 
c01116c9:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01116d0:	00 
c01116d1:	c7 04 24 92 96 11 c0 	movl   $0xc0119692,(%esp)
c01116d8:	e8 eb f7 fe ff       	call   c0100ec8 <__panic>
c01116dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01116e0:	89 04 24             	mov    %eax,(%esp)
c01116e3:	e8 48 ff ff ff       	call   c0111630 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01116e8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01116ef:	00 
c01116f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01116f7:	c7 04 24 f4 96 11 c0 	movl   $0xc01196f4,(%esp)
c01116fe:	e8 2c e4 ff ff       	call   c010fb2f <vfs_add_dev>
c0111703:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111706:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011170a:	74 23                	je     c011172f <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c011170c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011170f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111713:	c7 44 24 08 fb 96 11 	movl   $0xc01196fb,0x8(%esp)
c011171a:	c0 
c011171b:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c0111722:	00 
c0111723:	c7 04 24 92 96 11 c0 	movl   $0xc0119692,(%esp)
c011172a:	e8 99 f7 fe ff       	call   c0100ec8 <__panic>
    }
}
c011172f:	c9                   	leave  
c0111730:	c3                   	ret    

c0111731 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0111731:	55                   	push   %ebp
c0111732:	89 e5                	mov    %esp,%ebp
c0111734:	56                   	push   %esi
c0111735:	53                   	push   %ebx
c0111736:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0111739:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011173d:	74 0b                	je     c011174a <bitmap_create+0x19>
c011173f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111742:	83 c0 20             	add    $0x20,%eax
c0111745:	3b 45 08             	cmp    0x8(%ebp),%eax
c0111748:	77 24                	ja     c011176e <bitmap_create+0x3d>
c011174a:	c7 44 24 0c 18 97 11 	movl   $0xc0119718,0xc(%esp)
c0111751:	c0 
c0111752:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c0111759:	c0 
c011175a:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111761:	00 
c0111762:	c7 04 24 55 97 11 c0 	movl   $0xc0119755,(%esp)
c0111769:	e8 5a f7 fe ff       	call   c0100ec8 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c011176e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0111775:	e8 83 35 ff ff       	call   c0104cfd <kmalloc>
c011177a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011177d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111781:	75 0a                	jne    c011178d <bitmap_create+0x5c>
        return NULL;
c0111783:	b8 00 00 00 00       	mov    $0x0,%eax
c0111788:	e9 43 01 00 00       	jmp    c01118d0 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c011178d:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c0111794:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111797:	8b 55 08             	mov    0x8(%ebp),%edx
c011179a:	01 d0                	add    %edx,%eax
c011179c:	83 e8 01             	sub    $0x1,%eax
c011179f:	ba 00 00 00 00       	mov    $0x0,%edx
c01117a4:	f7 75 ec             	divl   -0x14(%ebp)
c01117a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c01117aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01117ad:	c1 e0 02             	shl    $0x2,%eax
c01117b0:	89 04 24             	mov    %eax,(%esp)
c01117b3:	e8 45 35 ff ff       	call   c0104cfd <kmalloc>
c01117b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01117bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01117bf:	75 15                	jne    c01117d6 <bitmap_create+0xa5>
        kfree(bitmap);
c01117c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117c4:	89 04 24             	mov    %eax,(%esp)
c01117c7:	e8 4c 35 ff ff       	call   c0104d18 <kfree>
        return NULL;
c01117cc:	b8 00 00 00 00       	mov    $0x0,%eax
c01117d1:	e9 fa 00 00 00       	jmp    c01118d0 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01117d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01117dc:	89 10                	mov    %edx,(%eax)
c01117de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117e1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01117e4:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01117e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01117ea:	c1 e0 02             	shl    $0x2,%eax
c01117ed:	89 44 24 08          	mov    %eax,0x8(%esp)
c01117f1:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c01117f8:	ff 
c01117f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01117fc:	89 04 24             	mov    %eax,(%esp)
c01117ff:	e8 4c 3f 00 00       	call   c0115750 <memset>
c0111804:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111807:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c011180a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011180d:	c1 e0 05             	shl    $0x5,%eax
c0111810:	3b 45 08             	cmp    0x8(%ebp),%eax
c0111813:	0f 84 b4 00 00 00    	je     c01118cd <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c0111819:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011181c:	83 e8 01             	sub    $0x1,%eax
c011181f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111822:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111825:	c1 e0 05             	shl    $0x5,%eax
c0111828:	89 c2                	mov    %eax,%edx
c011182a:	8b 45 08             	mov    0x8(%ebp),%eax
c011182d:	29 d0                	sub    %edx,%eax
c011182f:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111832:	8b 45 08             	mov    0x8(%ebp),%eax
c0111835:	c1 e8 05             	shr    $0x5,%eax
c0111838:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c011183b:	74 24                	je     c0111861 <bitmap_create+0x130>
c011183d:	c7 44 24 0c 6a 97 11 	movl   $0xc011976a,0xc(%esp)
c0111844:	c0 
c0111845:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c011184c:	c0 
c011184d:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c0111854:	00 
c0111855:	c7 04 24 55 97 11 c0 	movl   $0xc0119755,(%esp)
c011185c:	e8 67 f6 fe ff       	call   c0100ec8 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111861:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111865:	74 06                	je     c011186d <bitmap_create+0x13c>
c0111867:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011186b:	76 24                	jbe    c0111891 <bitmap_create+0x160>
c011186d:	c7 44 24 0c 84 97 11 	movl   $0xc0119784,0xc(%esp)
c0111874:	c0 
c0111875:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c011187c:	c0 
c011187d:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c0111884:	00 
c0111885:	c7 04 24 55 97 11 c0 	movl   $0xc0119755,(%esp)
c011188c:	e8 37 f6 fe ff       	call   c0100ec8 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c0111891:	eb 34                	jmp    c01118c7 <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c0111893:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111896:	8b 40 08             	mov    0x8(%eax),%eax
c0111899:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011189c:	c1 e2 02             	shl    $0x2,%edx
c011189f:	01 c2                	add    %eax,%edx
c01118a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01118a4:	8b 40 08             	mov    0x8(%eax),%eax
c01118a7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01118aa:	c1 e1 02             	shl    $0x2,%ecx
c01118ad:	01 c8                	add    %ecx,%eax
c01118af:	8b 18                	mov    (%eax),%ebx
c01118b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118b4:	be 01 00 00 00       	mov    $0x1,%esi
c01118b9:	89 c1                	mov    %eax,%ecx
c01118bb:	d3 e6                	shl    %cl,%esi
c01118bd:	89 f0                	mov    %esi,%eax
c01118bf:	31 d8                	xor    %ebx,%eax
c01118c1:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c01118c3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01118c7:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01118cb:	76 c6                	jbe    c0111893 <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c01118cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01118d0:	83 c4 30             	add    $0x30,%esp
c01118d3:	5b                   	pop    %ebx
c01118d4:	5e                   	pop    %esi
c01118d5:	5d                   	pop    %ebp
c01118d6:	c3                   	ret    

c01118d7 <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01118d7:	55                   	push   %ebp
c01118d8:	89 e5                	mov    %esp,%ebp
c01118da:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01118dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01118e0:	8b 40 08             	mov    0x8(%eax),%eax
c01118e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01118e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01118e9:	8b 40 04             	mov    0x4(%eax),%eax
c01118ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c01118ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01118f6:	e9 bb 00 00 00       	jmp    c01119b6 <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c01118fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111905:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111908:	01 d0                	add    %edx,%eax
c011190a:	8b 00                	mov    (%eax),%eax
c011190c:	85 c0                	test   %eax,%eax
c011190e:	0f 84 9e 00 00 00    	je     c01119b2 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111914:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011191b:	eb 6b                	jmp    c0111988 <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c011191d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111920:	ba 01 00 00 00       	mov    $0x1,%edx
c0111925:	89 c1                	mov    %eax,%ecx
c0111927:	d3 e2                	shl    %cl,%edx
c0111929:	89 d0                	mov    %edx,%eax
c011192b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c011192e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111931:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111938:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011193b:	01 d0                	add    %edx,%eax
c011193d:	8b 00                	mov    (%eax),%eax
c011193f:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111942:	85 c0                	test   %eax,%eax
c0111944:	74 3e                	je     c0111984 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c0111946:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111949:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111950:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111953:	01 c2                	add    %eax,%edx
c0111955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111958:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c011195f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111962:	01 c8                	add    %ecx,%eax
c0111964:	8b 00                	mov    (%eax),%eax
c0111966:	33 45 e4             	xor    -0x1c(%ebp),%eax
c0111969:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c011196b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011196e:	c1 e0 05             	shl    $0x5,%eax
c0111971:	89 c2                	mov    %eax,%edx
c0111973:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111976:	01 c2                	add    %eax,%edx
c0111978:	8b 45 0c             	mov    0xc(%ebp),%eax
c011197b:	89 10                	mov    %edx,(%eax)
                    return 0;
c011197d:	b8 00 00 00 00       	mov    $0x0,%eax
c0111982:	eb 43                	jmp    c01119c7 <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111984:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111988:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c011198c:	76 8f                	jbe    c011191d <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c011198e:	c7 44 24 0c a9 97 11 	movl   $0xc01197a9,0xc(%esp)
c0111995:	c0 
c0111996:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c011199d:	c0 
c011199e:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01119a5:	00 
c01119a6:	c7 04 24 55 97 11 c0 	movl   $0xc0119755,(%esp)
c01119ad:	e8 16 f5 fe ff       	call   c0100ec8 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c01119b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01119b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119b9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01119bc:	0f 82 39 ff ff ff    	jb     c01118fb <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c01119c2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01119c7:	c9                   	leave  
c01119c8:	c3                   	ret    

c01119c9 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c01119c9:	55                   	push   %ebp
c01119ca:	89 e5                	mov    %esp,%ebp
c01119cc:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01119cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01119d2:	8b 00                	mov    (%eax),%eax
c01119d4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01119d7:	77 24                	ja     c01119fd <bitmap_translate+0x34>
c01119d9:	c7 44 24 0c ab 97 11 	movl   $0xc01197ab,0xc(%esp)
c01119e0:	c0 
c01119e1:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c01119e8:	c0 
c01119e9:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c01119f0:	00 
c01119f1:	c7 04 24 55 97 11 c0 	movl   $0xc0119755,(%esp)
c01119f8:	e8 cb f4 fe ff       	call   c0100ec8 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c01119fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a00:	c1 e8 05             	shr    $0x5,%eax
c0111a03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111a06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a09:	83 e0 1f             	and    $0x1f,%eax
c0111a0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0111a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a12:	8b 40 08             	mov    0x8(%eax),%eax
c0111a15:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111a18:	c1 e2 02             	shl    $0x2,%edx
c0111a1b:	01 c2                	add    %eax,%edx
c0111a1d:	8b 45 10             	mov    0x10(%ebp),%eax
c0111a20:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0111a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a25:	ba 01 00 00 00       	mov    $0x1,%edx
c0111a2a:	89 c1                	mov    %eax,%ecx
c0111a2c:	d3 e2                	shl    %cl,%edx
c0111a2e:	89 d0                	mov    %edx,%eax
c0111a30:	89 c2                	mov    %eax,%edx
c0111a32:	8b 45 14             	mov    0x14(%ebp),%eax
c0111a35:	89 10                	mov    %edx,(%eax)
}
c0111a37:	c9                   	leave  
c0111a38:	c3                   	ret    

c0111a39 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c0111a39:	55                   	push   %ebp
c0111a3a:	89 e5                	mov    %esp,%ebp
c0111a3c:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111a3f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111a42:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a46:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111a49:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111a4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a57:	89 04 24             	mov    %eax,(%esp)
c0111a5a:	e8 6a ff ff ff       	call   c01119c9 <bitmap_translate>
    return (*word & mask);
c0111a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a62:	8b 10                	mov    (%eax),%edx
c0111a64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a67:	21 d0                	and    %edx,%eax
}
c0111a69:	c9                   	leave  
c0111a6a:	c3                   	ret    

c0111a6b <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111a6b:	55                   	push   %ebp
c0111a6c:	89 e5                	mov    %esp,%ebp
c0111a6e:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111a71:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111a74:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a78:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111a7b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a89:	89 04 24             	mov    %eax,(%esp)
c0111a8c:	e8 38 ff ff ff       	call   c01119c9 <bitmap_translate>
    assert(!(*word & mask));
c0111a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a94:	8b 10                	mov    (%eax),%edx
c0111a96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a99:	21 d0                	and    %edx,%eax
c0111a9b:	85 c0                	test   %eax,%eax
c0111a9d:	74 24                	je     c0111ac3 <bitmap_free+0x58>
c0111a9f:	c7 44 24 0c c1 97 11 	movl   $0xc01197c1,0xc(%esp)
c0111aa6:	c0 
c0111aa7:	c7 44 24 08 40 97 11 	movl   $0xc0119740,0x8(%esp)
c0111aae:	c0 
c0111aaf:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111ab6:	00 
c0111ab7:	c7 04 24 55 97 11 c0 	movl   $0xc0119755,(%esp)
c0111abe:	e8 05 f4 fe ff       	call   c0100ec8 <__panic>
    *word |= mask;
c0111ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ac6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111ac9:	8b 0a                	mov    (%edx),%ecx
c0111acb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111ace:	09 ca                	or     %ecx,%edx
c0111ad0:	89 10                	mov    %edx,(%eax)
}
c0111ad2:	c9                   	leave  
c0111ad3:	c3                   	ret    

c0111ad4 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c0111ad4:	55                   	push   %ebp
c0111ad5:	89 e5                	mov    %esp,%ebp
c0111ad7:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c0111ada:	8b 45 08             	mov    0x8(%ebp),%eax
c0111add:	8b 40 08             	mov    0x8(%eax),%eax
c0111ae0:	89 04 24             	mov    %eax,(%esp)
c0111ae3:	e8 30 32 ff ff       	call   c0104d18 <kfree>
    kfree(bitmap);
c0111ae8:	8b 45 08             	mov    0x8(%ebp),%eax
c0111aeb:	89 04 24             	mov    %eax,(%esp)
c0111aee:	e8 25 32 ff ff       	call   c0104d18 <kfree>
}
c0111af3:	c9                   	leave  
c0111af4:	c3                   	ret    

c0111af5 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0111af5:	55                   	push   %ebp
c0111af6:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0111af8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111afc:	74 12                	je     c0111b10 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0111afe:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b01:	8b 40 04             	mov    0x4(%eax),%eax
c0111b04:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111b0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111b0e:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111b10:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b13:	8b 40 08             	mov    0x8(%eax),%eax
}
c0111b16:	5d                   	pop    %ebp
c0111b17:	c3                   	ret    

c0111b18 <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c0111b18:	55                   	push   %ebp
c0111b19:	89 e5                	mov    %esp,%ebp
c0111b1b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111b1e:	c7 04 24 d1 97 11 c0 	movl   $0xc01197d1,(%esp)
c0111b25:	e8 d6 08 00 00       	call   c0112400 <sfs_mount>
c0111b2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111b2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111b31:	74 23                	je     c0111b56 <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b36:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111b3a:	c7 44 24 08 d7 97 11 	movl   $0xc01197d7,0x8(%esp)
c0111b41:	c0 
c0111b42:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0111b49:	00 
c0111b4a:	c7 04 24 f4 97 11 c0 	movl   $0xc01197f4,(%esp)
c0111b51:	e8 72 f3 fe ff       	call   c0100ec8 <__panic>
    }
}
c0111b56:	c9                   	leave  
c0111b57:	c3                   	ret    

c0111b58 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c0111b58:	55                   	push   %ebp
c0111b59:	89 e5                	mov    %esp,%ebp
c0111b5b:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111b5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b61:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b68:	74 0a                	je     c0111b74 <sfs_sync+0x1c>
c0111b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b6d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111b70:	85 c0                	test   %eax,%eax
c0111b72:	74 24                	je     c0111b98 <sfs_sync+0x40>
c0111b74:	c7 44 24 0c 08 98 11 	movl   $0xc0119808,0xc(%esp)
c0111b7b:	c0 
c0111b7c:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111b83:	c0 
c0111b84:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111b8b:	00 
c0111b8c:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111b93:	e8 30 f3 fe ff       	call   c0100ec8 <__panic>
c0111b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111b9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ba1:	89 04 24             	mov    %eax,(%esp)
c0111ba4:	e8 f5 2f 00 00       	call   c0114b9e <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0111ba9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111bac:	83 c0 60             	add    $0x60,%eax
c0111baf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111bb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0111bb8:	eb 74                	jmp    c0111c2e <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0111bba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111bbd:	83 e8 1c             	sub    $0x1c,%eax
c0111bc0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0111bc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111bc6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111bc9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111bcd:	74 17                	je     c0111be6 <sfs_sync+0x8e>
c0111bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bd2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111bd5:	85 c0                	test   %eax,%eax
c0111bd7:	74 0d                	je     c0111be6 <sfs_sync+0x8e>
c0111bd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111bdc:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111bdf:	8b 40 18             	mov    0x18(%eax),%eax
c0111be2:	85 c0                	test   %eax,%eax
c0111be4:	75 24                	jne    c0111c0a <sfs_sync+0xb2>
c0111be6:	c7 44 24 0c 5c 98 11 	movl   $0xc011985c,0xc(%esp)
c0111bed:	c0 
c0111bee:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111bf5:	c0 
c0111bf6:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c0111bfd:	00 
c0111bfe:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111c05:	e8 be f2 fe ff       	call   c0100ec8 <__panic>
c0111c0a:	c7 44 24 04 aa 98 11 	movl   $0xc01198aa,0x4(%esp)
c0111c11:	c0 
c0111c12:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c15:	89 04 24             	mov    %eax,(%esp)
c0111c18:	e8 eb d7 ff ff       	call   c010f408 <inode_check>
c0111c1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111c20:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111c23:	8b 40 18             	mov    0x18(%eax),%eax
c0111c26:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111c29:	89 14 24             	mov    %edx,(%esp)
c0111c2c:	ff d0                	call   *%eax
c0111c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c31:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111c34:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111c37:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0111c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c40:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111c43:	0f 85 71 ff ff ff    	jne    c0111bba <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c0111c49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c4c:	89 04 24             	mov    %eax,(%esp)
c0111c4f:	e8 76 2f 00 00       	call   c0114bca <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111c54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c57:	8b 40 34             	mov    0x34(%eax),%eax
c0111c5a:	85 c0                	test   %eax,%eax
c0111c5c:	74 50                	je     c0111cae <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111c5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c61:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111c68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c6b:	89 04 24             	mov    %eax,(%esp)
c0111c6e:	e8 bd 2d 00 00       	call   c0114a30 <sfs_sync_super>
c0111c73:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111c76:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111c7a:	74 0f                	je     c0111c8b <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111c7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c7f:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111c86:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c89:	eb 28                	jmp    c0111cb3 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c0111c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c8e:	89 04 24             	mov    %eax,(%esp)
c0111c91:	e8 26 2e 00 00       	call   c0114abc <sfs_sync_freemap>
c0111c96:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111c99:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111c9d:	74 0f                	je     c0111cae <sfs_sync+0x156>
            sfs->super_dirty = 1;
c0111c9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111ca2:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111ca9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111cac:	eb 05                	jmp    c0111cb3 <sfs_sync+0x15b>
        }
    }
    return 0;
c0111cae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111cb3:	c9                   	leave  
c0111cb4:	c3                   	ret    

c0111cb5 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c0111cb5:	55                   	push   %ebp
c0111cb6:	89 e5                	mov    %esp,%ebp
c0111cb8:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0111cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111cc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111cc5:	74 0a                	je     c0111cd1 <sfs_get_root+0x1c>
c0111cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111cca:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111ccd:	85 c0                	test   %eax,%eax
c0111ccf:	74 24                	je     c0111cf5 <sfs_get_root+0x40>
c0111cd1:	c7 44 24 0c 08 98 11 	movl   $0xc0119808,0xc(%esp)
c0111cd8:	c0 
c0111cd9:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111ce0:	c0 
c0111ce1:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c0111ce8:	00 
c0111ce9:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111cf0:	e8 d3 f1 fe ff       	call   c0100ec8 <__panic>
c0111cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111cf8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111cff:	00 
c0111d00:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111d03:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111d07:	89 04 24             	mov    %eax,(%esp)
c0111d0a:	e8 e1 0b 00 00       	call   c01128f0 <sfs_load_inode>
c0111d0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111d12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111d16:	74 23                	je     c0111d3b <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0111d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d1b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111d1f:	c7 44 24 08 b0 98 11 	movl   $0xc01198b0,0x8(%esp)
c0111d26:	c0 
c0111d27:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111d2e:	00 
c0111d2f:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111d36:	e8 8d f1 fe ff       	call   c0100ec8 <__panic>
    }
    return node;
c0111d3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111d3e:	c9                   	leave  
c0111d3f:	c3                   	ret    

c0111d40 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111d40:	55                   	push   %ebp
c0111d41:	89 e5                	mov    %esp,%ebp
c0111d43:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111d46:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111d4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111d50:	74 0a                	je     c0111d5c <sfs_unmount+0x1c>
c0111d52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d55:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111d58:	85 c0                	test   %eax,%eax
c0111d5a:	74 24                	je     c0111d80 <sfs_unmount+0x40>
c0111d5c:	c7 44 24 0c 08 98 11 	movl   $0xc0119808,0xc(%esp)
c0111d63:	c0 
c0111d64:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111d6b:	c0 
c0111d6c:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111d73:	00 
c0111d74:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111d7b:	e8 48 f1 fe ff       	call   c0100ec8 <__panic>
c0111d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d83:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d89:	83 c0 60             	add    $0x60,%eax
c0111d8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111d8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d92:	8b 40 04             	mov    0x4(%eax),%eax
c0111d95:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111d98:	0f 94 c0             	sete   %al
c0111d9b:	0f b6 c0             	movzbl %al,%eax
c0111d9e:	85 c0                	test   %eax,%eax
c0111da0:	75 07                	jne    c0111da9 <sfs_unmount+0x69>
        return -E_BUSY;
c0111da2:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111da7:	eb 68                	jmp    c0111e11 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111da9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dac:	8b 40 34             	mov    0x34(%eax),%eax
c0111daf:	85 c0                	test   %eax,%eax
c0111db1:	74 24                	je     c0111dd7 <sfs_unmount+0x97>
c0111db3:	c7 44 24 0c c9 98 11 	movl   $0xc01198c9,0xc(%esp)
c0111dba:	c0 
c0111dbb:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111dc2:	c0 
c0111dc3:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111dca:	00 
c0111dcb:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111dd2:	e8 f1 f0 fe ff       	call   c0100ec8 <__panic>
    bitmap_destroy(sfs->freemap);
c0111dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dda:	8b 40 30             	mov    0x30(%eax),%eax
c0111ddd:	89 04 24             	mov    %eax,(%esp)
c0111de0:	e8 ef fc ff ff       	call   c0111ad4 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111de5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111de8:	8b 40 38             	mov    0x38(%eax),%eax
c0111deb:	89 04 24             	mov    %eax,(%esp)
c0111dee:	e8 25 2f ff ff       	call   c0104d18 <kfree>
    kfree(sfs->hash_list);
c0111df3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111df6:	8b 40 68             	mov    0x68(%eax),%eax
c0111df9:	89 04 24             	mov    %eax,(%esp)
c0111dfc:	e8 17 2f ff ff       	call   c0104d18 <kfree>
    kfree(sfs);
c0111e01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111e04:	89 04 24             	mov    %eax,(%esp)
c0111e07:	e8 0c 2f ff ff       	call   c0104d18 <kfree>
    return 0;
c0111e0c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111e11:	c9                   	leave  
c0111e12:	c3                   	ret    

c0111e13 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111e13:	55                   	push   %ebp
c0111e14:	89 e5                	mov    %esp,%ebp
c0111e16:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111e19:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111e1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111e23:	74 0a                	je     c0111e2f <sfs_cleanup+0x1c>
c0111e25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111e28:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111e2b:	85 c0                	test   %eax,%eax
c0111e2d:	74 24                	je     c0111e53 <sfs_cleanup+0x40>
c0111e2f:	c7 44 24 0c 08 98 11 	movl   $0xc0119808,0xc(%esp)
c0111e36:	c0 
c0111e37:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111e3e:	c0 
c0111e3f:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111e46:	00 
c0111e47:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111e4e:	e8 75 f0 fe ff       	call   c0100ec8 <__panic>
c0111e53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111e56:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111e59:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e5c:	8b 40 04             	mov    0x4(%eax),%eax
c0111e5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111e62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e65:	8b 40 08             	mov    0x8(%eax),%eax
c0111e68:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111e6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e6e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111e71:	89 d1                	mov    %edx,%ecx
c0111e73:	29 c1                	sub    %eax,%ecx
c0111e75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111e78:	8d 50 0c             	lea    0xc(%eax),%edx
c0111e7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e7e:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111e82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e85:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111e89:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111e8d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111e91:	c7 04 24 dc 98 11 c0 	movl   $0xc01198dc,(%esp)
c0111e98:	e8 c8 e4 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111e9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111ea4:	eb 1d                	jmp    c0111ec3 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ea9:	8b 40 70             	mov    0x70(%eax),%eax
c0111eac:	8b 55 08             	mov    0x8(%ebp),%edx
c0111eaf:	89 14 24             	mov    %edx,(%esp)
c0111eb2:	ff d0                	call   *%eax
c0111eb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111eb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111ebb:	75 02                	jne    c0111ebf <sfs_cleanup+0xac>
            break;
c0111ebd:	eb 0a                	jmp    c0111ec9 <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111ebf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111ec3:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111ec7:	7e dd                	jle    c0111ea6 <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111ec9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111ecd:	74 2d                	je     c0111efc <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111ecf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ed2:	8d 50 0c             	lea    0xc(%eax),%edx
c0111ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ed8:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111edc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111ee0:	c7 44 24 08 fb 98 11 	movl   $0xc01198fb,0x8(%esp)
c0111ee7:	c0 
c0111ee8:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111eef:	00 
c0111ef0:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111ef7:	e8 38 f0 fe ff       	call   c0100f34 <__warn>
    }
}
c0111efc:	c9                   	leave  
c0111efd:	c3                   	ret    

c0111efe <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111efe:	55                   	push   %ebp
c0111eff:	89 e5                	mov    %esp,%ebp
c0111f01:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111f04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f07:	c1 e0 0c             	shl    $0xc,%eax
c0111f0a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111f0e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111f15:	00 
c0111f16:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f1d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111f20:	89 04 24             	mov    %eax,(%esp)
c0111f23:	e8 96 94 ff ff       	call   c010b3be <iobuf_init>
c0111f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f2e:	8b 40 10             	mov    0x10(%eax),%eax
c0111f31:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111f38:	00 
c0111f39:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111f3c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111f40:	8b 55 08             	mov    0x8(%ebp),%edx
c0111f43:	89 14 24             	mov    %edx,(%esp)
c0111f46:	ff d0                	call   *%eax
}
c0111f48:	c9                   	leave  
c0111f49:	c3                   	ret    

c0111f4a <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111f4a:	55                   	push   %ebp
c0111f4b:	89 e5                	mov    %esp,%ebp
c0111f4d:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111f50:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111f53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f5a:	89 04 24             	mov    %eax,(%esp)
c0111f5d:	e8 93 fb ff ff       	call   c0111af5 <bitmap_getdata>
c0111f62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111f65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f69:	74 0f                	je     c0111f7a <sfs_init_freemap+0x30>
c0111f6b:	8b 45 14             	mov    0x14(%ebp),%eax
c0111f6e:	c1 e0 0c             	shl    $0xc,%eax
c0111f71:	89 c2                	mov    %eax,%edx
c0111f73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111f76:	39 c2                	cmp    %eax,%edx
c0111f78:	74 24                	je     c0111f9e <sfs_init_freemap+0x54>
c0111f7a:	c7 44 24 0c 18 99 11 	movl   $0xc0119918,0xc(%esp)
c0111f81:	c0 
c0111f82:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0111f89:	c0 
c0111f8a:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111f91:	00 
c0111f92:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0111f99:	e8 2a ef fe ff       	call   c0100ec8 <__panic>
    while (nblks != 0) {
c0111f9e:	eb 36                	jmp    c0111fd6 <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111fa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111fa3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111fa7:	8b 45 10             	mov    0x10(%ebp),%eax
c0111faa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fb1:	89 04 24             	mov    %eax,(%esp)
c0111fb4:	e8 45 ff ff ff       	call   c0111efe <sfs_init_read>
c0111fb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111fbc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111fc0:	74 05                	je     c0111fc7 <sfs_init_freemap+0x7d>
            return ret;
c0111fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111fc5:	eb 1a                	jmp    c0111fe1 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111fc7:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111fcb:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111fcf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111fd6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111fda:	75 c4                	jne    c0111fa0 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111fdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111fe1:	c9                   	leave  
c0111fe2:	c3                   	ret    

c0111fe3 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111fe3:	55                   	push   %ebp
c0111fe4:	89 e5                	mov    %esp,%ebp
c0111fe6:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111fe9:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fec:	8b 40 04             	mov    0x4(%eax),%eax
c0111fef:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111ff4:	74 0a                	je     c0112000 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111ff6:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111ffb:	e9 fe 03 00 00       	jmp    c01123fe <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0112000:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0112007:	e8 ef d4 ff ff       	call   c010f4fb <__alloc_fs>
c011200c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011200f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112013:	75 0a                	jne    c011201f <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0112015:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011201a:	e9 df 03 00 00       	jmp    c01123fe <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011201f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112022:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0112025:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112029:	74 0a                	je     c0112035 <sfs_do_mount+0x52>
c011202b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011202e:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112031:	85 c0                	test   %eax,%eax
c0112033:	74 24                	je     c0112059 <sfs_do_mount+0x76>
c0112035:	c7 44 24 0c 08 98 11 	movl   $0xc0119808,0xc(%esp)
c011203c:	c0 
c011203d:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c0112044:	c0 
c0112045:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c011204c:	00 
c011204d:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0112054:	e8 6f ee fe ff       	call   c0100ec8 <__panic>
c0112059:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011205c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c011205f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112062:	8b 55 08             	mov    0x8(%ebp),%edx
c0112065:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0112068:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c011206f:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0112076:	e8 82 2c ff ff       	call   c0104cfd <kmalloc>
c011207b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011207e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112081:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0112084:	89 50 38             	mov    %edx,0x38(%eax)
c0112087:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011208a:	8b 40 38             	mov    0x38(%eax),%eax
c011208d:	85 c0                	test   %eax,%eax
c011208f:	75 05                	jne    c0112096 <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0112091:	e9 5a 03 00 00       	jmp    c01123f0 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0112096:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112099:	89 44 24 08          	mov    %eax,0x8(%esp)
c011209d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01120a4:	00 
c01120a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01120a8:	89 04 24             	mov    %eax,(%esp)
c01120ab:	e8 4e fe ff ff       	call   c0111efe <sfs_init_read>
c01120b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01120b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01120b7:	74 05                	je     c01120be <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c01120b9:	e9 27 03 00 00       	jmp    c01123e5 <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c01120be:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c01120c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01120c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c01120cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120ce:	8b 00                	mov    (%eax),%eax
c01120d0:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c01120d5:	74 22                	je     c01120f9 <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c01120d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120da:	8b 00                	mov    (%eax),%eax
c01120dc:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c01120e3:	2f 
c01120e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120e8:	c7 04 24 44 99 11 c0 	movl   $0xc0119944,(%esp)
c01120ef:	e8 71 e2 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c01120f4:	e9 ec 02 00 00       	jmp    c01123e5 <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c01120f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01120fc:	8b 50 04             	mov    0x4(%eax),%edx
c01120ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0112102:	8b 00                	mov    (%eax),%eax
c0112104:	39 c2                	cmp    %eax,%edx
c0112106:	76 24                	jbe    c011212c <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0112108:	8b 45 08             	mov    0x8(%ebp),%eax
c011210b:	8b 10                	mov    (%eax),%edx
c011210d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112110:	8b 40 04             	mov    0x4(%eax),%eax
c0112113:	89 54 24 08          	mov    %edx,0x8(%esp)
c0112117:	89 44 24 04          	mov    %eax,0x4(%esp)
c011211b:	c7 04 24 7c 99 11 c0 	movl   $0xc011997c,(%esp)
c0112122:	e8 3e e2 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0112127:	e9 b9 02 00 00       	jmp    c01123e5 <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c011212c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011212f:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0112133:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112136:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0112139:	8b 0a                	mov    (%edx),%ecx
c011213b:	89 08                	mov    %ecx,(%eax)
c011213d:	8b 4a 04             	mov    0x4(%edx),%ecx
c0112140:	89 48 04             	mov    %ecx,0x4(%eax)
c0112143:	8b 4a 08             	mov    0x8(%edx),%ecx
c0112146:	89 48 08             	mov    %ecx,0x8(%eax)
c0112149:	8b 4a 0c             	mov    0xc(%edx),%ecx
c011214c:	89 48 0c             	mov    %ecx,0xc(%eax)
c011214f:	8b 4a 10             	mov    0x10(%edx),%ecx
c0112152:	89 48 10             	mov    %ecx,0x10(%eax)
c0112155:	8b 4a 14             	mov    0x14(%edx),%ecx
c0112158:	89 48 14             	mov    %ecx,0x14(%eax)
c011215b:	8b 4a 18             	mov    0x18(%edx),%ecx
c011215e:	89 48 18             	mov    %ecx,0x18(%eax)
c0112161:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0112164:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0112167:	8b 4a 20             	mov    0x20(%edx),%ecx
c011216a:	89 48 20             	mov    %ecx,0x20(%eax)
c011216d:	8b 4a 24             	mov    0x24(%edx),%ecx
c0112170:	89 48 24             	mov    %ecx,0x24(%eax)
c0112173:	8b 52 28             	mov    0x28(%edx),%edx
c0112176:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0112179:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0112180:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0112187:	e8 71 2b ff ff       	call   c0104cfd <kmalloc>
c011218c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011218f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112192:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0112195:	89 50 68             	mov    %edx,0x68(%eax)
c0112198:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011219b:	8b 40 68             	mov    0x68(%eax),%eax
c011219e:	85 c0                	test   %eax,%eax
c01121a0:	75 05                	jne    c01121a7 <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c01121a2:	e9 3e 02 00 00       	jmp    c01123e5 <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c01121a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01121ae:	eb 2a                	jmp    c01121da <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c01121b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01121b3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01121ba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01121bd:	01 d0                	add    %edx,%eax
c01121bf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01121c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01121c5:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01121c8:	89 50 04             	mov    %edx,0x4(%eax)
c01121cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01121ce:	8b 50 04             	mov    0x4(%eax),%edx
c01121d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01121d4:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c01121d6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01121da:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c01121e1:	76 cd                	jbe    c01121b0 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c01121e3:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c01121ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01121ed:	8b 50 04             	mov    0x4(%eax),%edx
c01121f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01121f3:	01 d0                	add    %edx,%eax
c01121f5:	83 e8 01             	sub    $0x1,%eax
c01121f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01121fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01121fe:	ba 00 00 00 00       	mov    $0x0,%edx
c0112203:	f7 75 d0             	divl   -0x30(%ebp)
c0112206:	89 d0                	mov    %edx,%eax
c0112208:	8b 55 cc             	mov    -0x34(%ebp),%edx
c011220b:	29 c2                	sub    %eax,%edx
c011220d:	89 d0                	mov    %edx,%eax
c011220f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0112212:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112215:	89 04 24             	mov    %eax,(%esp)
c0112218:	e8 14 f5 ff ff       	call   c0111731 <bitmap_create>
c011221d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0112220:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112223:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0112226:	89 50 30             	mov    %edx,0x30(%eax)
c0112229:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011222c:	8b 40 30             	mov    0x30(%eax),%eax
c011222f:	85 c0                	test   %eax,%eax
c0112231:	75 05                	jne    c0112238 <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0112233:	e9 a2 01 00 00       	jmp    c01123da <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0112238:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c011223f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112242:	8b 50 04             	mov    0x4(%eax),%edx
c0112245:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112248:	01 d0                	add    %edx,%eax
c011224a:	83 e8 01             	sub    $0x1,%eax
c011224d:	ba 00 00 00 00       	mov    $0x0,%edx
c0112252:	f7 75 c0             	divl   -0x40(%ebp)
c0112255:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0112258:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011225b:	89 44 24 10          	mov    %eax,0x10(%esp)
c011225f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0112262:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112266:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c011226d:	00 
c011226e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112271:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112275:	8b 45 08             	mov    0x8(%ebp),%eax
c0112278:	89 04 24             	mov    %eax,(%esp)
c011227b:	e8 ca fc ff ff       	call   c0111f4a <sfs_init_freemap>
c0112280:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112283:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112287:	74 11                	je     c011229a <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c0112289:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c011228a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011228d:	89 04 24             	mov    %eax,(%esp)
c0112290:	e8 3f f8 ff ff       	call   c0111ad4 <bitmap_destroy>
c0112295:	e9 40 01 00 00       	jmp    c01123da <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c011229a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011229d:	8b 40 04             	mov    0x4(%eax),%eax
c01122a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01122a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c01122aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01122b1:	eb 1e                	jmp    c01122d1 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c01122b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01122ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01122bd:	89 04 24             	mov    %eax,(%esp)
c01122c0:	e8 74 f7 ff ff       	call   c0111a39 <bitmap_test>
c01122c5:	85 c0                	test   %eax,%eax
c01122c7:	74 04                	je     c01122cd <sfs_do_mount+0x2ea>
            unused_blocks ++;
c01122c9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c01122cd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01122d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122d4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01122d7:	72 da                	jb     c01122b3 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c01122d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01122dc:	8b 40 08             	mov    0x8(%eax),%eax
c01122df:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01122e2:	74 24                	je     c0112308 <sfs_do_mount+0x325>
c01122e4:	c7 44 24 0c ac 99 11 	movl   $0xc01199ac,0xc(%esp)
c01122eb:	c0 
c01122ec:	c7 44 24 08 31 98 11 	movl   $0xc0119831,0x8(%esp)
c01122f3:	c0 
c01122f4:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01122fb:	00 
c01122fc:	c7 04 24 46 98 11 c0 	movl   $0xc0119846,(%esp)
c0112303:	e8 c0 eb fe ff       	call   c0100ec8 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c0112308:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011230b:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0112312:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112315:	83 c0 3c             	add    $0x3c,%eax
c0112318:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011231f:	00 
c0112320:	89 04 24             	mov    %eax,(%esp)
c0112323:	e8 67 78 ff ff       	call   c0109b8f <sem_init>
    sem_init(&(sfs->io_sem), 1);
c0112328:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011232b:	83 c0 48             	add    $0x48,%eax
c011232e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112335:	00 
c0112336:	89 04 24             	mov    %eax,(%esp)
c0112339:	e8 51 78 ff ff       	call   c0109b8f <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c011233e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112341:	83 c0 54             	add    $0x54,%eax
c0112344:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011234b:	00 
c011234c:	89 04 24             	mov    %eax,(%esp)
c011234f:	e8 3b 78 ff ff       	call   c0109b8f <sem_init>
    list_init(&(sfs->inode_list));
c0112354:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112357:	83 c0 60             	add    $0x60,%eax
c011235a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c011235d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112360:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0112363:	89 50 04             	mov    %edx,0x4(%eax)
c0112366:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112369:	8b 50 04             	mov    0x4(%eax),%edx
c011236c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011236f:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112371:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112374:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0112377:	89 d1                	mov    %edx,%ecx
c0112379:	29 c1                	sub    %eax,%ecx
c011237b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011237e:	8d 50 0c             	lea    0xc(%eax),%edx
c0112381:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0112384:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112388:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011238b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011238f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0112393:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112397:	c7 04 24 d6 99 11 c0 	movl   $0xc01199d6,(%esp)
c011239e:	e8 c2 df fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c01123a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123a6:	c7 40 70 58 1b 11 c0 	movl   $0xc0111b58,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c01123ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123b0:	c7 40 74 b5 1c 11 c0 	movl   $0xc0111cb5,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c01123b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123ba:	c7 40 78 40 1d 11 c0 	movl   $0xc0111d40,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c01123c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123c4:	c7 40 7c 13 1e 11 c0 	movl   $0xc0111e13,0x7c(%eax)
    *fs_store = fs;
c01123cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01123d1:	89 10                	mov    %edx,(%eax)
    return 0;
c01123d3:	b8 00 00 00 00       	mov    $0x0,%eax
c01123d8:	eb 24                	jmp    c01123fe <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c01123da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01123dd:	89 04 24             	mov    %eax,(%esp)
c01123e0:	e8 33 29 ff ff       	call   c0104d18 <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c01123e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01123e8:	89 04 24             	mov    %eax,(%esp)
c01123eb:	e8 28 29 ff ff       	call   c0104d18 <kfree>
failed_cleanup_fs:
    kfree(fs);
c01123f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123f3:	89 04 24             	mov    %eax,(%esp)
c01123f6:	e8 1d 29 ff ff       	call   c0104d18 <kfree>
    return ret;
c01123fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01123fe:	c9                   	leave  
c01123ff:	c3                   	ret    

c0112400 <sfs_mount>:

int
sfs_mount(const char *devname) {
c0112400:	55                   	push   %ebp
c0112401:	89 e5                	mov    %esp,%ebp
c0112403:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c0112406:	c7 44 24 04 e3 1f 11 	movl   $0xc0111fe3,0x4(%esp)
c011240d:	c0 
c011240e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112411:	89 04 24             	mov    %eax,(%esp)
c0112414:	e8 e2 d7 ff ff       	call   c010fbfb <vfs_mount>
}
c0112419:	c9                   	leave  
c011241a:	c3                   	ret    

c011241b <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c011241b:	55                   	push   %ebp
c011241c:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c011241e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112421:	8b 40 30             	mov    0x30(%eax),%eax
}
c0112424:	5d                   	pop    %ebp
c0112425:	c3                   	ret    

c0112426 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c0112426:	55                   	push   %ebp
c0112427:	89 e5                	mov    %esp,%ebp
c0112429:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c011242c:	8b 45 08             	mov    0x8(%ebp),%eax
c011242f:	83 c0 10             	add    $0x10,%eax
c0112432:	89 04 24             	mov    %eax,(%esp)
c0112435:	e8 e3 78 ff ff       	call   c0109d1d <down>
}
c011243a:	c9                   	leave  
c011243b:	c3                   	ret    

c011243c <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c011243c:	55                   	push   %ebp
c011243d:	89 e5                	mov    %esp,%ebp
c011243f:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0112442:	8b 45 08             	mov    0x8(%ebp),%eax
c0112445:	83 c0 10             	add    $0x10,%eax
c0112448:	89 04 24             	mov    %eax,(%esp)
c011244b:	e8 b2 78 ff ff       	call   c0109d02 <up>
}
c0112450:	c9                   	leave  
c0112451:	c3                   	ret    

c0112452 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0112452:	55                   	push   %ebp
c0112453:	89 e5                	mov    %esp,%ebp
c0112455:	83 ec 28             	sub    $0x28,%esp
c0112458:	8b 45 08             	mov    0x8(%ebp),%eax
c011245b:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c011245f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112463:	83 f8 01             	cmp    $0x1,%eax
c0112466:	74 0c                	je     c0112474 <sfs_get_ops+0x22>
c0112468:	83 f8 02             	cmp    $0x2,%eax
c011246b:	75 0e                	jne    c011247b <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c011246d:	b8 00 9a 11 c0       	mov    $0xc0119a00,%eax
c0112472:	eb 2b                	jmp    c011249f <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0112474:	b8 40 9a 11 c0       	mov    $0xc0119a40,%eax
c0112479:	eb 24                	jmp    c011249f <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c011247b:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c011247f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112483:	c7 44 24 08 80 9a 11 	movl   $0xc0119a80,0x8(%esp)
c011248a:	c0 
c011248b:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0112492:	00 
c0112493:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011249a:	e8 29 ea fe ff       	call   c0100ec8 <__panic>
}
c011249f:	c9                   	leave  
c01124a0:	c3                   	ret    

c01124a1 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c01124a1:	55                   	push   %ebp
c01124a2:	89 e5                	mov    %esp,%ebp
c01124a4:	53                   	push   %ebx
c01124a5:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c01124a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01124ab:	8b 58 68             	mov    0x68(%eax),%ebx
c01124ae:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01124b5:	00 
c01124b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124b9:	89 04 24             	mov    %eax,(%esp)
c01124bc:	e8 35 27 00 00       	call   c0114bf6 <hash32>
c01124c1:	c1 e0 03             	shl    $0x3,%eax
c01124c4:	01 d8                	add    %ebx,%eax
}
c01124c6:	83 c4 14             	add    $0x14,%esp
c01124c9:	5b                   	pop    %ebx
c01124ca:	5d                   	pop    %ebp
c01124cb:	c3                   	ret    

c01124cc <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c01124cc:	55                   	push   %ebp
c01124cd:	89 e5                	mov    %esp,%ebp
c01124cf:	53                   	push   %ebx
c01124d0:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01124d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124d6:	83 c0 1c             	add    $0x1c,%eax
c01124d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01124dc:	83 c2 60             	add    $0x60,%edx
c01124df:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01124e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01124e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01124eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01124f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124f4:	8b 40 04             	mov    0x4(%eax),%eax
c01124f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01124fa:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01124fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112500:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0112503:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112506:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112509:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011250c:	89 10                	mov    %edx,(%eax)
c011250e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112511:	8b 10                	mov    (%eax),%edx
c0112513:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112516:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112519:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011251c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c011251f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112522:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112525:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0112528:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c011252a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011252d:	8d 58 24             	lea    0x24(%eax),%ebx
c0112530:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112533:	8b 40 04             	mov    0x4(%eax),%eax
c0112536:	89 44 24 04          	mov    %eax,0x4(%esp)
c011253a:	8b 45 08             	mov    0x8(%ebp),%eax
c011253d:	89 04 24             	mov    %eax,(%esp)
c0112540:	e8 5c ff ff ff       	call   c01124a1 <sfs_hash_list>
c0112545:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0112548:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c011254b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011254e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112551:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112554:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0112557:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011255a:	8b 40 04             	mov    0x4(%eax),%eax
c011255d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112560:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0112563:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0112566:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0112569:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011256c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011256f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112572:	89 10                	mov    %edx,(%eax)
c0112574:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112577:	8b 10                	mov    (%eax),%edx
c0112579:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011257c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011257f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112582:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0112585:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112588:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011258b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011258e:	89 10                	mov    %edx,(%eax)
}
c0112590:	83 c4 54             	add    $0x54,%esp
c0112593:	5b                   	pop    %ebx
c0112594:	5d                   	pop    %ebp
c0112595:	c3                   	ret    

c0112596 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0112596:	55                   	push   %ebp
c0112597:	89 e5                	mov    %esp,%ebp
c0112599:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c011259c:	8b 45 08             	mov    0x8(%ebp),%eax
c011259f:	83 c0 1c             	add    $0x1c,%eax
c01125a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01125a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01125a8:	8b 40 04             	mov    0x4(%eax),%eax
c01125ab:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01125ae:	8b 12                	mov    (%edx),%edx
c01125b0:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01125b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01125b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01125b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01125bc:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01125bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01125c5:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c01125c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01125ca:	83 c0 24             	add    $0x24,%eax
c01125cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01125d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125d3:	8b 40 04             	mov    0x4(%eax),%eax
c01125d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01125d9:	8b 12                	mov    (%edx),%edx
c01125db:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01125de:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01125e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01125e7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01125ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01125f0:	89 10                	mov    %edx,(%eax)
}
c01125f2:	c9                   	leave  
c01125f3:	c3                   	ret    

c01125f4 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c01125f4:	55                   	push   %ebp
c01125f5:	89 e5                	mov    %esp,%ebp
c01125f7:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c01125fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01125fe:	74 2a                	je     c011262a <sfs_block_inuse+0x36>
c0112600:	8b 45 08             	mov    0x8(%ebp),%eax
c0112603:	8b 40 04             	mov    0x4(%eax),%eax
c0112606:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112609:	76 1f                	jbe    c011262a <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c011260b:	8b 45 08             	mov    0x8(%ebp),%eax
c011260e:	8b 40 30             	mov    0x30(%eax),%eax
c0112611:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112614:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112618:	89 04 24             	mov    %eax,(%esp)
c011261b:	e8 19 f4 ff ff       	call   c0111a39 <bitmap_test>
c0112620:	85 c0                	test   %eax,%eax
c0112622:	0f 94 c0             	sete   %al
c0112625:	0f b6 c0             	movzbl %al,%eax
c0112628:	eb 2d                	jmp    c0112657 <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c011262a:	8b 45 08             	mov    0x8(%ebp),%eax
c011262d:	8b 40 04             	mov    0x4(%eax),%eax
c0112630:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112633:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112637:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011263b:	c7 44 24 08 b0 9a 11 	movl   $0xc0119ab0,0x8(%esp)
c0112642:	c0 
c0112643:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c011264a:	00 
c011264b:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112652:	e8 71 e8 fe ff       	call   c0100ec8 <__panic>
}
c0112657:	c9                   	leave  
c0112658:	c3                   	ret    

c0112659 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c0112659:	55                   	push   %ebp
c011265a:	89 e5                	mov    %esp,%ebp
c011265c:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c011265f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112662:	8b 40 30             	mov    0x30(%eax),%eax
c0112665:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112668:	89 54 24 04          	mov    %edx,0x4(%esp)
c011266c:	89 04 24             	mov    %eax,(%esp)
c011266f:	e8 63 f2 ff ff       	call   c01118d7 <bitmap_alloc>
c0112674:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112677:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011267b:	74 08                	je     c0112685 <sfs_block_alloc+0x2c>
        return ret;
c011267d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112680:	e9 9f 00 00 00       	jmp    c0112724 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c0112685:	8b 45 08             	mov    0x8(%ebp),%eax
c0112688:	8b 40 08             	mov    0x8(%eax),%eax
c011268b:	85 c0                	test   %eax,%eax
c011268d:	75 24                	jne    c01126b3 <sfs_block_alloc+0x5a>
c011268f:	c7 44 24 0c e2 9a 11 	movl   $0xc0119ae2,0xc(%esp)
c0112696:	c0 
c0112697:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011269e:	c0 
c011269f:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01126a6:	00 
c01126a7:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01126ae:	e8 15 e8 fe ff       	call   c0100ec8 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c01126b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01126b6:	8b 40 08             	mov    0x8(%eax),%eax
c01126b9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01126bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01126bf:	89 50 08             	mov    %edx,0x8(%eax)
c01126c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01126c5:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c01126cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01126cf:	8b 00                	mov    (%eax),%eax
c01126d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01126d8:	89 04 24             	mov    %eax,(%esp)
c01126db:	e8 14 ff ff ff       	call   c01125f4 <sfs_block_inuse>
c01126e0:	85 c0                	test   %eax,%eax
c01126e2:	75 24                	jne    c0112708 <sfs_block_alloc+0xaf>
c01126e4:	c7 44 24 0c 14 9b 11 	movl   $0xc0119b14,0xc(%esp)
c01126eb:	c0 
c01126ec:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01126f3:	c0 
c01126f4:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01126fb:	00 
c01126fc:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112703:	e8 c0 e7 fe ff       	call   c0100ec8 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c0112708:	8b 45 0c             	mov    0xc(%ebp),%eax
c011270b:	8b 00                	mov    (%eax),%eax
c011270d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0112714:	00 
c0112715:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112719:	8b 45 08             	mov    0x8(%ebp),%eax
c011271c:	89 04 24             	mov    %eax,(%esp)
c011271f:	e8 f4 23 00 00       	call   c0114b18 <sfs_clear_block>
}
c0112724:	c9                   	leave  
c0112725:	c3                   	ret    

c0112726 <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c0112726:	55                   	push   %ebp
c0112727:	89 e5                	mov    %esp,%ebp
c0112729:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c011272c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011272f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112733:	8b 45 08             	mov    0x8(%ebp),%eax
c0112736:	89 04 24             	mov    %eax,(%esp)
c0112739:	e8 b6 fe ff ff       	call   c01125f4 <sfs_block_inuse>
c011273e:	85 c0                	test   %eax,%eax
c0112740:	75 24                	jne    c0112766 <sfs_block_free+0x40>
c0112742:	c7 44 24 0c 35 9b 11 	movl   $0xc0119b35,0xc(%esp)
c0112749:	c0 
c011274a:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112751:	c0 
c0112752:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0112759:	00 
c011275a:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112761:	e8 62 e7 fe ff       	call   c0100ec8 <__panic>
    bitmap_free(sfs->freemap, ino);
c0112766:	8b 45 08             	mov    0x8(%ebp),%eax
c0112769:	8b 40 30             	mov    0x30(%eax),%eax
c011276c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011276f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112773:	89 04 24             	mov    %eax,(%esp)
c0112776:	e8 f0 f2 ff ff       	call   c0111a6b <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c011277b:	8b 45 08             	mov    0x8(%ebp),%eax
c011277e:	8b 40 08             	mov    0x8(%eax),%eax
c0112781:	8d 50 01             	lea    0x1(%eax),%edx
c0112784:	8b 45 08             	mov    0x8(%ebp),%eax
c0112787:	89 50 08             	mov    %edx,0x8(%eax)
c011278a:	8b 45 08             	mov    0x8(%ebp),%eax
c011278d:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0112794:	c9                   	leave  
c0112795:	c3                   	ret    

c0112796 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0112796:	55                   	push   %ebp
c0112797:	89 e5                	mov    %esp,%ebp
c0112799:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c011279c:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c01127a3:	e8 41 c9 ff ff       	call   c010f0e9 <__alloc_inode>
c01127a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01127ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01127af:	0f 84 b5 00 00 00    	je     c011286a <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c01127b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127b8:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01127bc:	0f b7 c0             	movzwl %ax,%eax
c01127bf:	89 04 24             	mov    %eax,(%esp)
c01127c2:	e8 8b fc ff ff       	call   c0112452 <sfs_get_ops>
c01127c7:	8b 55 08             	mov    0x8(%ebp),%edx
c01127ca:	89 54 24 08          	mov    %edx,0x8(%esp)
c01127ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01127d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127d5:	89 04 24             	mov    %eax,(%esp)
c01127d8:	e8 35 c9 ff ff       	call   c010f112 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c01127dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01127e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01127e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01127e7:	74 0d                	je     c01127f6 <sfs_create_inode+0x60>
c01127e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01127ec:	8b 40 2c             	mov    0x2c(%eax),%eax
c01127ef:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01127f4:	74 24                	je     c011281a <sfs_create_inode+0x84>
c01127f6:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c01127fd:	c0 
c01127fe:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112805:	c0 
c0112806:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c011280d:	00 
c011280e:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112815:	e8 ae e6 fe ff       	call   c0100ec8 <__panic>
c011281a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011281d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c0112820:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112823:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112826:	89 10                	mov    %edx,(%eax)
c0112828:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011282b:	8b 55 10             	mov    0x10(%ebp),%edx
c011282e:	89 50 04             	mov    %edx,0x4(%eax)
c0112831:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112834:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c011283b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011283e:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c0112845:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112848:	83 c0 10             	add    $0x10,%eax
c011284b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112852:	00 
c0112853:	89 04 24             	mov    %eax,(%esp)
c0112856:	e8 34 73 ff ff       	call   c0109b8f <sem_init>
        *node_store = node;
c011285b:	8b 45 14             	mov    0x14(%ebp),%eax
c011285e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112861:	89 10                	mov    %edx,(%eax)
        return 0;
c0112863:	b8 00 00 00 00       	mov    $0x0,%eax
c0112868:	eb 05                	jmp    c011286f <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c011286a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011286f:	c9                   	leave  
c0112870:	c3                   	ret    

c0112871 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112871:	55                   	push   %ebp
c0112872:	89 e5                	mov    %esp,%ebp
c0112874:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c0112877:	8b 45 0c             	mov    0xc(%ebp),%eax
c011287a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011287e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112881:	89 04 24             	mov    %eax,(%esp)
c0112884:	e8 18 fc ff ff       	call   c01124a1 <sfs_hash_list>
c0112889:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011288c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011288f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0112892:	eb 3e                	jmp    c01128d2 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0112894:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112897:	83 e8 24             	sub    $0x24,%eax
c011289a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c011289d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128a0:	8b 40 04             	mov    0x4(%eax),%eax
c01128a3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01128a6:	75 2a                	jne    c01128d2 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c01128a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c01128ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128b1:	89 04 24             	mov    %eax,(%esp)
c01128b4:	e8 47 c9 ff ff       	call   c010f200 <inode_ref_inc>
c01128b9:	83 f8 01             	cmp    $0x1,%eax
c01128bc:	75 0f                	jne    c01128cd <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c01128be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128c1:	8b 40 0c             	mov    0xc(%eax),%eax
c01128c4:	8d 50 01             	lea    0x1(%eax),%edx
c01128c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128ca:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c01128cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128d0:	eb 1c                	jmp    c01128ee <lookup_sfs_nolock+0x7d>
c01128d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01128d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01128db:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c01128de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128e4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01128e7:	75 ab                	jne    c0112894 <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c01128e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01128ee:	c9                   	leave  
c01128ef:	c3                   	ret    

c01128f0 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c01128f0:	55                   	push   %ebp
c01128f1:	89 e5                	mov    %esp,%ebp
c01128f3:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c01128f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01128f9:	89 04 24             	mov    %eax,(%esp)
c01128fc:	e8 9d 22 00 00       	call   c0114b9e <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c0112901:	8b 45 10             	mov    0x10(%ebp),%eax
c0112904:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112908:	8b 45 08             	mov    0x8(%ebp),%eax
c011290b:	89 04 24             	mov    %eax,(%esp)
c011290e:	e8 5e ff ff ff       	call   c0112871 <lookup_sfs_nolock>
c0112913:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112916:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112919:	85 c0                	test   %eax,%eax
c011291b:	74 05                	je     c0112922 <sfs_load_inode+0x32>
        goto out_unlock;
c011291d:	e9 3c 01 00 00       	jmp    c0112a5e <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c0112922:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c0112929:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112930:	e8 c8 23 ff ff       	call   c0104cfd <kmalloc>
c0112935:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112938:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011293c:	75 05                	jne    c0112943 <sfs_load_inode+0x53>
        goto failed_unlock;
c011293e:	e9 40 01 00 00       	jmp    c0112a83 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c0112943:	8b 45 10             	mov    0x10(%ebp),%eax
c0112946:	89 44 24 04          	mov    %eax,0x4(%esp)
c011294a:	8b 45 08             	mov    0x8(%ebp),%eax
c011294d:	89 04 24             	mov    %eax,(%esp)
c0112950:	e8 9f fc ff ff       	call   c01125f4 <sfs_block_inuse>
c0112955:	85 c0                	test   %eax,%eax
c0112957:	75 24                	jne    c011297d <sfs_load_inode+0x8d>
c0112959:	c7 44 24 0c 35 9b 11 	movl   $0xc0119b35,0xc(%esp)
c0112960:	c0 
c0112961:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112968:	c0 
c0112969:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112970:	00 
c0112971:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112978:	e8 4b e5 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c011297d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112984:	00 
c0112985:	8b 45 10             	mov    0x10(%ebp),%eax
c0112988:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011298c:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0112993:	00 
c0112994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112997:	89 44 24 04          	mov    %eax,0x4(%esp)
c011299b:	8b 45 08             	mov    0x8(%ebp),%eax
c011299e:	89 04 24             	mov    %eax,(%esp)
c01129a1:	e8 e9 1e 00 00       	call   c011488f <sfs_rbuf>
c01129a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01129a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01129ad:	74 05                	je     c01129b4 <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c01129af:	e9 c4 00 00 00       	jmp    c0112a78 <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c01129b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129b7:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01129bb:	66 85 c0             	test   %ax,%ax
c01129be:	75 24                	jne    c01129e4 <sfs_load_inode+0xf4>
c01129c0:	c7 44 24 0c 86 9b 11 	movl   $0xc0119b86,0xc(%esp)
c01129c7:	c0 
c01129c8:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01129cf:	c0 
c01129d0:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c01129d7:	00 
c01129d8:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01129df:	e8 e4 e4 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c01129e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01129e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01129eb:	8b 45 10             	mov    0x10(%ebp),%eax
c01129ee:	89 44 24 08          	mov    %eax,0x8(%esp)
c01129f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01129fc:	89 04 24             	mov    %eax,(%esp)
c01129ff:	e8 92 fd ff ff       	call   c0112796 <sfs_create_inode>
c0112a04:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112a07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112a0b:	74 02                	je     c0112a0f <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c0112a0d:	eb 69                	jmp    c0112a78 <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0112a0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a12:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112a15:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112a19:	74 0d                	je     c0112a28 <sfs_load_inode+0x138>
c0112a1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a1e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112a21:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112a26:	74 24                	je     c0112a4c <sfs_load_inode+0x15c>
c0112a28:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c0112a2f:	c0 
c0112a30:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112a37:	c0 
c0112a38:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112a3f:	00 
c0112a40:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112a47:	e8 7c e4 fe ff       	call   c0100ec8 <__panic>
c0112a4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112a4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a56:	89 04 24             	mov    %eax,(%esp)
c0112a59:	e8 6e fa ff ff       	call   c01124cc <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a61:	89 04 24             	mov    %eax,(%esp)
c0112a64:	e8 61 21 00 00       	call   c0114bca <unlock_sfs_fs>
    *node_store = node;
c0112a69:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a6f:	89 10                	mov    %edx,(%eax)
    return 0;
c0112a71:	b8 00 00 00 00       	mov    $0x0,%eax
c0112a76:	eb 19                	jmp    c0112a91 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c0112a78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112a7b:	89 04 24             	mov    %eax,(%esp)
c0112a7e:	e8 95 22 ff ff       	call   c0104d18 <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c0112a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a86:	89 04 24             	mov    %eax,(%esp)
c0112a89:	e8 3c 21 00 00       	call   c0114bca <unlock_sfs_fs>
    return ret;
c0112a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112a91:	c9                   	leave  
c0112a92:	c3                   	ret    

c0112a93 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c0112a93:	55                   	push   %ebp
c0112a94:	89 e5                	mov    %esp,%ebp
c0112a96:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c0112a99:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112aa0:	76 24                	jbe    c0112ac6 <sfs_bmap_get_sub_nolock+0x33>
c0112aa2:	c7 44 24 0c 97 9b 11 	movl   $0xc0119b97,0xc(%esp)
c0112aa9:	c0 
c0112aaa:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112ab1:	c0 
c0112ab2:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0112ab9:	00 
c0112aba:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112ac1:	e8 02 e4 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0112ac6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c0112acd:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ad0:	c1 e0 02             	shl    $0x2,%eax
c0112ad3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c0112ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ad9:	8b 00                	mov    (%eax),%eax
c0112adb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112ade:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ae1:	85 c0                	test   %eax,%eax
c0112ae3:	74 50                	je     c0112b35 <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112ae5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ae8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112aeb:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112aef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112af3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112afa:	00 
c0112afb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112afe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b02:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b05:	89 04 24             	mov    %eax,(%esp)
c0112b08:	e8 82 1d 00 00       	call   c011488f <sfs_rbuf>
c0112b0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b14:	74 08                	je     c0112b1e <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c0112b16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b19:	e9 eb 00 00 00       	jmp    c0112c09 <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c0112b1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112b21:	85 c0                	test   %eax,%eax
c0112b23:	0f 85 9c 00 00 00    	jne    c0112bc5 <sfs_bmap_get_sub_nolock+0x132>
c0112b29:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b2d:	0f 84 92 00 00 00    	je     c0112bc5 <sfs_bmap_get_sub_nolock+0x132>
c0112b33:	eb 2e                	jmp    c0112b63 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c0112b35:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112b39:	75 05                	jne    c0112b40 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c0112b3b:	e9 85 00 00 00       	jmp    c0112bc5 <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112b40:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112b43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b4a:	89 04 24             	mov    %eax,(%esp)
c0112b4d:	e8 07 fb ff ff       	call   c0112659 <sfs_block_alloc>
c0112b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b59:	74 08                	je     c0112b63 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c0112b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b5e:	e9 a6 00 00 00       	jmp    c0112c09 <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112b63:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b6d:	89 04 24             	mov    %eax,(%esp)
c0112b70:	e8 e4 fa ff ff       	call   c0112659 <sfs_block_alloc>
c0112b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b7c:	74 02                	je     c0112b80 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112b7e:	eb 68                	jmp    c0112be8 <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b83:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112b86:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112b8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b8e:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112b95:	00 
c0112b96:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ba0:	89 04 24             	mov    %eax,(%esp)
c0112ba3:	e8 a0 1d 00 00       	call   c0114948 <sfs_wbuf>
c0112ba8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112bab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112baf:	74 14                	je     c0112bc5 <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c0112bb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112bb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bbb:	89 04 24             	mov    %eax,(%esp)
c0112bbe:	e8 63 fb ff ff       	call   c0112726 <sfs_block_free>
        goto failed_cleanup;
c0112bc3:	eb 23                	jmp    c0112be8 <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c0112bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bc8:	8b 10                	mov    (%eax),%edx
c0112bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bcd:	39 c2                	cmp    %eax,%edx
c0112bcf:	74 08                	je     c0112bd9 <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c0112bd1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bd7:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0112bd9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112bdc:	8b 45 18             	mov    0x18(%ebp),%eax
c0112bdf:	89 10                	mov    %edx,(%eax)
    return 0;
c0112be1:	b8 00 00 00 00       	mov    $0x0,%eax
c0112be6:	eb 21                	jmp    c0112c09 <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c0112be8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112beb:	8b 10                	mov    (%eax),%edx
c0112bed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bf0:	39 c2                	cmp    %eax,%edx
c0112bf2:	74 12                	je     c0112c06 <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c0112bf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bfe:	89 04 24             	mov    %eax,(%esp)
c0112c01:	e8 20 fb ff ff       	call   c0112726 <sfs_block_free>
    }
    return ret;
c0112c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112c09:	c9                   	leave  
c0112c0a:	c3                   	ret    

c0112c0b <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112c0b:	55                   	push   %ebp
c0112c0c:	89 e5                	mov    %esp,%ebp
c0112c0e:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112c11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c14:	8b 00                	mov    (%eax),%eax
c0112c16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0112c19:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112c1d:	77 5e                	ja     c0112c7d <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c0112c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c22:	8b 55 10             	mov    0x10(%ebp),%edx
c0112c25:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112c29:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112c2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c2f:	85 c0                	test   %eax,%eax
c0112c31:	75 45                	jne    c0112c78 <sfs_bmap_get_nolock+0x6d>
c0112c33:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112c37:	74 3f                	je     c0112c78 <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112c39:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c43:	89 04 24             	mov    %eax,(%esp)
c0112c46:	e8 0e fa ff ff       	call   c0112659 <sfs_block_alloc>
c0112c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112c4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112c52:	74 08                	je     c0112c5c <sfs_bmap_get_nolock+0x51>
                return ret;
c0112c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c57:	e9 2f 01 00 00       	jmp    c0112d8b <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c0112c5c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c62:	8b 55 10             	mov    0x10(%ebp),%edx
c0112c65:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c0112c69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c6c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112c73:	e9 c5 00 00 00       	jmp    c0112d3d <sfs_bmap_get_nolock+0x132>
c0112c78:	e9 c0 00 00 00       	jmp    c0112d3d <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112c7d:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112c81:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112c88:	0f 87 93 00 00 00    	ja     c0112d21 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c0112c8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c91:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c94:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c0112c97:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c9a:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c9e:	8b 45 14             	mov    0x14(%ebp),%eax
c0112ca1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112ca5:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ca8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112cac:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112caf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112cb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0112cb6:	89 04 24             	mov    %eax,(%esp)
c0112cb9:	e8 d5 fd ff ff       	call   c0112a93 <sfs_bmap_get_sub_nolock>
c0112cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112cc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112cc5:	74 08                	je     c0112ccf <sfs_bmap_get_nolock+0xc4>
            return ret;
c0112cc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112cca:	e9 bc 00 00 00       	jmp    c0112d8b <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c0112ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cd2:	8b 50 3c             	mov    0x3c(%eax),%edx
c0112cd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112cd8:	39 c2                	cmp    %eax,%edx
c0112cda:	74 43                	je     c0112d1f <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c0112cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cdf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112ce2:	85 c0                	test   %eax,%eax
c0112ce4:	74 24                	je     c0112d0a <sfs_bmap_get_nolock+0xff>
c0112ce6:	c7 44 24 0c ae 9b 11 	movl   $0xc0119bae,0xc(%esp)
c0112ced:	c0 
c0112cee:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112cf5:	c0 
c0112cf6:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112cfd:	00 
c0112cfe:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112d05:	e8 be e1 fe ff       	call   c0100ec8 <__panic>
            din->indirect = ent;
c0112d0a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d10:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112d13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d16:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112d1d:	eb 1e                	jmp    c0112d3d <sfs_bmap_get_nolock+0x132>
c0112d1f:	eb 1c                	jmp    c0112d3d <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112d21:	c7 44 24 08 c4 9b 11 	movl   $0xc0119bc4,0x8(%esp)
c0112d28:	c0 
c0112d29:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112d30:	00 
c0112d31:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112d38:	e8 8b e1 fe ff       	call   c0100ec8 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112d3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d40:	85 c0                	test   %eax,%eax
c0112d42:	74 3a                	je     c0112d7e <sfs_bmap_get_nolock+0x173>
c0112d44:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d4e:	89 04 24             	mov    %eax,(%esp)
c0112d51:	e8 9e f8 ff ff       	call   c01125f4 <sfs_block_inuse>
c0112d56:	85 c0                	test   %eax,%eax
c0112d58:	75 24                	jne    c0112d7e <sfs_bmap_get_nolock+0x173>
c0112d5a:	c7 44 24 0c f0 9b 11 	movl   $0xc0119bf0,0xc(%esp)
c0112d61:	c0 
c0112d62:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112d69:	c0 
c0112d6a:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112d71:	00 
c0112d72:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112d79:	e8 4a e1 fe ff       	call   c0100ec8 <__panic>
    *ino_store = ino;
c0112d7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112d81:	8b 45 18             	mov    0x18(%ebp),%eax
c0112d84:	89 10                	mov    %edx,(%eax)
    return 0;
c0112d86:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d8b:	c9                   	leave  
c0112d8c:	c3                   	ret    

c0112d8d <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112d8d:	55                   	push   %ebp
c0112d8e:	89 e5                	mov    %esp,%ebp
c0112d90:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112d93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d9d:	89 04 24             	mov    %eax,(%esp)
c0112da0:	e8 4f f8 ff ff       	call   c01125f4 <sfs_block_inuse>
c0112da5:	85 c0                	test   %eax,%eax
c0112da7:	74 09                	je     c0112db2 <sfs_bmap_free_sub_nolock+0x25>
c0112da9:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112db0:	76 24                	jbe    c0112dd6 <sfs_bmap_free_sub_nolock+0x49>
c0112db2:	c7 44 24 0c 18 9c 11 	movl   $0xc0119c18,0xc(%esp)
c0112db9:	c0 
c0112dba:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112dc1:	c0 
c0112dc2:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112dc9:	00 
c0112dca:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112dd1:	e8 f2 e0 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112dd6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112ddd:	8b 45 10             	mov    0x10(%ebp),%eax
c0112de0:	c1 e0 02             	shl    $0x2,%eax
c0112de3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112de9:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112ded:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112df0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112df4:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112dfb:	00 
c0112dfc:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112dff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e03:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e06:	89 04 24             	mov    %eax,(%esp)
c0112e09:	e8 81 1a 00 00       	call   c011488f <sfs_rbuf>
c0112e0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e15:	74 05                	je     c0112e1c <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112e17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e1a:	eb 54                	jmp    c0112e70 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112e1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e1f:	85 c0                	test   %eax,%eax
c0112e21:	74 48                	je     c0112e6b <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112e23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e26:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112e2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e31:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112e38:	00 
c0112e39:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112e3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e43:	89 04 24             	mov    %eax,(%esp)
c0112e46:	e8 fd 1a 00 00       	call   c0114948 <sfs_wbuf>
c0112e4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e52:	74 05                	je     c0112e59 <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112e54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e57:	eb 17                	jmp    c0112e70 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112e59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e63:	89 04 24             	mov    %eax,(%esp)
c0112e66:	e8 bb f8 ff ff       	call   c0112726 <sfs_block_free>
    }
    return 0;
c0112e6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e70:	c9                   	leave  
c0112e71:	c3                   	ret    

c0112e72 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112e72:	55                   	push   %ebp
c0112e73:	89 e5                	mov    %esp,%ebp
c0112e75:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112e78:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e7b:	8b 00                	mov    (%eax),%eax
c0112e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112e80:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112e84:	77 44                	ja     c0112eca <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e89:	8b 55 10             	mov    0x10(%ebp),%edx
c0112e8c:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112e93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112e97:	74 2a                	je     c0112ec3 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112e99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ea3:	89 04 24             	mov    %eax,(%esp)
c0112ea6:	e8 7b f8 ff ff       	call   c0112726 <sfs_block_free>
            din->direct[index] = 0;
c0112eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112eae:	8b 55 10             	mov    0x10(%ebp),%edx
c0112eb1:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112eb8:	00 
            sin->dirty = 1;
c0112eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ebc:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112ec3:	b8 00 00 00 00       	mov    $0x0,%eax
c0112ec8:	eb 4f                	jmp    c0112f19 <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112eca:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112ece:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112ed5:	77 3d                	ja     c0112f14 <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112ed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112eda:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112edd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112ee0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112ee4:	74 27                	je     c0112f0d <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112ee6:	8b 45 10             	mov    0x10(%ebp),%eax
c0112ee9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ef0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ef7:	89 04 24             	mov    %eax,(%esp)
c0112efa:	e8 8e fe ff ff       	call   c0112d8d <sfs_bmap_free_sub_nolock>
c0112eff:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112f02:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112f06:	74 05                	je     c0112f0d <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112f08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f0b:	eb 0c                	jmp    c0112f19 <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112f0d:	b8 00 00 00 00       	mov    $0x0,%eax
c0112f12:	eb 05                	jmp    c0112f19 <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112f14:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112f19:	c9                   	leave  
c0112f1a:	c3                   	ret    

c0112f1b <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112f1b:	55                   	push   %ebp
c0112f1c:	89 e5                	mov    %esp,%ebp
c0112f1e:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112f21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f24:	8b 00                	mov    (%eax),%eax
c0112f26:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f2c:	8b 40 08             	mov    0x8(%eax),%eax
c0112f2f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112f32:	73 24                	jae    c0112f58 <sfs_bmap_load_nolock+0x3d>
c0112f34:	c7 44 24 0c 4c 9c 11 	movl   $0xc0119c4c,0xc(%esp)
c0112f3b:	c0 
c0112f3c:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112f43:	c0 
c0112f44:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112f4b:	00 
c0112f4c:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112f53:	e8 70 df fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112f5b:	8b 40 08             	mov    0x8(%eax),%eax
c0112f5e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112f61:	0f 94 c0             	sete   %al
c0112f64:	0f b6 c0             	movzbl %al,%eax
c0112f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112f6a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112f6d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f74:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112f78:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f7b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f86:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f89:	89 04 24             	mov    %eax,(%esp)
c0112f8c:	e8 7a fc ff ff       	call   c0112c0b <sfs_bmap_get_nolock>
c0112f91:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112f94:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f98:	74 05                	je     c0112f9f <sfs_bmap_load_nolock+0x84>
        return ret;
c0112f9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f9d:	eb 62                	jmp    c0113001 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112f9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112fa2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fa9:	89 04 24             	mov    %eax,(%esp)
c0112fac:	e8 43 f6 ff ff       	call   c01125f4 <sfs_block_inuse>
c0112fb1:	85 c0                	test   %eax,%eax
c0112fb3:	75 24                	jne    c0112fd9 <sfs_bmap_load_nolock+0xbe>
c0112fb5:	c7 44 24 0c 35 9b 11 	movl   $0xc0119b35,0xc(%esp)
c0112fbc:	c0 
c0112fbd:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0112fc4:	c0 
c0112fc5:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112fcc:	00 
c0112fcd:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0112fd4:	e8 ef de fe ff       	call   c0100ec8 <__panic>
    if (create) {
c0112fd9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112fdd:	74 0f                	je     c0112fee <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fe2:	8b 40 08             	mov    0x8(%eax),%eax
c0112fe5:	8d 50 01             	lea    0x1(%eax),%edx
c0112fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112feb:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112fee:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112ff2:	74 08                	je     c0112ffc <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112ff4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112ff7:	8b 45 14             	mov    0x14(%ebp),%eax
c0112ffa:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112ffc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113001:	c9                   	leave  
c0113002:	c3                   	ret    

c0113003 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0113003:	55                   	push   %ebp
c0113004:	89 e5                	mov    %esp,%ebp
c0113006:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0113009:	8b 45 0c             	mov    0xc(%ebp),%eax
c011300c:	8b 00                	mov    (%eax),%eax
c011300e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0113011:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113014:	8b 40 08             	mov    0x8(%eax),%eax
c0113017:	85 c0                	test   %eax,%eax
c0113019:	75 24                	jne    c011303f <sfs_bmap_truncate_nolock+0x3c>
c011301b:	c7 44 24 0c 61 9c 11 	movl   $0xc0119c61,0xc(%esp)
c0113022:	c0 
c0113023:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011302a:	c0 
c011302b:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0113032:	00 
c0113033:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011303a:	e8 89 de fe ff       	call   c0100ec8 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c011303f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113042:	8b 40 08             	mov    0x8(%eax),%eax
c0113045:	83 e8 01             	sub    $0x1,%eax
c0113048:	89 44 24 08          	mov    %eax,0x8(%esp)
c011304c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011304f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113053:	8b 45 08             	mov    0x8(%ebp),%eax
c0113056:	89 04 24             	mov    %eax,(%esp)
c0113059:	e8 14 fe ff ff       	call   c0112e72 <sfs_bmap_free_nolock>
c011305e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113061:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113065:	74 05                	je     c011306c <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0113067:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011306a:	eb 1e                	jmp    c011308a <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c011306c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011306f:	8b 40 08             	mov    0x8(%eax),%eax
c0113072:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113075:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113078:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c011307b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011307e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0113085:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011308a:	c9                   	leave  
c011308b:	c3                   	ret    

c011308c <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c011308c:	55                   	push   %ebp
c011308d:	89 e5                	mov    %esp,%ebp
c011308f:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0113092:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113095:	8b 00                	mov    (%eax),%eax
c0113097:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011309b:	66 83 f8 02          	cmp    $0x2,%ax
c011309f:	75 15                	jne    c01130b6 <sfs_dirent_read_nolock+0x2a>
c01130a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01130a5:	78 0f                	js     c01130b6 <sfs_dirent_read_nolock+0x2a>
c01130a7:	8b 55 10             	mov    0x10(%ebp),%edx
c01130aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130ad:	8b 00                	mov    (%eax),%eax
c01130af:	8b 40 08             	mov    0x8(%eax),%eax
c01130b2:	39 c2                	cmp    %eax,%edx
c01130b4:	72 24                	jb     c01130da <sfs_dirent_read_nolock+0x4e>
c01130b6:	c7 44 24 0c 74 9c 11 	movl   $0xc0119c74,0xc(%esp)
c01130bd:	c0 
c01130be:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01130c5:	c0 
c01130c6:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c01130cd:	00 
c01130ce:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01130d5:	e8 ee dd fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c01130da:	8b 45 10             	mov    0x10(%ebp),%eax
c01130dd:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01130e0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01130e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01130e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01130f2:	89 04 24             	mov    %eax,(%esp)
c01130f5:	e8 21 fe ff ff       	call   c0112f1b <sfs_bmap_load_nolock>
c01130fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01130fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113101:	74 08                	je     c011310b <sfs_dirent_read_nolock+0x7f>
        return ret;
c0113103:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113106:	e9 80 00 00 00       	jmp    c011318b <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c011310b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011310e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113112:	8b 45 08             	mov    0x8(%ebp),%eax
c0113115:	89 04 24             	mov    %eax,(%esp)
c0113118:	e8 d7 f4 ff ff       	call   c01125f4 <sfs_block_inuse>
c011311d:	85 c0                	test   %eax,%eax
c011311f:	75 24                	jne    c0113145 <sfs_dirent_read_nolock+0xb9>
c0113121:	c7 44 24 0c 35 9b 11 	movl   $0xc0119b35,0xc(%esp)
c0113128:	c0 
c0113129:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113130:	c0 
c0113131:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c0113138:	00 
c0113139:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113140:	e8 83 dd fe ff       	call   c0100ec8 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0113145:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113148:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011314f:	00 
c0113150:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113154:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c011315b:	00 
c011315c:	8b 45 14             	mov    0x14(%ebp),%eax
c011315f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113163:	8b 45 08             	mov    0x8(%ebp),%eax
c0113166:	89 04 24             	mov    %eax,(%esp)
c0113169:	e8 21 17 00 00       	call   c011488f <sfs_rbuf>
c011316e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113171:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113175:	74 05                	je     c011317c <sfs_dirent_read_nolock+0xf0>
        return ret;
c0113177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011317a:	eb 0f                	jmp    c011318b <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c011317c:	8b 45 14             	mov    0x14(%ebp),%eax
c011317f:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0113186:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011318b:	c9                   	leave  
c011318c:	c3                   	ret    

c011318d <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c011318d:	55                   	push   %ebp
c011318e:	89 e5                	mov    %esp,%ebp
c0113190:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0113193:	8b 45 10             	mov    0x10(%ebp),%eax
c0113196:	89 04 24             	mov    %eax,(%esp)
c0113199:	e8 5c 22 00 00       	call   c01153fa <strlen>
c011319e:	3d ff 00 00 00       	cmp    $0xff,%eax
c01131a3:	76 24                	jbe    c01131c9 <sfs_dirent_search_nolock+0x3c>
c01131a5:	c7 44 24 0c c0 9c 11 	movl   $0xc0119cc0,0xc(%esp)
c01131ac:	c0 
c01131ad:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01131b4:	c0 
c01131b5:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c01131bc:	00 
c01131bd:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01131c4:	e8 ff dc fe ff       	call   c0100ec8 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01131c9:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01131d0:	e8 28 1b ff ff       	call   c0104cfd <kmalloc>
c01131d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01131d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01131dc:	75 0a                	jne    c01131e8 <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c01131de:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01131e3:	e9 cb 00 00 00       	jmp    c01132b3 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c01131e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131eb:	8b 00                	mov    (%eax),%eax
c01131ed:	8b 40 08             	mov    0x8(%eax),%eax
c01131f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c01131f3:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131f7:	74 08                	je     c0113201 <sfs_dirent_search_nolock+0x74>
c01131f9:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01131fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01131ff:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0113201:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0113208:	e9 85 00 00 00       	jmp    c0113292 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c011320d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113210:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113214:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113217:	89 44 24 08          	mov    %eax,0x8(%esp)
c011321b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011321e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113222:	8b 45 08             	mov    0x8(%ebp),%eax
c0113225:	89 04 24             	mov    %eax,(%esp)
c0113228:	e8 5f fe ff ff       	call   c011308c <sfs_dirent_read_nolock>
c011322d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113230:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113234:	74 02                	je     c0113238 <sfs_dirent_search_nolock+0xab>
            goto out;
c0113236:	eb 6d                	jmp    c01132a5 <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c0113238:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011323b:	8b 00                	mov    (%eax),%eax
c011323d:	85 c0                	test   %eax,%eax
c011323f:	75 12                	jne    c0113253 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0113241:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0113245:	74 0a                	je     c0113251 <sfs_dirent_search_nolock+0xc4>
c0113247:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011324a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011324d:	89 10                	mov    %edx,(%eax)
            continue ;
c011324f:	eb 3d                	jmp    c011328e <sfs_dirent_search_nolock+0x101>
c0113251:	eb 3b                	jmp    c011328e <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0113253:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113256:	83 c0 04             	add    $0x4,%eax
c0113259:	89 44 24 04          	mov    %eax,0x4(%esp)
c011325d:	8b 45 10             	mov    0x10(%ebp),%eax
c0113260:	89 04 24             	mov    %eax,(%esp)
c0113263:	e8 8a 22 00 00       	call   c01154f2 <strcmp>
c0113268:	85 c0                	test   %eax,%eax
c011326a:	75 22                	jne    c011328e <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c011326c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113270:	74 08                	je     c011327a <sfs_dirent_search_nolock+0xed>
c0113272:	8b 45 18             	mov    0x18(%ebp),%eax
c0113275:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113278:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c011327a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011327e:	74 0c                	je     c011328c <sfs_dirent_search_nolock+0xff>
c0113280:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113283:	8b 10                	mov    (%eax),%edx
c0113285:	8b 45 14             	mov    0x14(%ebp),%eax
c0113288:	89 10                	mov    %edx,(%eax)
            goto out;
c011328a:	eb 19                	jmp    c01132a5 <sfs_dirent_search_nolock+0x118>
c011328c:	eb 17                	jmp    c01132a5 <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c011328e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0113292:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113295:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113298:	0f 8c 6f ff ff ff    	jl     c011320d <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c011329e:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c01132a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01132a8:	89 04 24             	mov    %eax,(%esp)
c01132ab:	e8 68 1a ff ff       	call   c0104d18 <kfree>
    return ret;
c01132b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01132b3:	c9                   	leave  
c01132b4:	c3                   	ret    

c01132b5 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c01132b5:	55                   	push   %ebp
c01132b6:	89 e5                	mov    %esp,%ebp
c01132b8:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c01132bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132be:	8b 00                	mov    (%eax),%eax
c01132c0:	8b 40 08             	mov    0x8(%eax),%eax
c01132c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c01132c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01132cd:	eb 43                	jmp    c0113312 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01132cf:	8b 45 14             	mov    0x14(%ebp),%eax
c01132d2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132d9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01132e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01132e7:	89 04 24             	mov    %eax,(%esp)
c01132ea:	e8 9d fd ff ff       	call   c011308c <sfs_dirent_read_nolock>
c01132ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01132f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01132f6:	74 05                	je     c01132fd <sfs_dirent_findino_nolock+0x48>
            return ret;
c01132f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01132fb:	eb 22                	jmp    c011331f <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c01132fd:	8b 45 14             	mov    0x14(%ebp),%eax
c0113300:	8b 00                	mov    (%eax),%eax
c0113302:	3b 45 10             	cmp    0x10(%ebp),%eax
c0113305:	75 07                	jne    c011330e <sfs_dirent_findino_nolock+0x59>
            return 0;
c0113307:	b8 00 00 00 00       	mov    $0x0,%eax
c011330c:	eb 11                	jmp    c011331f <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c011330e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113312:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113315:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113318:	7c b5                	jl     c01132cf <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c011331a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c011331f:	c9                   	leave  
c0113320:	c3                   	ret    

c0113321 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0113321:	55                   	push   %ebp
c0113322:	89 e5                	mov    %esp,%ebp
c0113324:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0113327:	8b 45 0c             	mov    0xc(%ebp),%eax
c011332a:	89 04 24             	mov    %eax,(%esp)
c011332d:	e8 f4 f0 ff ff       	call   c0112426 <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0113332:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0113339:	00 
c011333a:	8b 45 18             	mov    0x18(%ebp),%eax
c011333d:	89 44 24 10          	mov    %eax,0x10(%esp)
c0113341:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113344:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113348:	8b 45 10             	mov    0x10(%ebp),%eax
c011334b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011334f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113352:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113356:	8b 45 08             	mov    0x8(%ebp),%eax
c0113359:	89 04 24             	mov    %eax,(%esp)
c011335c:	e8 2c fe ff ff       	call   c011318d <sfs_dirent_search_nolock>
c0113361:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0113364:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113367:	89 04 24             	mov    %eax,(%esp)
c011336a:	e8 cd f0 ff ff       	call   c011243c <unlock_sin>
    if (ret == 0) {
c011336f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113373:	75 1c                	jne    c0113391 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c0113375:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113378:	89 44 24 08          	mov    %eax,0x8(%esp)
c011337c:	8b 45 14             	mov    0x14(%ebp),%eax
c011337f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113383:	8b 45 08             	mov    0x8(%ebp),%eax
c0113386:	89 04 24             	mov    %eax,(%esp)
c0113389:	e8 62 f5 ff ff       	call   c01128f0 <sfs_load_inode>
c011338e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0113391:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113394:	c9                   	leave  
c0113395:	c3                   	ret    

c0113396 <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c0113396:	55                   	push   %ebp
c0113397:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c0113399:	8b 45 0c             	mov    0xc(%ebp),%eax
c011339c:	83 e0 03             	and    $0x3,%eax
c011339f:	85 c0                	test   %eax,%eax
c01133a1:	74 07                	je     c01133aa <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c01133a3:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01133a8:	eb 17                	jmp    c01133c1 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c01133aa:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c01133ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133ae:	83 e0 20             	and    $0x20,%eax
c01133b1:	85 c0                	test   %eax,%eax
c01133b3:	74 07                	je     c01133bc <sfs_opendir+0x26>
        return -E_ISDIR;
c01133b5:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01133ba:	eb 05                	jmp    c01133c1 <sfs_opendir+0x2b>
    }
    return 0;
c01133bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01133c1:	5d                   	pop    %ebp
c01133c2:	c3                   	ret    

c01133c3 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c01133c3:	55                   	push   %ebp
c01133c4:	89 e5                	mov    %esp,%ebp
    return 0;
c01133c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01133cb:	5d                   	pop    %ebp
c01133cc:	c3                   	ret    

c01133cd <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c01133cd:	55                   	push   %ebp
c01133ce:	89 e5                	mov    %esp,%ebp
c01133d0:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c01133d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01133d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01133d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01133dd:	74 17                	je     c01133f6 <sfs_close+0x29>
c01133df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133e2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01133e5:	85 c0                	test   %eax,%eax
c01133e7:	74 0d                	je     c01133f6 <sfs_close+0x29>
c01133e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133ec:	8b 40 3c             	mov    0x3c(%eax),%eax
c01133ef:	8b 40 18             	mov    0x18(%eax),%eax
c01133f2:	85 c0                	test   %eax,%eax
c01133f4:	75 24                	jne    c011341a <sfs_close+0x4d>
c01133f6:	c7 44 24 0c e4 9c 11 	movl   $0xc0119ce4,0xc(%esp)
c01133fd:	c0 
c01133fe:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113405:	c0 
c0113406:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c011340d:	00 
c011340e:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113415:	e8 ae da fe ff       	call   c0100ec8 <__panic>
c011341a:	c7 44 24 04 32 9d 11 	movl   $0xc0119d32,0x4(%esp)
c0113421:	c0 
c0113422:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113425:	89 04 24             	mov    %eax,(%esp)
c0113428:	e8 db bf ff ff       	call   c010f408 <inode_check>
c011342d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113430:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113433:	8b 40 18             	mov    0x18(%eax),%eax
c0113436:	8b 55 08             	mov    0x8(%ebp),%edx
c0113439:	89 14 24             	mov    %edx,(%esp)
c011343c:	ff d0                	call   *%eax
}
c011343e:	c9                   	leave  
c011343f:	c3                   	ret    

c0113440 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0113440:	55                   	push   %ebp
c0113441:	89 e5                	mov    %esp,%ebp
c0113443:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c0113446:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113449:	8b 00                	mov    (%eax),%eax
c011344b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c011344e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113451:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113455:	66 83 f8 02          	cmp    $0x2,%ax
c0113459:	75 24                	jne    c011347f <sfs_io_nolock+0x3f>
c011345b:	c7 44 24 0c 38 9d 11 	movl   $0xc0119d38,0xc(%esp)
c0113462:	c0 
c0113463:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011346a:	c0 
c011346b:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0113472:	00 
c0113473:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011347a:	e8 49 da fe ff       	call   c0100ec8 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c011347f:	8b 45 18             	mov    0x18(%ebp),%eax
c0113482:	8b 10                	mov    (%eax),%edx
c0113484:	8b 45 14             	mov    0x14(%ebp),%eax
c0113487:	01 d0                	add    %edx,%eax
c0113489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c011348c:	8b 45 18             	mov    0x18(%ebp),%eax
c011348f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c0113495:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0113499:	78 12                	js     c01134ad <sfs_io_nolock+0x6d>
c011349b:	8b 45 14             	mov    0x14(%ebp),%eax
c011349e:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01134a3:	77 08                	ja     c01134ad <sfs_io_nolock+0x6d>
c01134a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01134a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01134ab:	7e 0a                	jle    c01134b7 <sfs_io_nolock+0x77>
        return -E_INVAL;
c01134ad:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01134b2:	e9 a0 02 00 00       	jmp    c0113757 <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c01134b7:	8b 45 14             	mov    0x14(%ebp),%eax
c01134ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01134bd:	75 0a                	jne    c01134c9 <sfs_io_nolock+0x89>
        return 0;
c01134bf:	b8 00 00 00 00       	mov    $0x0,%eax
c01134c4:	e9 8e 02 00 00       	jmp    c0113757 <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c01134c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134cc:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01134d1:	76 07                	jbe    c01134da <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c01134d3:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01134da:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01134de:	75 2a                	jne    c011350a <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c01134e0:	8b 55 14             	mov    0x14(%ebp),%edx
c01134e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01134e6:	8b 00                	mov    (%eax),%eax
c01134e8:	39 c2                	cmp    %eax,%edx
c01134ea:	72 0a                	jb     c01134f6 <sfs_io_nolock+0xb6>
            return 0;
c01134ec:	b8 00 00 00 00       	mov    $0x0,%eax
c01134f1:	e9 61 02 00 00       	jmp    c0113757 <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c01134f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01134f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01134fc:	8b 00                	mov    (%eax),%eax
c01134fe:	39 c2                	cmp    %eax,%edx
c0113500:	76 08                	jbe    c011350a <sfs_io_nolock+0xca>
            endpos = din->size;
c0113502:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113505:	8b 00                	mov    (%eax),%eax
c0113507:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c011350a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011350e:	74 10                	je     c0113520 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0113510:	c7 45 f0 48 49 11 c0 	movl   $0xc0114948,-0x10(%ebp)
c0113517:	c7 45 ec 5f 48 11 c0 	movl   $0xc011485f,-0x14(%ebp)
c011351e:	eb 0e                	jmp    c011352e <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0113520:	c7 45 f0 8f 48 11 c0 	movl   $0xc011488f,-0x10(%ebp)
c0113527:	c7 45 ec 2f 48 11 c0 	movl   $0xc011482f,-0x14(%ebp)
    }

    int ret = 0;
c011352e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c0113535:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c011353c:	8b 45 14             	mov    0x14(%ebp),%eax
c011353f:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0113545:	85 c0                	test   %eax,%eax
c0113547:	0f 48 c2             	cmovs  %edx,%eax
c011354a:	c1 f8 0c             	sar    $0xc,%eax
c011354d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0113550:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113553:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0113559:	85 c0                	test   %eax,%eax
c011355b:	0f 48 c2             	cmovs  %edx,%eax
c011355e:	c1 f8 0c             	sar    $0xc,%eax
c0113561:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0113564:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c0113567:	8b 45 14             	mov    0x14(%ebp),%eax
c011356a:	99                   	cltd   
c011356b:	c1 ea 14             	shr    $0x14,%edx
c011356e:	01 d0                	add    %edx,%eax
c0113570:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113575:	29 d0                	sub    %edx,%eax
c0113577:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011357a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c011357e:	0f 84 9f 00 00 00    	je     c0113623 <sfs_io_nolock+0x1e3>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c0113584:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113588:	74 0a                	je     c0113594 <sfs_io_nolock+0x154>
c011358a:	b8 00 10 00 00       	mov    $0x1000,%eax
c011358f:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0113592:	eb 0a                	jmp    c011359e <sfs_io_nolock+0x15e>
c0113594:	8b 45 14             	mov    0x14(%ebp),%eax
c0113597:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011359a:	29 c2                	sub    %eax,%edx
c011359c:	89 d0                	mov    %edx,%eax
c011359e:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01135a1:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01135a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01135a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01135ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01135b9:	89 04 24             	mov    %eax,(%esp)
c01135bc:	e8 5a f9 ff ff       	call   c0112f1b <sfs_bmap_load_nolock>
c01135c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01135c4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01135c8:	74 05                	je     c01135cf <sfs_io_nolock+0x18f>
            goto out;
c01135ca:	e9 51 01 00 00       	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c01135cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01135d2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01135d5:	89 54 24 10          	mov    %edx,0x10(%esp)
c01135d9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01135dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01135e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01135e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01135e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01135ee:	89 04 24             	mov    %eax,(%esp)
c01135f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01135f4:	ff d0                	call   *%eax
c01135f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01135f9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01135fd:	74 05                	je     c0113604 <sfs_io_nolock+0x1c4>
            goto out;
c01135ff:	e9 1c 01 00 00       	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c0113604:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113607:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c011360a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011360e:	75 05                	jne    c0113615 <sfs_io_nolock+0x1d5>
            goto out;
c0113610:	e9 0b 01 00 00       	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno ++, nblks --;
c0113615:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113618:	01 45 10             	add    %eax,0x10(%ebp)
c011361b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c011361f:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c0113623:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c011362a:	eb 71                	jmp    c011369d <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c011362c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011362f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113633:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113636:	89 44 24 08          	mov    %eax,0x8(%esp)
c011363a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011363d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113641:	8b 45 08             	mov    0x8(%ebp),%eax
c0113644:	89 04 24             	mov    %eax,(%esp)
c0113647:	e8 cf f8 ff ff       	call   c0112f1b <sfs_bmap_load_nolock>
c011364c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011364f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113653:	74 05                	je     c011365a <sfs_io_nolock+0x21a>
            goto out;
c0113655:	e9 c6 00 00 00       	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c011365a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011365d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113664:	00 
c0113665:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113669:	8b 45 10             	mov    0x10(%ebp),%eax
c011366c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113670:	8b 45 08             	mov    0x8(%ebp),%eax
c0113673:	89 04 24             	mov    %eax,(%esp)
c0113676:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113679:	ff d0                	call   *%eax
c011367b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011367e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113682:	74 05                	je     c0113689 <sfs_io_nolock+0x249>
            goto out;
c0113684:	e9 97 00 00 00       	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno ++, nblks --;
c0113689:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011368c:	01 45 e4             	add    %eax,-0x1c(%ebp)
c011368f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113692:	01 45 10             	add    %eax,0x10(%ebp)
c0113695:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0113699:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        }
        buf += size, blkno ++, nblks --;
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
c011369d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01136a1:	75 89                	jne    c011362c <sfs_io_nolock+0x1ec>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c01136a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01136a6:	99                   	cltd   
c01136a7:	c1 ea 14             	shr    $0x14,%edx
c01136aa:	01 d0                	add    %edx,%eax
c01136ac:	25 ff 0f 00 00       	and    $0xfff,%eax
c01136b1:	29 d0                	sub    %edx,%eax
c01136b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01136b6:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01136ba:	74 64                	je     c0113720 <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01136bc:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01136bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01136c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01136c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01136ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01136d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01136d4:	89 04 24             	mov    %eax,(%esp)
c01136d7:	e8 3f f8 ff ff       	call   c0112f1b <sfs_bmap_load_nolock>
c01136dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01136df:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01136e3:	74 02                	je     c01136e7 <sfs_io_nolock+0x2a7>
            goto out;
c01136e5:	eb 39                	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c01136e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01136ea:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01136f1:	00 
c01136f2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01136f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01136f9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01136fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0113700:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113704:	8b 45 08             	mov    0x8(%ebp),%eax
c0113707:	89 04 24             	mov    %eax,(%esp)
c011370a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011370d:	ff d0                	call   *%eax
c011370f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113712:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113716:	74 02                	je     c011371a <sfs_io_nolock+0x2da>
            goto out;
c0113718:	eb 06                	jmp    c0113720 <sfs_io_nolock+0x2e0>
        }
        alen += size;
c011371a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011371d:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c0113720:	8b 45 18             	mov    0x18(%ebp),%eax
c0113723:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113726:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c0113728:	8b 55 14             	mov    0x14(%ebp),%edx
c011372b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011372e:	01 c2                	add    %eax,%edx
c0113730:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113733:	8b 00                	mov    (%eax),%eax
c0113735:	8b 00                	mov    (%eax),%eax
c0113737:	39 c2                	cmp    %eax,%edx
c0113739:	76 19                	jbe    c0113754 <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c011373b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011373e:	8b 00                	mov    (%eax),%eax
c0113740:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0113743:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113746:	01 ca                	add    %ecx,%edx
c0113748:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c011374a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011374d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c0113754:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0113757:	c9                   	leave  
c0113758:	c3                   	ret    

c0113759 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c0113759:	55                   	push   %ebp
c011375a:	89 e5                	mov    %esp,%ebp
c011375c:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011375f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113762:	8b 40 38             	mov    0x38(%eax),%eax
c0113765:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113768:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011376c:	74 0a                	je     c0113778 <sfs_io+0x1f>
c011376e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113771:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113774:	85 c0                	test   %eax,%eax
c0113776:	74 24                	je     c011379c <sfs_io+0x43>
c0113778:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c011377f:	c0 
c0113780:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113787:	c0 
c0113788:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c011378f:	00 
c0113790:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113797:	e8 2c d7 fe ff       	call   c0100ec8 <__panic>
c011379c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011379f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01137a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01137a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01137a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01137ac:	74 0d                	je     c01137bb <sfs_io+0x62>
c01137ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01137b1:	8b 40 2c             	mov    0x2c(%eax),%eax
c01137b4:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01137b9:	74 24                	je     c01137df <sfs_io+0x86>
c01137bb:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c01137c2:	c0 
c01137c3:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01137ca:	c0 
c01137cb:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01137d2:	00 
c01137d3:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01137da:	e8 e9 d6 fe ff       	call   c0100ec8 <__panic>
c01137df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01137e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c01137e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01137e8:	89 04 24             	mov    %eax,(%esp)
c01137eb:	e8 36 ec ff ff       	call   c0112426 <lock_sin>
    {
        size_t alen = iob->io_resid;
c01137f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137f3:	8b 40 0c             	mov    0xc(%eax),%eax
c01137f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c01137f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137fc:	8b 50 04             	mov    0x4(%eax),%edx
c01137ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113802:	8b 00                	mov    (%eax),%eax
c0113804:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0113807:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c011380b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c011380e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0113812:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113816:	89 44 24 08          	mov    %eax,0x8(%esp)
c011381a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011381d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113821:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113824:	89 04 24             	mov    %eax,(%esp)
c0113827:	e8 14 fc ff ff       	call   c0113440 <sfs_io_nolock>
c011382c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c011382f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113832:	85 c0                	test   %eax,%eax
c0113834:	74 12                	je     c0113848 <sfs_io+0xef>
            iobuf_skip(iob, alen);
c0113836:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113839:	89 44 24 04          	mov    %eax,0x4(%esp)
c011383d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113840:	89 04 24             	mov    %eax,(%esp)
c0113843:	e8 b9 7c ff ff       	call   c010b501 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c0113848:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011384b:	89 04 24             	mov    %eax,(%esp)
c011384e:	e8 e9 eb ff ff       	call   c011243c <unlock_sin>
    return ret;
c0113853:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0113856:	c9                   	leave  
c0113857:	c3                   	ret    

c0113858 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c0113858:	55                   	push   %ebp
c0113859:	89 e5                	mov    %esp,%ebp
c011385b:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c011385e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0113865:	00 
c0113866:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113869:	89 44 24 04          	mov    %eax,0x4(%esp)
c011386d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113870:	89 04 24             	mov    %eax,(%esp)
c0113873:	e8 e1 fe ff ff       	call   c0113759 <sfs_io>
}
c0113878:	c9                   	leave  
c0113879:	c3                   	ret    

c011387a <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c011387a:	55                   	push   %ebp
c011387b:	89 e5                	mov    %esp,%ebp
c011387d:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c0113880:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0113887:	00 
c0113888:	8b 45 0c             	mov    0xc(%ebp),%eax
c011388b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011388f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113892:	89 04 24             	mov    %eax,(%esp)
c0113895:	e8 bf fe ff ff       	call   c0113759 <sfs_io>
}
c011389a:	c9                   	leave  
c011389b:	c3                   	ret    

c011389c <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c011389c:	55                   	push   %ebp
c011389d:	89 e5                	mov    %esp,%ebp
c011389f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01138a2:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01138a9:	00 
c01138aa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01138b1:	00 
c01138b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138b5:	89 04 24             	mov    %eax,(%esp)
c01138b8:	e8 93 1e 00 00       	call   c0115750 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01138bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01138c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01138c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01138c7:	74 17                	je     c01138e0 <sfs_fstat+0x44>
c01138c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138cc:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138cf:	85 c0                	test   %eax,%eax
c01138d1:	74 0d                	je     c01138e0 <sfs_fstat+0x44>
c01138d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138d6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01138d9:	8b 40 28             	mov    0x28(%eax),%eax
c01138dc:	85 c0                	test   %eax,%eax
c01138de:	75 24                	jne    c0113904 <sfs_fstat+0x68>
c01138e0:	c7 44 24 0c 80 9d 11 	movl   $0xc0119d80,0xc(%esp)
c01138e7:	c0 
c01138e8:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01138ef:	c0 
c01138f0:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c01138f7:	00 
c01138f8:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01138ff:	e8 c4 d5 fe ff       	call   c0100ec8 <__panic>
c0113904:	c7 44 24 04 d0 9d 11 	movl   $0xc0119dd0,0x4(%esp)
c011390b:	c0 
c011390c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011390f:	89 04 24             	mov    %eax,(%esp)
c0113912:	e8 f1 ba ff ff       	call   c010f408 <inode_check>
c0113917:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011391a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011391d:	8b 40 28             	mov    0x28(%eax),%eax
c0113920:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113923:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113927:	8b 55 08             	mov    0x8(%ebp),%edx
c011392a:	89 14 24             	mov    %edx,(%esp)
c011392d:	ff d0                	call   *%eax
c011392f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113932:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113936:	74 05                	je     c011393d <sfs_fstat+0xa1>
        return ret;
c0113938:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011393b:	eb 71                	jmp    c01139ae <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c011393d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113940:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113943:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113947:	74 0d                	je     c0113956 <sfs_fstat+0xba>
c0113949:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011394c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011394f:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113954:	74 24                	je     c011397a <sfs_fstat+0xde>
c0113956:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c011395d:	c0 
c011395e:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113965:	c0 
c0113966:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c011396d:	00 
c011396e:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113975:	e8 4e d5 fe ff       	call   c0100ec8 <__panic>
c011397a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011397d:	8b 00                	mov    (%eax),%eax
c011397f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c0113982:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113985:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113989:	0f b7 d0             	movzwl %ax,%edx
c011398c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011398f:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c0113992:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113995:	8b 50 08             	mov    0x8(%eax),%edx
c0113998:	8b 45 0c             	mov    0xc(%ebp),%eax
c011399b:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c011399e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01139a1:	8b 10                	mov    (%eax),%edx
c01139a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01139a6:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01139a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01139ae:	c9                   	leave  
c01139af:	c3                   	ret    

c01139b0 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c01139b0:	55                   	push   %ebp
c01139b1:	89 e5                	mov    %esp,%ebp
c01139b3:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01139b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01139b9:	8b 40 38             	mov    0x38(%eax),%eax
c01139bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01139bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01139c3:	74 0a                	je     c01139cf <sfs_fsync+0x1f>
c01139c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01139c8:	8b 40 6c             	mov    0x6c(%eax),%eax
c01139cb:	85 c0                	test   %eax,%eax
c01139cd:	74 24                	je     c01139f3 <sfs_fsync+0x43>
c01139cf:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c01139d6:	c0 
c01139d7:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01139de:	c0 
c01139df:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c01139e6:	00 
c01139e7:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01139ee:	e8 d5 d4 fe ff       	call   c0100ec8 <__panic>
c01139f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01139f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01139f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01139fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01139ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113a03:	74 0d                	je     c0113a12 <sfs_fsync+0x62>
c0113a05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113a08:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113a0b:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113a10:	74 24                	je     c0113a36 <sfs_fsync+0x86>
c0113a12:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c0113a19:	c0 
c0113a1a:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113a21:	c0 
c0113a22:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c0113a29:	00 
c0113a2a:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113a31:	e8 92 d4 fe ff       	call   c0100ec8 <__panic>
c0113a36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113a39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0113a3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0113a43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a46:	8b 40 08             	mov    0x8(%eax),%eax
c0113a49:	85 c0                	test   %eax,%eax
c0113a4b:	74 6b                	je     c0113ab8 <sfs_fsync+0x108>
        lock_sin(sin);
c0113a4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a50:	89 04 24             	mov    %eax,(%esp)
c0113a53:	e8 ce e9 ff ff       	call   c0112426 <lock_sin>
        {
            if (sin->dirty) {
c0113a58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a5b:	8b 40 08             	mov    0x8(%eax),%eax
c0113a5e:	85 c0                	test   %eax,%eax
c0113a60:	74 4b                	je     c0113aad <sfs_fsync+0xfd>
                sin->dirty = 0;
c0113a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a65:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0113a6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a6f:	8b 50 04             	mov    0x4(%eax),%edx
c0113a72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a75:	8b 00                	mov    (%eax),%eax
c0113a77:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113a7e:	00 
c0113a7f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0113a83:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c0113a8a:	00 
c0113a8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a92:	89 04 24             	mov    %eax,(%esp)
c0113a95:	e8 ae 0e 00 00       	call   c0114948 <sfs_wbuf>
c0113a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113a9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113aa1:	74 0a                	je     c0113aad <sfs_fsync+0xfd>
                    sin->dirty = 1;
c0113aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113aa6:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0113aad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ab0:	89 04 24             	mov    %eax,(%esp)
c0113ab3:	e8 84 e9 ff ff       	call   c011243c <unlock_sin>
    }
    return ret;
c0113ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113abb:	c9                   	leave  
c0113abc:	c3                   	ret    

c0113abd <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0113abd:	55                   	push   %ebp
c0113abe:	89 e5                	mov    %esp,%ebp
c0113ac0:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113ac3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ac6:	8b 40 0c             	mov    0xc(%eax),%eax
c0113ac9:	83 f8 02             	cmp    $0x2,%eax
c0113acc:	76 15                	jbe    c0113ae3 <sfs_namefile+0x26>
c0113ace:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113ad5:	e8 23 12 ff ff       	call   c0104cfd <kmalloc>
c0113ada:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113add:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113ae1:	75 0a                	jne    c0113aed <sfs_namefile+0x30>
        return -E_NO_MEM;
c0113ae3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113ae8:	e9 bd 02 00 00       	jmp    c0113daa <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113aed:	8b 45 08             	mov    0x8(%ebp),%eax
c0113af0:	8b 40 38             	mov    0x38(%eax),%eax
c0113af3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113af6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113afa:	74 0a                	je     c0113b06 <sfs_namefile+0x49>
c0113afc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113aff:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113b02:	85 c0                	test   %eax,%eax
c0113b04:	74 24                	je     c0113b2a <sfs_namefile+0x6d>
c0113b06:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c0113b0d:	c0 
c0113b0e:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113b15:	c0 
c0113b16:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c0113b1d:	00 
c0113b1e:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113b25:	e8 9e d3 fe ff       	call   c0100ec8 <__panic>
c0113b2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113b2d:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b33:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113b36:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113b3a:	74 0d                	je     c0113b49 <sfs_namefile+0x8c>
c0113b3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113b3f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113b42:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113b47:	74 24                	je     c0113b6d <sfs_namefile+0xb0>
c0113b49:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c0113b50:	c0 
c0113b51:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113b58:	c0 
c0113b59:	c7 44 24 04 db 02 00 	movl   $0x2db,0x4(%esp)
c0113b60:	00 
c0113b61:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113b68:	e8 5b d3 fe ff       	call   c0100ec8 <__panic>
c0113b6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113b70:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c0113b73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b76:	8b 10                	mov    (%eax),%edx
c0113b78:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b7b:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b7e:	01 d0                	add    %edx,%eax
c0113b80:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c0113b83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b86:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b89:	83 e8 02             	sub    $0x2,%eax
c0113b8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0113b8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b92:	89 04 24             	mov    %eax,(%esp)
c0113b95:	e8 66 b6 ff ff       	call   c010f200 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0113b9a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113ba1:	00 
c0113ba2:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0113ba5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113ba9:	c7 44 24 08 d8 9d 11 	movl   $0xc0119dd8,0x8(%esp)
c0113bb0:	c0 
c0113bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113bb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113bb8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113bbb:	89 04 24             	mov    %eax,(%esp)
c0113bbe:	e8 5e f7 ff ff       	call   c0113321 <sfs_lookup_once>
c0113bc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113bc6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113bca:	74 05                	je     c0113bd1 <sfs_namefile+0x114>
            goto failed;
c0113bcc:	e9 c0 01 00 00       	jmp    c0113d91 <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c0113bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113bd4:	8b 40 04             	mov    0x4(%eax),%eax
c0113bd7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0113bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bdd:	89 04 24             	mov    %eax,(%esp)
c0113be0:	e8 35 b6 ff ff       	call   c010f21a <inode_ref_dec>
        if (node == parent) {
c0113be5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113be8:	39 45 08             	cmp    %eax,0x8(%ebp)
c0113beb:	75 76                	jne    c0113c63 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113bed:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bf0:	89 04 24             	mov    %eax,(%esp)
c0113bf3:	e8 22 b6 ff ff       	call   c010f21a <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c0113bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113bfb:	8b 40 0c             	mov    0xc(%eax),%eax
c0113bfe:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0113c01:	83 e8 02             	sub    $0x2,%eax
c0113c04:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c0113c07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c0a:	8b 00                	mov    (%eax),%eax
c0113c0c:	8d 50 01             	lea    0x1(%eax),%edx
c0113c0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c12:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c1d:	89 14 24             	mov    %edx,(%esp)
c0113c20:	e8 6a 1b 00 00       	call   c011578f <memmove>
c0113c25:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c2b:	83 e8 01             	sub    $0x1,%eax
c0113c2e:	c6 00 2f             	movb   $0x2f,(%eax)
c0113c31:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c34:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113c37:	01 d0                	add    %edx,%eax
c0113c39:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113c3c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c46:	89 04 24             	mov    %eax,(%esp)
c0113c49:	e8 b3 78 ff ff       	call   c010b501 <iobuf_skip>
    kfree(entry);
c0113c4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113c51:	89 04 24             	mov    %eax,(%esp)
c0113c54:	e8 bf 10 ff ff       	call   c0104d18 <kfree>
    return 0;
c0113c59:	b8 00 00 00 00       	mov    $0x0,%eax
c0113c5e:	e9 47 01 00 00       	jmp    c0113daa <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0113c63:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113c66:	89 45 08             	mov    %eax,0x8(%ebp)
c0113c69:	8b 45 08             	mov    0x8(%ebp),%eax
c0113c6c:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113c6f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0113c73:	74 0d                	je     c0113c82 <sfs_namefile+0x1c5>
c0113c75:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113c78:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113c7b:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113c80:	74 24                	je     c0113ca6 <sfs_namefile+0x1e9>
c0113c82:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c0113c89:	c0 
c0113c8a:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113c91:	c0 
c0113c92:	c7 44 24 04 ee 02 00 	movl   $0x2ee,0x4(%esp)
c0113c99:	00 
c0113c9a:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113ca1:	e8 22 d2 fe ff       	call   c0100ec8 <__panic>
c0113ca6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113ca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0113cac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113caf:	8b 40 04             	mov    0x4(%eax),%eax
c0113cb2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0113cb5:	74 0f                	je     c0113cc6 <sfs_namefile+0x209>
c0113cb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113cba:	8b 00                	mov    (%eax),%eax
c0113cbc:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113cc0:	66 83 f8 02          	cmp    $0x2,%ax
c0113cc4:	74 24                	je     c0113cea <sfs_namefile+0x22d>
c0113cc6:	c7 44 24 0c dc 9d 11 	movl   $0xc0119ddc,0xc(%esp)
c0113ccd:	c0 
c0113cce:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113cd5:	c0 
c0113cd6:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
c0113cdd:	00 
c0113cde:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113ce5:	e8 de d1 fe ff       	call   c0100ec8 <__panic>

        lock_sin(sin);
c0113cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113ced:	89 04 24             	mov    %eax,(%esp)
c0113cf0:	e8 31 e7 ff ff       	call   c0112426 <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113cf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113cf8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113cfc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113cff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113d0d:	89 04 24             	mov    %eax,(%esp)
c0113d10:	e8 a0 f5 ff ff       	call   c01132b5 <sfs_dirent_findino_nolock>
c0113d15:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0113d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d1b:	89 04 24             	mov    %eax,(%esp)
c0113d1e:	e8 19 e7 ff ff       	call   c011243c <unlock_sin>

        if (ret != 0) {
c0113d23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113d27:	74 03                	je     c0113d2c <sfs_namefile+0x26f>
            goto failed;
c0113d29:	90                   	nop
c0113d2a:	eb 65                	jmp    c0113d91 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113d2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d2f:	83 c0 04             	add    $0x4,%eax
c0113d32:	89 04 24             	mov    %eax,(%esp)
c0113d35:	e8 c0 16 00 00       	call   c01153fa <strlen>
c0113d3a:	83 c0 01             	add    $0x1,%eax
c0113d3d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113d40:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d43:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113d46:	76 09                	jbe    c0113d51 <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113d48:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113d4f:	eb 40                	jmp    c0113d91 <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113d51:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d54:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113d57:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d5a:	f7 d8                	neg    %eax
c0113d5c:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113d5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d62:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113d65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d68:	83 c0 04             	add    $0x4,%eax
c0113d6b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113d6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d76:	89 04 24             	mov    %eax,(%esp)
c0113d79:	e8 b4 1a 00 00       	call   c0115832 <memcpy>
        ptr[alen - 1] = '/';
c0113d7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113d81:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113d84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d87:	01 d0                	add    %edx,%eax
c0113d89:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113d8c:	e9 09 fe ff ff       	jmp    c0113b9a <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113d91:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d94:	89 04 24             	mov    %eax,(%esp)
c0113d97:	e8 7e b4 ff ff       	call   c010f21a <inode_ref_dec>
    kfree(entry);
c0113d9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d9f:	89 04 24             	mov    %eax,(%esp)
c0113da2:	e8 71 0f ff ff       	call   c0104d18 <kfree>
    return ret;
c0113da7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113daa:	c9                   	leave  
c0113dab:	c3                   	ret    

c0113dac <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113dac:	55                   	push   %ebp
c0113dad:	89 e5                	mov    %esp,%ebp
c0113daf:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113db2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113db5:	8b 00                	mov    (%eax),%eax
c0113db7:	8b 40 08             	mov    0x8(%eax),%eax
c0113dba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113dbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113dc4:	eb 4c                	jmp    c0113e12 <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113dc6:	8b 45 14             	mov    0x14(%ebp),%eax
c0113dc9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113dd0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113dd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113dd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113ddb:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dde:	89 04 24             	mov    %eax,(%esp)
c0113de1:	e8 a6 f2 ff ff       	call   c011308c <sfs_dirent_read_nolock>
c0113de6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113de9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113ded:	74 05                	je     c0113df4 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113def:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113df2:	eb 2b                	jmp    c0113e1f <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113df4:	8b 45 14             	mov    0x14(%ebp),%eax
c0113df7:	8b 00                	mov    (%eax),%eax
c0113df9:	85 c0                	test   %eax,%eax
c0113dfb:	74 11                	je     c0113e0e <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113dfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113e01:	75 07                	jne    c0113e0a <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113e03:	b8 00 00 00 00       	mov    $0x0,%eax
c0113e08:	eb 15                	jmp    c0113e1f <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113e0a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113e0e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113e15:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113e18:	7c ac                	jl     c0113dc6 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113e1a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113e1f:	c9                   	leave  
c0113e20:	c3                   	ret    

c0113e21 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113e21:	55                   	push   %ebp
c0113e22:	89 e5                	mov    %esp,%ebp
c0113e24:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113e27:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113e2e:	e8 ca 0e ff ff       	call   c0104cfd <kmalloc>
c0113e33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113e36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113e3a:	75 0a                	jne    c0113e46 <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113e3c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113e41:	e9 6b 01 00 00       	jmp    c0113fb1 <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113e46:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e49:	8b 40 38             	mov    0x38(%eax),%eax
c0113e4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113e4f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113e53:	74 0a                	je     c0113e5f <sfs_getdirentry+0x3e>
c0113e55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e58:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113e5b:	85 c0                	test   %eax,%eax
c0113e5d:	74 24                	je     c0113e83 <sfs_getdirentry+0x62>
c0113e5f:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c0113e66:	c0 
c0113e67:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113e6e:	c0 
c0113e6f:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
c0113e76:	00 
c0113e77:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113e7e:	e8 45 d0 fe ff       	call   c0100ec8 <__panic>
c0113e83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e8c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113e8f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113e93:	74 0d                	je     c0113ea2 <sfs_getdirentry+0x81>
c0113e95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e98:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113e9b:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113ea0:	74 24                	je     c0113ec6 <sfs_getdirentry+0xa5>
c0113ea2:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c0113ea9:	c0 
c0113eaa:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113eb1:	c0 
c0113eb2:	c7 44 24 04 31 03 00 	movl   $0x331,0x4(%esp)
c0113eb9:	00 
c0113eba:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113ec1:	e8 02 d0 fe ff       	call   c0100ec8 <__panic>
c0113ec6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ec9:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ecf:	8b 40 04             	mov    0x4(%eax),%eax
c0113ed2:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113ed5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113ed9:	78 0a                	js     c0113ee5 <sfs_getdirentry+0xc4>
c0113edb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ede:	0f b6 c0             	movzbl %al,%eax
c0113ee1:	85 c0                	test   %eax,%eax
c0113ee3:	74 15                	je     c0113efa <sfs_getdirentry+0xd9>
        kfree(entry);
c0113ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ee8:	89 04 24             	mov    %eax,(%esp)
c0113eeb:	e8 28 0e ff ff       	call   c0104d18 <kfree>
        return -E_INVAL;
c0113ef0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113ef5:	e9 b7 00 00 00       	jmp    c0113fb1 <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113efa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113efd:	c1 e8 08             	shr    $0x8,%eax
c0113f00:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113f03:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113f06:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f09:	8b 00                	mov    (%eax),%eax
c0113f0b:	8b 40 08             	mov    0x8(%eax),%eax
c0113f0e:	39 c2                	cmp    %eax,%edx
c0113f10:	76 15                	jbe    c0113f27 <sfs_getdirentry+0x106>
        kfree(entry);
c0113f12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f15:	89 04 24             	mov    %eax,(%esp)
c0113f18:	e8 fb 0d ff ff       	call   c0104d18 <kfree>
        return -E_NOENT;
c0113f1d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113f22:	e9 8a 00 00 00       	jmp    c0113fb1 <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113f27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f2a:	89 04 24             	mov    %eax,(%esp)
c0113f2d:	e8 f4 e4 ff ff       	call   c0112426 <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113f32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f35:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113f39:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113f3c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113f40:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f4a:	89 04 24             	mov    %eax,(%esp)
c0113f4d:	e8 5a fe ff ff       	call   c0113dac <sfs_getdirentry_sub_nolock>
c0113f52:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f59:	74 0d                	je     c0113f68 <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113f5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f5e:	89 04 24             	mov    %eax,(%esp)
c0113f61:	e8 d6 e4 ff ff       	call   c011243c <unlock_sin>
        goto out;
c0113f66:	eb 3b                	jmp    c0113fa3 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113f68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113f6b:	89 04 24             	mov    %eax,(%esp)
c0113f6e:	e8 c9 e4 ff ff       	call   c011243c <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f76:	83 c0 04             	add    $0x4,%eax
c0113f79:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113f80:	00 
c0113f81:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113f88:	00 
c0113f89:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113f90:	00 
c0113f91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f98:	89 04 24             	mov    %eax,(%esp)
c0113f9b:	e8 4c 74 ff ff       	call   c010b3ec <iobuf_move>
c0113fa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113fa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fa6:	89 04 24             	mov    %eax,(%esp)
c0113fa9:	e8 6a 0d ff ff       	call   c0104d18 <kfree>
    return ret;
c0113fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113fb1:	c9                   	leave  
c0113fb2:	c3                   	ret    

c0113fb3 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113fb3:	55                   	push   %ebp
c0113fb4:	89 e5                	mov    %esp,%ebp
c0113fb6:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113fb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fbc:	8b 40 38             	mov    0x38(%eax),%eax
c0113fbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113fc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113fc6:	74 0a                	je     c0113fd2 <sfs_reclaim+0x1f>
c0113fc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fcb:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113fce:	85 c0                	test   %eax,%eax
c0113fd0:	74 24                	je     c0113ff6 <sfs_reclaim+0x43>
c0113fd2:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c0113fd9:	c0 
c0113fda:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0113fe1:	c0 
c0113fe2:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c0113fe9:	00 
c0113fea:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0113ff1:	e8 d2 ce fe ff       	call   c0100ec8 <__panic>
c0113ff6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ff9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fff:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114002:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114006:	74 0d                	je     c0114015 <sfs_reclaim+0x62>
c0114008:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011400b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011400e:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114013:	74 24                	je     c0114039 <sfs_reclaim+0x86>
c0114015:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c011401c:	c0 
c011401d:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0114024:	c0 
c0114025:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c011402c:	00 
c011402d:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114034:	e8 8f ce fe ff       	call   c0100ec8 <__panic>
c0114039:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011403c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c011403f:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0114046:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114049:	89 04 24             	mov    %eax,(%esp)
c011404c:	e8 4d 0b 00 00       	call   c0114b9e <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0114051:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114054:	8b 40 0c             	mov    0xc(%eax),%eax
c0114057:	85 c0                	test   %eax,%eax
c0114059:	7f 24                	jg     c011407f <sfs_reclaim+0xcc>
c011405b:	c7 44 24 0c 0e 9e 11 	movl   $0xc0119e0e,0xc(%esp)
c0114062:	c0 
c0114063:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011406a:	c0 
c011406b:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
c0114072:	00 
c0114073:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011407a:	e8 49 ce fe ff       	call   c0100ec8 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c011407f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114082:	8b 40 0c             	mov    0xc(%eax),%eax
c0114085:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114088:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011408b:	89 50 0c             	mov    %edx,0xc(%eax)
c011408e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114091:	8b 40 0c             	mov    0xc(%eax),%eax
c0114094:	85 c0                	test   %eax,%eax
c0114096:	0f 85 a1 01 00 00    	jne    c011423d <sfs_reclaim+0x28a>
c011409c:	8b 45 08             	mov    0x8(%ebp),%eax
c011409f:	89 04 24             	mov    %eax,(%esp)
c01140a2:	e8 74 e3 ff ff       	call   c011241b <inode_ref_count>
c01140a7:	85 c0                	test   %eax,%eax
c01140a9:	0f 85 8e 01 00 00    	jne    c011423d <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c01140af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01140b2:	8b 00                	mov    (%eax),%eax
c01140b4:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01140b8:	66 85 c0             	test   %ax,%ax
c01140bb:	0f 85 81 00 00 00    	jne    c0114142 <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c01140c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01140c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01140c7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01140cb:	74 17                	je     c01140e4 <sfs_reclaim+0x131>
c01140cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140d0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140d3:	85 c0                	test   %eax,%eax
c01140d5:	74 0d                	je     c01140e4 <sfs_reclaim+0x131>
c01140d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01140da:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140dd:	8b 40 30             	mov    0x30(%eax),%eax
c01140e0:	85 c0                	test   %eax,%eax
c01140e2:	75 24                	jne    c0114108 <sfs_reclaim+0x155>
c01140e4:	c7 44 24 0c 28 9e 11 	movl   $0xc0119e28,0xc(%esp)
c01140eb:	c0 
c01140ec:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01140f3:	c0 
c01140f4:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c01140fb:	00 
c01140fc:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114103:	e8 c0 cd fe ff       	call   c0100ec8 <__panic>
c0114108:	c7 44 24 04 79 9e 11 	movl   $0xc0119e79,0x4(%esp)
c011410f:	c0 
c0114110:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114113:	89 04 24             	mov    %eax,(%esp)
c0114116:	e8 ed b2 ff ff       	call   c010f408 <inode_check>
c011411b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011411e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114121:	8b 40 30             	mov    0x30(%eax),%eax
c0114124:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011412b:	00 
c011412c:	8b 55 08             	mov    0x8(%ebp),%edx
c011412f:	89 14 24             	mov    %edx,(%esp)
c0114132:	ff d0                	call   *%eax
c0114134:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114137:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011413b:	74 05                	je     c0114142 <sfs_reclaim+0x18f>
            goto failed_unlock;
c011413d:	e9 fb 00 00 00       	jmp    c011423d <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0114142:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114145:	8b 40 08             	mov    0x8(%eax),%eax
c0114148:	85 c0                	test   %eax,%eax
c011414a:	74 76                	je     c01141c2 <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c011414c:	8b 45 08             	mov    0x8(%ebp),%eax
c011414f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0114152:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114156:	74 17                	je     c011416f <sfs_reclaim+0x1bc>
c0114158:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011415b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011415e:	85 c0                	test   %eax,%eax
c0114160:	74 0d                	je     c011416f <sfs_reclaim+0x1bc>
c0114162:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114165:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114168:	8b 40 18             	mov    0x18(%eax),%eax
c011416b:	85 c0                	test   %eax,%eax
c011416d:	75 24                	jne    c0114193 <sfs_reclaim+0x1e0>
c011416f:	c7 44 24 0c e4 9c 11 	movl   $0xc0119ce4,0xc(%esp)
c0114176:	c0 
c0114177:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011417e:	c0 
c011417f:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c0114186:	00 
c0114187:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011418e:	e8 35 cd fe ff       	call   c0100ec8 <__panic>
c0114193:	c7 44 24 04 32 9d 11 	movl   $0xc0119d32,0x4(%esp)
c011419a:	c0 
c011419b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011419e:	89 04 24             	mov    %eax,(%esp)
c01141a1:	e8 62 b2 ff ff       	call   c010f408 <inode_check>
c01141a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01141a9:	8b 40 3c             	mov    0x3c(%eax),%eax
c01141ac:	8b 40 18             	mov    0x18(%eax),%eax
c01141af:	8b 55 08             	mov    0x8(%ebp),%edx
c01141b2:	89 14 24             	mov    %edx,(%esp)
c01141b5:	ff d0                	call   *%eax
c01141b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01141ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01141be:	74 02                	je     c01141c2 <sfs_reclaim+0x20f>
            goto failed_unlock;
c01141c0:	eb 7b                	jmp    c011423d <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c01141c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141c5:	89 04 24             	mov    %eax,(%esp)
c01141c8:	e8 c9 e3 ff ff       	call   c0112596 <sfs_remove_links>
    unlock_sfs_fs(sfs);
c01141cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141d0:	89 04 24             	mov    %eax,(%esp)
c01141d3:	e8 f2 09 00 00       	call   c0114bca <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c01141d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141db:	8b 00                	mov    (%eax),%eax
c01141dd:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01141e1:	66 85 c0             	test   %ax,%ax
c01141e4:	75 38                	jne    c011421e <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c01141e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141e9:	8b 40 04             	mov    0x4(%eax),%eax
c01141ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01141f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01141f3:	89 04 24             	mov    %eax,(%esp)
c01141f6:	e8 2b e5 ff ff       	call   c0112726 <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c01141fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141fe:	8b 00                	mov    (%eax),%eax
c0114200:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114203:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0114206:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011420a:	74 12                	je     c011421e <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c011420c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011420f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114213:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114216:	89 04 24             	mov    %eax,(%esp)
c0114219:	e8 08 e5 ff ff       	call   c0112726 <sfs_block_free>
        }
    }
    kfree(sin->din);
c011421e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114221:	8b 00                	mov    (%eax),%eax
c0114223:	89 04 24             	mov    %eax,(%esp)
c0114226:	e8 ed 0a ff ff       	call   c0104d18 <kfree>
    vop_kill(node);
c011422b:	8b 45 08             	mov    0x8(%ebp),%eax
c011422e:	89 04 24             	mov    %eax,(%esp)
c0114231:	e8 33 af ff ff       	call   c010f169 <inode_kill>
    return 0;
c0114236:	b8 00 00 00 00       	mov    $0x0,%eax
c011423b:	eb 0e                	jmp    c011424b <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c011423d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114240:	89 04 24             	mov    %eax,(%esp)
c0114243:	e8 82 09 00 00       	call   c0114bca <unlock_sfs_fs>
    return ret;
c0114248:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011424b:	c9                   	leave  
c011424c:	c3                   	ret    

c011424d <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c011424d:	55                   	push   %ebp
c011424e:	89 e5                	mov    %esp,%ebp
c0114250:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0114253:	8b 45 08             	mov    0x8(%ebp),%eax
c0114256:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114259:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011425d:	74 0d                	je     c011426c <sfs_gettype+0x1f>
c011425f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114262:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114265:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011426a:	74 24                	je     c0114290 <sfs_gettype+0x43>
c011426c:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c0114273:	c0 
c0114274:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011427b:	c0 
c011427c:	c7 44 24 04 79 03 00 	movl   $0x379,0x4(%esp)
c0114283:	00 
c0114284:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011428b:	e8 38 cc fe ff       	call   c0100ec8 <__panic>
c0114290:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114293:	8b 00                	mov    (%eax),%eax
c0114295:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0114298:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011429b:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011429f:	0f b7 c0             	movzwl %ax,%eax
c01142a2:	83 f8 02             	cmp    $0x2,%eax
c01142a5:	74 0c                	je     c01142b3 <sfs_gettype+0x66>
c01142a7:	83 f8 03             	cmp    $0x3,%eax
c01142aa:	74 27                	je     c01142d3 <sfs_gettype+0x86>
c01142ac:	83 f8 01             	cmp    $0x1,%eax
c01142af:	74 12                	je     c01142c3 <sfs_gettype+0x76>
c01142b1:	eb 30                	jmp    c01142e3 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c01142b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142b6:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c01142bc:	b8 00 00 00 00       	mov    $0x0,%eax
c01142c1:	eb 4a                	jmp    c011430d <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c01142c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142c6:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c01142cc:	b8 00 00 00 00       	mov    $0x0,%eax
c01142d1:	eb 3a                	jmp    c011430d <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c01142d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01142d6:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c01142dc:	b8 00 00 00 00       	mov    $0x0,%eax
c01142e1:	eb 2a                	jmp    c011430d <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c01142e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01142e6:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01142ea:	0f b7 c0             	movzwl %ax,%eax
c01142ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01142f1:	c7 44 24 08 80 9a 11 	movl   $0xc0119a80,0x8(%esp)
c01142f8:	c0 
c01142f9:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c0114300:	00 
c0114301:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114308:	e8 bb cb fe ff       	call   c0100ec8 <__panic>
}
c011430d:	c9                   	leave  
c011430e:	c3                   	ret    

c011430f <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c011430f:	55                   	push   %ebp
c0114310:	89 e5                	mov    %esp,%ebp
c0114312:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0114315:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114319:	78 0a                	js     c0114325 <sfs_tryseek+0x16>
c011431b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011431e:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0114323:	76 0a                	jbe    c011432f <sfs_tryseek+0x20>
        return -E_INVAL;
c0114325:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011432a:	e9 ca 00 00 00       	jmp    c01143f9 <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011432f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114332:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114335:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114339:	74 0d                	je     c0114348 <sfs_tryseek+0x39>
c011433b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011433e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114341:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114346:	74 24                	je     c011436c <sfs_tryseek+0x5d>
c0114348:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c011434f:	c0 
c0114350:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0114357:	c0 
c0114358:	c7 44 24 04 90 03 00 	movl   $0x390,0x4(%esp)
c011435f:	00 
c0114360:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114367:	e8 5c cb fe ff       	call   c0100ec8 <__panic>
c011436c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011436f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0114372:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114375:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114378:	8b 00                	mov    (%eax),%eax
c011437a:	8b 00                	mov    (%eax),%eax
c011437c:	39 c2                	cmp    %eax,%edx
c011437e:	76 74                	jbe    c01143f4 <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c0114380:	8b 45 08             	mov    0x8(%ebp),%eax
c0114383:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114386:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011438a:	74 17                	je     c01143a3 <sfs_tryseek+0x94>
c011438c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011438f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114392:	85 c0                	test   %eax,%eax
c0114394:	74 0d                	je     c01143a3 <sfs_tryseek+0x94>
c0114396:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114399:	8b 40 3c             	mov    0x3c(%eax),%eax
c011439c:	8b 40 30             	mov    0x30(%eax),%eax
c011439f:	85 c0                	test   %eax,%eax
c01143a1:	75 24                	jne    c01143c7 <sfs_tryseek+0xb8>
c01143a3:	c7 44 24 0c 28 9e 11 	movl   $0xc0119e28,0xc(%esp)
c01143aa:	c0 
c01143ab:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01143b2:	c0 
c01143b3:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
c01143ba:	00 
c01143bb:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01143c2:	e8 01 cb fe ff       	call   c0100ec8 <__panic>
c01143c7:	c7 44 24 04 79 9e 11 	movl   $0xc0119e79,0x4(%esp)
c01143ce:	c0 
c01143cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143d2:	89 04 24             	mov    %eax,(%esp)
c01143d5:	e8 2e b0 ff ff       	call   c010f408 <inode_check>
c01143da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143dd:	8b 40 3c             	mov    0x3c(%eax),%eax
c01143e0:	8b 40 30             	mov    0x30(%eax),%eax
c01143e3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01143e6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01143ea:	8b 55 08             	mov    0x8(%ebp),%edx
c01143ed:	89 14 24             	mov    %edx,(%esp)
c01143f0:	ff d0                	call   *%eax
c01143f2:	eb 05                	jmp    c01143f9 <sfs_tryseek+0xea>
    }
    return 0;
c01143f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01143f9:	c9                   	leave  
c01143fa:	c3                   	ret    

c01143fb <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c01143fb:	55                   	push   %ebp
c01143fc:	89 e5                	mov    %esp,%ebp
c01143fe:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0114401:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114405:	78 0a                	js     c0114411 <sfs_truncfile+0x16>
c0114407:	8b 45 0c             	mov    0xc(%ebp),%eax
c011440a:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c011440f:	76 0a                	jbe    c011441b <sfs_truncfile+0x20>
        return -E_INVAL;
c0114411:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114416:	e9 d4 01 00 00       	jmp    c01145ef <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011441b:	8b 45 08             	mov    0x8(%ebp),%eax
c011441e:	8b 40 38             	mov    0x38(%eax),%eax
c0114421:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114424:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114428:	74 0a                	je     c0114434 <sfs_truncfile+0x39>
c011442a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011442d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114430:	85 c0                	test   %eax,%eax
c0114432:	74 24                	je     c0114458 <sfs_truncfile+0x5d>
c0114434:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c011443b:	c0 
c011443c:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0114443:	c0 
c0114444:	c7 44 24 04 9f 03 00 	movl   $0x39f,0x4(%esp)
c011444b:	00 
c011444c:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114453:	e8 70 ca fe ff       	call   c0100ec8 <__panic>
c0114458:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011445b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011445e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114461:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114464:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114468:	74 0d                	je     c0114477 <sfs_truncfile+0x7c>
c011446a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011446d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114470:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114475:	74 24                	je     c011449b <sfs_truncfile+0xa0>
c0114477:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c011447e:	c0 
c011447f:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c0114486:	c0 
c0114487:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
c011448e:	00 
c011448f:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114496:	e8 2d ca fe ff       	call   c0100ec8 <__panic>
c011449b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011449e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c01144a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01144a4:	8b 00                	mov    (%eax),%eax
c01144a6:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c01144a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c01144b0:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c01144b7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01144ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01144bd:	01 d0                	add    %edx,%eax
c01144bf:	83 e8 01             	sub    $0x1,%eax
c01144c2:	ba 00 00 00 00       	mov    $0x0,%edx
c01144c7:	f7 75 d8             	divl   -0x28(%ebp)
c01144ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c01144cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144d0:	8b 10                	mov    (%eax),%edx
c01144d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144d5:	39 c2                	cmp    %eax,%edx
c01144d7:	75 39                	jne    c0114512 <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c01144d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01144dc:	8b 40 08             	mov    0x8(%eax),%eax
c01144df:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01144e2:	74 24                	je     c0114508 <sfs_truncfile+0x10d>
c01144e4:	c7 44 24 0c 82 9e 11 	movl   $0xc0119e82,0xc(%esp)
c01144eb:	c0 
c01144ec:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01144f3:	c0 
c01144f4:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c01144fb:	00 
c01144fc:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c0114503:	e8 c0 c9 fe ff       	call   c0100ec8 <__panic>
        return 0;
c0114508:	b8 00 00 00 00       	mov    $0x0,%eax
c011450d:	e9 dd 00 00 00       	jmp    c01145ef <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c0114512:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114515:	89 04 24             	mov    %eax,(%esp)
c0114518:	e8 09 df ff ff       	call   c0112426 <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c011451d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114520:	8b 40 08             	mov    0x8(%eax),%eax
c0114523:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0114526:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114529:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011452c:	73 3f                	jae    c011456d <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c011452e:	eb 33                	jmp    c0114563 <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0114530:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114537:	00 
c0114538:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011453b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011453f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114542:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114546:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114549:	89 04 24             	mov    %eax,(%esp)
c011454c:	e8 ca e9 ff ff       	call   c0112f1b <sfs_bmap_load_nolock>
c0114551:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114554:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114558:	74 05                	je     c011455f <sfs_truncfile+0x164>
                goto out_unlock;
c011455a:	e9 82 00 00 00       	jmp    c01145e1 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c011455f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114563:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114566:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114569:	75 c5                	jne    c0114530 <sfs_truncfile+0x135>
c011456b:	eb 33                	jmp    c01145a0 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c011456d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114570:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0114573:	73 2b                	jae    c01145a0 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c0114575:	eb 21                	jmp    c0114598 <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0114577:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011457a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011457e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114581:	89 04 24             	mov    %eax,(%esp)
c0114584:	e8 7a ea ff ff       	call   c0113003 <sfs_bmap_truncate_nolock>
c0114589:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011458c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114590:	74 02                	je     c0114594 <sfs_truncfile+0x199>
                goto out_unlock;
c0114592:	eb 4d                	jmp    c01145e1 <sfs_truncfile+0x1e6>
            }
            nblks --;
c0114594:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c0114598:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011459b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011459e:	75 d7                	jne    c0114577 <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c01145a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01145a3:	8b 40 08             	mov    0x8(%eax),%eax
c01145a6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01145a9:	74 24                	je     c01145cf <sfs_truncfile+0x1d4>
c01145ab:	c7 44 24 0c 97 9e 11 	movl   $0xc0119e97,0xc(%esp)
c01145b2:	c0 
c01145b3:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01145ba:	c0 
c01145bb:	c7 44 24 04 c0 03 00 	movl   $0x3c0,0x4(%esp)
c01145c2:	00 
c01145c3:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01145ca:	e8 f9 c8 fe ff       	call   c0100ec8 <__panic>
    din->size = len;
c01145cf:	8b 55 0c             	mov    0xc(%ebp),%edx
c01145d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01145d5:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c01145d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01145da:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c01145e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01145e4:	89 04 24             	mov    %eax,(%esp)
c01145e7:	e8 50 de ff ff       	call   c011243c <unlock_sin>
    return ret;
c01145ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01145ef:	c9                   	leave  
c01145f0:	c3                   	ret    

c01145f1 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c01145f1:	55                   	push   %ebp
c01145f2:	89 e5                	mov    %esp,%ebp
c01145f4:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01145f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01145fa:	8b 40 38             	mov    0x38(%eax),%eax
c01145fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114600:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114604:	74 0a                	je     c0114610 <sfs_lookup+0x1f>
c0114606:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114609:	8b 40 6c             	mov    0x6c(%eax),%eax
c011460c:	85 c0                	test   %eax,%eax
c011460e:	74 24                	je     c0114634 <sfs_lookup+0x43>
c0114610:	c7 44 24 0c 54 9d 11 	movl   $0xc0119d54,0xc(%esp)
c0114617:	c0 
c0114618:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011461f:	c0 
c0114620:	c7 44 24 04 d0 03 00 	movl   $0x3d0,0x4(%esp)
c0114627:	00 
c0114628:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011462f:	e8 94 c8 fe ff       	call   c0100ec8 <__panic>
c0114634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114637:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c011463a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011463d:	0f b6 00             	movzbl (%eax),%eax
c0114640:	84 c0                	test   %al,%al
c0114642:	74 0a                	je     c011464e <sfs_lookup+0x5d>
c0114644:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114647:	0f b6 00             	movzbl (%eax),%eax
c011464a:	3c 2f                	cmp    $0x2f,%al
c011464c:	75 24                	jne    c0114672 <sfs_lookup+0x81>
c011464e:	c7 44 24 0c ac 9e 11 	movl   $0xc0119eac,0xc(%esp)
c0114655:	c0 
c0114656:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c011465d:	c0 
c011465e:	c7 44 24 04 d1 03 00 	movl   $0x3d1,0x4(%esp)
c0114665:	00 
c0114666:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c011466d:	e8 56 c8 fe ff       	call   c0100ec8 <__panic>
    vop_ref_inc(node);
c0114672:	8b 45 08             	mov    0x8(%ebp),%eax
c0114675:	89 04 24             	mov    %eax,(%esp)
c0114678:	e8 83 ab ff ff       	call   c010f200 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011467d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114680:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114683:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114687:	74 0d                	je     c0114696 <sfs_lookup+0xa5>
c0114689:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011468c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011468f:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0114694:	74 24                	je     c01146ba <sfs_lookup+0xc9>
c0114696:	c7 44 24 0c 50 9b 11 	movl   $0xc0119b50,0xc(%esp)
c011469d:	c0 
c011469e:	c7 44 24 08 ff 9a 11 	movl   $0xc0119aff,0x8(%esp)
c01146a5:	c0 
c01146a6:	c7 44 24 04 d3 03 00 	movl   $0x3d3,0x4(%esp)
c01146ad:	00 
c01146ae:	c7 04 24 97 9a 11 c0 	movl   $0xc0119a97,(%esp)
c01146b5:	e8 0e c8 fe ff       	call   c0100ec8 <__panic>
c01146ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01146bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01146c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146c3:	8b 00                	mov    (%eax),%eax
c01146c5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01146c9:	66 83 f8 02          	cmp    $0x2,%ax
c01146cd:	74 12                	je     c01146e1 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c01146cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01146d2:	89 04 24             	mov    %eax,(%esp)
c01146d5:	e8 40 ab ff ff       	call   c010f21a <inode_ref_dec>
        return -E_NOTDIR;
c01146da:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c01146df:	eb 4e                	jmp    c011472f <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c01146e1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01146e8:	00 
c01146e9:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01146ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01146f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01146f3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01146f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01146fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114701:	89 04 24             	mov    %eax,(%esp)
c0114704:	e8 18 ec ff ff       	call   c0113321 <sfs_lookup_once>
c0114709:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c011470c:	8b 45 08             	mov    0x8(%ebp),%eax
c011470f:	89 04 24             	mov    %eax,(%esp)
c0114712:	e8 03 ab ff ff       	call   c010f21a <inode_ref_dec>
    if (ret != 0) {
c0114717:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011471b:	74 05                	je     c0114722 <sfs_lookup+0x131>
        return ret;
c011471d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114720:	eb 0d                	jmp    c011472f <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c0114722:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0114725:	8b 45 10             	mov    0x10(%ebp),%eax
c0114728:	89 10                	mov    %edx,(%eax)
    return 0;
c011472a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011472f:	c9                   	leave  
c0114730:	c3                   	ret    

c0114731 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0114731:	55                   	push   %ebp
c0114732:	89 e5                	mov    %esp,%ebp
c0114734:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c0114737:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011473b:	75 06                	jne    c0114743 <sfs_rwblock_nolock+0x12>
c011473d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114741:	75 0b                	jne    c011474e <sfs_rwblock_nolock+0x1d>
c0114743:	8b 45 08             	mov    0x8(%ebp),%eax
c0114746:	8b 40 04             	mov    0x4(%eax),%eax
c0114749:	3b 45 10             	cmp    0x10(%ebp),%eax
c011474c:	77 24                	ja     c0114772 <sfs_rwblock_nolock+0x41>
c011474e:	c7 44 24 0c cc 9e 11 	movl   $0xc0119ecc,0xc(%esp)
c0114755:	c0 
c0114756:	c7 44 24 08 00 9f 11 	movl   $0xc0119f00,0x8(%esp)
c011475d:	c0 
c011475e:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0114765:	00 
c0114766:	c7 04 24 15 9f 11 c0 	movl   $0xc0119f15,(%esp)
c011476d:	e8 56 c7 fe ff       	call   c0100ec8 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0114772:	8b 45 10             	mov    0x10(%ebp),%eax
c0114775:	c1 e0 0c             	shl    $0xc,%eax
c0114778:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011477c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114783:	00 
c0114784:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114787:	89 44 24 04          	mov    %eax,0x4(%esp)
c011478b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011478e:	89 04 24             	mov    %eax,(%esp)
c0114791:	e8 28 6c ff ff       	call   c010b3be <iobuf_init>
c0114796:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0114799:	8b 45 08             	mov    0x8(%ebp),%eax
c011479c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011479f:	8b 40 10             	mov    0x10(%eax),%eax
c01147a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01147a5:	8b 52 2c             	mov    0x2c(%edx),%edx
c01147a8:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01147ab:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01147af:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01147b2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01147b6:	89 14 24             	mov    %edx,(%esp)
c01147b9:	ff d0                	call   *%eax
}
c01147bb:	c9                   	leave  
c01147bc:	c3                   	ret    

c01147bd <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c01147bd:	55                   	push   %ebp
c01147be:	89 e5                	mov    %esp,%ebp
c01147c0:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c01147c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01147ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01147cd:	89 04 24             	mov    %eax,(%esp)
c01147d0:	e8 df 03 00 00       	call   c0114bb4 <lock_sfs_io>
    {
        while (nblks != 0) {
c01147d5:	eb 42                	jmp    c0114819 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c01147d7:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01147de:	00 
c01147df:	8b 45 18             	mov    0x18(%ebp),%eax
c01147e2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01147e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01147e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01147ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01147f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01147f7:	89 04 24             	mov    %eax,(%esp)
c01147fa:	e8 32 ff ff ff       	call   c0114731 <sfs_rwblock_nolock>
c01147ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114802:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114806:	74 02                	je     c011480a <sfs_rwblock+0x4d>
                break;
c0114808:	eb 15                	jmp    c011481f <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c011480a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c011480e:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c0114812:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c0114819:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011481d:	75 b8                	jne    c01147d7 <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c011481f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114822:	89 04 24             	mov    %eax,(%esp)
c0114825:	e8 b6 03 00 00       	call   c0114be0 <unlock_sfs_io>
    return ret;
c011482a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011482d:	c9                   	leave  
c011482e:	c3                   	ret    

c011482f <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c011482f:	55                   	push   %ebp
c0114830:	89 e5                	mov    %esp,%ebp
c0114832:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c0114835:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011483c:	00 
c011483d:	8b 45 14             	mov    0x14(%ebp),%eax
c0114840:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114844:	8b 45 10             	mov    0x10(%ebp),%eax
c0114847:	89 44 24 08          	mov    %eax,0x8(%esp)
c011484b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011484e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114852:	8b 45 08             	mov    0x8(%ebp),%eax
c0114855:	89 04 24             	mov    %eax,(%esp)
c0114858:	e8 60 ff ff ff       	call   c01147bd <sfs_rwblock>
}
c011485d:	c9                   	leave  
c011485e:	c3                   	ret    

c011485f <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c011485f:	55                   	push   %ebp
c0114860:	89 e5                	mov    %esp,%ebp
c0114862:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0114865:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011486c:	00 
c011486d:	8b 45 14             	mov    0x14(%ebp),%eax
c0114870:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114874:	8b 45 10             	mov    0x10(%ebp),%eax
c0114877:	89 44 24 08          	mov    %eax,0x8(%esp)
c011487b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011487e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114882:	8b 45 08             	mov    0x8(%ebp),%eax
c0114885:	89 04 24             	mov    %eax,(%esp)
c0114888:	e8 30 ff ff ff       	call   c01147bd <sfs_rwblock>
}
c011488d:	c9                   	leave  
c011488e:	c3                   	ret    

c011488f <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c011488f:	55                   	push   %ebp
c0114890:	89 e5                	mov    %esp,%ebp
c0114892:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114895:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114899:	78 18                	js     c01148b3 <sfs_rbuf+0x24>
c011489b:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c01148a2:	7f 0f                	jg     c01148b3 <sfs_rbuf+0x24>
c01148a4:	8b 55 18             	mov    0x18(%ebp),%edx
c01148a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01148aa:	01 d0                	add    %edx,%eax
c01148ac:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01148b1:	76 24                	jbe    c01148d7 <sfs_rbuf+0x48>
c01148b3:	c7 44 24 0c 2c 9f 11 	movl   $0xc0119f2c,0xc(%esp)
c01148ba:	c0 
c01148bb:	c7 44 24 08 00 9f 11 	movl   $0xc0119f00,0x8(%esp)
c01148c2:	c0 
c01148c3:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01148ca:	00 
c01148cb:	c7 04 24 15 9f 11 c0 	movl   $0xc0119f15,(%esp)
c01148d2:	e8 f1 c5 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01148d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01148da:	89 04 24             	mov    %eax,(%esp)
c01148dd:	e8 d2 02 00 00       	call   c0114bb4 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01148e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01148e5:	8b 40 38             	mov    0x38(%eax),%eax
c01148e8:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01148ef:	00 
c01148f0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01148f7:	00 
c01148f8:	8b 55 14             	mov    0x14(%ebp),%edx
c01148fb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01148ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114903:	8b 45 08             	mov    0x8(%ebp),%eax
c0114906:	89 04 24             	mov    %eax,(%esp)
c0114909:	e8 23 fe ff ff       	call   c0114731 <sfs_rwblock_nolock>
c011490e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114911:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114915:	75 21                	jne    c0114938 <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c0114917:	8b 45 08             	mov    0x8(%ebp),%eax
c011491a:	8b 50 38             	mov    0x38(%eax),%edx
c011491d:	8b 45 18             	mov    0x18(%ebp),%eax
c0114920:	01 c2                	add    %eax,%edx
c0114922:	8b 45 10             	mov    0x10(%ebp),%eax
c0114925:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114929:	89 54 24 04          	mov    %edx,0x4(%esp)
c011492d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114930:	89 04 24             	mov    %eax,(%esp)
c0114933:	e8 fa 0e 00 00       	call   c0115832 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c0114938:	8b 45 08             	mov    0x8(%ebp),%eax
c011493b:	89 04 24             	mov    %eax,(%esp)
c011493e:	e8 9d 02 00 00       	call   c0114be0 <unlock_sfs_io>
    return ret;
c0114943:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114946:	c9                   	leave  
c0114947:	c3                   	ret    

c0114948 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114948:	55                   	push   %ebp
c0114949:	89 e5                	mov    %esp,%ebp
c011494b:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011494e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114952:	78 18                	js     c011496c <sfs_wbuf+0x24>
c0114954:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c011495b:	7f 0f                	jg     c011496c <sfs_wbuf+0x24>
c011495d:	8b 55 18             	mov    0x18(%ebp),%edx
c0114960:	8b 45 10             	mov    0x10(%ebp),%eax
c0114963:	01 d0                	add    %edx,%eax
c0114965:	3d 00 10 00 00       	cmp    $0x1000,%eax
c011496a:	76 24                	jbe    c0114990 <sfs_wbuf+0x48>
c011496c:	c7 44 24 0c 2c 9f 11 	movl   $0xc0119f2c,0xc(%esp)
c0114973:	c0 
c0114974:	c7 44 24 08 00 9f 11 	movl   $0xc0119f00,0x8(%esp)
c011497b:	c0 
c011497c:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114983:	00 
c0114984:	c7 04 24 15 9f 11 c0 	movl   $0xc0119f15,(%esp)
c011498b:	e8 38 c5 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114990:	8b 45 08             	mov    0x8(%ebp),%eax
c0114993:	89 04 24             	mov    %eax,(%esp)
c0114996:	e8 19 02 00 00       	call   c0114bb4 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011499b:	8b 45 08             	mov    0x8(%ebp),%eax
c011499e:	8b 40 38             	mov    0x38(%eax),%eax
c01149a1:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01149a8:	00 
c01149a9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01149b0:	00 
c01149b1:	8b 55 14             	mov    0x14(%ebp),%edx
c01149b4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01149b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01149bf:	89 04 24             	mov    %eax,(%esp)
c01149c2:	e8 6a fd ff ff       	call   c0114731 <sfs_rwblock_nolock>
c01149c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01149ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01149ce:	75 50                	jne    c0114a20 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01149d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01149d3:	8b 50 38             	mov    0x38(%eax),%edx
c01149d6:	8b 45 18             	mov    0x18(%ebp),%eax
c01149d9:	01 c2                	add    %eax,%edx
c01149db:	8b 45 10             	mov    0x10(%ebp),%eax
c01149de:	89 44 24 08          	mov    %eax,0x8(%esp)
c01149e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01149e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01149e9:	89 14 24             	mov    %edx,(%esp)
c01149ec:	e8 41 0e 00 00       	call   c0115832 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c01149f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01149f4:	8b 40 38             	mov    0x38(%eax),%eax
c01149f7:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01149fe:	00 
c01149ff:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114a06:	00 
c0114a07:	8b 55 14             	mov    0x14(%ebp),%edx
c0114a0a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114a0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a12:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a15:	89 04 24             	mov    %eax,(%esp)
c0114a18:	e8 14 fd ff ff       	call   c0114731 <sfs_rwblock_nolock>
c0114a1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0114a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a23:	89 04 24             	mov    %eax,(%esp)
c0114a26:	e8 b5 01 00 00       	call   c0114be0 <unlock_sfs_io>
    return ret;
c0114a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114a2e:	c9                   	leave  
c0114a2f:	c3                   	ret    

c0114a30 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0114a30:	55                   	push   %ebp
c0114a31:	89 e5                	mov    %esp,%ebp
c0114a33:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a39:	89 04 24             	mov    %eax,(%esp)
c0114a3c:	e8 73 01 00 00       	call   c0114bb4 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a44:	8b 40 38             	mov    0x38(%eax),%eax
c0114a47:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114a4e:	00 
c0114a4f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114a56:	00 
c0114a57:	89 04 24             	mov    %eax,(%esp)
c0114a5a:	e8 f1 0c 00 00       	call   c0115750 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114a5f:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a62:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a65:	8b 40 38             	mov    0x38(%eax),%eax
c0114a68:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114a6f:	00 
c0114a70:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114a74:	89 04 24             	mov    %eax,(%esp)
c0114a77:	e8 b6 0d 00 00       	call   c0115832 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0114a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a7f:	8b 40 38             	mov    0x38(%eax),%eax
c0114a82:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114a89:	00 
c0114a8a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114a91:	00 
c0114a92:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114a99:	00 
c0114a9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aa1:	89 04 24             	mov    %eax,(%esp)
c0114aa4:	e8 88 fc ff ff       	call   c0114731 <sfs_rwblock_nolock>
c0114aa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0114aac:	8b 45 08             	mov    0x8(%ebp),%eax
c0114aaf:	89 04 24             	mov    %eax,(%esp)
c0114ab2:	e8 29 01 00 00       	call   c0114be0 <unlock_sfs_io>
    return ret;
c0114ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114aba:	c9                   	leave  
c0114abb:	c3                   	ret    

c0114abc <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0114abc:	55                   	push   %ebp
c0114abd:	89 e5                	mov    %esp,%ebp
c0114abf:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0114ac2:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0114ac9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114acc:	8b 50 04             	mov    0x4(%eax),%edx
c0114acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114ad2:	01 d0                	add    %edx,%eax
c0114ad4:	83 e8 01             	sub    $0x1,%eax
c0114ad7:	ba 00 00 00 00       	mov    $0x0,%edx
c0114adc:	f7 75 f4             	divl   -0xc(%ebp)
c0114adf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0114ae2:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ae5:	8b 40 30             	mov    0x30(%eax),%eax
c0114ae8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114aef:	00 
c0114af0:	89 04 24             	mov    %eax,(%esp)
c0114af3:	e8 fd cf ff ff       	call   c0111af5 <bitmap_getdata>
c0114af8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114afb:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0114aff:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0114b06:	00 
c0114b07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b0e:	89 04 24             	mov    %eax,(%esp)
c0114b11:	e8 49 fd ff ff       	call   c011485f <sfs_wblock>
}
c0114b16:	c9                   	leave  
c0114b17:	c3                   	ret    

c0114b18 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0114b18:	55                   	push   %ebp
c0114b19:	89 e5                	mov    %esp,%ebp
c0114b1b:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114b1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b21:	89 04 24             	mov    %eax,(%esp)
c0114b24:	e8 8b 00 00 00       	call   c0114bb4 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114b29:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b2c:	8b 40 38             	mov    0x38(%eax),%eax
c0114b2f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114b36:	00 
c0114b37:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114b3e:	00 
c0114b3f:	89 04 24             	mov    %eax,(%esp)
c0114b42:	e8 09 0c 00 00       	call   c0115750 <memset>
        while (nblks != 0) {
c0114b47:	eb 3f                	jmp    c0114b88 <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0114b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b4c:	8b 40 38             	mov    0x38(%eax),%eax
c0114b4f:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114b56:	00 
c0114b57:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114b5e:	00 
c0114b5f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114b62:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114b66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b6d:	89 04 24             	mov    %eax,(%esp)
c0114b70:	e8 bc fb ff ff       	call   c0114731 <sfs_rwblock_nolock>
c0114b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114b78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114b7c:	74 02                	je     c0114b80 <sfs_clear_block+0x68>
                break;
c0114b7e:	eb 0e                	jmp    c0114b8e <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c0114b80:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0114b84:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0114b88:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114b8c:	75 bb                	jne    c0114b49 <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0114b8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b91:	89 04 24             	mov    %eax,(%esp)
c0114b94:	e8 47 00 00 00       	call   c0114be0 <unlock_sfs_io>
    return ret;
c0114b99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114b9c:	c9                   	leave  
c0114b9d:	c3                   	ret    

c0114b9e <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0114b9e:	55                   	push   %ebp
c0114b9f:	89 e5                	mov    %esp,%ebp
c0114ba1:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0114ba4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ba7:	83 c0 3c             	add    $0x3c,%eax
c0114baa:	89 04 24             	mov    %eax,(%esp)
c0114bad:	e8 6b 51 ff ff       	call   c0109d1d <down>
}
c0114bb2:	c9                   	leave  
c0114bb3:	c3                   	ret    

c0114bb4 <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0114bb4:	55                   	push   %ebp
c0114bb5:	89 e5                	mov    %esp,%ebp
c0114bb7:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0114bba:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bbd:	83 c0 48             	add    $0x48,%eax
c0114bc0:	89 04 24             	mov    %eax,(%esp)
c0114bc3:	e8 55 51 ff ff       	call   c0109d1d <down>
}
c0114bc8:	c9                   	leave  
c0114bc9:	c3                   	ret    

c0114bca <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0114bca:	55                   	push   %ebp
c0114bcb:	89 e5                	mov    %esp,%ebp
c0114bcd:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c0114bd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bd3:	83 c0 3c             	add    $0x3c,%eax
c0114bd6:	89 04 24             	mov    %eax,(%esp)
c0114bd9:	e8 24 51 ff ff       	call   c0109d02 <up>
}
c0114bde:	c9                   	leave  
c0114bdf:	c3                   	ret    

c0114be0 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0114be0:	55                   	push   %ebp
c0114be1:	89 e5                	mov    %esp,%ebp
c0114be3:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c0114be6:	8b 45 08             	mov    0x8(%ebp),%eax
c0114be9:	83 c0 48             	add    $0x48,%eax
c0114bec:	89 04 24             	mov    %eax,(%esp)
c0114bef:	e8 0e 51 ff ff       	call   c0109d02 <up>
}
c0114bf4:	c9                   	leave  
c0114bf5:	c3                   	ret    

c0114bf6 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c0114bf6:	55                   	push   %ebp
c0114bf7:	89 e5                	mov    %esp,%ebp
c0114bf9:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0114bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114bff:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c0114c05:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c0114c08:	b8 20 00 00 00       	mov    $0x20,%eax
c0114c0d:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114c10:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0114c13:	89 c1                	mov    %eax,%ecx
c0114c15:	d3 ea                	shr    %cl,%edx
c0114c17:	89 d0                	mov    %edx,%eax
}
c0114c19:	c9                   	leave  
c0114c1a:	c3                   	ret    

c0114c1b <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0114c1b:	55                   	push   %ebp
c0114c1c:	89 e5                	mov    %esp,%ebp
c0114c1e:	83 ec 58             	sub    $0x58,%esp
c0114c21:	8b 45 14             	mov    0x14(%ebp),%eax
c0114c24:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114c27:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0114c2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114c30:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0114c33:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114c36:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114c39:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114c3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114c42:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114c45:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114c48:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0114c4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114c51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114c55:	74 1c                	je     c0114c73 <printnum+0x58>
c0114c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c5a:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c5f:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c62:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0114c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c68:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c6d:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114c73:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114c76:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114c79:	f7 75 e4             	divl   -0x1c(%ebp)
c0114c7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114c7f:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0114c82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114c85:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114c88:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114c8b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0114c8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114c91:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0114c94:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114c97:	ba 00 00 00 00       	mov    $0x0,%edx
c0114c9c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114c9f:	77 64                	ja     c0114d05 <printnum+0xea>
c0114ca1:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0114ca4:	72 05                	jb     c0114cab <printnum+0x90>
c0114ca6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0114ca9:	77 5a                	ja     c0114d05 <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0114cab:	8b 45 20             	mov    0x20(%ebp),%eax
c0114cae:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114cb1:	8b 45 24             	mov    0x24(%ebp),%eax
c0114cb4:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0114cb8:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114cbc:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114cbf:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114cc6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114cc9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114ccd:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114cd1:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cd4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cdb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ce2:	89 04 24             	mov    %eax,(%esp)
c0114ce5:	e8 31 ff ff ff       	call   c0114c1b <printnum>
c0114cea:	eb 23                	jmp    c0114d0f <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114cec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cef:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cf3:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cf6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cfa:	8b 45 24             	mov    0x24(%ebp),%eax
c0114cfd:	89 04 24             	mov    %eax,(%esp)
c0114d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d03:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0114d05:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0114d09:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0114d0d:	7f dd                	jg     c0114cec <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0114d0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114d12:	05 84 a1 11 c0       	add    $0xc011a184,%eax
c0114d17:	0f b6 00             	movzbl (%eax),%eax
c0114d1a:	0f be c0             	movsbl %al,%eax
c0114d1d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114d20:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114d24:	8b 55 10             	mov    0x10(%ebp),%edx
c0114d27:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114d2b:	89 04 24             	mov    %eax,(%esp)
c0114d2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d31:	ff d0                	call   *%eax
}
c0114d33:	c9                   	leave  
c0114d34:	c3                   	ret    

c0114d35 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114d35:	55                   	push   %ebp
c0114d36:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114d38:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114d3c:	7e 14                	jle    c0114d52 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114d3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d41:	8b 00                	mov    (%eax),%eax
c0114d43:	8d 48 08             	lea    0x8(%eax),%ecx
c0114d46:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d49:	89 0a                	mov    %ecx,(%edx)
c0114d4b:	8b 50 04             	mov    0x4(%eax),%edx
c0114d4e:	8b 00                	mov    (%eax),%eax
c0114d50:	eb 30                	jmp    c0114d82 <getuint+0x4d>
    }
    else if (lflag) {
c0114d52:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114d56:	74 16                	je     c0114d6e <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114d58:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d5b:	8b 00                	mov    (%eax),%eax
c0114d5d:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d60:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d63:	89 0a                	mov    %ecx,(%edx)
c0114d65:	8b 00                	mov    (%eax),%eax
c0114d67:	ba 00 00 00 00       	mov    $0x0,%edx
c0114d6c:	eb 14                	jmp    c0114d82 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114d6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d71:	8b 00                	mov    (%eax),%eax
c0114d73:	8d 48 04             	lea    0x4(%eax),%ecx
c0114d76:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d79:	89 0a                	mov    %ecx,(%edx)
c0114d7b:	8b 00                	mov    (%eax),%eax
c0114d7d:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114d82:	5d                   	pop    %ebp
c0114d83:	c3                   	ret    

c0114d84 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114d84:	55                   	push   %ebp
c0114d85:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114d87:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114d8b:	7e 14                	jle    c0114da1 <getint+0x1d>
        return va_arg(*ap, long long);
c0114d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d90:	8b 00                	mov    (%eax),%eax
c0114d92:	8d 48 08             	lea    0x8(%eax),%ecx
c0114d95:	8b 55 08             	mov    0x8(%ebp),%edx
c0114d98:	89 0a                	mov    %ecx,(%edx)
c0114d9a:	8b 50 04             	mov    0x4(%eax),%edx
c0114d9d:	8b 00                	mov    (%eax),%eax
c0114d9f:	eb 28                	jmp    c0114dc9 <getint+0x45>
    }
    else if (lflag) {
c0114da1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114da5:	74 12                	je     c0114db9 <getint+0x35>
        return va_arg(*ap, long);
c0114da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0114daa:	8b 00                	mov    (%eax),%eax
c0114dac:	8d 48 04             	lea    0x4(%eax),%ecx
c0114daf:	8b 55 08             	mov    0x8(%ebp),%edx
c0114db2:	89 0a                	mov    %ecx,(%edx)
c0114db4:	8b 00                	mov    (%eax),%eax
c0114db6:	99                   	cltd   
c0114db7:	eb 10                	jmp    c0114dc9 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114db9:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dbc:	8b 00                	mov    (%eax),%eax
c0114dbe:	8d 48 04             	lea    0x4(%eax),%ecx
c0114dc1:	8b 55 08             	mov    0x8(%ebp),%edx
c0114dc4:	89 0a                	mov    %ecx,(%edx)
c0114dc6:	8b 00                	mov    (%eax),%eax
c0114dc8:	99                   	cltd   
    }
}
c0114dc9:	5d                   	pop    %ebp
c0114dca:	c3                   	ret    

c0114dcb <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114dcb:	55                   	push   %ebp
c0114dcc:	89 e5                	mov    %esp,%ebp
c0114dce:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114dd1:	8d 45 18             	lea    0x18(%ebp),%eax
c0114dd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114dda:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114dde:	8b 45 14             	mov    0x14(%ebp),%eax
c0114de1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114de5:	8b 45 10             	mov    0x10(%ebp),%eax
c0114de8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114dec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114def:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114df3:	8b 45 08             	mov    0x8(%ebp),%eax
c0114df6:	89 04 24             	mov    %eax,(%esp)
c0114df9:	e8 02 00 00 00       	call   c0114e00 <vprintfmt>
    va_end(ap);
}
c0114dfe:	c9                   	leave  
c0114dff:	c3                   	ret    

c0114e00 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114e00:	55                   	push   %ebp
c0114e01:	89 e5                	mov    %esp,%ebp
c0114e03:	56                   	push   %esi
c0114e04:	53                   	push   %ebx
c0114e05:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114e08:	eb 1f                	jmp    c0114e29 <vprintfmt+0x29>
            if (ch == '\0') {
c0114e0a:	85 db                	test   %ebx,%ebx
c0114e0c:	75 05                	jne    c0114e13 <vprintfmt+0x13>
                return;
c0114e0e:	e9 33 04 00 00       	jmp    c0115246 <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114e13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e16:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e1a:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e21:	89 1c 24             	mov    %ebx,(%esp)
c0114e24:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e27:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114e29:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e2c:	8d 50 01             	lea    0x1(%eax),%edx
c0114e2f:	89 55 14             	mov    %edx,0x14(%ebp)
c0114e32:	0f b6 00             	movzbl (%eax),%eax
c0114e35:	0f b6 d8             	movzbl %al,%ebx
c0114e38:	83 fb 25             	cmp    $0x25,%ebx
c0114e3b:	75 cd                	jne    c0114e0a <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114e3d:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114e41:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114e48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114e4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114e4e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114e55:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114e58:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114e5b:	8b 45 14             	mov    0x14(%ebp),%eax
c0114e5e:	8d 50 01             	lea    0x1(%eax),%edx
c0114e61:	89 55 14             	mov    %edx,0x14(%ebp)
c0114e64:	0f b6 00             	movzbl (%eax),%eax
c0114e67:	0f b6 d8             	movzbl %al,%ebx
c0114e6a:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114e6d:	83 f8 55             	cmp    $0x55,%eax
c0114e70:	0f 87 98 03 00 00    	ja     c011520e <vprintfmt+0x40e>
c0114e76:	8b 04 85 a8 a1 11 c0 	mov    -0x3fee5e58(,%eax,4),%eax
c0114e7d:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114e7f:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114e83:	eb d6                	jmp    c0114e5b <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114e85:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114e89:	eb d0                	jmp    c0114e5b <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114e8b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114e92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114e95:	89 d0                	mov    %edx,%eax
c0114e97:	c1 e0 02             	shl    $0x2,%eax
c0114e9a:	01 d0                	add    %edx,%eax
c0114e9c:	01 c0                	add    %eax,%eax
c0114e9e:	01 d8                	add    %ebx,%eax
c0114ea0:	83 e8 30             	sub    $0x30,%eax
c0114ea3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114ea6:	8b 45 14             	mov    0x14(%ebp),%eax
c0114ea9:	0f b6 00             	movzbl (%eax),%eax
c0114eac:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114eaf:	83 fb 2f             	cmp    $0x2f,%ebx
c0114eb2:	7e 0b                	jle    c0114ebf <vprintfmt+0xbf>
c0114eb4:	83 fb 39             	cmp    $0x39,%ebx
c0114eb7:	7f 06                	jg     c0114ebf <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114eb9:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114ebd:	eb d3                	jmp    c0114e92 <vprintfmt+0x92>
            goto process_precision;
c0114ebf:	eb 33                	jmp    c0114ef4 <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114ec1:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ec4:	8d 50 04             	lea    0x4(%eax),%edx
c0114ec7:	89 55 18             	mov    %edx,0x18(%ebp)
c0114eca:	8b 00                	mov    (%eax),%eax
c0114ecc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114ecf:	eb 23                	jmp    c0114ef4 <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114ed1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ed5:	79 0c                	jns    c0114ee3 <vprintfmt+0xe3>
                width = 0;
c0114ed7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114ede:	e9 78 ff ff ff       	jmp    c0114e5b <vprintfmt+0x5b>
c0114ee3:	e9 73 ff ff ff       	jmp    c0114e5b <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114ee8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114eef:	e9 67 ff ff ff       	jmp    c0114e5b <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114ef4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114ef8:	79 12                	jns    c0114f0c <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114efa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114efd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114f00:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114f07:	e9 4f ff ff ff       	jmp    c0114e5b <vprintfmt+0x5b>
c0114f0c:	e9 4a ff ff ff       	jmp    c0114e5b <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114f11:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114f15:	e9 41 ff ff ff       	jmp    c0114e5b <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114f1a:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f1d:	8d 50 04             	lea    0x4(%eax),%edx
c0114f20:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f23:	8b 00                	mov    (%eax),%eax
c0114f25:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114f28:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114f2c:	8b 55 10             	mov    0x10(%ebp),%edx
c0114f2f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114f33:	89 04 24             	mov    %eax,(%esp)
c0114f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f39:	ff d0                	call   *%eax
            break;
c0114f3b:	e9 00 03 00 00       	jmp    c0115240 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114f40:	8b 45 18             	mov    0x18(%ebp),%eax
c0114f43:	8d 50 04             	lea    0x4(%eax),%edx
c0114f46:	89 55 18             	mov    %edx,0x18(%ebp)
c0114f49:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114f4b:	85 db                	test   %ebx,%ebx
c0114f4d:	79 02                	jns    c0114f51 <vprintfmt+0x151>
                err = -err;
c0114f4f:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114f51:	83 fb 18             	cmp    $0x18,%ebx
c0114f54:	7f 0b                	jg     c0114f61 <vprintfmt+0x161>
c0114f56:	8b 34 9d 20 a1 11 c0 	mov    -0x3fee5ee0(,%ebx,4),%esi
c0114f5d:	85 f6                	test   %esi,%esi
c0114f5f:	75 2a                	jne    c0114f8b <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114f61:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114f65:	c7 44 24 0c 95 a1 11 	movl   $0xc011a195,0xc(%esp)
c0114f6c:	c0 
c0114f6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f7e:	89 04 24             	mov    %eax,(%esp)
c0114f81:	e8 45 fe ff ff       	call   c0114dcb <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114f86:	e9 b5 02 00 00       	jmp    c0115240 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114f8b:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114f8f:	c7 44 24 0c 9e a1 11 	movl   $0xc011a19e,0xc(%esp)
c0114f96:	c0 
c0114f97:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f9a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fa1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fa8:	89 04 24             	mov    %eax,(%esp)
c0114fab:	e8 1b fe ff ff       	call   c0114dcb <printfmt>
            }
            break;
c0114fb0:	e9 8b 02 00 00       	jmp    c0115240 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114fb5:	8b 45 18             	mov    0x18(%ebp),%eax
c0114fb8:	8d 50 04             	lea    0x4(%eax),%edx
c0114fbb:	89 55 18             	mov    %edx,0x18(%ebp)
c0114fbe:	8b 30                	mov    (%eax),%esi
c0114fc0:	85 f6                	test   %esi,%esi
c0114fc2:	75 05                	jne    c0114fc9 <vprintfmt+0x1c9>
                p = "(null)";
c0114fc4:	be a1 a1 11 c0       	mov    $0xc011a1a1,%esi
            }
            if (width > 0 && padc != '-') {
c0114fc9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114fcd:	7e 45                	jle    c0115014 <vprintfmt+0x214>
c0114fcf:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114fd3:	74 3f                	je     c0115014 <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114fd5:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114fd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114fdb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fdf:	89 34 24             	mov    %esi,(%esp)
c0114fe2:	e8 3b 04 00 00       	call   c0115422 <strnlen>
c0114fe7:	29 c3                	sub    %eax,%ebx
c0114fe9:	89 d8                	mov    %ebx,%eax
c0114feb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114fee:	eb 1e                	jmp    c011500e <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114ff0:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114ff4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114ff7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114ffb:	8b 55 10             	mov    0x10(%ebp),%edx
c0114ffe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0115002:	89 04 24             	mov    %eax,(%esp)
c0115005:	8b 45 08             	mov    0x8(%ebp),%eax
c0115008:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c011500a:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011500e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0115012:	7f dc                	jg     c0114ff0 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0115014:	eb 46                	jmp    c011505c <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0115016:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011501a:	74 26                	je     c0115042 <vprintfmt+0x242>
c011501c:	83 fb 1f             	cmp    $0x1f,%ebx
c011501f:	7e 05                	jle    c0115026 <vprintfmt+0x226>
c0115021:	83 fb 7e             	cmp    $0x7e,%ebx
c0115024:	7e 1c                	jle    c0115042 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0115026:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115029:	89 44 24 08          	mov    %eax,0x8(%esp)
c011502d:	8b 45 10             	mov    0x10(%ebp),%eax
c0115030:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115034:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c011503b:	8b 45 08             	mov    0x8(%ebp),%eax
c011503e:	ff d0                	call   *%eax
c0115040:	eb 16                	jmp    c0115058 <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0115042:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115045:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115049:	8b 45 10             	mov    0x10(%ebp),%eax
c011504c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115050:	89 1c 24             	mov    %ebx,(%esp)
c0115053:	8b 45 08             	mov    0x8(%ebp),%eax
c0115056:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0115058:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011505c:	89 f0                	mov    %esi,%eax
c011505e:	8d 70 01             	lea    0x1(%eax),%esi
c0115061:	0f b6 00             	movzbl (%eax),%eax
c0115064:	0f be d8             	movsbl %al,%ebx
c0115067:	85 db                	test   %ebx,%ebx
c0115069:	74 10                	je     c011507b <vprintfmt+0x27b>
c011506b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011506f:	78 a5                	js     c0115016 <vprintfmt+0x216>
c0115071:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0115075:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0115079:	79 9b                	jns    c0115016 <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c011507b:	eb 1e                	jmp    c011509b <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c011507d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115080:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115084:	8b 45 10             	mov    0x10(%ebp),%eax
c0115087:	89 44 24 04          	mov    %eax,0x4(%esp)
c011508b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0115092:	8b 45 08             	mov    0x8(%ebp),%eax
c0115095:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0115097:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011509b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011509f:	7f dc                	jg     c011507d <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c01150a1:	e9 9a 01 00 00       	jmp    c0115240 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c01150a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01150a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150ad:	8d 45 18             	lea    0x18(%ebp),%eax
c01150b0:	89 04 24             	mov    %eax,(%esp)
c01150b3:	e8 cc fc ff ff       	call   c0114d84 <getint>
c01150b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c01150be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01150c4:	85 d2                	test   %edx,%edx
c01150c6:	79 2d                	jns    c01150f5 <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c01150c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01150cb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01150cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01150d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01150d6:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c01150dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01150e0:	ff d0                	call   *%eax
                num = -(long long)num;
c01150e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01150e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01150e8:	f7 d8                	neg    %eax
c01150ea:	83 d2 00             	adc    $0x0,%edx
c01150ed:	f7 da                	neg    %edx
c01150ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01150f2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c01150f5:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c01150fc:	e9 b6 00 00 00       	jmp    c01151b7 <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0115101:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115104:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115108:	8d 45 18             	lea    0x18(%ebp),%eax
c011510b:	89 04 24             	mov    %eax,(%esp)
c011510e:	e8 22 fc ff ff       	call   c0114d35 <getuint>
c0115113:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115116:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0115119:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0115120:	e9 92 00 00 00       	jmp    c01151b7 <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0115125:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115128:	89 44 24 04          	mov    %eax,0x4(%esp)
c011512c:	8d 45 18             	lea    0x18(%ebp),%eax
c011512f:	89 04 24             	mov    %eax,(%esp)
c0115132:	e8 fe fb ff ff       	call   c0114d35 <getuint>
c0115137:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011513a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c011513d:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0115144:	eb 71                	jmp    c01151b7 <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0115146:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115149:	89 44 24 08          	mov    %eax,0x8(%esp)
c011514d:	8b 45 10             	mov    0x10(%ebp),%eax
c0115150:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115154:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c011515b:	8b 45 08             	mov    0x8(%ebp),%eax
c011515e:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0115160:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115163:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115167:	8b 45 10             	mov    0x10(%ebp),%eax
c011516a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011516e:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0115175:	8b 45 08             	mov    0x8(%ebp),%eax
c0115178:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c011517a:	8b 45 18             	mov    0x18(%ebp),%eax
c011517d:	8d 50 04             	lea    0x4(%eax),%edx
c0115180:	89 55 18             	mov    %edx,0x18(%ebp)
c0115183:	8b 00                	mov    (%eax),%eax
c0115185:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115188:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c011518f:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0115196:	eb 1f                	jmp    c01151b7 <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0115198:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011519b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011519f:	8d 45 18             	lea    0x18(%ebp),%eax
c01151a2:	89 04 24             	mov    %eax,(%esp)
c01151a5:	e8 8b fb ff ff       	call   c0114d35 <getuint>
c01151aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01151ad:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c01151b0:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c01151b7:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c01151bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01151be:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c01151c2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01151c5:	89 54 24 18          	mov    %edx,0x18(%esp)
c01151c9:	89 44 24 14          	mov    %eax,0x14(%esp)
c01151cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01151d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01151d7:	89 54 24 10          	mov    %edx,0x10(%esp)
c01151db:	8b 45 10             	mov    0x10(%ebp),%eax
c01151de:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01151e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01151ec:	89 04 24             	mov    %eax,(%esp)
c01151ef:	e8 27 fa ff ff       	call   c0114c1b <printnum>
            break;
c01151f4:	eb 4a                	jmp    c0115240 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c01151f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151f9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01151fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0115200:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115204:	89 1c 24             	mov    %ebx,(%esp)
c0115207:	8b 45 08             	mov    0x8(%ebp),%eax
c011520a:	ff d0                	call   *%eax
            break;
c011520c:	eb 32                	jmp    c0115240 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c011520e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115211:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115215:	8b 45 10             	mov    0x10(%ebp),%eax
c0115218:	89 44 24 04          	mov    %eax,0x4(%esp)
c011521c:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0115223:	8b 45 08             	mov    0x8(%ebp),%eax
c0115226:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0115228:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011522c:	eb 04                	jmp    c0115232 <vprintfmt+0x432>
c011522e:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0115232:	8b 45 14             	mov    0x14(%ebp),%eax
c0115235:	83 e8 01             	sub    $0x1,%eax
c0115238:	0f b6 00             	movzbl (%eax),%eax
c011523b:	3c 25                	cmp    $0x25,%al
c011523d:	75 ef                	jne    c011522e <vprintfmt+0x42e>
                /* do nothing */;
            break;
c011523f:	90                   	nop
        }
    }
c0115240:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0115241:	e9 e3 fb ff ff       	jmp    c0114e29 <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0115246:	83 c4 40             	add    $0x40,%esp
c0115249:	5b                   	pop    %ebx
c011524a:	5e                   	pop    %esi
c011524b:	5d                   	pop    %ebp
c011524c:	c3                   	ret    

c011524d <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c011524d:	55                   	push   %ebp
c011524e:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0115250:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115253:	8b 40 08             	mov    0x8(%eax),%eax
c0115256:	8d 50 01             	lea    0x1(%eax),%edx
c0115259:	8b 45 0c             	mov    0xc(%ebp),%eax
c011525c:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c011525f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115262:	8b 10                	mov    (%eax),%edx
c0115264:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115267:	8b 40 04             	mov    0x4(%eax),%eax
c011526a:	39 c2                	cmp    %eax,%edx
c011526c:	73 12                	jae    c0115280 <sprintputch+0x33>
        *b->buf ++ = ch;
c011526e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115271:	8b 00                	mov    (%eax),%eax
c0115273:	8d 48 01             	lea    0x1(%eax),%ecx
c0115276:	8b 55 0c             	mov    0xc(%ebp),%edx
c0115279:	89 0a                	mov    %ecx,(%edx)
c011527b:	8b 55 08             	mov    0x8(%ebp),%edx
c011527e:	88 10                	mov    %dl,(%eax)
    }
}
c0115280:	5d                   	pop    %ebp
c0115281:	c3                   	ret    

c0115282 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0115282:	55                   	push   %ebp
c0115283:	89 e5                	mov    %esp,%ebp
c0115285:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0115288:	8d 45 14             	lea    0x14(%ebp),%eax
c011528b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c011528e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115291:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115295:	8b 45 10             	mov    0x10(%ebp),%eax
c0115298:	89 44 24 08          	mov    %eax,0x8(%esp)
c011529c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011529f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01152a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01152a6:	89 04 24             	mov    %eax,(%esp)
c01152a9:	e8 08 00 00 00       	call   c01152b6 <vsnprintf>
c01152ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01152b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01152b4:	c9                   	leave  
c01152b5:	c3                   	ret    

c01152b6 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c01152b6:	55                   	push   %ebp
c01152b7:	89 e5                	mov    %esp,%ebp
c01152b9:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c01152bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01152bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01152c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152c5:	8d 50 ff             	lea    -0x1(%eax),%edx
c01152c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01152cb:	01 d0                	add    %edx,%eax
c01152cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01152d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01152d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01152db:	74 0a                	je     c01152e7 <vsnprintf+0x31>
c01152dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01152e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01152e3:	39 c2                	cmp    %eax,%edx
c01152e5:	76 07                	jbe    c01152ee <vsnprintf+0x38>
        return -E_INVAL;
c01152e7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01152ec:	eb 32                	jmp    c0115320 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c01152ee:	8b 45 14             	mov    0x14(%ebp),%eax
c01152f1:	89 44 24 10          	mov    %eax,0x10(%esp)
c01152f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01152f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01152fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01152ff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115303:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c011530a:	ff 
c011530b:	c7 04 24 4d 52 11 c0 	movl   $0xc011524d,(%esp)
c0115312:	e8 e9 fa ff ff       	call   c0114e00 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0115317:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011531a:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c011531d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115320:	c9                   	leave  
c0115321:	c3                   	ret    

c0115322 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0115322:	55                   	push   %ebp
c0115323:	89 e5                	mov    %esp,%ebp
c0115325:	57                   	push   %edi
c0115326:	56                   	push   %esi
c0115327:	53                   	push   %ebx
c0115328:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c011532b:	a1 c8 fe 14 c0       	mov    0xc014fec8,%eax
c0115330:	8b 15 cc fe 14 c0    	mov    0xc014fecc,%edx
c0115336:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c011533c:	6b f0 05             	imul   $0x5,%eax,%esi
c011533f:	01 f7                	add    %esi,%edi
c0115341:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c0115346:	f7 e6                	mul    %esi
c0115348:	8d 34 17             	lea    (%edi,%edx,1),%esi
c011534b:	89 f2                	mov    %esi,%edx
c011534d:	83 c0 0b             	add    $0xb,%eax
c0115350:	83 d2 00             	adc    $0x0,%edx
c0115353:	89 c7                	mov    %eax,%edi
c0115355:	83 e7 ff             	and    $0xffffffff,%edi
c0115358:	89 f9                	mov    %edi,%ecx
c011535a:	0f b7 da             	movzwl %dx,%ebx
c011535d:	89 0d c8 fe 14 c0    	mov    %ecx,0xc014fec8
c0115363:	89 1d cc fe 14 c0    	mov    %ebx,0xc014fecc
    unsigned long long result = (next >> 12);
c0115369:	a1 c8 fe 14 c0       	mov    0xc014fec8,%eax
c011536e:	8b 15 cc fe 14 c0    	mov    0xc014fecc,%edx
c0115374:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0115378:	c1 ea 0c             	shr    $0xc,%edx
c011537b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011537e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0115381:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0115388:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011538b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011538e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0115391:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0115394:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115397:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011539a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011539e:	74 1c                	je     c01153bc <rand+0x9a>
c01153a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01153a3:	ba 00 00 00 00       	mov    $0x0,%edx
c01153a8:	f7 75 dc             	divl   -0x24(%ebp)
c01153ab:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01153ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01153b1:	ba 00 00 00 00       	mov    $0x0,%edx
c01153b6:	f7 75 dc             	divl   -0x24(%ebp)
c01153b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01153bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01153bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01153c2:	f7 75 dc             	divl   -0x24(%ebp)
c01153c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01153c8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01153cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01153ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01153d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01153d4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01153d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c01153da:	83 c4 24             	add    $0x24,%esp
c01153dd:	5b                   	pop    %ebx
c01153de:	5e                   	pop    %esi
c01153df:	5f                   	pop    %edi
c01153e0:	5d                   	pop    %ebp
c01153e1:	c3                   	ret    

c01153e2 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c01153e2:	55                   	push   %ebp
c01153e3:	89 e5                	mov    %esp,%ebp
    next = seed;
c01153e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01153e8:	ba 00 00 00 00       	mov    $0x0,%edx
c01153ed:	a3 c8 fe 14 c0       	mov    %eax,0xc014fec8
c01153f2:	89 15 cc fe 14 c0    	mov    %edx,0xc014fecc
}
c01153f8:	5d                   	pop    %ebp
c01153f9:	c3                   	ret    

c01153fa <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01153fa:	55                   	push   %ebp
c01153fb:	89 e5                	mov    %esp,%ebp
c01153fd:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0115400:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0115407:	eb 04                	jmp    c011540d <strlen+0x13>
        cnt ++;
c0115409:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c011540d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115410:	8d 50 01             	lea    0x1(%eax),%edx
c0115413:	89 55 08             	mov    %edx,0x8(%ebp)
c0115416:	0f b6 00             	movzbl (%eax),%eax
c0115419:	84 c0                	test   %al,%al
c011541b:	75 ec                	jne    c0115409 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c011541d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115420:	c9                   	leave  
c0115421:	c3                   	ret    

c0115422 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0115422:	55                   	push   %ebp
c0115423:	89 e5                	mov    %esp,%ebp
c0115425:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0115428:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c011542f:	eb 04                	jmp    c0115435 <strnlen+0x13>
        cnt ++;
c0115431:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c0115435:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115438:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011543b:	73 10                	jae    c011544d <strnlen+0x2b>
c011543d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115440:	8d 50 01             	lea    0x1(%eax),%edx
c0115443:	89 55 08             	mov    %edx,0x8(%ebp)
c0115446:	0f b6 00             	movzbl (%eax),%eax
c0115449:	84 c0                	test   %al,%al
c011544b:	75 e4                	jne    c0115431 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c011544d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115450:	c9                   	leave  
c0115451:	c3                   	ret    

c0115452 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0115452:	55                   	push   %ebp
c0115453:	89 e5                	mov    %esp,%ebp
c0115455:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0115458:	8b 45 08             	mov    0x8(%ebp),%eax
c011545b:	89 04 24             	mov    %eax,(%esp)
c011545e:	e8 97 ff ff ff       	call   c01153fa <strlen>
c0115463:	8b 55 08             	mov    0x8(%ebp),%edx
c0115466:	01 c2                	add    %eax,%edx
c0115468:	8b 45 0c             	mov    0xc(%ebp),%eax
c011546b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011546f:	89 14 24             	mov    %edx,(%esp)
c0115472:	e8 02 00 00 00       	call   c0115479 <strcpy>
}
c0115477:	c9                   	leave  
c0115478:	c3                   	ret    

c0115479 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0115479:	55                   	push   %ebp
c011547a:	89 e5                	mov    %esp,%ebp
c011547c:	57                   	push   %edi
c011547d:	56                   	push   %esi
c011547e:	83 ec 20             	sub    $0x20,%esp
c0115481:	8b 45 08             	mov    0x8(%ebp),%eax
c0115484:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115487:	8b 45 0c             	mov    0xc(%ebp),%eax
c011548a:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c011548d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115490:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115493:	89 d1                	mov    %edx,%ecx
c0115495:	89 c2                	mov    %eax,%edx
c0115497:	89 ce                	mov    %ecx,%esi
c0115499:	89 d7                	mov    %edx,%edi
c011549b:	ac                   	lods   %ds:(%esi),%al
c011549c:	aa                   	stos   %al,%es:(%edi)
c011549d:	84 c0                	test   %al,%al
c011549f:	75 fa                	jne    c011549b <strcpy+0x22>
c01154a1:	89 fa                	mov    %edi,%edx
c01154a3:	89 f1                	mov    %esi,%ecx
c01154a5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01154a8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01154ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c01154ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c01154b1:	83 c4 20             	add    $0x20,%esp
c01154b4:	5e                   	pop    %esi
c01154b5:	5f                   	pop    %edi
c01154b6:	5d                   	pop    %ebp
c01154b7:	c3                   	ret    

c01154b8 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c01154b8:	55                   	push   %ebp
c01154b9:	89 e5                	mov    %esp,%ebp
c01154bb:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01154be:	8b 45 08             	mov    0x8(%ebp),%eax
c01154c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01154c4:	eb 21                	jmp    c01154e7 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01154c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154c9:	0f b6 10             	movzbl (%eax),%edx
c01154cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154cf:	88 10                	mov    %dl,(%eax)
c01154d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154d4:	0f b6 00             	movzbl (%eax),%eax
c01154d7:	84 c0                	test   %al,%al
c01154d9:	74 04                	je     c01154df <strncpy+0x27>
            src ++;
c01154db:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c01154df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01154e3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01154e7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01154eb:	75 d9                	jne    c01154c6 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01154ed:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01154f0:	c9                   	leave  
c01154f1:	c3                   	ret    

c01154f2 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c01154f2:	55                   	push   %ebp
c01154f3:	89 e5                	mov    %esp,%ebp
c01154f5:	57                   	push   %edi
c01154f6:	56                   	push   %esi
c01154f7:	83 ec 20             	sub    $0x20,%esp
c01154fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01154fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115500:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115503:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c0115506:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115509:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011550c:	89 d1                	mov    %edx,%ecx
c011550e:	89 c2                	mov    %eax,%edx
c0115510:	89 ce                	mov    %ecx,%esi
c0115512:	89 d7                	mov    %edx,%edi
c0115514:	ac                   	lods   %ds:(%esi),%al
c0115515:	ae                   	scas   %es:(%edi),%al
c0115516:	75 08                	jne    c0115520 <strcmp+0x2e>
c0115518:	84 c0                	test   %al,%al
c011551a:	75 f8                	jne    c0115514 <strcmp+0x22>
c011551c:	31 c0                	xor    %eax,%eax
c011551e:	eb 04                	jmp    c0115524 <strcmp+0x32>
c0115520:	19 c0                	sbb    %eax,%eax
c0115522:	0c 01                	or     $0x1,%al
c0115524:	89 fa                	mov    %edi,%edx
c0115526:	89 f1                	mov    %esi,%ecx
c0115528:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011552b:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c011552e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0115531:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0115534:	83 c4 20             	add    $0x20,%esp
c0115537:	5e                   	pop    %esi
c0115538:	5f                   	pop    %edi
c0115539:	5d                   	pop    %ebp
c011553a:	c3                   	ret    

c011553b <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c011553b:	55                   	push   %ebp
c011553c:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c011553e:	eb 0c                	jmp    c011554c <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115540:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0115544:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115548:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c011554c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115550:	74 1a                	je     c011556c <strncmp+0x31>
c0115552:	8b 45 08             	mov    0x8(%ebp),%eax
c0115555:	0f b6 00             	movzbl (%eax),%eax
c0115558:	84 c0                	test   %al,%al
c011555a:	74 10                	je     c011556c <strncmp+0x31>
c011555c:	8b 45 08             	mov    0x8(%ebp),%eax
c011555f:	0f b6 10             	movzbl (%eax),%edx
c0115562:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115565:	0f b6 00             	movzbl (%eax),%eax
c0115568:	38 c2                	cmp    %al,%dl
c011556a:	74 d4                	je     c0115540 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c011556c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115570:	74 18                	je     c011558a <strncmp+0x4f>
c0115572:	8b 45 08             	mov    0x8(%ebp),%eax
c0115575:	0f b6 00             	movzbl (%eax),%eax
c0115578:	0f b6 d0             	movzbl %al,%edx
c011557b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011557e:	0f b6 00             	movzbl (%eax),%eax
c0115581:	0f b6 c0             	movzbl %al,%eax
c0115584:	29 c2                	sub    %eax,%edx
c0115586:	89 d0                	mov    %edx,%eax
c0115588:	eb 05                	jmp    c011558f <strncmp+0x54>
c011558a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011558f:	5d                   	pop    %ebp
c0115590:	c3                   	ret    

c0115591 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0115591:	55                   	push   %ebp
c0115592:	89 e5                	mov    %esp,%ebp
c0115594:	83 ec 04             	sub    $0x4,%esp
c0115597:	8b 45 0c             	mov    0xc(%ebp),%eax
c011559a:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c011559d:	eb 14                	jmp    c01155b3 <strchr+0x22>
        if (*s == c) {
c011559f:	8b 45 08             	mov    0x8(%ebp),%eax
c01155a2:	0f b6 00             	movzbl (%eax),%eax
c01155a5:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01155a8:	75 05                	jne    c01155af <strchr+0x1e>
            return (char *)s;
c01155aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01155ad:	eb 13                	jmp    c01155c2 <strchr+0x31>
        }
        s ++;
c01155af:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c01155b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01155b6:	0f b6 00             	movzbl (%eax),%eax
c01155b9:	84 c0                	test   %al,%al
c01155bb:	75 e2                	jne    c011559f <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c01155bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01155c2:	c9                   	leave  
c01155c3:	c3                   	ret    

c01155c4 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01155c4:	55                   	push   %ebp
c01155c5:	89 e5                	mov    %esp,%ebp
c01155c7:	83 ec 04             	sub    $0x4,%esp
c01155ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155cd:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01155d0:	eb 11                	jmp    c01155e3 <strfind+0x1f>
        if (*s == c) {
c01155d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01155d5:	0f b6 00             	movzbl (%eax),%eax
c01155d8:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01155db:	75 02                	jne    c01155df <strfind+0x1b>
            break;
c01155dd:	eb 0e                	jmp    c01155ed <strfind+0x29>
        }
        s ++;
c01155df:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01155e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01155e6:	0f b6 00             	movzbl (%eax),%eax
c01155e9:	84 c0                	test   %al,%al
c01155eb:	75 e5                	jne    c01155d2 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c01155ed:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01155f0:	c9                   	leave  
c01155f1:	c3                   	ret    

c01155f2 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c01155f2:	55                   	push   %ebp
c01155f3:	89 e5                	mov    %esp,%ebp
c01155f5:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01155f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01155ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0115606:	eb 04                	jmp    c011560c <strtol+0x1a>
        s ++;
c0115608:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c011560c:	8b 45 08             	mov    0x8(%ebp),%eax
c011560f:	0f b6 00             	movzbl (%eax),%eax
c0115612:	3c 20                	cmp    $0x20,%al
c0115614:	74 f2                	je     c0115608 <strtol+0x16>
c0115616:	8b 45 08             	mov    0x8(%ebp),%eax
c0115619:	0f b6 00             	movzbl (%eax),%eax
c011561c:	3c 09                	cmp    $0x9,%al
c011561e:	74 e8                	je     c0115608 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0115620:	8b 45 08             	mov    0x8(%ebp),%eax
c0115623:	0f b6 00             	movzbl (%eax),%eax
c0115626:	3c 2b                	cmp    $0x2b,%al
c0115628:	75 06                	jne    c0115630 <strtol+0x3e>
        s ++;
c011562a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011562e:	eb 15                	jmp    c0115645 <strtol+0x53>
    }
    else if (*s == '-') {
c0115630:	8b 45 08             	mov    0x8(%ebp),%eax
c0115633:	0f b6 00             	movzbl (%eax),%eax
c0115636:	3c 2d                	cmp    $0x2d,%al
c0115638:	75 0b                	jne    c0115645 <strtol+0x53>
        s ++, neg = 1;
c011563a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011563e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0115645:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115649:	74 06                	je     c0115651 <strtol+0x5f>
c011564b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c011564f:	75 24                	jne    c0115675 <strtol+0x83>
c0115651:	8b 45 08             	mov    0x8(%ebp),%eax
c0115654:	0f b6 00             	movzbl (%eax),%eax
c0115657:	3c 30                	cmp    $0x30,%al
c0115659:	75 1a                	jne    c0115675 <strtol+0x83>
c011565b:	8b 45 08             	mov    0x8(%ebp),%eax
c011565e:	83 c0 01             	add    $0x1,%eax
c0115661:	0f b6 00             	movzbl (%eax),%eax
c0115664:	3c 78                	cmp    $0x78,%al
c0115666:	75 0d                	jne    c0115675 <strtol+0x83>
        s += 2, base = 16;
c0115668:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c011566c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0115673:	eb 2a                	jmp    c011569f <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0115675:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115679:	75 17                	jne    c0115692 <strtol+0xa0>
c011567b:	8b 45 08             	mov    0x8(%ebp),%eax
c011567e:	0f b6 00             	movzbl (%eax),%eax
c0115681:	3c 30                	cmp    $0x30,%al
c0115683:	75 0d                	jne    c0115692 <strtol+0xa0>
        s ++, base = 8;
c0115685:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115689:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0115690:	eb 0d                	jmp    c011569f <strtol+0xad>
    }
    else if (base == 0) {
c0115692:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115696:	75 07                	jne    c011569f <strtol+0xad>
        base = 10;
c0115698:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c011569f:	8b 45 08             	mov    0x8(%ebp),%eax
c01156a2:	0f b6 00             	movzbl (%eax),%eax
c01156a5:	3c 2f                	cmp    $0x2f,%al
c01156a7:	7e 1b                	jle    c01156c4 <strtol+0xd2>
c01156a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01156ac:	0f b6 00             	movzbl (%eax),%eax
c01156af:	3c 39                	cmp    $0x39,%al
c01156b1:	7f 11                	jg     c01156c4 <strtol+0xd2>
            dig = *s - '0';
c01156b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01156b6:	0f b6 00             	movzbl (%eax),%eax
c01156b9:	0f be c0             	movsbl %al,%eax
c01156bc:	83 e8 30             	sub    $0x30,%eax
c01156bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01156c2:	eb 48                	jmp    c011570c <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01156c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01156c7:	0f b6 00             	movzbl (%eax),%eax
c01156ca:	3c 60                	cmp    $0x60,%al
c01156cc:	7e 1b                	jle    c01156e9 <strtol+0xf7>
c01156ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01156d1:	0f b6 00             	movzbl (%eax),%eax
c01156d4:	3c 7a                	cmp    $0x7a,%al
c01156d6:	7f 11                	jg     c01156e9 <strtol+0xf7>
            dig = *s - 'a' + 10;
c01156d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01156db:	0f b6 00             	movzbl (%eax),%eax
c01156de:	0f be c0             	movsbl %al,%eax
c01156e1:	83 e8 57             	sub    $0x57,%eax
c01156e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01156e7:	eb 23                	jmp    c011570c <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c01156e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01156ec:	0f b6 00             	movzbl (%eax),%eax
c01156ef:	3c 40                	cmp    $0x40,%al
c01156f1:	7e 3d                	jle    c0115730 <strtol+0x13e>
c01156f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01156f6:	0f b6 00             	movzbl (%eax),%eax
c01156f9:	3c 5a                	cmp    $0x5a,%al
c01156fb:	7f 33                	jg     c0115730 <strtol+0x13e>
            dig = *s - 'A' + 10;
c01156fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0115700:	0f b6 00             	movzbl (%eax),%eax
c0115703:	0f be c0             	movsbl %al,%eax
c0115706:	83 e8 37             	sub    $0x37,%eax
c0115709:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c011570c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011570f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0115712:	7c 02                	jl     c0115716 <strtol+0x124>
            break;
c0115714:	eb 1a                	jmp    c0115730 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c0115716:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011571a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011571d:	0f af 45 10          	imul   0x10(%ebp),%eax
c0115721:	89 c2                	mov    %eax,%edx
c0115723:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115726:	01 d0                	add    %edx,%eax
c0115728:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c011572b:	e9 6f ff ff ff       	jmp    c011569f <strtol+0xad>

    if (endptr) {
c0115730:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115734:	74 08                	je     c011573e <strtol+0x14c>
        *endptr = (char *) s;
c0115736:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115739:	8b 55 08             	mov    0x8(%ebp),%edx
c011573c:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c011573e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0115742:	74 07                	je     c011574b <strtol+0x159>
c0115744:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115747:	f7 d8                	neg    %eax
c0115749:	eb 03                	jmp    c011574e <strtol+0x15c>
c011574b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c011574e:	c9                   	leave  
c011574f:	c3                   	ret    

c0115750 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115750:	55                   	push   %ebp
c0115751:	89 e5                	mov    %esp,%ebp
c0115753:	57                   	push   %edi
c0115754:	83 ec 24             	sub    $0x24,%esp
c0115757:	8b 45 0c             	mov    0xc(%ebp),%eax
c011575a:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c011575d:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0115761:	8b 55 08             	mov    0x8(%ebp),%edx
c0115764:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0115767:	88 45 f7             	mov    %al,-0x9(%ebp)
c011576a:	8b 45 10             	mov    0x10(%ebp),%eax
c011576d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115770:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0115773:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0115777:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011577a:	89 d7                	mov    %edx,%edi
c011577c:	f3 aa                	rep stos %al,%es:(%edi)
c011577e:	89 fa                	mov    %edi,%edx
c0115780:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0115783:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0115786:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0115789:	83 c4 24             	add    $0x24,%esp
c011578c:	5f                   	pop    %edi
c011578d:	5d                   	pop    %ebp
c011578e:	c3                   	ret    

c011578f <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c011578f:	55                   	push   %ebp
c0115790:	89 e5                	mov    %esp,%ebp
c0115792:	57                   	push   %edi
c0115793:	56                   	push   %esi
c0115794:	53                   	push   %ebx
c0115795:	83 ec 30             	sub    $0x30,%esp
c0115798:	8b 45 08             	mov    0x8(%ebp),%eax
c011579b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011579e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01157a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01157a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01157a7:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c01157aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01157b0:	73 42                	jae    c01157f4 <memmove+0x65>
c01157b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01157b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01157bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01157be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01157c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01157c7:	c1 e8 02             	shr    $0x2,%eax
c01157ca:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01157cc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01157cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01157d2:	89 d7                	mov    %edx,%edi
c01157d4:	89 c6                	mov    %eax,%esi
c01157d6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01157d8:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01157db:	83 e1 03             	and    $0x3,%ecx
c01157de:	74 02                	je     c01157e2 <memmove+0x53>
c01157e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01157e2:	89 f0                	mov    %esi,%eax
c01157e4:	89 fa                	mov    %edi,%edx
c01157e6:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c01157e9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01157ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01157ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01157f2:	eb 36                	jmp    c011582a <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c01157f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01157f7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01157fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01157fd:	01 c2                	add    %eax,%edx
c01157ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115802:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0115805:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115808:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c011580b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011580e:	89 c1                	mov    %eax,%ecx
c0115810:	89 d8                	mov    %ebx,%eax
c0115812:	89 d6                	mov    %edx,%esi
c0115814:	89 c7                	mov    %eax,%edi
c0115816:	fd                   	std    
c0115817:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115819:	fc                   	cld    
c011581a:	89 f8                	mov    %edi,%eax
c011581c:	89 f2                	mov    %esi,%edx
c011581e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0115821:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0115824:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0115827:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c011582a:	83 c4 30             	add    $0x30,%esp
c011582d:	5b                   	pop    %ebx
c011582e:	5e                   	pop    %esi
c011582f:	5f                   	pop    %edi
c0115830:	5d                   	pop    %ebp
c0115831:	c3                   	ret    

c0115832 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0115832:	55                   	push   %ebp
c0115833:	89 e5                	mov    %esp,%ebp
c0115835:	57                   	push   %edi
c0115836:	56                   	push   %esi
c0115837:	83 ec 20             	sub    $0x20,%esp
c011583a:	8b 45 08             	mov    0x8(%ebp),%eax
c011583d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115840:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115843:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115846:	8b 45 10             	mov    0x10(%ebp),%eax
c0115849:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011584c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011584f:	c1 e8 02             	shr    $0x2,%eax
c0115852:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0115854:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115857:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011585a:	89 d7                	mov    %edx,%edi
c011585c:	89 c6                	mov    %eax,%esi
c011585e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115860:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0115863:	83 e1 03             	and    $0x3,%ecx
c0115866:	74 02                	je     c011586a <memcpy+0x38>
c0115868:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011586a:	89 f0                	mov    %esi,%eax
c011586c:	89 fa                	mov    %edi,%edx
c011586e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115871:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0115874:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0115877:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c011587a:	83 c4 20             	add    $0x20,%esp
c011587d:	5e                   	pop    %esi
c011587e:	5f                   	pop    %edi
c011587f:	5d                   	pop    %ebp
c0115880:	c3                   	ret    

c0115881 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0115881:	55                   	push   %ebp
c0115882:	89 e5                	mov    %esp,%ebp
c0115884:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0115887:	8b 45 08             	mov    0x8(%ebp),%eax
c011588a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c011588d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115890:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0115893:	eb 30                	jmp    c01158c5 <memcmp+0x44>
        if (*s1 != *s2) {
c0115895:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115898:	0f b6 10             	movzbl (%eax),%edx
c011589b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011589e:	0f b6 00             	movzbl (%eax),%eax
c01158a1:	38 c2                	cmp    %al,%dl
c01158a3:	74 18                	je     c01158bd <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c01158a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01158a8:	0f b6 00             	movzbl (%eax),%eax
c01158ab:	0f b6 d0             	movzbl %al,%edx
c01158ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01158b1:	0f b6 00             	movzbl (%eax),%eax
c01158b4:	0f b6 c0             	movzbl %al,%eax
c01158b7:	29 c2                	sub    %eax,%edx
c01158b9:	89 d0                	mov    %edx,%eax
c01158bb:	eb 1a                	jmp    c01158d7 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c01158bd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01158c1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c01158c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01158c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01158cb:	89 55 10             	mov    %edx,0x10(%ebp)
c01158ce:	85 c0                	test   %eax,%eax
c01158d0:	75 c3                	jne    c0115895 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01158d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01158d7:	c9                   	leave  
c01158d8:	c3                   	ret    
